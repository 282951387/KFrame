// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFCommonMessage.proto

#ifndef PROTOBUF_KFCommonMessage_2eproto__INCLUDED
#define PROTOBUF_KFCommonMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace KFMsg {

// Internal implementation detail -- do not call these.
void LIBPROTOC_EXPORT protobuf_AddDesc_KFCommonMessage_2eproto();
void protobuf_AssignDesc_KFCommonMessage_2eproto();
void protobuf_ShutdownFile_KFCommonMessage_2eproto();

class Vector3D;
class PBInt32;
class PBUIntUInt;
class PBUInt32;
class PBInt64;
class PBUInt64;
class PBDouble;
class PBString;
class PBStrings;
class PBVector3D;
class PBArray;
class PBObject;
class PBRecord;
class PBRankData;
class PBRankDatas;
class PBBattlePlayer;
class PBBattleCamp;
class PBMatchGroup;
class PBGuestData;
class PBBattleScore;
class PBPlayerIds;

enum AckEnum {
  Success = 1,
  SignError = 2,
  WeiXinError = 3,
  WeiXinCodeError = 4,
  WeiXinTokenTimeout = 5,
  WeiXinTokenError = 6,
  WeiXinUserError = 7,
  ChannelError = 8,
  ChannelNotOpen = 9,
  WorldSystemBusy = 10,
  LoginSystemBusy = 11,
  CanNotFindProxy = 12,
  PlatformBusy = 13,
  PlatformDatabaseBusy = 14,
  CanNotFindGame = 15,
  LoginTokenError = 16,
  LoadDataFailed = 17,
  HttpDataError = 18,
  LoginDatabaseError = 19,
  CreatePlayerError = 20,
  SexSetOK = 21,
  NameAlreadySet = 22,
  NameAlreadyExist = 23,
  PublicDatabaseError = 24,
  NameSetOK = 25,
  AccountIsEmpty = 26,
  CreateRoleAlready = 27,
  CreateRoleOK = 28,
  LoginAlreadyOnline = 29,
  ChangeIconOK = 30,
  NameEmpty = 31,
  ChangeMottoOK = 32,
  ModuleIdNotFind = 33,
  SetModelClothesOK = 34,
  ChangeIconBoxOK = 35,
  DataSystemBusy = 36,
  ActivationAccount = 37,
  ActivationCodeError = 38,
  LoginCanNotFindGate = 39,
  TaskIdCanNotFind = 40,
  TaskNotInValidTime = 41,
  CanNotFindPlayer = 42,
  CanNotFindTaskData = 43,
  TaskNotDone = 44,
  TaskAlreadyReceived = 45,
  TaskReceiveRewardOK = 46,
  CanNotInquireSelf = 47,
  ActivityIdCanNotFind = 48,
  CanNotFindActivityType = 49,
  ActivityAlreadyReceived = 50,
  ActivityNotDone = 51,
  ActivityReceiveRewardOK = 52,
  AchieveIdCanNotFind = 53,
  CanNotFindAchieveData = 54,
  AchieveAlreadyReceived = 55,
  AchieveNotDone = 56,
  AchieveReceiveRewardOK = 57,
  ReceiveGiftOK = 58,
  ReceiveGiftFailed = 59,
  MailNotExist = 60,
  MailAlreadyReceived = 61,
  MailNotHaveReward = 62,
  MailDeleteFailed = 63,
  MailTimeOut = 64,
  ToastSendCountOver = 65,
  ToastCanNotRepeat = 66,
  ToastGetCountOver = 67,
  ToastFailed = 68,
  ToastOK = 69,
  MatchAlreadyWait = 70,
  MatchClusterBusy = 71,
  MatchCanNotFindServer = 72,
  MatchCanNotFindMatch = 73,
  MatchGroupPlayerLimit = 74,
  MatchRequestSuccess = 75,
  MatchCancelSuccess = 76,
  FriendInviteOK = 77,
  FriendRefuseInvite = 78,
  FriendTargetLimit = 79,
  FriendSelfLimit = 80,
  FriendAlready = 81,
  FriendNotExist = 82,
  FriendDelOK = 83,
  FriendInviteLimit = 84,
  FriendInviteNotExist = 85,
  MatchNotInMatch = 86,
  FriendInviteAlready = 87,
  MatchMustPrepare = 88,
  StoreParamError = 89,
  StoreLackCost = 90,
  StoreOutOfLimits = 91,
  StoreOutOfLimitOwm = 92,
  StoreOutOfLimitDate = 93,
  WishOrderEmpty = 94,
  WishOrderNoExist = 95,
  WishOrderNoStoreId = 96,
  WishOrderHadStoreId = 97,
  WishOrderMaxSize = 98,
  WishOrderStateRepeatSet = 99,
  GiveLackCost = 100,
  ClothesNotExist = 101,
  ClothesDataError = 102,
  ClothesModleNotMatch = 103,
  ClothesDressOK = 104,
  ModelNotExist = 105,
  ModelChangeOK = 106,
  ChatByteTooLong = 107,
  ChatNotFindPlayer = 108,
  ChatIntervalError = 109,
  ChatFriendIdError = 110,
  InviteMatchGroupOK = 111,
  GroupLeaveOK = 112,
  GroupMemberIsFull = 113,
  GroupServerBusy = 114,
  GroupInviteNotExist = 115,
  GroupCanNotKickSelf = 116,
  GroupInGroup = 117,
  GroupApplyNotExist = 118,
  GroupNotInGroup = 119,
  ItemNotExist = 120,
  ItemDataError = 121,
  ItemCanNotUse = 122,
  GroupNotExist = 123,
  StoreBuyOK = 124,
  GiveBuyOK = 125,
  GroupPlayerOffline = 126,
  GroupAlreadyInGroup = 127,
  GroupRefuseInvite = 128,
  GroupRefuseYourInvite = 129,
  GroupMemberLeave = 130,
  GroupRefuseApply = 131,
  GroupCaptainOffline = 132,
  GroupNoCaption = 133,
  GroupNotCaption = 134,
  FriendServerBusy = 135,
  FriendRefuseYourInvite = 136,
  FriendAddOK = 137,
  FriendInviteReq = 138,
  GroupJoinOK = 139,
  GroupMemberJoin = 140,
  GroupIsNewCaption = 141,
  FriendLinessAdd = 142,
  FriendLinessAddLimit = 143,
  FriendLinessAddByWinGame = 144,
  FriendLinessMaxLimit = 145,
  WishPanelAddSuccessed = 146,
  GroupInviteInMatch = 147,
  GroupApplyInMatch = 148,
  GroupInviteTimeOut = 149,
  GroupInviteMatchError = 150,
  GroupApplyTimeOut = 151,
  OperateFrequently = 152,
  DataNotEnough = 153,
  CompoundNotExist = 154,
  LoginIsClose = 155,
  RankNotExist = 156,
  RankServerBusy = 157,
  FriendFriendCountOver = 10000,
  FriendApplyCountOver = 10001,
  FriendSearchEmpty = 10002,
  FriendAddFriendSuccessed = 10003,
  EquipDeleteTipContent = 10004,
  ClothesDeleteTipContent = 10005,
  NoCanSettingDefault = 10006,
  ClothesNotFit = 10007,
  KickLoginBeKick = 10008,
  KickPlatformBeKick = 10009,
  AutographCharOverLength = 10010,
  ContainIIleagalChar = 10011,
  ClothesNotMatchModel = 10012,
  MoneyIsLack = 10013,
  DiamondIsLack = 10014,
  MoneyGet = 10015,
  DiamondGet = 10016,
  WishOverCount = 10017,
  PleaseLogin = 10018,
  CreateRoleNameIllegal = 10019,
  PleaseClickRole = 10020,
  ChatCharIllegal = 10021,
  ChatUnCheckInNearbyChanel = 10022,
  ChatUnJoinWarTeam = 10023,
  ChatUnJoinTeam = 10024,
  MatchRepeatInviteToCode = 10025,
  CopySuccessed = 10026,
  GiveFaildForLimitsGoods = 10027,
  MatchHasPrepared = 10028,
  MatchHasCanceled = 10029
};
LIBPROTOC_EXPORT bool AckEnum_IsValid(int value);
const AckEnum AckEnum_MIN = Success;
const AckEnum AckEnum_MAX = MatchHasCanceled;
const int AckEnum_ARRAYSIZE = AckEnum_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* AckEnum_descriptor();
inline const ::std::string& AckEnum_Name(AckEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    AckEnum_descriptor(), value);
}
inline bool AckEnum_Parse(
    const ::std::string& name, AckEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AckEnum>(
    AckEnum_descriptor(), name, value);
}
enum ChannelEnum {
  Internal = 1,
  WeiXin = 2
};
LIBPROTOC_EXPORT bool ChannelEnum_IsValid(int value);
const ChannelEnum ChannelEnum_MIN = Internal;
const ChannelEnum ChannelEnum_MAX = WeiXin;
const int ChannelEnum_ARRAYSIZE = ChannelEnum_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ChannelEnum_descriptor();
inline const ::std::string& ChannelEnum_Name(ChannelEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChannelEnum_descriptor(), value);
}
inline bool ChannelEnum_Parse(
    const ::std::string& name, ChannelEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChannelEnum>(
    ChannelEnum_descriptor(), name, value);
}
enum SexEnum {
  Unknow = 0,
  Male = 1,
  Female = 2
};
LIBPROTOC_EXPORT bool SexEnum_IsValid(int value);
const SexEnum SexEnum_MIN = Unknow;
const SexEnum SexEnum_MAX = Female;
const int SexEnum_ARRAYSIZE = SexEnum_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* SexEnum_descriptor();
inline const ::std::string& SexEnum_Name(SexEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    SexEnum_descriptor(), value);
}
inline bool SexEnum_Parse(
    const ::std::string& name, SexEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SexEnum>(
    SexEnum_descriptor(), name, value);
}
enum KickEnum {
  LoginBeKick = 1,
  PlatformBeKick = 2
};
LIBPROTOC_EXPORT bool KickEnum_IsValid(int value);
const KickEnum KickEnum_MIN = LoginBeKick;
const KickEnum KickEnum_MAX = PlatformBeKick;
const int KickEnum_ARRAYSIZE = KickEnum_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* KickEnum_descriptor();
inline const ::std::string& KickEnum_Name(KickEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    KickEnum_descriptor(), value);
}
inline bool KickEnum_Parse(
    const ::std::string& name, KickEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KickEnum>(
    KickEnum_descriptor(), name, value);
}
enum FlagEnum {
  Init = 0,
  Done = 1,
  Received = 2,
  Remove = 3,
  ReceiveRemove = 4
};
LIBPROTOC_EXPORT bool FlagEnum_IsValid(int value);
const FlagEnum FlagEnum_MIN = Init;
const FlagEnum FlagEnum_MAX = ReceiveRemove;
const int FlagEnum_ARRAYSIZE = FlagEnum_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* FlagEnum_descriptor();
inline const ::std::string& FlagEnum_Name(FlagEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    FlagEnum_descriptor(), value);
}
inline bool FlagEnum_Parse(
    const ::std::string& name, FlagEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FlagEnum>(
    FlagEnum_descriptor(), name, value);
}
enum MailEnum {
  WholeMail = 1,
  FriendMail = 2,
  GiftMail = 3
};
LIBPROTOC_EXPORT bool MailEnum_IsValid(int value);
const MailEnum MailEnum_MIN = WholeMail;
const MailEnum MailEnum_MAX = GiftMail;
const int MailEnum_ARRAYSIZE = MailEnum_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* MailEnum_descriptor();
inline const ::std::string& MailEnum_Name(MailEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    MailEnum_descriptor(), value);
}
inline bool MailEnum_Parse(
    const ::std::string& name, MailEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MailEnum>(
    MailEnum_descriptor(), name, value);
}
enum MailConfigEnum {
  ToastMail = 1
};
LIBPROTOC_EXPORT bool MailConfigEnum_IsValid(int value);
const MailConfigEnum MailConfigEnum_MIN = ToastMail;
const MailConfigEnum MailConfigEnum_MAX = ToastMail;
const int MailConfigEnum_ARRAYSIZE = MailConfigEnum_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* MailConfigEnum_descriptor();
inline const ::std::string& MailConfigEnum_Name(MailConfigEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    MailConfigEnum_descriptor(), value);
}
inline bool MailConfigEnum_Parse(
    const ::std::string& name, MailConfigEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MailConfigEnum>(
    MailConfigEnum_descriptor(), name, value);
}
enum StatusEnum {
  OnlineStatus = 1,
  GroupStatus = 2,
  MatchStatus = 3,
  PlayingStatus = 4,
  OfflineStatus = 5
};
LIBPROTOC_EXPORT bool StatusEnum_IsValid(int value);
const StatusEnum StatusEnum_MIN = OnlineStatus;
const StatusEnum StatusEnum_MAX = OfflineStatus;
const int StatusEnum_ARRAYSIZE = StatusEnum_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* StatusEnum_descriptor();
inline const ::std::string& StatusEnum_Name(StatusEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusEnum_descriptor(), value);
}
inline bool StatusEnum_Parse(
    const ::std::string& name, StatusEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusEnum>(
    StatusEnum_descriptor(), name, value);
}
enum ChatEnum {
  Jianghu = 1
};
LIBPROTOC_EXPORT bool ChatEnum_IsValid(int value);
const ChatEnum ChatEnum_MIN = Jianghu;
const ChatEnum ChatEnum_MAX = Jianghu;
const int ChatEnum_ARRAYSIZE = ChatEnum_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ChatEnum_descriptor();
inline const ::std::string& ChatEnum_Name(ChatEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatEnum_descriptor(), value);
}
inline bool ChatEnum_Parse(
    const ::std::string& name, ChatEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatEnum>(
    ChatEnum_descriptor(), name, value);
}
enum InviteEnum {
  Consent = 1,
  Refuse = 2,
  Delete = 3,
  RefuseMinute = 4
};
LIBPROTOC_EXPORT bool InviteEnum_IsValid(int value);
const InviteEnum InviteEnum_MIN = Consent;
const InviteEnum InviteEnum_MAX = RefuseMinute;
const int InviteEnum_ARRAYSIZE = InviteEnum_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* InviteEnum_descriptor();
inline const ::std::string& InviteEnum_Name(InviteEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    InviteEnum_descriptor(), value);
}
inline bool InviteEnum_Parse(
    const ::std::string& name, InviteEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InviteEnum>(
    InviteEnum_descriptor(), name, value);
}
enum StoreWishEnum {
  Add = 1,
  Del = 2,
  Modify = 3
};
LIBPROTOC_EXPORT bool StoreWishEnum_IsValid(int value);
const StoreWishEnum StoreWishEnum_MIN = Add;
const StoreWishEnum StoreWishEnum_MAX = Modify;
const int StoreWishEnum_ARRAYSIZE = StoreWishEnum_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* StoreWishEnum_descriptor();
inline const ::std::string& StoreWishEnum_Name(StoreWishEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    StoreWishEnum_descriptor(), value);
}
inline bool StoreWishEnum_Parse(
    const ::std::string& name, StoreWishEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StoreWishEnum>(
    StoreWishEnum_descriptor(), name, value);
}
enum WishStateEnum {
  AllWatch = 0,
  NoneWatch = 1,
  FriendWatch = 2,
  TeamWatch = 3
};
LIBPROTOC_EXPORT bool WishStateEnum_IsValid(int value);
const WishStateEnum WishStateEnum_MIN = AllWatch;
const WishStateEnum WishStateEnum_MAX = TeamWatch;
const int WishStateEnum_ARRAYSIZE = WishStateEnum_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* WishStateEnum_descriptor();
inline const ::std::string& WishStateEnum_Name(WishStateEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    WishStateEnum_descriptor(), value);
}
inline bool WishStateEnum_Parse(
    const ::std::string& name, WishStateEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WishStateEnum>(
    WishStateEnum_descriptor(), name, value);
}
enum RankListEnum {
  SingleRank = 1,
  DoubleRank = 2,
  FourRank = 3,
  TotalRank = 4
};
LIBPROTOC_EXPORT bool RankListEnum_IsValid(int value);
const RankListEnum RankListEnum_MIN = SingleRank;
const RankListEnum RankListEnum_MAX = TotalRank;
const int RankListEnum_ARRAYSIZE = RankListEnum_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* RankListEnum_descriptor();
inline const ::std::string& RankListEnum_Name(RankListEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    RankListEnum_descriptor(), value);
}
inline bool RankListEnum_Parse(
    const ::std::string& name, RankListEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RankListEnum>(
    RankListEnum_descriptor(), name, value);
}
// ===================================================================

class LIBPROTOC_EXPORT Vector3D : public ::google::protobuf::Message {
 public:
  Vector3D();
  virtual ~Vector3D();

  Vector3D(const Vector3D& from);

  inline Vector3D& operator=(const Vector3D& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3D& default_instance();

  void Swap(Vector3D* other);

  // implements Message ----------------------------------------------

  Vector3D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3D& from);
  void MergeFrom(const Vector3D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // optional double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // optional double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);

  // @@protoc_insertion_point(class_scope:KFMsg.Vector3D)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double x_;
  double y_;
  double z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFCommonMessage_2eproto();
  friend void protobuf_AssignDesc_KFCommonMessage_2eproto();
  friend void protobuf_ShutdownFile_KFCommonMessage_2eproto();

  void InitAsDefaultInstance();
  static Vector3D* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBInt32 : public ::google::protobuf::Message {
 public:
  PBInt32();
  virtual ~PBInt32();

  PBInt32(const PBInt32& from);

  inline PBInt32& operator=(const PBInt32& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBInt32& default_instance();

  void Swap(PBInt32* other);

  // implements Message ----------------------------------------------

  PBInt32* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBInt32& from);
  void MergeFrom(const PBInt32& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional sint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.PBInt32)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFCommonMessage_2eproto();
  friend void protobuf_AssignDesc_KFCommonMessage_2eproto();
  friend void protobuf_ShutdownFile_KFCommonMessage_2eproto();

  void InitAsDefaultInstance();
  static PBInt32* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBUIntUInt : public ::google::protobuf::Message {
 public:
  PBUIntUInt();
  virtual ~PBUIntUInt();

  PBUIntUInt(const PBUIntUInt& from);

  inline PBUIntUInt& operator=(const PBUIntUInt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBUIntUInt& default_instance();

  void Swap(PBUIntUInt* other);

  // implements Message ----------------------------------------------

  PBUIntUInt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBUIntUInt& from);
  void MergeFrom(const PBUIntUInt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::uint64 key() const;
  inline void set_key(::google::protobuf::uint64 value);

  // optional uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.PBUIntUInt)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 key_;
  ::google::protobuf::uint32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFCommonMessage_2eproto();
  friend void protobuf_AssignDesc_KFCommonMessage_2eproto();
  friend void protobuf_ShutdownFile_KFCommonMessage_2eproto();

  void InitAsDefaultInstance();
  static PBUIntUInt* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBUInt32 : public ::google::protobuf::Message {
 public:
  PBUInt32();
  virtual ~PBUInt32();

  PBUInt32(const PBUInt32& from);

  inline PBUInt32& operator=(const PBUInt32& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBUInt32& default_instance();

  void Swap(PBUInt32* other);

  // implements Message ----------------------------------------------

  PBUInt32* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBUInt32& from);
  void MergeFrom(const PBUInt32& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.PBUInt32)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFCommonMessage_2eproto();
  friend void protobuf_AssignDesc_KFCommonMessage_2eproto();
  friend void protobuf_ShutdownFile_KFCommonMessage_2eproto();

  void InitAsDefaultInstance();
  static PBUInt32* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBInt64 : public ::google::protobuf::Message {
 public:
  PBInt64();
  virtual ~PBInt64();

  PBInt64(const PBInt64& from);

  inline PBInt64& operator=(const PBInt64& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBInt64& default_instance();

  void Swap(PBInt64* other);

  // implements Message ----------------------------------------------

  PBInt64* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBInt64& from);
  void MergeFrom(const PBInt64& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional sint64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.PBInt64)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int64 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFCommonMessage_2eproto();
  friend void protobuf_AssignDesc_KFCommonMessage_2eproto();
  friend void protobuf_ShutdownFile_KFCommonMessage_2eproto();

  void InitAsDefaultInstance();
  static PBInt64* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBUInt64 : public ::google::protobuf::Message {
 public:
  PBUInt64();
  virtual ~PBUInt64();

  PBUInt64(const PBUInt64& from);

  inline PBUInt64& operator=(const PBUInt64& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBUInt64& default_instance();

  void Swap(PBUInt64* other);

  // implements Message ----------------------------------------------

  PBUInt64* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBUInt64& from);
  void MergeFrom(const PBUInt64& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint64 value() const;
  inline void set_value(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.PBUInt64)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint64 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFCommonMessage_2eproto();
  friend void protobuf_AssignDesc_KFCommonMessage_2eproto();
  friend void protobuf_ShutdownFile_KFCommonMessage_2eproto();

  void InitAsDefaultInstance();
  static PBUInt64* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBDouble : public ::google::protobuf::Message {
 public:
  PBDouble();
  virtual ~PBDouble();

  PBDouble(const PBDouble& from);

  inline PBDouble& operator=(const PBDouble& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBDouble& default_instance();

  void Swap(PBDouble* other);

  // implements Message ----------------------------------------------

  PBDouble* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBDouble& from);
  void MergeFrom(const PBDouble& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional double value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline double value() const;
  inline void set_value(double value);

  // @@protoc_insertion_point(class_scope:KFMsg.PBDouble)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  double value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFCommonMessage_2eproto();
  friend void protobuf_AssignDesc_KFCommonMessage_2eproto();
  friend void protobuf_ShutdownFile_KFCommonMessage_2eproto();

  void InitAsDefaultInstance();
  static PBDouble* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBString : public ::google::protobuf::Message {
 public:
  PBString();
  virtual ~PBString();

  PBString(const PBString& from);

  inline PBString& operator=(const PBString& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBString& default_instance();

  void Swap(PBString* other);

  // implements Message ----------------------------------------------

  PBString* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBString& from);
  void MergeFrom(const PBString& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:KFMsg.PBString)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFCommonMessage_2eproto();
  friend void protobuf_AssignDesc_KFCommonMessage_2eproto();
  friend void protobuf_ShutdownFile_KFCommonMessage_2eproto();

  void InitAsDefaultInstance();
  static PBString* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBStrings : public ::google::protobuf::Message {
 public:
  PBStrings();
  virtual ~PBStrings();

  PBStrings(const PBStrings& from);

  inline PBStrings& operator=(const PBStrings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBStrings& default_instance();

  void Swap(PBStrings* other);

  // implements Message ----------------------------------------------

  PBStrings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBStrings& from);
  void MergeFrom(const PBStrings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .KFMsg.PBString pbstring = 1;
  inline int pbstring_size() const;
  inline void clear_pbstring();
  static const int kPbstringFieldNumber = 1;
  inline const ::KFMsg::PBString& pbstring(int index) const;
  inline ::KFMsg::PBString* mutable_pbstring(int index);
  inline ::KFMsg::PBString* add_pbstring();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >&
      pbstring() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >*
      mutable_pbstring();

  // @@protoc_insertion_point(class_scope:KFMsg.PBStrings)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString > pbstring_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFCommonMessage_2eproto();
  friend void protobuf_AssignDesc_KFCommonMessage_2eproto();
  friend void protobuf_ShutdownFile_KFCommonMessage_2eproto();

  void InitAsDefaultInstance();
  static PBStrings* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBVector3D : public ::google::protobuf::Message {
 public:
  PBVector3D();
  virtual ~PBVector3D();

  PBVector3D(const PBVector3D& from);

  inline PBVector3D& operator=(const PBVector3D& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBVector3D& default_instance();

  void Swap(PBVector3D* other);

  // implements Message ----------------------------------------------

  PBVector3D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBVector3D& from);
  void MergeFrom(const PBVector3D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .KFMsg.Vector3D value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::KFMsg::Vector3D& value() const;
  inline ::KFMsg::Vector3D* mutable_value();
  inline ::KFMsg::Vector3D* release_value();
  inline void set_allocated_value(::KFMsg::Vector3D* value);

  // @@protoc_insertion_point(class_scope:KFMsg.PBVector3D)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::KFMsg::Vector3D* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFCommonMessage_2eproto();
  friend void protobuf_AssignDesc_KFCommonMessage_2eproto();
  friend void protobuf_ShutdownFile_KFCommonMessage_2eproto();

  void InitAsDefaultInstance();
  static PBVector3D* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBArray : public ::google::protobuf::Message {
 public:
  PBArray();
  virtual ~PBArray();

  PBArray(const PBArray& from);

  inline PBArray& operator=(const PBArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBArray& default_instance();

  void Swap(PBArray* other);

  // implements Message ----------------------------------------------

  PBArray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBArray& from);
  void MergeFrom(const PBArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated sint32 pbint32 = 2;
  inline int pbint32_size() const;
  inline void clear_pbint32();
  static const int kPbint32FieldNumber = 2;
  inline ::google::protobuf::int32 pbint32(int index) const;
  inline void set_pbint32(int index, ::google::protobuf::int32 value);
  inline void add_pbint32(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pbint32() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pbint32();

  // repeated uint32 pbuint32 = 3;
  inline int pbuint32_size() const;
  inline void clear_pbuint32();
  static const int kPbuint32FieldNumber = 3;
  inline ::google::protobuf::uint32 pbuint32(int index) const;
  inline void set_pbuint32(int index, ::google::protobuf::uint32 value);
  inline void add_pbuint32(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pbuint32() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pbuint32();

  // repeated sint64 pbint64 = 4;
  inline int pbint64_size() const;
  inline void clear_pbint64();
  static const int kPbint64FieldNumber = 4;
  inline ::google::protobuf::int64 pbint64(int index) const;
  inline void set_pbint64(int index, ::google::protobuf::int64 value);
  inline void add_pbint64(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      pbint64() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_pbint64();

  // repeated uint64 pbuint64 = 5;
  inline int pbuint64_size() const;
  inline void clear_pbuint64();
  static const int kPbuint64FieldNumber = 5;
  inline ::google::protobuf::uint64 pbuint64(int index) const;
  inline void set_pbuint64(int index, ::google::protobuf::uint64 value);
  inline void add_pbuint64(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      pbuint64() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_pbuint64();

  // repeated double pbdouble = 6;
  inline int pbdouble_size() const;
  inline void clear_pbdouble();
  static const int kPbdoubleFieldNumber = 6;
  inline double pbdouble(int index) const;
  inline void set_pbdouble(int index, double value);
  inline void add_pbdouble(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      pbdouble() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_pbdouble();

  // repeated string pbstring = 7;
  inline int pbstring_size() const;
  inline void clear_pbstring();
  static const int kPbstringFieldNumber = 7;
  inline const ::std::string& pbstring(int index) const;
  inline ::std::string* mutable_pbstring(int index);
  inline void set_pbstring(int index, const ::std::string& value);
  inline void set_pbstring(int index, const char* value);
  inline void set_pbstring(int index, const char* value, size_t size);
  inline ::std::string* add_pbstring();
  inline void add_pbstring(const ::std::string& value);
  inline void add_pbstring(const char* value);
  inline void add_pbstring(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& pbstring() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pbstring();

  // repeated .KFMsg.Vector3D pbvector3d = 8;
  inline int pbvector3d_size() const;
  inline void clear_pbvector3d();
  static const int kPbvector3DFieldNumber = 8;
  inline const ::KFMsg::Vector3D& pbvector3d(int index) const;
  inline ::KFMsg::Vector3D* mutable_pbvector3d(int index);
  inline ::KFMsg::Vector3D* add_pbvector3d();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::Vector3D >&
      pbvector3d() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::Vector3D >*
      mutable_pbvector3d();

  // @@protoc_insertion_point(class_scope:KFMsg.PBArray)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pbint32_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pbuint32_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > pbint64_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > pbuint64_;
  ::google::protobuf::RepeatedField< double > pbdouble_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pbstring_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::Vector3D > pbvector3d_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFCommonMessage_2eproto();
  friend void protobuf_AssignDesc_KFCommonMessage_2eproto();
  friend void protobuf_ShutdownFile_KFCommonMessage_2eproto();

  void InitAsDefaultInstance();
  static PBArray* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBObject : public ::google::protobuf::Message {
 public:
  PBObject();
  virtual ~PBObject();

  PBObject(const PBObject& from);

  inline PBObject& operator=(const PBObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBObject& default_instance();

  void Swap(PBObject* other);

  // implements Message ----------------------------------------------

  PBObject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBObject& from);
  void MergeFrom(const PBObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline ::google::protobuf::uint64 key() const;
  inline void set_key(::google::protobuf::uint64 value);

  // repeated .KFMsg.PBInt32 pbint32 = 3;
  inline int pbint32_size() const;
  inline void clear_pbint32();
  static const int kPbint32FieldNumber = 3;
  inline const ::KFMsg::PBInt32& pbint32(int index) const;
  inline ::KFMsg::PBInt32* mutable_pbint32(int index);
  inline ::KFMsg::PBInt32* add_pbint32();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBInt32 >&
      pbint32() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBInt32 >*
      mutable_pbint32();

  // repeated .KFMsg.PBUInt32 pbuint32 = 4;
  inline int pbuint32_size() const;
  inline void clear_pbuint32();
  static const int kPbuint32FieldNumber = 4;
  inline const ::KFMsg::PBUInt32& pbuint32(int index) const;
  inline ::KFMsg::PBUInt32* mutable_pbuint32(int index);
  inline ::KFMsg::PBUInt32* add_pbuint32();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt32 >&
      pbuint32() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt32 >*
      mutable_pbuint32();

  // repeated .KFMsg.PBInt64 pbint64 = 5;
  inline int pbint64_size() const;
  inline void clear_pbint64();
  static const int kPbint64FieldNumber = 5;
  inline const ::KFMsg::PBInt64& pbint64(int index) const;
  inline ::KFMsg::PBInt64* mutable_pbint64(int index);
  inline ::KFMsg::PBInt64* add_pbint64();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBInt64 >&
      pbint64() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBInt64 >*
      mutable_pbint64();

  // repeated .KFMsg.PBUInt64 pbuint64 = 6;
  inline int pbuint64_size() const;
  inline void clear_pbuint64();
  static const int kPbuint64FieldNumber = 6;
  inline const ::KFMsg::PBUInt64& pbuint64(int index) const;
  inline ::KFMsg::PBUInt64* mutable_pbuint64(int index);
  inline ::KFMsg::PBUInt64* add_pbuint64();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt64 >&
      pbuint64() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt64 >*
      mutable_pbuint64();

  // repeated .KFMsg.PBDouble pbdouble = 7;
  inline int pbdouble_size() const;
  inline void clear_pbdouble();
  static const int kPbdoubleFieldNumber = 7;
  inline const ::KFMsg::PBDouble& pbdouble(int index) const;
  inline ::KFMsg::PBDouble* mutable_pbdouble(int index);
  inline ::KFMsg::PBDouble* add_pbdouble();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBDouble >&
      pbdouble() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBDouble >*
      mutable_pbdouble();

  // repeated .KFMsg.PBString pbstring = 8;
  inline int pbstring_size() const;
  inline void clear_pbstring();
  static const int kPbstringFieldNumber = 8;
  inline const ::KFMsg::PBString& pbstring(int index) const;
  inline ::KFMsg::PBString* mutable_pbstring(int index);
  inline ::KFMsg::PBString* add_pbstring();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >&
      pbstring() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >*
      mutable_pbstring();

  // repeated .KFMsg.PBVector3D pbvector3d = 9;
  inline int pbvector3d_size() const;
  inline void clear_pbvector3d();
  static const int kPbvector3DFieldNumber = 9;
  inline const ::KFMsg::PBVector3D& pbvector3d(int index) const;
  inline ::KFMsg::PBVector3D* mutable_pbvector3d(int index);
  inline ::KFMsg::PBVector3D* add_pbvector3d();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBVector3D >&
      pbvector3d() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBVector3D >*
      mutable_pbvector3d();

  // repeated .KFMsg.PBArray pbarray = 10;
  inline int pbarray_size() const;
  inline void clear_pbarray();
  static const int kPbarrayFieldNumber = 10;
  inline const ::KFMsg::PBArray& pbarray(int index) const;
  inline ::KFMsg::PBArray* mutable_pbarray(int index);
  inline ::KFMsg::PBArray* add_pbarray();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBArray >&
      pbarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBArray >*
      mutable_pbarray();

  // repeated .KFMsg.PBObject pbobject = 11;
  inline int pbobject_size() const;
  inline void clear_pbobject();
  static const int kPbobjectFieldNumber = 11;
  inline const ::KFMsg::PBObject& pbobject(int index) const;
  inline ::KFMsg::PBObject* mutable_pbobject(int index);
  inline ::KFMsg::PBObject* add_pbobject();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBObject >&
      pbobject() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBObject >*
      mutable_pbobject();

  // repeated .KFMsg.PBRecord pbrecord = 12;
  inline int pbrecord_size() const;
  inline void clear_pbrecord();
  static const int kPbrecordFieldNumber = 12;
  inline const ::KFMsg::PBRecord& pbrecord(int index) const;
  inline ::KFMsg::PBRecord* mutable_pbrecord(int index);
  inline ::KFMsg::PBRecord* add_pbrecord();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRecord >&
      pbrecord() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRecord >*
      mutable_pbrecord();

  // @@protoc_insertion_point(class_scope:KFMsg.PBObject)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint64 key_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBInt32 > pbint32_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt32 > pbuint32_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBInt64 > pbint64_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt64 > pbuint64_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBDouble > pbdouble_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString > pbstring_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBVector3D > pbvector3d_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBArray > pbarray_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBObject > pbobject_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRecord > pbrecord_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFCommonMessage_2eproto();
  friend void protobuf_AssignDesc_KFCommonMessage_2eproto();
  friend void protobuf_ShutdownFile_KFCommonMessage_2eproto();

  void InitAsDefaultInstance();
  static PBObject* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBRecord : public ::google::protobuf::Message {
 public:
  PBRecord();
  virtual ~PBRecord();

  PBRecord(const PBRecord& from);

  inline PBRecord& operator=(const PBRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRecord& default_instance();

  void Swap(PBRecord* other);

  // implements Message ----------------------------------------------

  PBRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRecord& from);
  void MergeFrom(const PBRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .KFMsg.PBObject pbobject = 2;
  inline int pbobject_size() const;
  inline void clear_pbobject();
  static const int kPbobjectFieldNumber = 2;
  inline const ::KFMsg::PBObject& pbobject(int index) const;
  inline ::KFMsg::PBObject* mutable_pbobject(int index);
  inline ::KFMsg::PBObject* add_pbobject();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBObject >&
      pbobject() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBObject >*
      mutable_pbobject();

  // @@protoc_insertion_point(class_scope:KFMsg.PBRecord)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBObject > pbobject_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFCommonMessage_2eproto();
  friend void protobuf_AssignDesc_KFCommonMessage_2eproto();
  friend void protobuf_ShutdownFile_KFCommonMessage_2eproto();

  void InitAsDefaultInstance();
  static PBRecord* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBRankData : public ::google::protobuf::Message {
 public:
  PBRankData();
  virtual ~PBRankData();

  PBRankData(const PBRankData& from);

  inline PBRankData& operator=(const PBRankData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRankData& default_instance();

  void Swap(PBRankData* other);

  // implements Message ----------------------------------------------

  PBRankData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRankData& from);
  void MergeFrom(const PBRankData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rankindex = 1;
  inline bool has_rankindex() const;
  inline void clear_rankindex();
  static const int kRankindexFieldNumber = 1;
  inline ::google::protobuf::uint32 rankindex() const;
  inline void set_rankindex(::google::protobuf::uint32 value);

  // optional uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // optional uint64 rankscore = 3;
  inline bool has_rankscore() const;
  inline void clear_rankscore();
  static const int kRankscoreFieldNumber = 3;
  inline ::google::protobuf::uint64 rankscore() const;
  inline void set_rankscore(::google::protobuf::uint64 value);

  // optional .KFMsg.PBStrings pbdata = 4;
  inline bool has_pbdata() const;
  inline void clear_pbdata();
  static const int kPbdataFieldNumber = 4;
  inline const ::KFMsg::PBStrings& pbdata() const;
  inline ::KFMsg::PBStrings* mutable_pbdata();
  inline ::KFMsg::PBStrings* release_pbdata();
  inline void set_allocated_pbdata(::KFMsg::PBStrings* pbdata);

  // @@protoc_insertion_point(class_scope:KFMsg.PBRankData)
 private:
  inline void set_has_rankindex();
  inline void clear_has_rankindex();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_rankscore();
  inline void clear_has_rankscore();
  inline void set_has_pbdata();
  inline void clear_has_pbdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rankindex_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint64 rankscore_;
  ::KFMsg::PBStrings* pbdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFCommonMessage_2eproto();
  friend void protobuf_AssignDesc_KFCommonMessage_2eproto();
  friend void protobuf_ShutdownFile_KFCommonMessage_2eproto();

  void InitAsDefaultInstance();
  static PBRankData* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBRankDatas : public ::google::protobuf::Message {
 public:
  PBRankDatas();
  virtual ~PBRankDatas();

  PBRankDatas(const PBRankDatas& from);

  inline PBRankDatas& operator=(const PBRankDatas& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRankDatas& default_instance();

  void Swap(PBRankDatas* other);

  // implements Message ----------------------------------------------

  PBRankDatas* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRankDatas& from);
  void MergeFrom(const PBRankDatas& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .KFMsg.PBRankData rankdata = 3;
  inline int rankdata_size() const;
  inline void clear_rankdata();
  static const int kRankdataFieldNumber = 3;
  inline const ::KFMsg::PBRankData& rankdata(int index) const;
  inline ::KFMsg::PBRankData* mutable_rankdata(int index);
  inline ::KFMsg::PBRankData* add_rankdata();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRankData >&
      rankdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRankData >*
      mutable_rankdata();

  // @@protoc_insertion_point(class_scope:KFMsg.PBRankDatas)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRankData > rankdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFCommonMessage_2eproto();
  friend void protobuf_AssignDesc_KFCommonMessage_2eproto();
  friend void protobuf_ShutdownFile_KFCommonMessage_2eproto();

  void InitAsDefaultInstance();
  static PBRankDatas* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBBattlePlayer : public ::google::protobuf::Message {
 public:
  PBBattlePlayer();
  virtual ~PBBattlePlayer();

  PBBattlePlayer(const PBBattlePlayer& from);

  inline PBBattlePlayer& operator=(const PBBattlePlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBBattlePlayer& default_instance();

  void Swap(PBBattlePlayer* other);

  // implements Message ----------------------------------------------

  PBBattlePlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBBattlePlayer& from);
  void MergeFrom(const PBBattlePlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 zoneid = 1;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 1;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional uint32 serverid = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 2;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // optional uint32 playerid = 3;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 3;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional string icon = 6;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 6;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // optional string iconbox = 7;
  inline bool has_iconbox() const;
  inline void clear_iconbox();
  static const int kIconboxFieldNumber = 7;
  inline const ::std::string& iconbox() const;
  inline void set_iconbox(const ::std::string& value);
  inline void set_iconbox(const char* value);
  inline void set_iconbox(const char* value, size_t size);
  inline ::std::string* mutable_iconbox();
  inline ::std::string* release_iconbox();
  inline void set_allocated_iconbox(::std::string* iconbox);

  // optional uint32 grading = 8;
  inline bool has_grading() const;
  inline void clear_grading();
  static const int kGradingFieldNumber = 8;
  inline ::google::protobuf::uint32 grading() const;
  inline void set_grading(::google::protobuf::uint32 value);

  // optional uint32 modelid = 9;
  inline bool has_modelid() const;
  inline void clear_modelid();
  static const int kModelidFieldNumber = 9;
  inline ::google::protobuf::uint32 modelid() const;
  inline void set_modelid(::google::protobuf::uint32 value);

  // optional uint32 clothesid = 10;
  inline bool has_clothesid() const;
  inline void clear_clothesid();
  static const int kClothesidFieldNumber = 10;
  inline ::google::protobuf::uint32 clothesid() const;
  inline void set_clothesid(::google::protobuf::uint32 value);

  // optional uint64 groupid = 11;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 11;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // optional uint32 campid = 12;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampidFieldNumber = 12;
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.PBBattlePlayer)
 private:
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_iconbox();
  inline void clear_has_iconbox();
  inline void set_has_grading();
  inline void clear_has_grading();
  inline void set_has_modelid();
  inline void clear_has_modelid();
  inline void set_has_clothesid();
  inline void clear_has_clothesid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_campid();
  inline void clear_has_campid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 serverid_;
  ::std::string* name_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 sex_;
  ::std::string* icon_;
  ::std::string* iconbox_;
  ::google::protobuf::uint32 grading_;
  ::google::protobuf::uint32 modelid_;
  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint32 clothesid_;
  ::google::protobuf::uint32 campid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFCommonMessage_2eproto();
  friend void protobuf_AssignDesc_KFCommonMessage_2eproto();
  friend void protobuf_ShutdownFile_KFCommonMessage_2eproto();

  void InitAsDefaultInstance();
  static PBBattlePlayer* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBBattleCamp : public ::google::protobuf::Message {
 public:
  PBBattleCamp();
  virtual ~PBBattleCamp();

  PBBattleCamp(const PBBattleCamp& from);

  inline PBBattleCamp& operator=(const PBBattleCamp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBBattleCamp& default_instance();

  void Swap(PBBattleCamp* other);

  // implements Message ----------------------------------------------

  PBBattleCamp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBBattleCamp& from);
  void MergeFrom(const PBBattleCamp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 campid = 1;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampidFieldNumber = 1;
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // repeated .KFMsg.PBBattlePlayer pbplayer = 2;
  inline int pbplayer_size() const;
  inline void clear_pbplayer();
  static const int kPbplayerFieldNumber = 2;
  inline const ::KFMsg::PBBattlePlayer& pbplayer(int index) const;
  inline ::KFMsg::PBBattlePlayer* mutable_pbplayer(int index);
  inline ::KFMsg::PBBattlePlayer* add_pbplayer();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBBattlePlayer >&
      pbplayer() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBBattlePlayer >*
      mutable_pbplayer();

  // @@protoc_insertion_point(class_scope:KFMsg.PBBattleCamp)
 private:
  inline void set_has_campid();
  inline void clear_has_campid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBBattlePlayer > pbplayer_;
  ::google::protobuf::uint32 campid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFCommonMessage_2eproto();
  friend void protobuf_AssignDesc_KFCommonMessage_2eproto();
  friend void protobuf_ShutdownFile_KFCommonMessage_2eproto();

  void InitAsDefaultInstance();
  static PBBattleCamp* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBMatchGroup : public ::google::protobuf::Message {
 public:
  PBMatchGroup();
  virtual ~PBMatchGroup();

  PBMatchGroup(const PBMatchGroup& from);

  inline PBMatchGroup& operator=(const PBMatchGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMatchGroup& default_instance();

  void Swap(PBMatchGroup* other);

  // implements Message ----------------------------------------------

  PBMatchGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMatchGroup& from);
  void MergeFrom(const PBMatchGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // repeated .KFMsg.PBBattlePlayer pbplayer = 2;
  inline int pbplayer_size() const;
  inline void clear_pbplayer();
  static const int kPbplayerFieldNumber = 2;
  inline const ::KFMsg::PBBattlePlayer& pbplayer(int index) const;
  inline ::KFMsg::PBBattlePlayer* mutable_pbplayer(int index);
  inline ::KFMsg::PBBattlePlayer* add_pbplayer();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBBattlePlayer >&
      pbplayer() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBBattlePlayer >*
      mutable_pbplayer();

  // @@protoc_insertion_point(class_scope:KFMsg.PBMatchGroup)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBBattlePlayer > pbplayer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFCommonMessage_2eproto();
  friend void protobuf_AssignDesc_KFCommonMessage_2eproto();
  friend void protobuf_ShutdownFile_KFCommonMessage_2eproto();

  void InitAsDefaultInstance();
  static PBMatchGroup* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBGuestData : public ::google::protobuf::Message {
 public:
  PBGuestData();
  virtual ~PBGuestData();

  PBGuestData(const PBGuestData& from);

  inline PBGuestData& operator=(const PBGuestData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBGuestData& default_instance();

  void Swap(PBGuestData* other);

  // implements Message ----------------------------------------------

  PBGuestData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBGuestData& from);
  void MergeFrom(const PBGuestData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 guestid = 1;
  inline bool has_guestid() const;
  inline void clear_guestid();
  static const int kGuestidFieldNumber = 1;
  inline ::google::protobuf::uint32 guestid() const;
  inline void set_guestid(::google::protobuf::uint32 value);

  // required string guesticon = 2;
  inline bool has_guesticon() const;
  inline void clear_guesticon();
  static const int kGuesticonFieldNumber = 2;
  inline const ::std::string& guesticon() const;
  inline void set_guesticon(const ::std::string& value);
  inline void set_guesticon(const char* value);
  inline void set_guesticon(const char* value, size_t size);
  inline ::std::string* mutable_guesticon();
  inline ::std::string* release_guesticon();
  inline void set_allocated_guesticon(::std::string* guesticon);

  // required string guesticonbox = 3;
  inline bool has_guesticonbox() const;
  inline void clear_guesticonbox();
  static const int kGuesticonboxFieldNumber = 3;
  inline const ::std::string& guesticonbox() const;
  inline void set_guesticonbox(const ::std::string& value);
  inline void set_guesticonbox(const char* value);
  inline void set_guesticonbox(const char* value, size_t size);
  inline ::std::string* mutable_guesticonbox();
  inline ::std::string* release_guesticonbox();
  inline void set_allocated_guesticonbox(::std::string* guesticonbox);

  // @@protoc_insertion_point(class_scope:KFMsg.PBGuestData)
 private:
  inline void set_has_guestid();
  inline void clear_has_guestid();
  inline void set_has_guesticon();
  inline void clear_has_guesticon();
  inline void set_has_guesticonbox();
  inline void clear_has_guesticonbox();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* guesticon_;
  ::std::string* guesticonbox_;
  ::google::protobuf::uint32 guestid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFCommonMessage_2eproto();
  friend void protobuf_AssignDesc_KFCommonMessage_2eproto();
  friend void protobuf_ShutdownFile_KFCommonMessage_2eproto();

  void InitAsDefaultInstance();
  static PBGuestData* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBBattleScore : public ::google::protobuf::Message {
 public:
  PBBattleScore();
  virtual ~PBBattleScore();

  PBBattleScore(const PBBattleScore& from);

  inline PBBattleScore& operator=(const PBBattleScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBBattleScore& default_instance();

  void Swap(PBBattleScore* other);

  // implements Message ----------------------------------------------

  PBBattleScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBBattleScore& from);
  void MergeFrom(const PBBattleScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 ranking = 2;
  inline bool has_ranking() const;
  inline void clear_ranking();
  static const int kRankingFieldNumber = 2;
  inline ::google::protobuf::uint32 ranking() const;
  inline void set_ranking(::google::protobuf::uint32 value);

  // repeated .KFMsg.PBUInt32 pbdata = 3;
  inline int pbdata_size() const;
  inline void clear_pbdata();
  static const int kPbdataFieldNumber = 3;
  inline const ::KFMsg::PBUInt32& pbdata(int index) const;
  inline ::KFMsg::PBUInt32* mutable_pbdata(int index);
  inline ::KFMsg::PBUInt32* add_pbdata();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt32 >&
      pbdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt32 >*
      mutable_pbdata();

  // optional uint32 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 matchid = 5;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 5;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // optional string reward = 6;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 6;
  inline const ::std::string& reward() const;
  inline void set_reward(const ::std::string& value);
  inline void set_reward(const char* value);
  inline void set_reward(const char* value, size_t size);
  inline ::std::string* mutable_reward();
  inline ::std::string* release_reward();
  inline void set_allocated_reward(::std::string* reward);

  // @@protoc_insertion_point(class_scope:KFMsg.PBBattleScore)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_ranking();
  inline void clear_has_ranking();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 ranking_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt32 > pbdata_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 matchid_;
  ::std::string* reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFCommonMessage_2eproto();
  friend void protobuf_AssignDesc_KFCommonMessage_2eproto();
  friend void protobuf_ShutdownFile_KFCommonMessage_2eproto();

  void InitAsDefaultInstance();
  static PBBattleScore* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBPlayerIds : public ::google::protobuf::Message {
 public:
  PBPlayerIds();
  virtual ~PBPlayerIds();

  PBPlayerIds(const PBPlayerIds& from);

  inline PBPlayerIds& operator=(const PBPlayerIds& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBPlayerIds& default_instance();

  void Swap(PBPlayerIds* other);

  // implements Message ----------------------------------------------

  PBPlayerIds* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBPlayerIds& from);
  void MergeFrom(const PBPlayerIds& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 playerid = 1;
  inline int playerid_size() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid(int index) const;
  inline void set_playerid(int index, ::google::protobuf::uint32 value);
  inline void add_playerid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      playerid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_playerid();

  // @@protoc_insertion_point(class_scope:KFMsg.PBPlayerIds)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFCommonMessage_2eproto();
  friend void protobuf_AssignDesc_KFCommonMessage_2eproto();
  friend void protobuf_ShutdownFile_KFCommonMessage_2eproto();

  void InitAsDefaultInstance();
  static PBPlayerIds* default_instance_;
};
// ===================================================================


// ===================================================================

// Vector3D

// optional double x = 1;
inline bool Vector3D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector3D::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Vector3D::x() const {
  return x_;
}
inline void Vector3D::set_x(double value) {
  set_has_x();
  x_ = value;
}

// optional double y = 2;
inline bool Vector3D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector3D::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Vector3D::y() const {
  return y_;
}
inline void Vector3D::set_y(double value) {
  set_has_y();
  y_ = value;
}

// optional double z = 3;
inline bool Vector3D::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector3D::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector3D::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector3D::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Vector3D::z() const {
  return z_;
}
inline void Vector3D::set_z(double value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// PBInt32

// optional string name = 1;
inline bool PBInt32::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBInt32::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBInt32::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBInt32::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PBInt32::name() const {
  return *name_;
}
inline void PBInt32::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBInt32::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBInt32::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBInt32::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PBInt32::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBInt32::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint32 value = 2;
inline bool PBInt32::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBInt32::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBInt32::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBInt32::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 PBInt32::value() const {
  return value_;
}
inline void PBInt32::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// PBUIntUInt

// optional uint64 key = 1;
inline bool PBUIntUInt::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBUIntUInt::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBUIntUInt::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBUIntUInt::clear_key() {
  key_ = GOOGLE_ULONGLONG(0);
  clear_has_key();
}
inline ::google::protobuf::uint64 PBUIntUInt::key() const {
  return key_;
}
inline void PBUIntUInt::set_key(::google::protobuf::uint64 value) {
  set_has_key();
  key_ = value;
}

// optional uint32 value = 2;
inline bool PBUIntUInt::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBUIntUInt::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBUIntUInt::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBUIntUInt::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 PBUIntUInt::value() const {
  return value_;
}
inline void PBUIntUInt::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// PBUInt32

// optional string name = 1;
inline bool PBUInt32::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBUInt32::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBUInt32::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBUInt32::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PBUInt32::name() const {
  return *name_;
}
inline void PBUInt32::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBUInt32::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBUInt32::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBUInt32::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PBUInt32::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBUInt32::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 value = 2;
inline bool PBUInt32::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBUInt32::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBUInt32::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBUInt32::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 PBUInt32::value() const {
  return value_;
}
inline void PBUInt32::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// PBInt64

// optional string name = 1;
inline bool PBInt64::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBInt64::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBInt64::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBInt64::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PBInt64::name() const {
  return *name_;
}
inline void PBInt64::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBInt64::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBInt64::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBInt64::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PBInt64::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBInt64::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint64 value = 2;
inline bool PBInt64::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBInt64::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBInt64::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBInt64::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 PBInt64::value() const {
  return value_;
}
inline void PBInt64::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// PBUInt64

// optional string name = 1;
inline bool PBUInt64::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBUInt64::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBUInt64::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBUInt64::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PBUInt64::name() const {
  return *name_;
}
inline void PBUInt64::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBUInt64::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBUInt64::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBUInt64::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PBUInt64::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBUInt64::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 value = 2;
inline bool PBUInt64::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBUInt64::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBUInt64::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBUInt64::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 PBUInt64::value() const {
  return value_;
}
inline void PBUInt64::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// PBDouble

// optional string name = 1;
inline bool PBDouble::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBDouble::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBDouble::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBDouble::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PBDouble::name() const {
  return *name_;
}
inline void PBDouble::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBDouble::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBDouble::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBDouble::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PBDouble::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBDouble::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional double value = 2;
inline bool PBDouble::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBDouble::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBDouble::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBDouble::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double PBDouble::value() const {
  return value_;
}
inline void PBDouble::set_value(double value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// PBString

// optional string name = 1;
inline bool PBString::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBString::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBString::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBString::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PBString::name() const {
  return *name_;
}
inline void PBString::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBString::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBString::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBString::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PBString::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBString::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string value = 2;
inline bool PBString::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBString::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBString::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBString::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& PBString::value() const {
  return *value_;
}
inline void PBString::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void PBString::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void PBString::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBString::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* PBString::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBString::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PBStrings

// repeated .KFMsg.PBString pbstring = 1;
inline int PBStrings::pbstring_size() const {
  return pbstring_.size();
}
inline void PBStrings::clear_pbstring() {
  pbstring_.Clear();
}
inline const ::KFMsg::PBString& PBStrings::pbstring(int index) const {
  return pbstring_.Get(index);
}
inline ::KFMsg::PBString* PBStrings::mutable_pbstring(int index) {
  return pbstring_.Mutable(index);
}
inline ::KFMsg::PBString* PBStrings::add_pbstring() {
  return pbstring_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >&
PBStrings::pbstring() const {
  return pbstring_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >*
PBStrings::mutable_pbstring() {
  return &pbstring_;
}

// -------------------------------------------------------------------

// PBVector3D

// optional string name = 1;
inline bool PBVector3D::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBVector3D::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBVector3D::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBVector3D::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PBVector3D::name() const {
  return *name_;
}
inline void PBVector3D::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBVector3D::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBVector3D::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBVector3D::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PBVector3D::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBVector3D::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .KFMsg.Vector3D value = 2;
inline bool PBVector3D::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBVector3D::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBVector3D::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBVector3D::clear_value() {
  if (value_ != NULL) value_->::KFMsg::Vector3D::Clear();
  clear_has_value();
}
inline const ::KFMsg::Vector3D& PBVector3D::value() const {
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::KFMsg::Vector3D* PBVector3D::mutable_value() {
  set_has_value();
  if (value_ == NULL) value_ = new ::KFMsg::Vector3D;
  return value_;
}
inline ::KFMsg::Vector3D* PBVector3D::release_value() {
  clear_has_value();
  ::KFMsg::Vector3D* temp = value_;
  value_ = NULL;
  return temp;
}
inline void PBVector3D::set_allocated_value(::KFMsg::Vector3D* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
}

// -------------------------------------------------------------------

// PBArray

// optional string name = 1;
inline bool PBArray::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBArray::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBArray::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBArray::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PBArray::name() const {
  return *name_;
}
inline void PBArray::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBArray::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBArray::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBArray::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PBArray::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBArray::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated sint32 pbint32 = 2;
inline int PBArray::pbint32_size() const {
  return pbint32_.size();
}
inline void PBArray::clear_pbint32() {
  pbint32_.Clear();
}
inline ::google::protobuf::int32 PBArray::pbint32(int index) const {
  return pbint32_.Get(index);
}
inline void PBArray::set_pbint32(int index, ::google::protobuf::int32 value) {
  pbint32_.Set(index, value);
}
inline void PBArray::add_pbint32(::google::protobuf::int32 value) {
  pbint32_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PBArray::pbint32() const {
  return pbint32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PBArray::mutable_pbint32() {
  return &pbint32_;
}

// repeated uint32 pbuint32 = 3;
inline int PBArray::pbuint32_size() const {
  return pbuint32_.size();
}
inline void PBArray::clear_pbuint32() {
  pbuint32_.Clear();
}
inline ::google::protobuf::uint32 PBArray::pbuint32(int index) const {
  return pbuint32_.Get(index);
}
inline void PBArray::set_pbuint32(int index, ::google::protobuf::uint32 value) {
  pbuint32_.Set(index, value);
}
inline void PBArray::add_pbuint32(::google::protobuf::uint32 value) {
  pbuint32_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PBArray::pbuint32() const {
  return pbuint32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PBArray::mutable_pbuint32() {
  return &pbuint32_;
}

// repeated sint64 pbint64 = 4;
inline int PBArray::pbint64_size() const {
  return pbint64_.size();
}
inline void PBArray::clear_pbint64() {
  pbint64_.Clear();
}
inline ::google::protobuf::int64 PBArray::pbint64(int index) const {
  return pbint64_.Get(index);
}
inline void PBArray::set_pbint64(int index, ::google::protobuf::int64 value) {
  pbint64_.Set(index, value);
}
inline void PBArray::add_pbint64(::google::protobuf::int64 value) {
  pbint64_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
PBArray::pbint64() const {
  return pbint64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
PBArray::mutable_pbint64() {
  return &pbint64_;
}

// repeated uint64 pbuint64 = 5;
inline int PBArray::pbuint64_size() const {
  return pbuint64_.size();
}
inline void PBArray::clear_pbuint64() {
  pbuint64_.Clear();
}
inline ::google::protobuf::uint64 PBArray::pbuint64(int index) const {
  return pbuint64_.Get(index);
}
inline void PBArray::set_pbuint64(int index, ::google::protobuf::uint64 value) {
  pbuint64_.Set(index, value);
}
inline void PBArray::add_pbuint64(::google::protobuf::uint64 value) {
  pbuint64_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
PBArray::pbuint64() const {
  return pbuint64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
PBArray::mutable_pbuint64() {
  return &pbuint64_;
}

// repeated double pbdouble = 6;
inline int PBArray::pbdouble_size() const {
  return pbdouble_.size();
}
inline void PBArray::clear_pbdouble() {
  pbdouble_.Clear();
}
inline double PBArray::pbdouble(int index) const {
  return pbdouble_.Get(index);
}
inline void PBArray::set_pbdouble(int index, double value) {
  pbdouble_.Set(index, value);
}
inline void PBArray::add_pbdouble(double value) {
  pbdouble_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
PBArray::pbdouble() const {
  return pbdouble_;
}
inline ::google::protobuf::RepeatedField< double >*
PBArray::mutable_pbdouble() {
  return &pbdouble_;
}

// repeated string pbstring = 7;
inline int PBArray::pbstring_size() const {
  return pbstring_.size();
}
inline void PBArray::clear_pbstring() {
  pbstring_.Clear();
}
inline const ::std::string& PBArray::pbstring(int index) const {
  return pbstring_.Get(index);
}
inline ::std::string* PBArray::mutable_pbstring(int index) {
  return pbstring_.Mutable(index);
}
inline void PBArray::set_pbstring(int index, const ::std::string& value) {
  pbstring_.Mutable(index)->assign(value);
}
inline void PBArray::set_pbstring(int index, const char* value) {
  pbstring_.Mutable(index)->assign(value);
}
inline void PBArray::set_pbstring(int index, const char* value, size_t size) {
  pbstring_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBArray::add_pbstring() {
  return pbstring_.Add();
}
inline void PBArray::add_pbstring(const ::std::string& value) {
  pbstring_.Add()->assign(value);
}
inline void PBArray::add_pbstring(const char* value) {
  pbstring_.Add()->assign(value);
}
inline void PBArray::add_pbstring(const char* value, size_t size) {
  pbstring_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PBArray::pbstring() const {
  return pbstring_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PBArray::mutable_pbstring() {
  return &pbstring_;
}

// repeated .KFMsg.Vector3D pbvector3d = 8;
inline int PBArray::pbvector3d_size() const {
  return pbvector3d_.size();
}
inline void PBArray::clear_pbvector3d() {
  pbvector3d_.Clear();
}
inline const ::KFMsg::Vector3D& PBArray::pbvector3d(int index) const {
  return pbvector3d_.Get(index);
}
inline ::KFMsg::Vector3D* PBArray::mutable_pbvector3d(int index) {
  return pbvector3d_.Mutable(index);
}
inline ::KFMsg::Vector3D* PBArray::add_pbvector3d() {
  return pbvector3d_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::Vector3D >&
PBArray::pbvector3d() const {
  return pbvector3d_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::Vector3D >*
PBArray::mutable_pbvector3d() {
  return &pbvector3d_;
}

// -------------------------------------------------------------------

// PBObject

// optional string name = 1;
inline bool PBObject::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBObject::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBObject::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBObject::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PBObject::name() const {
  return *name_;
}
inline void PBObject::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBObject::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBObject::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBObject::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PBObject::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBObject::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 key = 2;
inline bool PBObject::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBObject::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBObject::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBObject::clear_key() {
  key_ = GOOGLE_ULONGLONG(0);
  clear_has_key();
}
inline ::google::protobuf::uint64 PBObject::key() const {
  return key_;
}
inline void PBObject::set_key(::google::protobuf::uint64 value) {
  set_has_key();
  key_ = value;
}

// repeated .KFMsg.PBInt32 pbint32 = 3;
inline int PBObject::pbint32_size() const {
  return pbint32_.size();
}
inline void PBObject::clear_pbint32() {
  pbint32_.Clear();
}
inline const ::KFMsg::PBInt32& PBObject::pbint32(int index) const {
  return pbint32_.Get(index);
}
inline ::KFMsg::PBInt32* PBObject::mutable_pbint32(int index) {
  return pbint32_.Mutable(index);
}
inline ::KFMsg::PBInt32* PBObject::add_pbint32() {
  return pbint32_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBInt32 >&
PBObject::pbint32() const {
  return pbint32_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBInt32 >*
PBObject::mutable_pbint32() {
  return &pbint32_;
}

// repeated .KFMsg.PBUInt32 pbuint32 = 4;
inline int PBObject::pbuint32_size() const {
  return pbuint32_.size();
}
inline void PBObject::clear_pbuint32() {
  pbuint32_.Clear();
}
inline const ::KFMsg::PBUInt32& PBObject::pbuint32(int index) const {
  return pbuint32_.Get(index);
}
inline ::KFMsg::PBUInt32* PBObject::mutable_pbuint32(int index) {
  return pbuint32_.Mutable(index);
}
inline ::KFMsg::PBUInt32* PBObject::add_pbuint32() {
  return pbuint32_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt32 >&
PBObject::pbuint32() const {
  return pbuint32_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt32 >*
PBObject::mutable_pbuint32() {
  return &pbuint32_;
}

// repeated .KFMsg.PBInt64 pbint64 = 5;
inline int PBObject::pbint64_size() const {
  return pbint64_.size();
}
inline void PBObject::clear_pbint64() {
  pbint64_.Clear();
}
inline const ::KFMsg::PBInt64& PBObject::pbint64(int index) const {
  return pbint64_.Get(index);
}
inline ::KFMsg::PBInt64* PBObject::mutable_pbint64(int index) {
  return pbint64_.Mutable(index);
}
inline ::KFMsg::PBInt64* PBObject::add_pbint64() {
  return pbint64_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBInt64 >&
PBObject::pbint64() const {
  return pbint64_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBInt64 >*
PBObject::mutable_pbint64() {
  return &pbint64_;
}

// repeated .KFMsg.PBUInt64 pbuint64 = 6;
inline int PBObject::pbuint64_size() const {
  return pbuint64_.size();
}
inline void PBObject::clear_pbuint64() {
  pbuint64_.Clear();
}
inline const ::KFMsg::PBUInt64& PBObject::pbuint64(int index) const {
  return pbuint64_.Get(index);
}
inline ::KFMsg::PBUInt64* PBObject::mutable_pbuint64(int index) {
  return pbuint64_.Mutable(index);
}
inline ::KFMsg::PBUInt64* PBObject::add_pbuint64() {
  return pbuint64_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt64 >&
PBObject::pbuint64() const {
  return pbuint64_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt64 >*
PBObject::mutable_pbuint64() {
  return &pbuint64_;
}

// repeated .KFMsg.PBDouble pbdouble = 7;
inline int PBObject::pbdouble_size() const {
  return pbdouble_.size();
}
inline void PBObject::clear_pbdouble() {
  pbdouble_.Clear();
}
inline const ::KFMsg::PBDouble& PBObject::pbdouble(int index) const {
  return pbdouble_.Get(index);
}
inline ::KFMsg::PBDouble* PBObject::mutable_pbdouble(int index) {
  return pbdouble_.Mutable(index);
}
inline ::KFMsg::PBDouble* PBObject::add_pbdouble() {
  return pbdouble_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBDouble >&
PBObject::pbdouble() const {
  return pbdouble_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBDouble >*
PBObject::mutable_pbdouble() {
  return &pbdouble_;
}

// repeated .KFMsg.PBString pbstring = 8;
inline int PBObject::pbstring_size() const {
  return pbstring_.size();
}
inline void PBObject::clear_pbstring() {
  pbstring_.Clear();
}
inline const ::KFMsg::PBString& PBObject::pbstring(int index) const {
  return pbstring_.Get(index);
}
inline ::KFMsg::PBString* PBObject::mutable_pbstring(int index) {
  return pbstring_.Mutable(index);
}
inline ::KFMsg::PBString* PBObject::add_pbstring() {
  return pbstring_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >&
PBObject::pbstring() const {
  return pbstring_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >*
PBObject::mutable_pbstring() {
  return &pbstring_;
}

// repeated .KFMsg.PBVector3D pbvector3d = 9;
inline int PBObject::pbvector3d_size() const {
  return pbvector3d_.size();
}
inline void PBObject::clear_pbvector3d() {
  pbvector3d_.Clear();
}
inline const ::KFMsg::PBVector3D& PBObject::pbvector3d(int index) const {
  return pbvector3d_.Get(index);
}
inline ::KFMsg::PBVector3D* PBObject::mutable_pbvector3d(int index) {
  return pbvector3d_.Mutable(index);
}
inline ::KFMsg::PBVector3D* PBObject::add_pbvector3d() {
  return pbvector3d_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBVector3D >&
PBObject::pbvector3d() const {
  return pbvector3d_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBVector3D >*
PBObject::mutable_pbvector3d() {
  return &pbvector3d_;
}

// repeated .KFMsg.PBArray pbarray = 10;
inline int PBObject::pbarray_size() const {
  return pbarray_.size();
}
inline void PBObject::clear_pbarray() {
  pbarray_.Clear();
}
inline const ::KFMsg::PBArray& PBObject::pbarray(int index) const {
  return pbarray_.Get(index);
}
inline ::KFMsg::PBArray* PBObject::mutable_pbarray(int index) {
  return pbarray_.Mutable(index);
}
inline ::KFMsg::PBArray* PBObject::add_pbarray() {
  return pbarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBArray >&
PBObject::pbarray() const {
  return pbarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBArray >*
PBObject::mutable_pbarray() {
  return &pbarray_;
}

// repeated .KFMsg.PBObject pbobject = 11;
inline int PBObject::pbobject_size() const {
  return pbobject_.size();
}
inline void PBObject::clear_pbobject() {
  pbobject_.Clear();
}
inline const ::KFMsg::PBObject& PBObject::pbobject(int index) const {
  return pbobject_.Get(index);
}
inline ::KFMsg::PBObject* PBObject::mutable_pbobject(int index) {
  return pbobject_.Mutable(index);
}
inline ::KFMsg::PBObject* PBObject::add_pbobject() {
  return pbobject_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBObject >&
PBObject::pbobject() const {
  return pbobject_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBObject >*
PBObject::mutable_pbobject() {
  return &pbobject_;
}

// repeated .KFMsg.PBRecord pbrecord = 12;
inline int PBObject::pbrecord_size() const {
  return pbrecord_.size();
}
inline void PBObject::clear_pbrecord() {
  pbrecord_.Clear();
}
inline const ::KFMsg::PBRecord& PBObject::pbrecord(int index) const {
  return pbrecord_.Get(index);
}
inline ::KFMsg::PBRecord* PBObject::mutable_pbrecord(int index) {
  return pbrecord_.Mutable(index);
}
inline ::KFMsg::PBRecord* PBObject::add_pbrecord() {
  return pbrecord_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRecord >&
PBObject::pbrecord() const {
  return pbrecord_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRecord >*
PBObject::mutable_pbrecord() {
  return &pbrecord_;
}

// -------------------------------------------------------------------

// PBRecord

// optional string name = 1;
inline bool PBRecord::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBRecord::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBRecord::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBRecord::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PBRecord::name() const {
  return *name_;
}
inline void PBRecord::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBRecord::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBRecord::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBRecord::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PBRecord::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBRecord::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .KFMsg.PBObject pbobject = 2;
inline int PBRecord::pbobject_size() const {
  return pbobject_.size();
}
inline void PBRecord::clear_pbobject() {
  pbobject_.Clear();
}
inline const ::KFMsg::PBObject& PBRecord::pbobject(int index) const {
  return pbobject_.Get(index);
}
inline ::KFMsg::PBObject* PBRecord::mutable_pbobject(int index) {
  return pbobject_.Mutable(index);
}
inline ::KFMsg::PBObject* PBRecord::add_pbobject() {
  return pbobject_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBObject >&
PBRecord::pbobject() const {
  return pbobject_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBObject >*
PBRecord::mutable_pbobject() {
  return &pbobject_;
}

// -------------------------------------------------------------------

// PBRankData

// optional uint32 rankindex = 1;
inline bool PBRankData::has_rankindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBRankData::set_has_rankindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBRankData::clear_has_rankindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBRankData::clear_rankindex() {
  rankindex_ = 0u;
  clear_has_rankindex();
}
inline ::google::protobuf::uint32 PBRankData::rankindex() const {
  return rankindex_;
}
inline void PBRankData::set_rankindex(::google::protobuf::uint32 value) {
  set_has_rankindex();
  rankindex_ = value;
}

// optional uint32 playerid = 2;
inline bool PBRankData::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBRankData::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBRankData::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBRankData::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 PBRankData::playerid() const {
  return playerid_;
}
inline void PBRankData::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional uint64 rankscore = 3;
inline bool PBRankData::has_rankscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBRankData::set_has_rankscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBRankData::clear_has_rankscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBRankData::clear_rankscore() {
  rankscore_ = GOOGLE_ULONGLONG(0);
  clear_has_rankscore();
}
inline ::google::protobuf::uint64 PBRankData::rankscore() const {
  return rankscore_;
}
inline void PBRankData::set_rankscore(::google::protobuf::uint64 value) {
  set_has_rankscore();
  rankscore_ = value;
}

// optional .KFMsg.PBStrings pbdata = 4;
inline bool PBRankData::has_pbdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBRankData::set_has_pbdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBRankData::clear_has_pbdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBRankData::clear_pbdata() {
  if (pbdata_ != NULL) pbdata_->::KFMsg::PBStrings::Clear();
  clear_has_pbdata();
}
inline const ::KFMsg::PBStrings& PBRankData::pbdata() const {
  return pbdata_ != NULL ? *pbdata_ : *default_instance_->pbdata_;
}
inline ::KFMsg::PBStrings* PBRankData::mutable_pbdata() {
  set_has_pbdata();
  if (pbdata_ == NULL) pbdata_ = new ::KFMsg::PBStrings;
  return pbdata_;
}
inline ::KFMsg::PBStrings* PBRankData::release_pbdata() {
  clear_has_pbdata();
  ::KFMsg::PBStrings* temp = pbdata_;
  pbdata_ = NULL;
  return temp;
}
inline void PBRankData::set_allocated_pbdata(::KFMsg::PBStrings* pbdata) {
  delete pbdata_;
  pbdata_ = pbdata;
  if (pbdata) {
    set_has_pbdata();
  } else {
    clear_has_pbdata();
  }
}

// -------------------------------------------------------------------

// PBRankDatas

// repeated .KFMsg.PBRankData rankdata = 3;
inline int PBRankDatas::rankdata_size() const {
  return rankdata_.size();
}
inline void PBRankDatas::clear_rankdata() {
  rankdata_.Clear();
}
inline const ::KFMsg::PBRankData& PBRankDatas::rankdata(int index) const {
  return rankdata_.Get(index);
}
inline ::KFMsg::PBRankData* PBRankDatas::mutable_rankdata(int index) {
  return rankdata_.Mutable(index);
}
inline ::KFMsg::PBRankData* PBRankDatas::add_rankdata() {
  return rankdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRankData >&
PBRankDatas::rankdata() const {
  return rankdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRankData >*
PBRankDatas::mutable_rankdata() {
  return &rankdata_;
}

// -------------------------------------------------------------------

// PBBattlePlayer

// optional uint32 zoneid = 1;
inline bool PBBattlePlayer::has_zoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBBattlePlayer::set_has_zoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBBattlePlayer::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBBattlePlayer::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 PBBattlePlayer::zoneid() const {
  return zoneid_;
}
inline void PBBattlePlayer::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// optional uint32 serverid = 2;
inline bool PBBattlePlayer::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBBattlePlayer::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBBattlePlayer::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBBattlePlayer::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 PBBattlePlayer::serverid() const {
  return serverid_;
}
inline void PBBattlePlayer::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional uint32 playerid = 3;
inline bool PBBattlePlayer::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBBattlePlayer::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBBattlePlayer::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBBattlePlayer::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 PBBattlePlayer::playerid() const {
  return playerid_;
}
inline void PBBattlePlayer::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional string name = 4;
inline bool PBBattlePlayer::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBBattlePlayer::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBBattlePlayer::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBBattlePlayer::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PBBattlePlayer::name() const {
  return *name_;
}
inline void PBBattlePlayer::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBBattlePlayer::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBBattlePlayer::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBBattlePlayer::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PBBattlePlayer::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBBattlePlayer::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 sex = 5;
inline bool PBBattlePlayer::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBBattlePlayer::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBBattlePlayer::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBBattlePlayer::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 PBBattlePlayer::sex() const {
  return sex_;
}
inline void PBBattlePlayer::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional string icon = 6;
inline bool PBBattlePlayer::has_icon() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBBattlePlayer::set_has_icon() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBBattlePlayer::clear_has_icon() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBBattlePlayer::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& PBBattlePlayer::icon() const {
  return *icon_;
}
inline void PBBattlePlayer::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void PBBattlePlayer::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void PBBattlePlayer::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBBattlePlayer::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* PBBattlePlayer::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBBattlePlayer::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string iconbox = 7;
inline bool PBBattlePlayer::has_iconbox() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBBattlePlayer::set_has_iconbox() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBBattlePlayer::clear_has_iconbox() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBBattlePlayer::clear_iconbox() {
  if (iconbox_ != &::google::protobuf::internal::kEmptyString) {
    iconbox_->clear();
  }
  clear_has_iconbox();
}
inline const ::std::string& PBBattlePlayer::iconbox() const {
  return *iconbox_;
}
inline void PBBattlePlayer::set_iconbox(const ::std::string& value) {
  set_has_iconbox();
  if (iconbox_ == &::google::protobuf::internal::kEmptyString) {
    iconbox_ = new ::std::string;
  }
  iconbox_->assign(value);
}
inline void PBBattlePlayer::set_iconbox(const char* value) {
  set_has_iconbox();
  if (iconbox_ == &::google::protobuf::internal::kEmptyString) {
    iconbox_ = new ::std::string;
  }
  iconbox_->assign(value);
}
inline void PBBattlePlayer::set_iconbox(const char* value, size_t size) {
  set_has_iconbox();
  if (iconbox_ == &::google::protobuf::internal::kEmptyString) {
    iconbox_ = new ::std::string;
  }
  iconbox_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBBattlePlayer::mutable_iconbox() {
  set_has_iconbox();
  if (iconbox_ == &::google::protobuf::internal::kEmptyString) {
    iconbox_ = new ::std::string;
  }
  return iconbox_;
}
inline ::std::string* PBBattlePlayer::release_iconbox() {
  clear_has_iconbox();
  if (iconbox_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = iconbox_;
    iconbox_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBBattlePlayer::set_allocated_iconbox(::std::string* iconbox) {
  if (iconbox_ != &::google::protobuf::internal::kEmptyString) {
    delete iconbox_;
  }
  if (iconbox) {
    set_has_iconbox();
    iconbox_ = iconbox;
  } else {
    clear_has_iconbox();
    iconbox_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 grading = 8;
inline bool PBBattlePlayer::has_grading() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBBattlePlayer::set_has_grading() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBBattlePlayer::clear_has_grading() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBBattlePlayer::clear_grading() {
  grading_ = 0u;
  clear_has_grading();
}
inline ::google::protobuf::uint32 PBBattlePlayer::grading() const {
  return grading_;
}
inline void PBBattlePlayer::set_grading(::google::protobuf::uint32 value) {
  set_has_grading();
  grading_ = value;
}

// optional uint32 modelid = 9;
inline bool PBBattlePlayer::has_modelid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PBBattlePlayer::set_has_modelid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PBBattlePlayer::clear_has_modelid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PBBattlePlayer::clear_modelid() {
  modelid_ = 0u;
  clear_has_modelid();
}
inline ::google::protobuf::uint32 PBBattlePlayer::modelid() const {
  return modelid_;
}
inline void PBBattlePlayer::set_modelid(::google::protobuf::uint32 value) {
  set_has_modelid();
  modelid_ = value;
}

// optional uint32 clothesid = 10;
inline bool PBBattlePlayer::has_clothesid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PBBattlePlayer::set_has_clothesid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PBBattlePlayer::clear_has_clothesid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PBBattlePlayer::clear_clothesid() {
  clothesid_ = 0u;
  clear_has_clothesid();
}
inline ::google::protobuf::uint32 PBBattlePlayer::clothesid() const {
  return clothesid_;
}
inline void PBBattlePlayer::set_clothesid(::google::protobuf::uint32 value) {
  set_has_clothesid();
  clothesid_ = value;
}

// optional uint64 groupid = 11;
inline bool PBBattlePlayer::has_groupid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PBBattlePlayer::set_has_groupid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PBBattlePlayer::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PBBattlePlayer::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 PBBattlePlayer::groupid() const {
  return groupid_;
}
inline void PBBattlePlayer::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// optional uint32 campid = 12;
inline bool PBBattlePlayer::has_campid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PBBattlePlayer::set_has_campid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PBBattlePlayer::clear_has_campid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PBBattlePlayer::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 PBBattlePlayer::campid() const {
  return campid_;
}
inline void PBBattlePlayer::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
}

// -------------------------------------------------------------------

// PBBattleCamp

// required uint32 campid = 1;
inline bool PBBattleCamp::has_campid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBBattleCamp::set_has_campid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBBattleCamp::clear_has_campid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBBattleCamp::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 PBBattleCamp::campid() const {
  return campid_;
}
inline void PBBattleCamp::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
}

// repeated .KFMsg.PBBattlePlayer pbplayer = 2;
inline int PBBattleCamp::pbplayer_size() const {
  return pbplayer_.size();
}
inline void PBBattleCamp::clear_pbplayer() {
  pbplayer_.Clear();
}
inline const ::KFMsg::PBBattlePlayer& PBBattleCamp::pbplayer(int index) const {
  return pbplayer_.Get(index);
}
inline ::KFMsg::PBBattlePlayer* PBBattleCamp::mutable_pbplayer(int index) {
  return pbplayer_.Mutable(index);
}
inline ::KFMsg::PBBattlePlayer* PBBattleCamp::add_pbplayer() {
  return pbplayer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBBattlePlayer >&
PBBattleCamp::pbplayer() const {
  return pbplayer_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBBattlePlayer >*
PBBattleCamp::mutable_pbplayer() {
  return &pbplayer_;
}

// -------------------------------------------------------------------

// PBMatchGroup

// required uint64 groupid = 1;
inline bool PBMatchGroup::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBMatchGroup::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBMatchGroup::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBMatchGroup::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 PBMatchGroup::groupid() const {
  return groupid_;
}
inline void PBMatchGroup::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// repeated .KFMsg.PBBattlePlayer pbplayer = 2;
inline int PBMatchGroup::pbplayer_size() const {
  return pbplayer_.size();
}
inline void PBMatchGroup::clear_pbplayer() {
  pbplayer_.Clear();
}
inline const ::KFMsg::PBBattlePlayer& PBMatchGroup::pbplayer(int index) const {
  return pbplayer_.Get(index);
}
inline ::KFMsg::PBBattlePlayer* PBMatchGroup::mutable_pbplayer(int index) {
  return pbplayer_.Mutable(index);
}
inline ::KFMsg::PBBattlePlayer* PBMatchGroup::add_pbplayer() {
  return pbplayer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBBattlePlayer >&
PBMatchGroup::pbplayer() const {
  return pbplayer_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBBattlePlayer >*
PBMatchGroup::mutable_pbplayer() {
  return &pbplayer_;
}

// -------------------------------------------------------------------

// PBGuestData

// required uint32 guestid = 1;
inline bool PBGuestData::has_guestid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBGuestData::set_has_guestid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBGuestData::clear_has_guestid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBGuestData::clear_guestid() {
  guestid_ = 0u;
  clear_has_guestid();
}
inline ::google::protobuf::uint32 PBGuestData::guestid() const {
  return guestid_;
}
inline void PBGuestData::set_guestid(::google::protobuf::uint32 value) {
  set_has_guestid();
  guestid_ = value;
}

// required string guesticon = 2;
inline bool PBGuestData::has_guesticon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBGuestData::set_has_guesticon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBGuestData::clear_has_guesticon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBGuestData::clear_guesticon() {
  if (guesticon_ != &::google::protobuf::internal::kEmptyString) {
    guesticon_->clear();
  }
  clear_has_guesticon();
}
inline const ::std::string& PBGuestData::guesticon() const {
  return *guesticon_;
}
inline void PBGuestData::set_guesticon(const ::std::string& value) {
  set_has_guesticon();
  if (guesticon_ == &::google::protobuf::internal::kEmptyString) {
    guesticon_ = new ::std::string;
  }
  guesticon_->assign(value);
}
inline void PBGuestData::set_guesticon(const char* value) {
  set_has_guesticon();
  if (guesticon_ == &::google::protobuf::internal::kEmptyString) {
    guesticon_ = new ::std::string;
  }
  guesticon_->assign(value);
}
inline void PBGuestData::set_guesticon(const char* value, size_t size) {
  set_has_guesticon();
  if (guesticon_ == &::google::protobuf::internal::kEmptyString) {
    guesticon_ = new ::std::string;
  }
  guesticon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBGuestData::mutable_guesticon() {
  set_has_guesticon();
  if (guesticon_ == &::google::protobuf::internal::kEmptyString) {
    guesticon_ = new ::std::string;
  }
  return guesticon_;
}
inline ::std::string* PBGuestData::release_guesticon() {
  clear_has_guesticon();
  if (guesticon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guesticon_;
    guesticon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBGuestData::set_allocated_guesticon(::std::string* guesticon) {
  if (guesticon_ != &::google::protobuf::internal::kEmptyString) {
    delete guesticon_;
  }
  if (guesticon) {
    set_has_guesticon();
    guesticon_ = guesticon;
  } else {
    clear_has_guesticon();
    guesticon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string guesticonbox = 3;
inline bool PBGuestData::has_guesticonbox() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBGuestData::set_has_guesticonbox() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBGuestData::clear_has_guesticonbox() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBGuestData::clear_guesticonbox() {
  if (guesticonbox_ != &::google::protobuf::internal::kEmptyString) {
    guesticonbox_->clear();
  }
  clear_has_guesticonbox();
}
inline const ::std::string& PBGuestData::guesticonbox() const {
  return *guesticonbox_;
}
inline void PBGuestData::set_guesticonbox(const ::std::string& value) {
  set_has_guesticonbox();
  if (guesticonbox_ == &::google::protobuf::internal::kEmptyString) {
    guesticonbox_ = new ::std::string;
  }
  guesticonbox_->assign(value);
}
inline void PBGuestData::set_guesticonbox(const char* value) {
  set_has_guesticonbox();
  if (guesticonbox_ == &::google::protobuf::internal::kEmptyString) {
    guesticonbox_ = new ::std::string;
  }
  guesticonbox_->assign(value);
}
inline void PBGuestData::set_guesticonbox(const char* value, size_t size) {
  set_has_guesticonbox();
  if (guesticonbox_ == &::google::protobuf::internal::kEmptyString) {
    guesticonbox_ = new ::std::string;
  }
  guesticonbox_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBGuestData::mutable_guesticonbox() {
  set_has_guesticonbox();
  if (guesticonbox_ == &::google::protobuf::internal::kEmptyString) {
    guesticonbox_ = new ::std::string;
  }
  return guesticonbox_;
}
inline ::std::string* PBGuestData::release_guesticonbox() {
  clear_has_guesticonbox();
  if (guesticonbox_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guesticonbox_;
    guesticonbox_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBGuestData::set_allocated_guesticonbox(::std::string* guesticonbox) {
  if (guesticonbox_ != &::google::protobuf::internal::kEmptyString) {
    delete guesticonbox_;
  }
  if (guesticonbox) {
    set_has_guesticonbox();
    guesticonbox_ = guesticonbox;
  } else {
    clear_has_guesticonbox();
    guesticonbox_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PBBattleScore

// required uint32 playerid = 1;
inline bool PBBattleScore::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBBattleScore::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBBattleScore::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBBattleScore::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 PBBattleScore::playerid() const {
  return playerid_;
}
inline void PBBattleScore::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 ranking = 2;
inline bool PBBattleScore::has_ranking() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBBattleScore::set_has_ranking() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBBattleScore::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBBattleScore::clear_ranking() {
  ranking_ = 0u;
  clear_has_ranking();
}
inline ::google::protobuf::uint32 PBBattleScore::ranking() const {
  return ranking_;
}
inline void PBBattleScore::set_ranking(::google::protobuf::uint32 value) {
  set_has_ranking();
  ranking_ = value;
}

// repeated .KFMsg.PBUInt32 pbdata = 3;
inline int PBBattleScore::pbdata_size() const {
  return pbdata_.size();
}
inline void PBBattleScore::clear_pbdata() {
  pbdata_.Clear();
}
inline const ::KFMsg::PBUInt32& PBBattleScore::pbdata(int index) const {
  return pbdata_.Get(index);
}
inline ::KFMsg::PBUInt32* PBBattleScore::mutable_pbdata(int index) {
  return pbdata_.Mutable(index);
}
inline ::KFMsg::PBUInt32* PBBattleScore::add_pbdata() {
  return pbdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt32 >&
PBBattleScore::pbdata() const {
  return pbdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt32 >*
PBBattleScore::mutable_pbdata() {
  return &pbdata_;
}

// optional uint32 score = 4;
inline bool PBBattleScore::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBBattleScore::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBBattleScore::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBBattleScore::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 PBBattleScore::score() const {
  return score_;
}
inline void PBBattleScore::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// optional uint32 matchid = 5;
inline bool PBBattleScore::has_matchid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBBattleScore::set_has_matchid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBBattleScore::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBBattleScore::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 PBBattleScore::matchid() const {
  return matchid_;
}
inline void PBBattleScore::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// optional string reward = 6;
inline bool PBBattleScore::has_reward() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBBattleScore::set_has_reward() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBBattleScore::clear_has_reward() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBBattleScore::clear_reward() {
  if (reward_ != &::google::protobuf::internal::kEmptyString) {
    reward_->clear();
  }
  clear_has_reward();
}
inline const ::std::string& PBBattleScore::reward() const {
  return *reward_;
}
inline void PBBattleScore::set_reward(const ::std::string& value) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  reward_->assign(value);
}
inline void PBBattleScore::set_reward(const char* value) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  reward_->assign(value);
}
inline void PBBattleScore::set_reward(const char* value, size_t size) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  reward_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBBattleScore::mutable_reward() {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  return reward_;
}
inline ::std::string* PBBattleScore::release_reward() {
  clear_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reward_;
    reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBBattleScore::set_allocated_reward(::std::string* reward) {
  if (reward_ != &::google::protobuf::internal::kEmptyString) {
    delete reward_;
  }
  if (reward) {
    set_has_reward();
    reward_ = reward;
  } else {
    clear_has_reward();
    reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PBPlayerIds

// repeated uint32 playerid = 1;
inline int PBPlayerIds::playerid_size() const {
  return playerid_.size();
}
inline void PBPlayerIds::clear_playerid() {
  playerid_.Clear();
}
inline ::google::protobuf::uint32 PBPlayerIds::playerid(int index) const {
  return playerid_.Get(index);
}
inline void PBPlayerIds::set_playerid(int index, ::google::protobuf::uint32 value) {
  playerid_.Set(index, value);
}
inline void PBPlayerIds::add_playerid(::google::protobuf::uint32 value) {
  playerid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PBPlayerIds::playerid() const {
  return playerid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PBPlayerIds::mutable_playerid() {
  return &playerid_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::AckEnum>() {
  return ::KFMsg::AckEnum_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::ChannelEnum>() {
  return ::KFMsg::ChannelEnum_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::SexEnum>() {
  return ::KFMsg::SexEnum_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::KickEnum>() {
  return ::KFMsg::KickEnum_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::FlagEnum>() {
  return ::KFMsg::FlagEnum_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::MailEnum>() {
  return ::KFMsg::MailEnum_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::MailConfigEnum>() {
  return ::KFMsg::MailConfigEnum_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::StatusEnum>() {
  return ::KFMsg::StatusEnum_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::ChatEnum>() {
  return ::KFMsg::ChatEnum_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::InviteEnum>() {
  return ::KFMsg::InviteEnum_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::StoreWishEnum>() {
  return ::KFMsg::StoreWishEnum_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::WishStateEnum>() {
  return ::KFMsg::WishStateEnum_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::RankListEnum>() {
  return ::KFMsg::RankListEnum_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_KFCommonMessage_2eproto__INCLUDED
