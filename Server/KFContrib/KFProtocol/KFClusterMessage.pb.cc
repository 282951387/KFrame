// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFClusterMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "KFClusterMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KFMsg {

namespace {

const ::google::protobuf::Descriptor* S2SClusterRegisterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SClusterRegisterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SClusterUpdateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SClusterUpdateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SClusterAuthReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SClusterAuthReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SClusterAuthAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SClusterAuthAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SClusterTokenReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SClusterTokenReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SClusterVerifyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SClusterVerifyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SClusterVerifyAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SClusterVerifyAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SClusterClientListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SClusterClientListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SAddObjectToProxyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SAddObjectToProxyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SRemoveObjectToProxyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SRemoveObjectToProxyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SAllocObjectToMasterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SAllocObjectToMasterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SAllocObjectToProxyAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SAllocObjectToProxyAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SAllocObjectToShardAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SAllocObjectToShardAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SSendToDynamicObjectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SSendToDynamicObjectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SSendToStaticObjectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SSendToStaticObjectReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClusterProtocol_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_KFClusterMessage_2eproto() {
  protobuf_AddDesc_KFClusterMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "KFClusterMessage.proto");
  GOOGLE_CHECK(file != NULL);
  S2SClusterRegisterReq_descriptor_ = file->message_type(0);
  static const int S2SClusterRegisterReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterRegisterReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterRegisterReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterRegisterReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterRegisterReq, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterRegisterReq, port_),
  };
  S2SClusterRegisterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SClusterRegisterReq_descriptor_,
      S2SClusterRegisterReq::default_instance_,
      S2SClusterRegisterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterRegisterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterRegisterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SClusterRegisterReq));
  S2SClusterUpdateReq_descriptor_ = file->message_type(1);
  static const int S2SClusterUpdateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterUpdateReq, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterUpdateReq, count_),
  };
  S2SClusterUpdateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SClusterUpdateReq_descriptor_,
      S2SClusterUpdateReq::default_instance_,
      S2SClusterUpdateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterUpdateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterUpdateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SClusterUpdateReq));
  S2SClusterAuthReq_descriptor_ = file->message_type(2);
  static const int S2SClusterAuthReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterAuthReq, clustertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterAuthReq, clusterkey_),
  };
  S2SClusterAuthReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SClusterAuthReq_descriptor_,
      S2SClusterAuthReq::default_instance_,
      S2SClusterAuthReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterAuthReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterAuthReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SClusterAuthReq));
  S2SClusterAuthAck_descriptor_ = file->message_type(3);
  static const int S2SClusterAuthAck_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterAuthAck, clustertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterAuthAck, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterAuthAck, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterAuthAck, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterAuthAck, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterAuthAck, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterAuthAck, port_),
  };
  S2SClusterAuthAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SClusterAuthAck_descriptor_,
      S2SClusterAuthAck::default_instance_,
      S2SClusterAuthAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterAuthAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterAuthAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SClusterAuthAck));
  S2SClusterTokenReq_descriptor_ = file->message_type(4);
  static const int S2SClusterTokenReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterTokenReq, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterTokenReq, gateid_),
  };
  S2SClusterTokenReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SClusterTokenReq_descriptor_,
      S2SClusterTokenReq::default_instance_,
      S2SClusterTokenReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterTokenReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterTokenReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SClusterTokenReq));
  S2SClusterVerifyReq_descriptor_ = file->message_type(5);
  static const int S2SClusterVerifyReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterVerifyReq, clustertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterVerifyReq, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterVerifyReq, serverid_),
  };
  S2SClusterVerifyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SClusterVerifyReq_descriptor_,
      S2SClusterVerifyReq::default_instance_,
      S2SClusterVerifyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterVerifyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterVerifyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SClusterVerifyReq));
  S2SClusterVerifyAck_descriptor_ = file->message_type(6);
  static const int S2SClusterVerifyAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterVerifyAck, clustertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterVerifyAck, serverid_),
  };
  S2SClusterVerifyAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SClusterVerifyAck_descriptor_,
      S2SClusterVerifyAck::default_instance_,
      S2SClusterVerifyAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterVerifyAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterVerifyAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SClusterVerifyAck));
  S2SClusterClientListReq_descriptor_ = file->message_type(7);
  static const int S2SClusterClientListReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterClientListReq, clientid_),
  };
  S2SClusterClientListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SClusterClientListReq_descriptor_,
      S2SClusterClientListReq::default_instance_,
      S2SClusterClientListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterClientListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SClusterClientListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SClusterClientListReq));
  S2SAddObjectToProxyReq_descriptor_ = file->message_type(8);
  static const int S2SAddObjectToProxyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddObjectToProxyReq, objectid_),
  };
  S2SAddObjectToProxyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SAddObjectToProxyReq_descriptor_,
      S2SAddObjectToProxyReq::default_instance_,
      S2SAddObjectToProxyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddObjectToProxyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddObjectToProxyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SAddObjectToProxyReq));
  S2SRemoveObjectToProxyReq_descriptor_ = file->message_type(9);
  static const int S2SRemoveObjectToProxyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRemoveObjectToProxyReq, objectid_),
  };
  S2SRemoveObjectToProxyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SRemoveObjectToProxyReq_descriptor_,
      S2SRemoveObjectToProxyReq::default_instance_,
      S2SRemoveObjectToProxyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRemoveObjectToProxyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRemoveObjectToProxyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SRemoveObjectToProxyReq));
  S2SAllocObjectToMasterReq_descriptor_ = file->message_type(10);
  static const int S2SAllocObjectToMasterReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAllocObjectToMasterReq, objectid_),
  };
  S2SAllocObjectToMasterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SAllocObjectToMasterReq_descriptor_,
      S2SAllocObjectToMasterReq::default_instance_,
      S2SAllocObjectToMasterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAllocObjectToMasterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAllocObjectToMasterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SAllocObjectToMasterReq));
  S2SAllocObjectToProxyAck_descriptor_ = file->message_type(11);
  static const int S2SAllocObjectToProxyAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAllocObjectToProxyAck, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAllocObjectToProxyAck, shardid_),
  };
  S2SAllocObjectToProxyAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SAllocObjectToProxyAck_descriptor_,
      S2SAllocObjectToProxyAck::default_instance_,
      S2SAllocObjectToProxyAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAllocObjectToProxyAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAllocObjectToProxyAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SAllocObjectToProxyAck));
  S2SAllocObjectToShardAck_descriptor_ = file->message_type(12);
  static const int S2SAllocObjectToShardAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAllocObjectToShardAck, objectid_),
  };
  S2SAllocObjectToShardAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SAllocObjectToShardAck_descriptor_,
      S2SAllocObjectToShardAck::default_instance_,
      S2SAllocObjectToShardAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAllocObjectToShardAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAllocObjectToShardAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SAllocObjectToShardAck));
  S2SSendToDynamicObjectReq_descriptor_ = file->message_type(13);
  static const int S2SSendToDynamicObjectReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSendToDynamicObjectReq, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSendToDynamicObjectReq, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSendToDynamicObjectReq, msgdata_),
  };
  S2SSendToDynamicObjectReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SSendToDynamicObjectReq_descriptor_,
      S2SSendToDynamicObjectReq::default_instance_,
      S2SSendToDynamicObjectReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSendToDynamicObjectReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSendToDynamicObjectReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SSendToDynamicObjectReq));
  S2SSendToStaticObjectReq_descriptor_ = file->message_type(14);
  static const int S2SSendToStaticObjectReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSendToStaticObjectReq, objectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSendToStaticObjectReq, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSendToStaticObjectReq, msgdata_),
  };
  S2SSendToStaticObjectReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SSendToStaticObjectReq_descriptor_,
      S2SSendToStaticObjectReq::default_instance_,
      S2SSendToStaticObjectReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSendToStaticObjectReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSendToStaticObjectReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SSendToStaticObjectReq));
  ClusterProtocol_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_KFClusterMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SClusterRegisterReq_descriptor_, &S2SClusterRegisterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SClusterUpdateReq_descriptor_, &S2SClusterUpdateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SClusterAuthReq_descriptor_, &S2SClusterAuthReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SClusterAuthAck_descriptor_, &S2SClusterAuthAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SClusterTokenReq_descriptor_, &S2SClusterTokenReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SClusterVerifyReq_descriptor_, &S2SClusterVerifyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SClusterVerifyAck_descriptor_, &S2SClusterVerifyAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SClusterClientListReq_descriptor_, &S2SClusterClientListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SAddObjectToProxyReq_descriptor_, &S2SAddObjectToProxyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SRemoveObjectToProxyReq_descriptor_, &S2SRemoveObjectToProxyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SAllocObjectToMasterReq_descriptor_, &S2SAllocObjectToMasterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SAllocObjectToProxyAck_descriptor_, &S2SAllocObjectToProxyAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SAllocObjectToShardAck_descriptor_, &S2SAllocObjectToShardAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SSendToDynamicObjectReq_descriptor_, &S2SSendToDynamicObjectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SSendToStaticObjectReq_descriptor_, &S2SSendToStaticObjectReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_KFClusterMessage_2eproto() {
  delete S2SClusterRegisterReq::default_instance_;
  delete S2SClusterRegisterReq_reflection_;
  delete S2SClusterUpdateReq::default_instance_;
  delete S2SClusterUpdateReq_reflection_;
  delete S2SClusterAuthReq::default_instance_;
  delete S2SClusterAuthReq_reflection_;
  delete S2SClusterAuthAck::default_instance_;
  delete S2SClusterAuthAck_reflection_;
  delete S2SClusterTokenReq::default_instance_;
  delete S2SClusterTokenReq_reflection_;
  delete S2SClusterVerifyReq::default_instance_;
  delete S2SClusterVerifyReq_reflection_;
  delete S2SClusterVerifyAck::default_instance_;
  delete S2SClusterVerifyAck_reflection_;
  delete S2SClusterClientListReq::default_instance_;
  delete S2SClusterClientListReq_reflection_;
  delete S2SAddObjectToProxyReq::default_instance_;
  delete S2SAddObjectToProxyReq_reflection_;
  delete S2SRemoveObjectToProxyReq::default_instance_;
  delete S2SRemoveObjectToProxyReq_reflection_;
  delete S2SAllocObjectToMasterReq::default_instance_;
  delete S2SAllocObjectToMasterReq_reflection_;
  delete S2SAllocObjectToProxyAck::default_instance_;
  delete S2SAllocObjectToProxyAck_reflection_;
  delete S2SAllocObjectToShardAck::default_instance_;
  delete S2SAllocObjectToShardAck_reflection_;
  delete S2SSendToDynamicObjectReq::default_instance_;
  delete S2SSendToDynamicObjectReq_reflection_;
  delete S2SSendToStaticObjectReq::default_instance_;
  delete S2SSendToStaticObjectReq_reflection_;
}

void protobuf_AddDesc_KFClusterMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026KFClusterMessage.proto\022\005KFMsg\"Y\n\025S2SCl"
    "usterRegisterReq\022\014\n\004type\030\001 \002(\t\022\n\n\002id\030\002 \002"
    "(\r\022\014\n\004name\030\003 \002(\t\022\n\n\002ip\030\004 \002(\t\022\014\n\004port\030\005 \002"
    "(\r\"4\n\023S2SClusterUpdateReq\022\016\n\006gateid\030\001 \002("
    "\r\022\r\n\005count\030\002 \002(\r\"<\n\021S2SClusterAuthReq\022\023\n"
    "\013clustertype\030\001 \002(\t\022\022\n\nclusterkey\030\002 \002(\t\"y"
    "\n\021S2SClusterAuthAck\022\023\n\013clustertype\030\001 \002(\t"
    "\022\r\n\005token\030\002 \002(\t\022\014\n\004type\030\003 \002(\t\022\n\n\002id\030\004 \002("
    "\r\022\014\n\004name\030\005 \002(\t\022\n\n\002ip\030\006 \002(\t\022\014\n\004port\030\007 \002("
    "\r\"3\n\022S2SClusterTokenReq\022\r\n\005token\030\001 \002(\t\022\016"
    "\n\006gateid\030\002 \002(\r\"K\n\023S2SClusterVerifyReq\022\023\n"
    "\013clustertype\030\001 \002(\t\022\r\n\005token\030\002 \002(\t\022\020\n\010ser"
    "verid\030\003 \002(\r\"<\n\023S2SClusterVerifyAck\022\023\n\013cl"
    "ustertype\030\001 \002(\t\022\020\n\010serverid\030\002 \002(\r\"+\n\027S2S"
    "ClusterClientListReq\022\020\n\010clientid\030\001 \003(\r\"*"
    "\n\026S2SAddObjectToProxyReq\022\020\n\010objectid\030\001 \003"
    "(\004\"-\n\031S2SRemoveObjectToProxyReq\022\020\n\010objec"
    "tid\030\002 \003(\004\"-\n\031S2SAllocObjectToMasterReq\022\020"
    "\n\010objectid\030\001 \003(\r\"=\n\030S2SAllocObjectToProx"
    "yAck\022\020\n\010objectid\030\001 \003(\r\022\017\n\007shardid\030\002 \003(\r\""
    ",\n\030S2SAllocObjectToShardAck\022\020\n\010objectid\030"
    "\001 \003(\r\"M\n\031S2SSendToDynamicObjectReq\022\020\n\010ob"
    "jectid\030\001 \002(\004\022\r\n\005msgid\030\002 \002(\r\022\017\n\007msgdata\030\003"
    " \002(\t\"L\n\030S2SSendToStaticObjectReq\022\020\n\010obje"
    "ctid\030\001 \002(\r\022\r\n\005msgid\030\002 \002(\r\022\017\n\007msgdata\030\003 \002"
    "(\t*\370\003\n\017ClusterProtocol\022\035\n\030S2S_CLUSTER_RE"
    "GISTER_REQ\020\365N\022\033\n\026S2S_CLUSTER_UPDATE_REQ\020"
    "\366N\022\031\n\024S2S_CLUSTER_AUTH_REQ\020\367N\022\031\n\024S2S_CLU"
    "STER_AUTH_ACK\020\370N\022\032\n\025S2S_CLUSTER_TOKEN_RE"
    "Q\020\371N\022\033\n\026S2S_CLUSTER_VERIFY_REQ\020\372N\022\033\n\026S2S"
    "_CLUSTER_VERIFY_ACK\020\373N\022 \n\033S2S_CLUSTER_CL"
    "IENT_LIST_REQ\020\374N\022 \n\033S2S_ADD_OBJECT_TO_PR"
    "OXY_REQ\020\375N\022#\n\036S2S_REMOVE_OBJECT_TO_PROXY"
    "_REQ\020\376N\022#\n\036S2S_ALLOC_OBJECT_TO_MASTER_RE"
    "Q\020\200O\022\"\n\035S2S_ALLOC_OBJECT_TO_PROXY_ACK\020\201O"
    "\022\"\n\035S2S_ALLOC_OBJECT_TO_SHARD_ACK\020\202O\022\"\n\035"
    "S2S_SEND_TO_STATIC_OBJECT_REQ\020\203O\022#\n\036S2S_"
    "SEND_TO_DYNAMIC_OBJECT_REQ\020\204O", 1509);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KFClusterMessage.proto", &protobuf_RegisterTypes);
  S2SClusterRegisterReq::default_instance_ = new S2SClusterRegisterReq();
  S2SClusterUpdateReq::default_instance_ = new S2SClusterUpdateReq();
  S2SClusterAuthReq::default_instance_ = new S2SClusterAuthReq();
  S2SClusterAuthAck::default_instance_ = new S2SClusterAuthAck();
  S2SClusterTokenReq::default_instance_ = new S2SClusterTokenReq();
  S2SClusterVerifyReq::default_instance_ = new S2SClusterVerifyReq();
  S2SClusterVerifyAck::default_instance_ = new S2SClusterVerifyAck();
  S2SClusterClientListReq::default_instance_ = new S2SClusterClientListReq();
  S2SAddObjectToProxyReq::default_instance_ = new S2SAddObjectToProxyReq();
  S2SRemoveObjectToProxyReq::default_instance_ = new S2SRemoveObjectToProxyReq();
  S2SAllocObjectToMasterReq::default_instance_ = new S2SAllocObjectToMasterReq();
  S2SAllocObjectToProxyAck::default_instance_ = new S2SAllocObjectToProxyAck();
  S2SAllocObjectToShardAck::default_instance_ = new S2SAllocObjectToShardAck();
  S2SSendToDynamicObjectReq::default_instance_ = new S2SSendToDynamicObjectReq();
  S2SSendToStaticObjectReq::default_instance_ = new S2SSendToStaticObjectReq();
  S2SClusterRegisterReq::default_instance_->InitAsDefaultInstance();
  S2SClusterUpdateReq::default_instance_->InitAsDefaultInstance();
  S2SClusterAuthReq::default_instance_->InitAsDefaultInstance();
  S2SClusterAuthAck::default_instance_->InitAsDefaultInstance();
  S2SClusterTokenReq::default_instance_->InitAsDefaultInstance();
  S2SClusterVerifyReq::default_instance_->InitAsDefaultInstance();
  S2SClusterVerifyAck::default_instance_->InitAsDefaultInstance();
  S2SClusterClientListReq::default_instance_->InitAsDefaultInstance();
  S2SAddObjectToProxyReq::default_instance_->InitAsDefaultInstance();
  S2SRemoveObjectToProxyReq::default_instance_->InitAsDefaultInstance();
  S2SAllocObjectToMasterReq::default_instance_->InitAsDefaultInstance();
  S2SAllocObjectToProxyAck::default_instance_->InitAsDefaultInstance();
  S2SAllocObjectToShardAck::default_instance_->InitAsDefaultInstance();
  S2SSendToDynamicObjectReq::default_instance_->InitAsDefaultInstance();
  S2SSendToStaticObjectReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_KFClusterMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_KFClusterMessage_2eproto {
  StaticDescriptorInitializer_KFClusterMessage_2eproto() {
    protobuf_AddDesc_KFClusterMessage_2eproto();
  }
} static_descriptor_initializer_KFClusterMessage_2eproto_;
const ::google::protobuf::EnumDescriptor* ClusterProtocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClusterProtocol_descriptor_;
}
bool ClusterProtocol_IsValid(int value) {
  switch(value) {
    case 10101:
    case 10102:
    case 10103:
    case 10104:
    case 10105:
    case 10106:
    case 10107:
    case 10108:
    case 10109:
    case 10110:
    case 10112:
    case 10113:
    case 10114:
    case 10115:
    case 10116:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int S2SClusterRegisterReq::kTypeFieldNumber;
const int S2SClusterRegisterReq::kIdFieldNumber;
const int S2SClusterRegisterReq::kNameFieldNumber;
const int S2SClusterRegisterReq::kIpFieldNumber;
const int S2SClusterRegisterReq::kPortFieldNumber;
#endif  // !_MSC_VER

S2SClusterRegisterReq::S2SClusterRegisterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SClusterRegisterReq::InitAsDefaultInstance() {
}

S2SClusterRegisterReq::S2SClusterRegisterReq(const S2SClusterRegisterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SClusterRegisterReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SClusterRegisterReq::~S2SClusterRegisterReq() {
  SharedDtor();
}

void S2SClusterRegisterReq::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void S2SClusterRegisterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SClusterRegisterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SClusterRegisterReq_descriptor_;
}

const S2SClusterRegisterReq& S2SClusterRegisterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClusterMessage_2eproto();
  return *default_instance_;
}

S2SClusterRegisterReq* S2SClusterRegisterReq::default_instance_ = NULL;

S2SClusterRegisterReq* S2SClusterRegisterReq::New() const {
  return new S2SClusterRegisterReq;
}

void S2SClusterRegisterReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SClusterRegisterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // required string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }

      // required uint32 port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SClusterRegisterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }

  // required uint32 port = 5;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SClusterRegisterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // required uint32 port = 5;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SClusterRegisterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required uint32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SClusterRegisterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SClusterRegisterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SClusterRegisterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SClusterRegisterReq::MergeFrom(const S2SClusterRegisterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SClusterRegisterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SClusterRegisterReq::CopyFrom(const S2SClusterRegisterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SClusterRegisterReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2SClusterRegisterReq::Swap(S2SClusterRegisterReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SClusterRegisterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SClusterRegisterReq_descriptor_;
  metadata.reflection = S2SClusterRegisterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SClusterUpdateReq::kGateidFieldNumber;
const int S2SClusterUpdateReq::kCountFieldNumber;
#endif  // !_MSC_VER

S2SClusterUpdateReq::S2SClusterUpdateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SClusterUpdateReq::InitAsDefaultInstance() {
}

S2SClusterUpdateReq::S2SClusterUpdateReq(const S2SClusterUpdateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SClusterUpdateReq::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SClusterUpdateReq::~S2SClusterUpdateReq() {
  SharedDtor();
}

void S2SClusterUpdateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SClusterUpdateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SClusterUpdateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SClusterUpdateReq_descriptor_;
}

const S2SClusterUpdateReq& S2SClusterUpdateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClusterMessage_2eproto();
  return *default_instance_;
}

S2SClusterUpdateReq* S2SClusterUpdateReq::default_instance_ = NULL;

S2SClusterUpdateReq* S2SClusterUpdateReq::New() const {
  return new S2SClusterUpdateReq;
}

void S2SClusterUpdateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gateid_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SClusterUpdateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gateid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SClusterUpdateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gateid = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gateid(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SClusterUpdateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gateid = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gateid(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SClusterUpdateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gateid = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SClusterUpdateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SClusterUpdateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SClusterUpdateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SClusterUpdateReq::MergeFrom(const S2SClusterUpdateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SClusterUpdateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SClusterUpdateReq::CopyFrom(const S2SClusterUpdateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SClusterUpdateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SClusterUpdateReq::Swap(S2SClusterUpdateReq* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SClusterUpdateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SClusterUpdateReq_descriptor_;
  metadata.reflection = S2SClusterUpdateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SClusterAuthReq::kClustertypeFieldNumber;
const int S2SClusterAuthReq::kClusterkeyFieldNumber;
#endif  // !_MSC_VER

S2SClusterAuthReq::S2SClusterAuthReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SClusterAuthReq::InitAsDefaultInstance() {
}

S2SClusterAuthReq::S2SClusterAuthReq(const S2SClusterAuthReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SClusterAuthReq::SharedCtor() {
  _cached_size_ = 0;
  clustertype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clusterkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SClusterAuthReq::~S2SClusterAuthReq() {
  SharedDtor();
}

void S2SClusterAuthReq::SharedDtor() {
  if (clustertype_ != &::google::protobuf::internal::kEmptyString) {
    delete clustertype_;
  }
  if (clusterkey_ != &::google::protobuf::internal::kEmptyString) {
    delete clusterkey_;
  }
  if (this != default_instance_) {
  }
}

void S2SClusterAuthReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SClusterAuthReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SClusterAuthReq_descriptor_;
}

const S2SClusterAuthReq& S2SClusterAuthReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClusterMessage_2eproto();
  return *default_instance_;
}

S2SClusterAuthReq* S2SClusterAuthReq::default_instance_ = NULL;

S2SClusterAuthReq* S2SClusterAuthReq::New() const {
  return new S2SClusterAuthReq;
}

void S2SClusterAuthReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clustertype()) {
      if (clustertype_ != &::google::protobuf::internal::kEmptyString) {
        clustertype_->clear();
      }
    }
    if (has_clusterkey()) {
      if (clusterkey_ != &::google::protobuf::internal::kEmptyString) {
        clusterkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SClusterAuthReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string clustertype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clustertype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clustertype().data(), this->clustertype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clusterkey;
        break;
      }

      // required string clusterkey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clusterkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clusterkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clusterkey().data(), this->clusterkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SClusterAuthReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string clustertype = 1;
  if (has_clustertype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clustertype().data(), this->clustertype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->clustertype(), output);
  }

  // required string clusterkey = 2;
  if (has_clusterkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clusterkey().data(), this->clusterkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->clusterkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SClusterAuthReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string clustertype = 1;
  if (has_clustertype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clustertype().data(), this->clustertype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clustertype(), target);
  }

  // required string clusterkey = 2;
  if (has_clusterkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clusterkey().data(), this->clusterkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clusterkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SClusterAuthReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string clustertype = 1;
    if (has_clustertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clustertype());
    }

    // required string clusterkey = 2;
    if (has_clusterkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clusterkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SClusterAuthReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SClusterAuthReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SClusterAuthReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SClusterAuthReq::MergeFrom(const S2SClusterAuthReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clustertype()) {
      set_clustertype(from.clustertype());
    }
    if (from.has_clusterkey()) {
      set_clusterkey(from.clusterkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SClusterAuthReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SClusterAuthReq::CopyFrom(const S2SClusterAuthReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SClusterAuthReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SClusterAuthReq::Swap(S2SClusterAuthReq* other) {
  if (other != this) {
    std::swap(clustertype_, other->clustertype_);
    std::swap(clusterkey_, other->clusterkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SClusterAuthReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SClusterAuthReq_descriptor_;
  metadata.reflection = S2SClusterAuthReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SClusterAuthAck::kClustertypeFieldNumber;
const int S2SClusterAuthAck::kTokenFieldNumber;
const int S2SClusterAuthAck::kTypeFieldNumber;
const int S2SClusterAuthAck::kIdFieldNumber;
const int S2SClusterAuthAck::kNameFieldNumber;
const int S2SClusterAuthAck::kIpFieldNumber;
const int S2SClusterAuthAck::kPortFieldNumber;
#endif  // !_MSC_VER

S2SClusterAuthAck::S2SClusterAuthAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SClusterAuthAck::InitAsDefaultInstance() {
}

S2SClusterAuthAck::S2SClusterAuthAck(const S2SClusterAuthAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SClusterAuthAck::SharedCtor() {
  _cached_size_ = 0;
  clustertype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SClusterAuthAck::~S2SClusterAuthAck() {
  SharedDtor();
}

void S2SClusterAuthAck::SharedDtor() {
  if (clustertype_ != &::google::protobuf::internal::kEmptyString) {
    delete clustertype_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void S2SClusterAuthAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SClusterAuthAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SClusterAuthAck_descriptor_;
}

const S2SClusterAuthAck& S2SClusterAuthAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClusterMessage_2eproto();
  return *default_instance_;
}

S2SClusterAuthAck* S2SClusterAuthAck::default_instance_ = NULL;

S2SClusterAuthAck* S2SClusterAuthAck::New() const {
  return new S2SClusterAuthAck;
}

void S2SClusterAuthAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clustertype()) {
      if (clustertype_ != &::google::protobuf::internal::kEmptyString) {
        clustertype_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SClusterAuthAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string clustertype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clustertype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clustertype().data(), this->clustertype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // required string type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // required uint32 id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ip;
        break;
      }

      // required string ip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_port;
        break;
      }

      // required uint32 port = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SClusterAuthAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string clustertype = 1;
  if (has_clustertype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clustertype().data(), this->clustertype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->clustertype(), output);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->type(), output);
  }

  // required uint32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->id(), output);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // required string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->ip(), output);
  }

  // required uint32 port = 7;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SClusterAuthAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string clustertype = 1;
  if (has_clustertype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clustertype().data(), this->clustertype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clustertype(), target);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // required uint32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->id(), target);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // required string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ip(), target);
  }

  // required uint32 port = 7;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SClusterAuthAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string clustertype = 1;
    if (has_clustertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clustertype());
    }

    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required uint32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string ip = 6;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required uint32 port = 7;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SClusterAuthAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SClusterAuthAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SClusterAuthAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SClusterAuthAck::MergeFrom(const S2SClusterAuthAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clustertype()) {
      set_clustertype(from.clustertype());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SClusterAuthAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SClusterAuthAck::CopyFrom(const S2SClusterAuthAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SClusterAuthAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void S2SClusterAuthAck::Swap(S2SClusterAuthAck* other) {
  if (other != this) {
    std::swap(clustertype_, other->clustertype_);
    std::swap(token_, other->token_);
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SClusterAuthAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SClusterAuthAck_descriptor_;
  metadata.reflection = S2SClusterAuthAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SClusterTokenReq::kTokenFieldNumber;
const int S2SClusterTokenReq::kGateidFieldNumber;
#endif  // !_MSC_VER

S2SClusterTokenReq::S2SClusterTokenReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SClusterTokenReq::InitAsDefaultInstance() {
}

S2SClusterTokenReq::S2SClusterTokenReq(const S2SClusterTokenReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SClusterTokenReq::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gateid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SClusterTokenReq::~S2SClusterTokenReq() {
  SharedDtor();
}

void S2SClusterTokenReq::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void S2SClusterTokenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SClusterTokenReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SClusterTokenReq_descriptor_;
}

const S2SClusterTokenReq& S2SClusterTokenReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClusterMessage_2eproto();
  return *default_instance_;
}

S2SClusterTokenReq* S2SClusterTokenReq::default_instance_ = NULL;

S2SClusterTokenReq* S2SClusterTokenReq::New() const {
  return new S2SClusterTokenReq;
}

void S2SClusterTokenReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    gateid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SClusterTokenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateid;
        break;
      }

      // required uint32 gateid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SClusterTokenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }

  // required uint32 gateid = 2;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gateid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SClusterTokenReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // required uint32 gateid = 2;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gateid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SClusterTokenReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required uint32 gateid = 2;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SClusterTokenReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SClusterTokenReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SClusterTokenReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SClusterTokenReq::MergeFrom(const S2SClusterTokenReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SClusterTokenReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SClusterTokenReq::CopyFrom(const S2SClusterTokenReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SClusterTokenReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SClusterTokenReq::Swap(S2SClusterTokenReq* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(gateid_, other->gateid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SClusterTokenReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SClusterTokenReq_descriptor_;
  metadata.reflection = S2SClusterTokenReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SClusterVerifyReq::kClustertypeFieldNumber;
const int S2SClusterVerifyReq::kTokenFieldNumber;
const int S2SClusterVerifyReq::kServeridFieldNumber;
#endif  // !_MSC_VER

S2SClusterVerifyReq::S2SClusterVerifyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SClusterVerifyReq::InitAsDefaultInstance() {
}

S2SClusterVerifyReq::S2SClusterVerifyReq(const S2SClusterVerifyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SClusterVerifyReq::SharedCtor() {
  _cached_size_ = 0;
  clustertype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SClusterVerifyReq::~S2SClusterVerifyReq() {
  SharedDtor();
}

void S2SClusterVerifyReq::SharedDtor() {
  if (clustertype_ != &::google::protobuf::internal::kEmptyString) {
    delete clustertype_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void S2SClusterVerifyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SClusterVerifyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SClusterVerifyReq_descriptor_;
}

const S2SClusterVerifyReq& S2SClusterVerifyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClusterMessage_2eproto();
  return *default_instance_;
}

S2SClusterVerifyReq* S2SClusterVerifyReq::default_instance_ = NULL;

S2SClusterVerifyReq* S2SClusterVerifyReq::New() const {
  return new S2SClusterVerifyReq;
}

void S2SClusterVerifyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clustertype()) {
      if (clustertype_ != &::google::protobuf::internal::kEmptyString) {
        clustertype_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SClusterVerifyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string clustertype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clustertype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clustertype().data(), this->clustertype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SClusterVerifyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string clustertype = 1;
  if (has_clustertype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clustertype().data(), this->clustertype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->clustertype(), output);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SClusterVerifyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string clustertype = 1;
  if (has_clustertype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clustertype().data(), this->clustertype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clustertype(), target);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SClusterVerifyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string clustertype = 1;
    if (has_clustertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clustertype());
    }

    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required uint32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SClusterVerifyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SClusterVerifyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SClusterVerifyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SClusterVerifyReq::MergeFrom(const S2SClusterVerifyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clustertype()) {
      set_clustertype(from.clustertype());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SClusterVerifyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SClusterVerifyReq::CopyFrom(const S2SClusterVerifyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SClusterVerifyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SClusterVerifyReq::Swap(S2SClusterVerifyReq* other) {
  if (other != this) {
    std::swap(clustertype_, other->clustertype_);
    std::swap(token_, other->token_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SClusterVerifyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SClusterVerifyReq_descriptor_;
  metadata.reflection = S2SClusterVerifyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SClusterVerifyAck::kClustertypeFieldNumber;
const int S2SClusterVerifyAck::kServeridFieldNumber;
#endif  // !_MSC_VER

S2SClusterVerifyAck::S2SClusterVerifyAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SClusterVerifyAck::InitAsDefaultInstance() {
}

S2SClusterVerifyAck::S2SClusterVerifyAck(const S2SClusterVerifyAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SClusterVerifyAck::SharedCtor() {
  _cached_size_ = 0;
  clustertype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SClusterVerifyAck::~S2SClusterVerifyAck() {
  SharedDtor();
}

void S2SClusterVerifyAck::SharedDtor() {
  if (clustertype_ != &::google::protobuf::internal::kEmptyString) {
    delete clustertype_;
  }
  if (this != default_instance_) {
  }
}

void S2SClusterVerifyAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SClusterVerifyAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SClusterVerifyAck_descriptor_;
}

const S2SClusterVerifyAck& S2SClusterVerifyAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClusterMessage_2eproto();
  return *default_instance_;
}

S2SClusterVerifyAck* S2SClusterVerifyAck::default_instance_ = NULL;

S2SClusterVerifyAck* S2SClusterVerifyAck::New() const {
  return new S2SClusterVerifyAck;
}

void S2SClusterVerifyAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clustertype()) {
      if (clustertype_ != &::google::protobuf::internal::kEmptyString) {
        clustertype_->clear();
      }
    }
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SClusterVerifyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string clustertype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clustertype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clustertype().data(), this->clustertype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SClusterVerifyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string clustertype = 1;
  if (has_clustertype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clustertype().data(), this->clustertype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->clustertype(), output);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SClusterVerifyAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string clustertype = 1;
  if (has_clustertype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clustertype().data(), this->clustertype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clustertype(), target);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SClusterVerifyAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string clustertype = 1;
    if (has_clustertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clustertype());
    }

    // required uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SClusterVerifyAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SClusterVerifyAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SClusterVerifyAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SClusterVerifyAck::MergeFrom(const S2SClusterVerifyAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clustertype()) {
      set_clustertype(from.clustertype());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SClusterVerifyAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SClusterVerifyAck::CopyFrom(const S2SClusterVerifyAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SClusterVerifyAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SClusterVerifyAck::Swap(S2SClusterVerifyAck* other) {
  if (other != this) {
    std::swap(clustertype_, other->clustertype_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SClusterVerifyAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SClusterVerifyAck_descriptor_;
  metadata.reflection = S2SClusterVerifyAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SClusterClientListReq::kClientidFieldNumber;
#endif  // !_MSC_VER

S2SClusterClientListReq::S2SClusterClientListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SClusterClientListReq::InitAsDefaultInstance() {
}

S2SClusterClientListReq::S2SClusterClientListReq(const S2SClusterClientListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SClusterClientListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SClusterClientListReq::~S2SClusterClientListReq() {
  SharedDtor();
}

void S2SClusterClientListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SClusterClientListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SClusterClientListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SClusterClientListReq_descriptor_;
}

const S2SClusterClientListReq& S2SClusterClientListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClusterMessage_2eproto();
  return *default_instance_;
}

S2SClusterClientListReq* S2SClusterClientListReq::default_instance_ = NULL;

S2SClusterClientListReq* S2SClusterClientListReq::New() const {
  return new S2SClusterClientListReq;
}

void S2SClusterClientListReq::Clear() {
  clientid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SClusterClientListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 clientid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_clientid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_clientid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_clientid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SClusterClientListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 clientid = 1;
  for (int i = 0; i < this->clientid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->clientid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SClusterClientListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 clientid = 1;
  for (int i = 0; i < this->clientid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->clientid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SClusterClientListReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 clientid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->clientid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->clientid(i));
    }
    total_size += 1 * this->clientid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SClusterClientListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SClusterClientListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SClusterClientListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SClusterClientListReq::MergeFrom(const S2SClusterClientListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  clientid_.MergeFrom(from.clientid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SClusterClientListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SClusterClientListReq::CopyFrom(const S2SClusterClientListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SClusterClientListReq::IsInitialized() const {

  return true;
}

void S2SClusterClientListReq::Swap(S2SClusterClientListReq* other) {
  if (other != this) {
    clientid_.Swap(&other->clientid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SClusterClientListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SClusterClientListReq_descriptor_;
  metadata.reflection = S2SClusterClientListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SAddObjectToProxyReq::kObjectidFieldNumber;
#endif  // !_MSC_VER

S2SAddObjectToProxyReq::S2SAddObjectToProxyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SAddObjectToProxyReq::InitAsDefaultInstance() {
}

S2SAddObjectToProxyReq::S2SAddObjectToProxyReq(const S2SAddObjectToProxyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SAddObjectToProxyReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SAddObjectToProxyReq::~S2SAddObjectToProxyReq() {
  SharedDtor();
}

void S2SAddObjectToProxyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SAddObjectToProxyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SAddObjectToProxyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SAddObjectToProxyReq_descriptor_;
}

const S2SAddObjectToProxyReq& S2SAddObjectToProxyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClusterMessage_2eproto();
  return *default_instance_;
}

S2SAddObjectToProxyReq* S2SAddObjectToProxyReq::default_instance_ = NULL;

S2SAddObjectToProxyReq* S2SAddObjectToProxyReq::New() const {
  return new S2SAddObjectToProxyReq;
}

void S2SAddObjectToProxyReq::Clear() {
  objectid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SAddObjectToProxyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_objectid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_objectid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_objectid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SAddObjectToProxyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 objectid = 1;
  for (int i = 0; i < this->objectid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->objectid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SAddObjectToProxyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 objectid = 1;
  for (int i = 0; i < this->objectid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->objectid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SAddObjectToProxyReq::ByteSize() const {
  int total_size = 0;

  // repeated uint64 objectid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->objectid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->objectid(i));
    }
    total_size += 1 * this->objectid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SAddObjectToProxyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SAddObjectToProxyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SAddObjectToProxyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SAddObjectToProxyReq::MergeFrom(const S2SAddObjectToProxyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  objectid_.MergeFrom(from.objectid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SAddObjectToProxyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SAddObjectToProxyReq::CopyFrom(const S2SAddObjectToProxyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SAddObjectToProxyReq::IsInitialized() const {

  return true;
}

void S2SAddObjectToProxyReq::Swap(S2SAddObjectToProxyReq* other) {
  if (other != this) {
    objectid_.Swap(&other->objectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SAddObjectToProxyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SAddObjectToProxyReq_descriptor_;
  metadata.reflection = S2SAddObjectToProxyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SRemoveObjectToProxyReq::kObjectidFieldNumber;
#endif  // !_MSC_VER

S2SRemoveObjectToProxyReq::S2SRemoveObjectToProxyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SRemoveObjectToProxyReq::InitAsDefaultInstance() {
}

S2SRemoveObjectToProxyReq::S2SRemoveObjectToProxyReq(const S2SRemoveObjectToProxyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SRemoveObjectToProxyReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SRemoveObjectToProxyReq::~S2SRemoveObjectToProxyReq() {
  SharedDtor();
}

void S2SRemoveObjectToProxyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SRemoveObjectToProxyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SRemoveObjectToProxyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SRemoveObjectToProxyReq_descriptor_;
}

const S2SRemoveObjectToProxyReq& S2SRemoveObjectToProxyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClusterMessage_2eproto();
  return *default_instance_;
}

S2SRemoveObjectToProxyReq* S2SRemoveObjectToProxyReq::default_instance_ = NULL;

S2SRemoveObjectToProxyReq* S2SRemoveObjectToProxyReq::New() const {
  return new S2SRemoveObjectToProxyReq;
}

void S2SRemoveObjectToProxyReq::Clear() {
  objectid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SRemoveObjectToProxyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 objectid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_objectid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_objectid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_objectid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SRemoveObjectToProxyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 objectid = 2;
  for (int i = 0; i < this->objectid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->objectid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SRemoveObjectToProxyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 objectid = 2;
  for (int i = 0; i < this->objectid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->objectid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SRemoveObjectToProxyReq::ByteSize() const {
  int total_size = 0;

  // repeated uint64 objectid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->objectid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->objectid(i));
    }
    total_size += 1 * this->objectid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SRemoveObjectToProxyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SRemoveObjectToProxyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SRemoveObjectToProxyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SRemoveObjectToProxyReq::MergeFrom(const S2SRemoveObjectToProxyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  objectid_.MergeFrom(from.objectid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SRemoveObjectToProxyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SRemoveObjectToProxyReq::CopyFrom(const S2SRemoveObjectToProxyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SRemoveObjectToProxyReq::IsInitialized() const {

  return true;
}

void S2SRemoveObjectToProxyReq::Swap(S2SRemoveObjectToProxyReq* other) {
  if (other != this) {
    objectid_.Swap(&other->objectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SRemoveObjectToProxyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SRemoveObjectToProxyReq_descriptor_;
  metadata.reflection = S2SRemoveObjectToProxyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SAllocObjectToMasterReq::kObjectidFieldNumber;
#endif  // !_MSC_VER

S2SAllocObjectToMasterReq::S2SAllocObjectToMasterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SAllocObjectToMasterReq::InitAsDefaultInstance() {
}

S2SAllocObjectToMasterReq::S2SAllocObjectToMasterReq(const S2SAllocObjectToMasterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SAllocObjectToMasterReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SAllocObjectToMasterReq::~S2SAllocObjectToMasterReq() {
  SharedDtor();
}

void S2SAllocObjectToMasterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SAllocObjectToMasterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SAllocObjectToMasterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SAllocObjectToMasterReq_descriptor_;
}

const S2SAllocObjectToMasterReq& S2SAllocObjectToMasterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClusterMessage_2eproto();
  return *default_instance_;
}

S2SAllocObjectToMasterReq* S2SAllocObjectToMasterReq::default_instance_ = NULL;

S2SAllocObjectToMasterReq* S2SAllocObjectToMasterReq::New() const {
  return new S2SAllocObjectToMasterReq;
}

void S2SAllocObjectToMasterReq::Clear() {
  objectid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SAllocObjectToMasterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_objectid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_objectid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_objectid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SAllocObjectToMasterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 objectid = 1;
  for (int i = 0; i < this->objectid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->objectid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SAllocObjectToMasterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 objectid = 1;
  for (int i = 0; i < this->objectid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->objectid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SAllocObjectToMasterReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 objectid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->objectid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->objectid(i));
    }
    total_size += 1 * this->objectid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SAllocObjectToMasterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SAllocObjectToMasterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SAllocObjectToMasterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SAllocObjectToMasterReq::MergeFrom(const S2SAllocObjectToMasterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  objectid_.MergeFrom(from.objectid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SAllocObjectToMasterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SAllocObjectToMasterReq::CopyFrom(const S2SAllocObjectToMasterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SAllocObjectToMasterReq::IsInitialized() const {

  return true;
}

void S2SAllocObjectToMasterReq::Swap(S2SAllocObjectToMasterReq* other) {
  if (other != this) {
    objectid_.Swap(&other->objectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SAllocObjectToMasterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SAllocObjectToMasterReq_descriptor_;
  metadata.reflection = S2SAllocObjectToMasterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SAllocObjectToProxyAck::kObjectidFieldNumber;
const int S2SAllocObjectToProxyAck::kShardidFieldNumber;
#endif  // !_MSC_VER

S2SAllocObjectToProxyAck::S2SAllocObjectToProxyAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SAllocObjectToProxyAck::InitAsDefaultInstance() {
}

S2SAllocObjectToProxyAck::S2SAllocObjectToProxyAck(const S2SAllocObjectToProxyAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SAllocObjectToProxyAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SAllocObjectToProxyAck::~S2SAllocObjectToProxyAck() {
  SharedDtor();
}

void S2SAllocObjectToProxyAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SAllocObjectToProxyAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SAllocObjectToProxyAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SAllocObjectToProxyAck_descriptor_;
}

const S2SAllocObjectToProxyAck& S2SAllocObjectToProxyAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClusterMessage_2eproto();
  return *default_instance_;
}

S2SAllocObjectToProxyAck* S2SAllocObjectToProxyAck::default_instance_ = NULL;

S2SAllocObjectToProxyAck* S2SAllocObjectToProxyAck::New() const {
  return new S2SAllocObjectToProxyAck;
}

void S2SAllocObjectToProxyAck::Clear() {
  objectid_.Clear();
  shardid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SAllocObjectToProxyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_objectid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_objectid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_objectid;
        if (input->ExpectTag(16)) goto parse_shardid;
        break;
      }

      // repeated uint32 shardid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_shardid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_shardid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shardid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SAllocObjectToProxyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 objectid = 1;
  for (int i = 0; i < this->objectid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->objectid(i), output);
  }

  // repeated uint32 shardid = 2;
  for (int i = 0; i < this->shardid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->shardid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SAllocObjectToProxyAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 objectid = 1;
  for (int i = 0; i < this->objectid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->objectid(i), target);
  }

  // repeated uint32 shardid = 2;
  for (int i = 0; i < this->shardid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->shardid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SAllocObjectToProxyAck::ByteSize() const {
  int total_size = 0;

  // repeated uint32 objectid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->objectid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->objectid(i));
    }
    total_size += 1 * this->objectid_size() + data_size;
  }

  // repeated uint32 shardid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->shardid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->shardid(i));
    }
    total_size += 1 * this->shardid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SAllocObjectToProxyAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SAllocObjectToProxyAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SAllocObjectToProxyAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SAllocObjectToProxyAck::MergeFrom(const S2SAllocObjectToProxyAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  objectid_.MergeFrom(from.objectid_);
  shardid_.MergeFrom(from.shardid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SAllocObjectToProxyAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SAllocObjectToProxyAck::CopyFrom(const S2SAllocObjectToProxyAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SAllocObjectToProxyAck::IsInitialized() const {

  return true;
}

void S2SAllocObjectToProxyAck::Swap(S2SAllocObjectToProxyAck* other) {
  if (other != this) {
    objectid_.Swap(&other->objectid_);
    shardid_.Swap(&other->shardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SAllocObjectToProxyAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SAllocObjectToProxyAck_descriptor_;
  metadata.reflection = S2SAllocObjectToProxyAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SAllocObjectToShardAck::kObjectidFieldNumber;
#endif  // !_MSC_VER

S2SAllocObjectToShardAck::S2SAllocObjectToShardAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SAllocObjectToShardAck::InitAsDefaultInstance() {
}

S2SAllocObjectToShardAck::S2SAllocObjectToShardAck(const S2SAllocObjectToShardAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SAllocObjectToShardAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SAllocObjectToShardAck::~S2SAllocObjectToShardAck() {
  SharedDtor();
}

void S2SAllocObjectToShardAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SAllocObjectToShardAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SAllocObjectToShardAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SAllocObjectToShardAck_descriptor_;
}

const S2SAllocObjectToShardAck& S2SAllocObjectToShardAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClusterMessage_2eproto();
  return *default_instance_;
}

S2SAllocObjectToShardAck* S2SAllocObjectToShardAck::default_instance_ = NULL;

S2SAllocObjectToShardAck* S2SAllocObjectToShardAck::New() const {
  return new S2SAllocObjectToShardAck;
}

void S2SAllocObjectToShardAck::Clear() {
  objectid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SAllocObjectToShardAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_objectid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_objectid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_objectid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SAllocObjectToShardAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 objectid = 1;
  for (int i = 0; i < this->objectid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->objectid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SAllocObjectToShardAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 objectid = 1;
  for (int i = 0; i < this->objectid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->objectid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SAllocObjectToShardAck::ByteSize() const {
  int total_size = 0;

  // repeated uint32 objectid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->objectid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->objectid(i));
    }
    total_size += 1 * this->objectid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SAllocObjectToShardAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SAllocObjectToShardAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SAllocObjectToShardAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SAllocObjectToShardAck::MergeFrom(const S2SAllocObjectToShardAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  objectid_.MergeFrom(from.objectid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SAllocObjectToShardAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SAllocObjectToShardAck::CopyFrom(const S2SAllocObjectToShardAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SAllocObjectToShardAck::IsInitialized() const {

  return true;
}

void S2SAllocObjectToShardAck::Swap(S2SAllocObjectToShardAck* other) {
  if (other != this) {
    objectid_.Swap(&other->objectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SAllocObjectToShardAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SAllocObjectToShardAck_descriptor_;
  metadata.reflection = S2SAllocObjectToShardAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SSendToDynamicObjectReq::kObjectidFieldNumber;
const int S2SSendToDynamicObjectReq::kMsgidFieldNumber;
const int S2SSendToDynamicObjectReq::kMsgdataFieldNumber;
#endif  // !_MSC_VER

S2SSendToDynamicObjectReq::S2SSendToDynamicObjectReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SSendToDynamicObjectReq::InitAsDefaultInstance() {
}

S2SSendToDynamicObjectReq::S2SSendToDynamicObjectReq(const S2SSendToDynamicObjectReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SSendToDynamicObjectReq::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = GOOGLE_ULONGLONG(0);
  msgid_ = 0u;
  msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SSendToDynamicObjectReq::~S2SSendToDynamicObjectReq() {
  SharedDtor();
}

void S2SSendToDynamicObjectReq::SharedDtor() {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    delete msgdata_;
  }
  if (this != default_instance_) {
  }
}

void S2SSendToDynamicObjectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SSendToDynamicObjectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SSendToDynamicObjectReq_descriptor_;
}

const S2SSendToDynamicObjectReq& S2SSendToDynamicObjectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClusterMessage_2eproto();
  return *default_instance_;
}

S2SSendToDynamicObjectReq* S2SSendToDynamicObjectReq::default_instance_ = NULL;

S2SSendToDynamicObjectReq* S2SSendToDynamicObjectReq::New() const {
  return new S2SSendToDynamicObjectReq;
}

void S2SSendToDynamicObjectReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = GOOGLE_ULONGLONG(0);
    msgid_ = 0u;
    if (has_msgdata()) {
      if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
        msgdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SSendToDynamicObjectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgid;
        break;
      }

      // required uint32 msgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msgdata;
        break;
      }

      // required string msgdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgdata().data(), this->msgdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SSendToDynamicObjectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->objectid(), output);
  }

  // required uint32 msgid = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgid(), output);
  }

  // required string msgdata = 3;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgdata().data(), this->msgdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msgdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SSendToDynamicObjectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 objectid = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->objectid(), target);
  }

  // required uint32 msgid = 2;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgid(), target);
  }

  // required string msgdata = 3;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgdata().data(), this->msgdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msgdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SSendToDynamicObjectReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 objectid = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->objectid());
    }

    // required uint32 msgid = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // required string msgdata = 3;
    if (has_msgdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SSendToDynamicObjectReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SSendToDynamicObjectReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SSendToDynamicObjectReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SSendToDynamicObjectReq::MergeFrom(const S2SSendToDynamicObjectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_msgdata()) {
      set_msgdata(from.msgdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SSendToDynamicObjectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SSendToDynamicObjectReq::CopyFrom(const S2SSendToDynamicObjectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SSendToDynamicObjectReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SSendToDynamicObjectReq::Swap(S2SSendToDynamicObjectReq* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(msgid_, other->msgid_);
    std::swap(msgdata_, other->msgdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SSendToDynamicObjectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SSendToDynamicObjectReq_descriptor_;
  metadata.reflection = S2SSendToDynamicObjectReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SSendToStaticObjectReq::kObjectidFieldNumber;
const int S2SSendToStaticObjectReq::kMsgidFieldNumber;
const int S2SSendToStaticObjectReq::kMsgdataFieldNumber;
#endif  // !_MSC_VER

S2SSendToStaticObjectReq::S2SSendToStaticObjectReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SSendToStaticObjectReq::InitAsDefaultInstance() {
}

S2SSendToStaticObjectReq::S2SSendToStaticObjectReq(const S2SSendToStaticObjectReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SSendToStaticObjectReq::SharedCtor() {
  _cached_size_ = 0;
  objectid_ = 0u;
  msgid_ = 0u;
  msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SSendToStaticObjectReq::~S2SSendToStaticObjectReq() {
  SharedDtor();
}

void S2SSendToStaticObjectReq::SharedDtor() {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    delete msgdata_;
  }
  if (this != default_instance_) {
  }
}

void S2SSendToStaticObjectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SSendToStaticObjectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SSendToStaticObjectReq_descriptor_;
}

const S2SSendToStaticObjectReq& S2SSendToStaticObjectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClusterMessage_2eproto();
  return *default_instance_;
}

S2SSendToStaticObjectReq* S2SSendToStaticObjectReq::default_instance_ = NULL;

S2SSendToStaticObjectReq* S2SSendToStaticObjectReq::New() const {
  return new S2SSendToStaticObjectReq;
}

void S2SSendToStaticObjectReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objectid_ = 0u;
    msgid_ = 0u;
    if (has_msgdata()) {
      if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
        msgdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SSendToStaticObjectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 objectid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objectid_)));
          set_has_objectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgid;
        break;
      }

      // required uint32 msgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msgdata;
        break;
      }

      // required string msgdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgdata().data(), this->msgdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SSendToStaticObjectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 objectid = 1;
  if (has_objectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->objectid(), output);
  }

  // required uint32 msgid = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgid(), output);
  }

  // required string msgdata = 3;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgdata().data(), this->msgdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msgdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SSendToStaticObjectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 objectid = 1;
  if (has_objectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->objectid(), target);
  }

  // required uint32 msgid = 2;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgid(), target);
  }

  // required string msgdata = 3;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgdata().data(), this->msgdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msgdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SSendToStaticObjectReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 objectid = 1;
    if (has_objectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->objectid());
    }

    // required uint32 msgid = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // required string msgdata = 3;
    if (has_msgdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SSendToStaticObjectReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SSendToStaticObjectReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SSendToStaticObjectReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SSendToStaticObjectReq::MergeFrom(const S2SSendToStaticObjectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectid()) {
      set_objectid(from.objectid());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_msgdata()) {
      set_msgdata(from.msgdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SSendToStaticObjectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SSendToStaticObjectReq::CopyFrom(const S2SSendToStaticObjectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SSendToStaticObjectReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SSendToStaticObjectReq::Swap(S2SSendToStaticObjectReq* other) {
  if (other != this) {
    std::swap(objectid_, other->objectid_);
    std::swap(msgid_, other->msgid_);
    std::swap(msgdata_, other->msgdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SSendToStaticObjectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SSendToStaticObjectReq_descriptor_;
  metadata.reflection = S2SSendToStaticObjectReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

// @@protoc_insertion_point(global_scope)
