// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFServerMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "KFServerMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KFMsg {

namespace {

const ::google::protobuf::Descriptor* S2STransmitMessageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2STransmitMessageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SBroadcastMessageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SBroadcastMessageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SBroadcastToWord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SBroadcastToWord_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SBroadcastToGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SBroadcastToGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SBroadcastToGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SBroadcastToGate_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2STransmitToPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2STransmitToPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2STransmitToServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2STransmitToServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SUpdateZoneToProxyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SUpdateZoneToProxyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2STransmitToDataShardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2STransmitToDataShardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SSavePlayerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SSavePlayerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SDeletePlayerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SDeletePlayerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SUpdatePublicDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SUpdatePublicDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SKickGamePlayerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SKickGamePlayerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SKickGatePlayerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SKickGatePlayerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SLoginLoginVerifyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SLoginLoginVerifyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SLoginLoginVerifyAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SLoginLoginVerifyAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBLoginData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBLoginData_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SLoginWorldVerifyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SLoginWorldVerifyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SLoginFailedToLoginAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SLoginFailedToLoginAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SLoginTellTokenToGameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SLoginTellTokenToGameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SLoginGameAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SLoginGameAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SLoginLoadPlayerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SLoginLoadPlayerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SLoginLoadPlayerAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SLoginLoadPlayerAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SLoginOutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SLoginOutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SPlayerDisconnectionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SPlayerDisconnectionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SSetPlayerNameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SSetPlayerNameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SSetPlayerNameAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SSetPlayerNameAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SCreateRoleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SCreateRoleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SCreateRoleAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SCreateRoleAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SPlayerEnterWorldReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SPlayerEnterWorldReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SPlayerLeaveWorldReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SPlayerLeaveWorldReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SGameSyncOnlineReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SGameSyncOnlineReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SQueryMailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SQueryMailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMails_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SQueryMailAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SQueryMailAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SDeleteMailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SDeleteMailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SAddMailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SAddMailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SNoticeNewMailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SNoticeNewMailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRelation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRelation_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SQueryFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SQueryFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SQueryFriendInviteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SQueryFriendInviteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SQueryFriendAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SQueryFriendAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SQueryFriendInviteAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SQueryFriendInviteAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SAddFriendInviteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SAddFriendInviteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SAddFriendInviteAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SAddFriendInviteAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SDelFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SDelFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SDelFriendAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SDelFriendAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SDelFriendInviteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SDelFriendInviteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SAddFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SAddFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SAddFriendAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SAddFriendAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SUpdateFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SUpdateFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SUpdateFriendLinessReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SUpdateFriendLinessReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SQueryBasicReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SQueryBasicReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SQueryBasicAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SQueryBasicAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SQueryPlayerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SQueryPlayerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SQueryPlayerAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SQueryPlayerAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SUpdateMailFlagReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SUpdateMailFlagReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SUpdateMailFlagAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SUpdateMailFlagAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SPlayerToastReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SPlayerToastReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SPlayerToastAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SPlayerToastAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SQueryToastCountReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SQueryToastCountReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SUpdateFriendLinessAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SUpdateFriendLinessAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SCreateMatchGroupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SCreateMatchGroupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SUpdateGroupMatchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SUpdateGroupMatchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SCreateMatchGroupToShardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SCreateMatchGroupToShardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SReceiveInviteMatchGroupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SReceiveInviteMatchGroupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SConsentInviteMatchGroupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SConsentInviteMatchGroupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SAddMatchGroupMemberReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SAddMatchGroupMemberReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SAddMatchGroupMemberAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SAddMatchGroupMemberAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2STellMatchGroupDataAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2STellMatchGroupDataAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SRemoveMatchGroupMemberAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SRemoveMatchGroupMemberAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SLeaveMatchGroupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SLeaveMatchGroupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SKickMatchGroupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SKickMatchGroupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SLeaveMatchGroupAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SLeaveMatchGroupAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SApplyMatchGroupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SApplyMatchGroupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SApplyMatchGroupAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SApplyMatchGroupAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SConsentApplyMatchGroupAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SConsentApplyMatchGroupAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SOnLineQueryMatchGroupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SOnLineQueryMatchGroupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SOffLineUpdateMatchGroupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SOffLineUpdateMatchGroupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SUpdateGroupMemberReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SUpdateGroupMemberReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SUpdateGroupMemberAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SUpdateGroupMemberAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SUpdateGroupDataAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SUpdateGroupDataAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SUpdateGuestListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SUpdateGuestListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SQueryGuestReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SQueryGuestReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SQueryGuestAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SQueryGuestAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SNewPlayerLoginMailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SNewPlayerLoginMailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SUpdateRankDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SUpdateRankDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SQueryRankListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SQueryRankListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SQueryFriendRankListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SQueryFriendRankListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SAddRecentPlayerDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SAddRecentPlayerDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SQueryRecentListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SQueryRecentListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SQueryRecentListAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SQueryRecentListAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SCreateGuidReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SCreateGuidReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SCreateGuildToShardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SCreateGuildToShardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SCreateGuildAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SCreateGuildAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SUpdateMemberBasicDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SUpdateMemberBasicDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SInviteGuildReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SInviteGuildReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SInviteGuildAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SInviteGuildAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SApplyGuildReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SApplyGuildReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SApplyGuildAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SApplyGuildAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SPlayerGuildChangeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SPlayerGuildChangeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SExitGuildReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SExitGuildReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2STransferMasterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2STransferMasterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SReviewApplyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SReviewApplyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SDissolveGuildReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SDissolveGuildReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SModifyMedalReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SModifyMedalReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SQueryGuildListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SQueryGuildListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SKickMemberReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SKickMemberReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SLoginQueryGuildReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SLoginQueryGuildReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SLoginQueryGuildAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SLoginQueryGuildAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SUpdateGuildDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SUpdateGuildDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SUpgradeGuildReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SUpgradeGuildReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SUpgradeGuildAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SUpgradeGuildAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SAppointGuildMemberReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SAppointGuildMemberReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SSearchGuildByNameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SSearchGuildByNameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SSetGuildSwitchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SSetGuildSwitchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SLoginQueryGuildidReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SLoginQueryGuildidReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SLoginQueryGuildidAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SLoginQueryGuildidAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SQueryGuildLogReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SQueryGuildLogReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SAddGuildActivenessReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SAddGuildActivenessReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SGMAddMailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SGMAddMailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SSendChatToServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SSendChatToServer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerProtocol_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_KFServerMessage_2eproto() {
  protobuf_AddDesc_KFServerMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "KFServerMessage.proto");
  GOOGLE_CHECK(file != NULL);
  S2STransmitMessageReq_descriptor_ = file->message_type(0);
  static const int S2STransmitMessageReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitMessageReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitMessageReq, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitMessageReq, msgdata_),
  };
  S2STransmitMessageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2STransmitMessageReq_descriptor_,
      S2STransmitMessageReq::default_instance_,
      S2STransmitMessageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitMessageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitMessageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2STransmitMessageReq));
  S2SBroadcastMessageReq_descriptor_ = file->message_type(1);
  static const int S2SBroadcastMessageReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBroadcastMessageReq, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBroadcastMessageReq, msgdata_),
  };
  S2SBroadcastMessageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SBroadcastMessageReq_descriptor_,
      S2SBroadcastMessageReq::default_instance_,
      S2SBroadcastMessageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBroadcastMessageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBroadcastMessageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SBroadcastMessageReq));
  S2SBroadcastToWord_descriptor_ = file->message_type(2);
  static const int S2SBroadcastToWord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBroadcastToWord, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBroadcastToWord, msgdata_),
  };
  S2SBroadcastToWord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SBroadcastToWord_descriptor_,
      S2SBroadcastToWord::default_instance_,
      S2SBroadcastToWord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBroadcastToWord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBroadcastToWord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SBroadcastToWord));
  S2SBroadcastToGame_descriptor_ = file->message_type(3);
  static const int S2SBroadcastToGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBroadcastToGame, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBroadcastToGame, msgdata_),
  };
  S2SBroadcastToGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SBroadcastToGame_descriptor_,
      S2SBroadcastToGame::default_instance_,
      S2SBroadcastToGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBroadcastToGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBroadcastToGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SBroadcastToGame));
  S2SBroadcastToGate_descriptor_ = file->message_type(4);
  static const int S2SBroadcastToGate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBroadcastToGate, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBroadcastToGate, msgdata_),
  };
  S2SBroadcastToGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SBroadcastToGate_descriptor_,
      S2SBroadcastToGate::default_instance_,
      S2SBroadcastToGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBroadcastToGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBroadcastToGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SBroadcastToGate));
  S2STransmitToPlayer_descriptor_ = file->message_type(5);
  static const int S2STransmitToPlayer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitToPlayer, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitToPlayer, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitToPlayer, msgdata_),
  };
  S2STransmitToPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2STransmitToPlayer_descriptor_,
      S2STransmitToPlayer::default_instance_,
      S2STransmitToPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitToPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitToPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2STransmitToPlayer));
  S2STransmitToServer_descriptor_ = file->message_type(6);
  static const int S2STransmitToServer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitToServer, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitToServer, msgdata_),
  };
  S2STransmitToServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2STransmitToServer_descriptor_,
      S2STransmitToServer::default_instance_,
      S2STransmitToServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitToServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitToServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2STransmitToServer));
  S2SUpdateZoneToProxyReq_descriptor_ = file->message_type(7);
  static const int S2SUpdateZoneToProxyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateZoneToProxyReq, zoneid_),
  };
  S2SUpdateZoneToProxyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SUpdateZoneToProxyReq_descriptor_,
      S2SUpdateZoneToProxyReq::default_instance_,
      S2SUpdateZoneToProxyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateZoneToProxyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateZoneToProxyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SUpdateZoneToProxyReq));
  S2STransmitToDataShardReq_descriptor_ = file->message_type(8);
  static const int S2STransmitToDataShardReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitToDataShardReq, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitToDataShardReq, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitToDataShardReq, msgdata_),
  };
  S2STransmitToDataShardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2STransmitToDataShardReq_descriptor_,
      S2STransmitToDataShardReq::default_instance_,
      S2STransmitToDataShardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitToDataShardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitToDataShardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2STransmitToDataShardReq));
  S2SSavePlayerReq_descriptor_ = file->message_type(9);
  static const int S2SSavePlayerReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSavePlayerReq, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSavePlayerReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSavePlayerReq, data_),
  };
  S2SSavePlayerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SSavePlayerReq_descriptor_,
      S2SSavePlayerReq::default_instance_,
      S2SSavePlayerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSavePlayerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSavePlayerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SSavePlayerReq));
  S2SDeletePlayerReq_descriptor_ = file->message_type(10);
  static const int S2SDeletePlayerReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDeletePlayerReq, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDeletePlayerReq, id_),
  };
  S2SDeletePlayerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SDeletePlayerReq_descriptor_,
      S2SDeletePlayerReq::default_instance_,
      S2SDeletePlayerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDeletePlayerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDeletePlayerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SDeletePlayerReq));
  S2SUpdatePublicDataReq_descriptor_ = file->message_type(11);
  static const int S2SUpdatePublicDataReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdatePublicDataReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdatePublicDataReq, pbdata_),
  };
  S2SUpdatePublicDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SUpdatePublicDataReq_descriptor_,
      S2SUpdatePublicDataReq::default_instance_,
      S2SUpdatePublicDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdatePublicDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdatePublicDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SUpdatePublicDataReq));
  S2SKickGamePlayerReq_descriptor_ = file->message_type(12);
  static const int S2SKickGamePlayerReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SKickGamePlayerReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SKickGamePlayerReq, type_),
  };
  S2SKickGamePlayerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SKickGamePlayerReq_descriptor_,
      S2SKickGamePlayerReq::default_instance_,
      S2SKickGamePlayerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SKickGamePlayerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SKickGamePlayerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SKickGamePlayerReq));
  S2SKickGatePlayerReq_descriptor_ = file->message_type(13);
  static const int S2SKickGatePlayerReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SKickGatePlayerReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SKickGatePlayerReq, type_),
  };
  S2SKickGatePlayerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SKickGatePlayerReq_descriptor_,
      S2SKickGatePlayerReq::default_instance_,
      S2SKickGatePlayerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SKickGatePlayerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SKickGatePlayerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SKickGatePlayerReq));
  S2SLoginLoginVerifyReq_descriptor_ = file->message_type(14);
  static const int S2SLoginLoginVerifyReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginLoginVerifyReq, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginLoginVerifyReq, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginLoginVerifyReq, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginLoginVerifyReq, sessionid_),
  };
  S2SLoginLoginVerifyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SLoginLoginVerifyReq_descriptor_,
      S2SLoginLoginVerifyReq::default_instance_,
      S2SLoginLoginVerifyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginLoginVerifyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginLoginVerifyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SLoginLoginVerifyReq));
  S2SLoginLoginVerifyAck_descriptor_ = file->message_type(15);
  static const int S2SLoginLoginVerifyAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginLoginVerifyAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginLoginVerifyAck, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginLoginVerifyAck, sessionid_),
  };
  S2SLoginLoginVerifyAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SLoginLoginVerifyAck_descriptor_,
      S2SLoginLoginVerifyAck::default_instance_,
      S2SLoginLoginVerifyAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginLoginVerifyAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginLoginVerifyAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SLoginLoginVerifyAck));
  PBLoginData_descriptor_ = file->message_type(16);
  static const int PBLoginData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginData, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginData, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginData, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginData, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginData, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginData, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginData, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginData, channeldata_),
  };
  PBLoginData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBLoginData_descriptor_,
      PBLoginData::default_instance_,
      PBLoginData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBLoginData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBLoginData));
  S2SLoginWorldVerifyReq_descriptor_ = file->message_type(17);
  static const int S2SLoginWorldVerifyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginWorldVerifyReq, pblogin_),
  };
  S2SLoginWorldVerifyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SLoginWorldVerifyReq_descriptor_,
      S2SLoginWorldVerifyReq::default_instance_,
      S2SLoginWorldVerifyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginWorldVerifyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginWorldVerifyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SLoginWorldVerifyReq));
  S2SLoginFailedToLoginAck_descriptor_ = file->message_type(18);
  static const int S2SLoginFailedToLoginAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginFailedToLoginAck, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginFailedToLoginAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginFailedToLoginAck, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginFailedToLoginAck, sessionid_),
  };
  S2SLoginFailedToLoginAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SLoginFailedToLoginAck_descriptor_,
      S2SLoginFailedToLoginAck::default_instance_,
      S2SLoginFailedToLoginAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginFailedToLoginAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginFailedToLoginAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SLoginFailedToLoginAck));
  S2SLoginTellTokenToGameReq_descriptor_ = file->message_type(19);
  static const int S2SLoginTellTokenToGameReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginTellTokenToGameReq, pblogin_),
  };
  S2SLoginTellTokenToGameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SLoginTellTokenToGameReq_descriptor_,
      S2SLoginTellTokenToGameReq::default_instance_,
      S2SLoginTellTokenToGameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginTellTokenToGameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginTellTokenToGameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SLoginTellTokenToGameReq));
  S2SLoginGameAck_descriptor_ = file->message_type(20);
  static const int S2SLoginGameAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginGameAck, pblogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginGameAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginGameAck, servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginGameAck, playerdata_),
  };
  S2SLoginGameAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SLoginGameAck_descriptor_,
      S2SLoginGameAck::default_instance_,
      S2SLoginGameAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginGameAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginGameAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SLoginGameAck));
  S2SLoginLoadPlayerReq_descriptor_ = file->message_type(21);
  static const int S2SLoginLoadPlayerReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginLoadPlayerReq, pblogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginLoadPlayerReq, zoneid_),
  };
  S2SLoginLoadPlayerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SLoginLoadPlayerReq_descriptor_,
      S2SLoginLoadPlayerReq::default_instance_,
      S2SLoginLoadPlayerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginLoadPlayerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginLoadPlayerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SLoginLoadPlayerReq));
  S2SLoginLoadPlayerAck_descriptor_ = file->message_type(22);
  static const int S2SLoginLoadPlayerAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginLoadPlayerAck, pblogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginLoadPlayerAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginLoadPlayerAck, playerdata_),
  };
  S2SLoginLoadPlayerAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SLoginLoadPlayerAck_descriptor_,
      S2SLoginLoadPlayerAck::default_instance_,
      S2SLoginLoadPlayerAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginLoadPlayerAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginLoadPlayerAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SLoginLoadPlayerAck));
  S2SLoginOutReq_descriptor_ = file->message_type(23);
  static const int S2SLoginOutReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginOutReq, playerid_),
  };
  S2SLoginOutReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SLoginOutReq_descriptor_,
      S2SLoginOutReq::default_instance_,
      S2SLoginOutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginOutReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginOutReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SLoginOutReq));
  S2SPlayerDisconnectionReq_descriptor_ = file->message_type(24);
  static const int S2SPlayerDisconnectionReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerDisconnectionReq, playerid_),
  };
  S2SPlayerDisconnectionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SPlayerDisconnectionReq_descriptor_,
      S2SPlayerDisconnectionReq::default_instance_,
      S2SPlayerDisconnectionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerDisconnectionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerDisconnectionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SPlayerDisconnectionReq));
  S2SSetPlayerNameReq_descriptor_ = file->message_type(25);
  static const int S2SSetPlayerNameReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSetPlayerNameReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSetPlayerNameReq, oldname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSetPlayerNameReq, newname_),
  };
  S2SSetPlayerNameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SSetPlayerNameReq_descriptor_,
      S2SSetPlayerNameReq::default_instance_,
      S2SSetPlayerNameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSetPlayerNameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSetPlayerNameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SSetPlayerNameReq));
  S2SSetPlayerNameAck_descriptor_ = file->message_type(26);
  static const int S2SSetPlayerNameAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSetPlayerNameAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSetPlayerNameAck, oldname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSetPlayerNameAck, newname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSetPlayerNameAck, result_),
  };
  S2SSetPlayerNameAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SSetPlayerNameAck_descriptor_,
      S2SSetPlayerNameAck::default_instance_,
      S2SSetPlayerNameAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSetPlayerNameAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSetPlayerNameAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SSetPlayerNameAck));
  S2SCreateRoleReq_descriptor_ = file->message_type(27);
  static const int S2SCreateRoleReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoleReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoleReq, newname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoleReq, modleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoleReq, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoleReq, inviterid_),
  };
  S2SCreateRoleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SCreateRoleReq_descriptor_,
      S2SCreateRoleReq::default_instance_,
      S2SCreateRoleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SCreateRoleReq));
  S2SCreateRoleAck_descriptor_ = file->message_type(28);
  static const int S2SCreateRoleAck_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoleAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoleAck, newname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoleAck, modleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoleAck, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoleAck, inviterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoleAck, result_),
  };
  S2SCreateRoleAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SCreateRoleAck_descriptor_,
      S2SCreateRoleAck::default_instance_,
      S2SCreateRoleAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoleAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoleAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SCreateRoleAck));
  S2SPlayerEnterWorldReq_descriptor_ = file->message_type(29);
  static const int S2SPlayerEnterWorldReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerEnterWorldReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerEnterWorldReq, accountid_),
  };
  S2SPlayerEnterWorldReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SPlayerEnterWorldReq_descriptor_,
      S2SPlayerEnterWorldReq::default_instance_,
      S2SPlayerEnterWorldReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerEnterWorldReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerEnterWorldReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SPlayerEnterWorldReq));
  S2SPlayerLeaveWorldReq_descriptor_ = file->message_type(30);
  static const int S2SPlayerLeaveWorldReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveWorldReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveWorldReq, accountid_),
  };
  S2SPlayerLeaveWorldReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SPlayerLeaveWorldReq_descriptor_,
      S2SPlayerLeaveWorldReq::default_instance_,
      S2SPlayerLeaveWorldReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveWorldReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveWorldReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SPlayerLeaveWorldReq));
  S2SGameSyncOnlineReq_descriptor_ = file->message_type(31);
  static const int S2SGameSyncOnlineReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGameSyncOnlineReq, playerid_),
  };
  S2SGameSyncOnlineReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SGameSyncOnlineReq_descriptor_,
      S2SGameSyncOnlineReq::default_instance_,
      S2SGameSyncOnlineReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGameSyncOnlineReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGameSyncOnlineReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SGameSyncOnlineReq));
  S2SQueryMailReq_descriptor_ = file->message_type(32);
  static const int S2SQueryMailReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryMailReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryMailReq, mailtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryMailReq, maxmailid_),
  };
  S2SQueryMailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SQueryMailReq_descriptor_,
      S2SQueryMailReq::default_instance_,
      S2SQueryMailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryMailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryMailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SQueryMailReq));
  PBMail_descriptor_ = file->message_type(33);
  static const int PBMail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, data_),
  };
  PBMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMail_descriptor_,
      PBMail::default_instance_,
      PBMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMail));
  PBMails_descriptor_ = file->message_type(34);
  static const int PBMails_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMails, mail_),
  };
  PBMails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMails_descriptor_,
      PBMails::default_instance_,
      PBMails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMails));
  S2SQueryMailAck_descriptor_ = file->message_type(35);
  static const int S2SQueryMailAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryMailAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryMailAck, mails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryMailAck, mailtype_),
  };
  S2SQueryMailAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SQueryMailAck_descriptor_,
      S2SQueryMailAck::default_instance_,
      S2SQueryMailAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryMailAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryMailAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SQueryMailAck));
  S2SDeleteMailReq_descriptor_ = file->message_type(36);
  static const int S2SDeleteMailReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDeleteMailReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDeleteMailReq, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDeleteMailReq, mailtype_),
  };
  S2SDeleteMailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SDeleteMailReq_descriptor_,
      S2SDeleteMailReq::default_instance_,
      S2SDeleteMailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDeleteMailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDeleteMailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SDeleteMailReq));
  S2SAddMailReq_descriptor_ = file->message_type(37);
  static const int S2SAddMailReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddMailReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddMailReq, mailtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddMailReq, pbmail_),
  };
  S2SAddMailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SAddMailReq_descriptor_,
      S2SAddMailReq::default_instance_,
      S2SAddMailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddMailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddMailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SAddMailReq));
  S2SNoticeNewMailReq_descriptor_ = file->message_type(38);
  static const int S2SNoticeNewMailReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNoticeNewMailReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNoticeNewMailReq, mailtype_),
  };
  S2SNoticeNewMailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SNoticeNewMailReq_descriptor_,
      S2SNoticeNewMailReq::default_instance_,
      S2SNoticeNewMailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNoticeNewMailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNoticeNewMailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SNoticeNewMailReq));
  PBRelation_descriptor_ = file->message_type(39);
  static const int PBRelation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRelation, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRelation, playerdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRelation, relationdata_),
  };
  PBRelation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRelation_descriptor_,
      PBRelation::default_instance_,
      PBRelation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRelation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRelation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRelation));
  S2SQueryFriendReq_descriptor_ = file->message_type(40);
  static const int S2SQueryFriendReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryFriendReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryFriendReq, serverid_),
  };
  S2SQueryFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SQueryFriendReq_descriptor_,
      S2SQueryFriendReq::default_instance_,
      S2SQueryFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SQueryFriendReq));
  S2SQueryFriendInviteReq_descriptor_ = file->message_type(41);
  static const int S2SQueryFriendInviteReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryFriendInviteReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryFriendInviteReq, serverid_),
  };
  S2SQueryFriendInviteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SQueryFriendInviteReq_descriptor_,
      S2SQueryFriendInviteReq::default_instance_,
      S2SQueryFriendInviteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryFriendInviteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryFriendInviteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SQueryFriendInviteReq));
  S2SQueryFriendAck_descriptor_ = file->message_type(42);
  static const int S2SQueryFriendAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryFriendAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryFriendAck, pbfriend_),
  };
  S2SQueryFriendAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SQueryFriendAck_descriptor_,
      S2SQueryFriendAck::default_instance_,
      S2SQueryFriendAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryFriendAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryFriendAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SQueryFriendAck));
  S2SQueryFriendInviteAck_descriptor_ = file->message_type(43);
  static const int S2SQueryFriendInviteAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryFriendInviteAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryFriendInviteAck, pbfriend_),
  };
  S2SQueryFriendInviteAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SQueryFriendInviteAck_descriptor_,
      S2SQueryFriendInviteAck::default_instance_,
      S2SQueryFriendInviteAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryFriendInviteAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryFriendInviteAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SQueryFriendInviteAck));
  S2SAddFriendInviteReq_descriptor_ = file->message_type(44);
  static const int S2SAddFriendInviteReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddFriendInviteReq, selfplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddFriendInviteReq, targetplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddFriendInviteReq, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddFriendInviteReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddFriendInviteReq, targetname_),
  };
  S2SAddFriendInviteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SAddFriendInviteReq_descriptor_,
      S2SAddFriendInviteReq::default_instance_,
      S2SAddFriendInviteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddFriendInviteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddFriendInviteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SAddFriendInviteReq));
  S2SAddFriendInviteAck_descriptor_ = file->message_type(45);
  static const int S2SAddFriendInviteAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddFriendInviteAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddFriendInviteAck, pbfriend_),
  };
  S2SAddFriendInviteAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SAddFriendInviteAck_descriptor_,
      S2SAddFriendInviteAck::default_instance_,
      S2SAddFriendInviteAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddFriendInviteAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddFriendInviteAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SAddFriendInviteAck));
  S2SDelFriendReq_descriptor_ = file->message_type(46);
  static const int S2SDelFriendReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDelFriendReq, selfplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDelFriendReq, targetplayerid_),
  };
  S2SDelFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SDelFriendReq_descriptor_,
      S2SDelFriendReq::default_instance_,
      S2SDelFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDelFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDelFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SDelFriendReq));
  S2SDelFriendAck_descriptor_ = file->message_type(47);
  static const int S2SDelFriendAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDelFriendAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDelFriendAck, targetplayerid_),
  };
  S2SDelFriendAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SDelFriendAck_descriptor_,
      S2SDelFriendAck::default_instance_,
      S2SDelFriendAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDelFriendAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDelFriendAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SDelFriendAck));
  S2SDelFriendInviteReq_descriptor_ = file->message_type(48);
  static const int S2SDelFriendInviteReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDelFriendInviteReq, selfplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDelFriendInviteReq, targetplayerid_),
  };
  S2SDelFriendInviteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SDelFriendInviteReq_descriptor_,
      S2SDelFriendInviteReq::default_instance_,
      S2SDelFriendInviteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDelFriendInviteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDelFriendInviteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SDelFriendInviteReq));
  S2SAddFriendReq_descriptor_ = file->message_type(49);
  static const int S2SAddFriendReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddFriendReq, selfplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddFriendReq, targetplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddFriendReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddFriendReq, targetname_),
  };
  S2SAddFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SAddFriendReq_descriptor_,
      S2SAddFriendReq::default_instance_,
      S2SAddFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SAddFriendReq));
  S2SAddFriendAck_descriptor_ = file->message_type(50);
  static const int S2SAddFriendAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddFriendAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddFriendAck, pbfriend_),
  };
  S2SAddFriendAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SAddFriendAck_descriptor_,
      S2SAddFriendAck::default_instance_,
      S2SAddFriendAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddFriendAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddFriendAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SAddFriendAck));
  S2SUpdateFriendReq_descriptor_ = file->message_type(51);
  static const int S2SUpdateFriendReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateFriendReq, friendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateFriendReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateFriendReq, pbdata_),
  };
  S2SUpdateFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SUpdateFriendReq_descriptor_,
      S2SUpdateFriendReq::default_instance_,
      S2SUpdateFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SUpdateFriendReq));
  S2SUpdateFriendLinessReq_descriptor_ = file->message_type(52);
  static const int S2SUpdateFriendLinessReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateFriendLinessReq, selfplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateFriendLinessReq, targetplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateFriendLinessReq, friendliness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateFriendLinessReq, type_),
  };
  S2SUpdateFriendLinessReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SUpdateFriendLinessReq_descriptor_,
      S2SUpdateFriendLinessReq::default_instance_,
      S2SUpdateFriendLinessReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateFriendLinessReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateFriendLinessReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SUpdateFriendLinessReq));
  S2SQueryBasicReq_descriptor_ = file->message_type(53);
  static const int S2SQueryBasicReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryBasicReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryBasicReq, name_),
  };
  S2SQueryBasicReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SQueryBasicReq_descriptor_,
      S2SQueryBasicReq::default_instance_,
      S2SQueryBasicReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryBasicReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryBasicReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SQueryBasicReq));
  S2SQueryBasicAck_descriptor_ = file->message_type(54);
  static const int S2SQueryBasicAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryBasicAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryBasicAck, pbobject_),
  };
  S2SQueryBasicAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SQueryBasicAck_descriptor_,
      S2SQueryBasicAck::default_instance_,
      S2SQueryBasicAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryBasicAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryBasicAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SQueryBasicAck));
  S2SQueryPlayerReq_descriptor_ = file->message_type(55);
  static const int S2SQueryPlayerReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryPlayerReq, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryPlayerReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryPlayerReq, queryid_),
  };
  S2SQueryPlayerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SQueryPlayerReq_descriptor_,
      S2SQueryPlayerReq::default_instance_,
      S2SQueryPlayerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryPlayerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryPlayerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SQueryPlayerReq));
  S2SQueryPlayerAck_descriptor_ = file->message_type(56);
  static const int S2SQueryPlayerAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryPlayerAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryPlayerAck, pbobject_),
  };
  S2SQueryPlayerAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SQueryPlayerAck_descriptor_,
      S2SQueryPlayerAck::default_instance_,
      S2SQueryPlayerAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryPlayerAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryPlayerAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SQueryPlayerAck));
  S2SUpdateMailFlagReq_descriptor_ = file->message_type(57);
  static const int S2SUpdateMailFlagReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateMailFlagReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateMailFlagReq, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateMailFlagReq, mailtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateMailFlagReq, flag_),
  };
  S2SUpdateMailFlagReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SUpdateMailFlagReq_descriptor_,
      S2SUpdateMailFlagReq::default_instance_,
      S2SUpdateMailFlagReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateMailFlagReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateMailFlagReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SUpdateMailFlagReq));
  S2SUpdateMailFlagAck_descriptor_ = file->message_type(58);
  static const int S2SUpdateMailFlagAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateMailFlagAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateMailFlagAck, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateMailFlagAck, mailtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateMailFlagAck, flag_),
  };
  S2SUpdateMailFlagAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SUpdateMailFlagAck_descriptor_,
      S2SUpdateMailFlagAck::default_instance_,
      S2SUpdateMailFlagAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateMailFlagAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateMailFlagAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SUpdateMailFlagAck));
  S2SPlayerToastReq_descriptor_ = file->message_type(59);
  static const int S2SPlayerToastReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerToastReq, selfplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerToastReq, targetplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerToastReq, serverid_),
  };
  S2SPlayerToastReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SPlayerToastReq_descriptor_,
      S2SPlayerToastReq::default_instance_,
      S2SPlayerToastReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerToastReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerToastReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SPlayerToastReq));
  S2SPlayerToastAck_descriptor_ = file->message_type(60);
  static const int S2SPlayerToastAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerToastAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerToastAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerToastAck, targetplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerToastAck, targetserverid_),
  };
  S2SPlayerToastAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SPlayerToastAck_descriptor_,
      S2SPlayerToastAck::default_instance_,
      S2SPlayerToastAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerToastAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerToastAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SPlayerToastAck));
  S2SQueryToastCountReq_descriptor_ = file->message_type(61);
  static const int S2SQueryToastCountReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryToastCountReq, selfplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryToastCountReq, targetplayerid_),
  };
  S2SQueryToastCountReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SQueryToastCountReq_descriptor_,
      S2SQueryToastCountReq::default_instance_,
      S2SQueryToastCountReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryToastCountReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryToastCountReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SQueryToastCountReq));
  S2SUpdateFriendLinessAck_descriptor_ = file->message_type(62);
  static const int S2SUpdateFriendLinessAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateFriendLinessAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateFriendLinessAck, targetplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateFriendLinessAck, friendliness_),
  };
  S2SUpdateFriendLinessAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SUpdateFriendLinessAck_descriptor_,
      S2SUpdateFriendLinessAck::default_instance_,
      S2SUpdateFriendLinessAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateFriendLinessAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateFriendLinessAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SUpdateFriendLinessAck));
  S2SCreateMatchGroupReq_descriptor_ = file->message_type(63);
  static const int S2SCreateMatchGroupReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateMatchGroupReq, pbmember_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateMatchGroupReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateMatchGroupReq, maxcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateMatchGroupReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateMatchGroupReq, playerid_),
  };
  S2SCreateMatchGroupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SCreateMatchGroupReq_descriptor_,
      S2SCreateMatchGroupReq::default_instance_,
      S2SCreateMatchGroupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateMatchGroupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateMatchGroupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SCreateMatchGroupReq));
  S2SUpdateGroupMatchReq_descriptor_ = file->message_type(64);
  static const int S2SUpdateGroupMatchReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGroupMatchReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGroupMatchReq, maxcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGroupMatchReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGroupMatchReq, playerid_),
  };
  S2SUpdateGroupMatchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SUpdateGroupMatchReq_descriptor_,
      S2SUpdateGroupMatchReq::default_instance_,
      S2SUpdateGroupMatchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGroupMatchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGroupMatchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SUpdateGroupMatchReq));
  S2SCreateMatchGroupToShardReq_descriptor_ = file->message_type(65);
  static const int S2SCreateMatchGroupToShardReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateMatchGroupToShardReq, pbmember_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateMatchGroupToShardReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateMatchGroupToShardReq, maxcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateMatchGroupToShardReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateMatchGroupToShardReq, playerid_),
  };
  S2SCreateMatchGroupToShardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SCreateMatchGroupToShardReq_descriptor_,
      S2SCreateMatchGroupToShardReq::default_instance_,
      S2SCreateMatchGroupToShardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateMatchGroupToShardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateMatchGroupToShardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SCreateMatchGroupToShardReq));
  S2SReceiveInviteMatchGroupReq_descriptor_ = file->message_type(66);
  static const int S2SReceiveInviteMatchGroupReq_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SReceiveInviteMatchGroupReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SReceiveInviteMatchGroupReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SReceiveInviteMatchGroupReq, inviter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SReceiveInviteMatchGroupReq, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SReceiveInviteMatchGroupReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SReceiveInviteMatchGroupReq, inviterplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SReceiveInviteMatchGroupReq, inviterserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SReceiveInviteMatchGroupReq, playername_),
  };
  S2SReceiveInviteMatchGroupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SReceiveInviteMatchGroupReq_descriptor_,
      S2SReceiveInviteMatchGroupReq::default_instance_,
      S2SReceiveInviteMatchGroupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SReceiveInviteMatchGroupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SReceiveInviteMatchGroupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SReceiveInviteMatchGroupReq));
  S2SConsentInviteMatchGroupReq_descriptor_ = file->message_type(67);
  static const int S2SConsentInviteMatchGroupReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SConsentInviteMatchGroupReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SConsentInviteMatchGroupReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SConsentInviteMatchGroupReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SConsentInviteMatchGroupReq, pbmember_),
  };
  S2SConsentInviteMatchGroupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SConsentInviteMatchGroupReq_descriptor_,
      S2SConsentInviteMatchGroupReq::default_instance_,
      S2SConsentInviteMatchGroupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SConsentInviteMatchGroupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SConsentInviteMatchGroupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SConsentInviteMatchGroupReq));
  S2SAddMatchGroupMemberReq_descriptor_ = file->message_type(68);
  static const int S2SAddMatchGroupMemberReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddMatchGroupMemberReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddMatchGroupMemberReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddMatchGroupMemberReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddMatchGroupMemberReq, pbmember_),
  };
  S2SAddMatchGroupMemberReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SAddMatchGroupMemberReq_descriptor_,
      S2SAddMatchGroupMemberReq::default_instance_,
      S2SAddMatchGroupMemberReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddMatchGroupMemberReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddMatchGroupMemberReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SAddMatchGroupMemberReq));
  S2SAddMatchGroupMemberAck_descriptor_ = file->message_type(69);
  static const int S2SAddMatchGroupMemberAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddMatchGroupMemberAck, pbmember_),
  };
  S2SAddMatchGroupMemberAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SAddMatchGroupMemberAck_descriptor_,
      S2SAddMatchGroupMemberAck::default_instance_,
      S2SAddMatchGroupMemberAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddMatchGroupMemberAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddMatchGroupMemberAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SAddMatchGroupMemberAck));
  S2STellMatchGroupDataAck_descriptor_ = file->message_type(70);
  static const int S2STellMatchGroupDataAck_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellMatchGroupDataAck, pbmember_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellMatchGroupDataAck, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellMatchGroupDataAck, captainid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellMatchGroupDataAck, maxcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellMatchGroupDataAck, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellMatchGroupDataAck, newadd_),
  };
  S2STellMatchGroupDataAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2STellMatchGroupDataAck_descriptor_,
      S2STellMatchGroupDataAck::default_instance_,
      S2STellMatchGroupDataAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellMatchGroupDataAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellMatchGroupDataAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2STellMatchGroupDataAck));
  S2SRemoveMatchGroupMemberAck_descriptor_ = file->message_type(71);
  static const int S2SRemoveMatchGroupMemberAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRemoveMatchGroupMemberAck, memberid_),
  };
  S2SRemoveMatchGroupMemberAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SRemoveMatchGroupMemberAck_descriptor_,
      S2SRemoveMatchGroupMemberAck::default_instance_,
      S2SRemoveMatchGroupMemberAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRemoveMatchGroupMemberAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRemoveMatchGroupMemberAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SRemoveMatchGroupMemberAck));
  S2SLeaveMatchGroupReq_descriptor_ = file->message_type(72);
  static const int S2SLeaveMatchGroupReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLeaveMatchGroupReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLeaveMatchGroupReq, playerid_),
  };
  S2SLeaveMatchGroupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SLeaveMatchGroupReq_descriptor_,
      S2SLeaveMatchGroupReq::default_instance_,
      S2SLeaveMatchGroupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLeaveMatchGroupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLeaveMatchGroupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SLeaveMatchGroupReq));
  S2SKickMatchGroupReq_descriptor_ = file->message_type(73);
  static const int S2SKickMatchGroupReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SKickMatchGroupReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SKickMatchGroupReq, captainid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SKickMatchGroupReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SKickMatchGroupReq, memberid_),
  };
  S2SKickMatchGroupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SKickMatchGroupReq_descriptor_,
      S2SKickMatchGroupReq::default_instance_,
      S2SKickMatchGroupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SKickMatchGroupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SKickMatchGroupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SKickMatchGroupReq));
  S2SLeaveMatchGroupAck_descriptor_ = file->message_type(74);
  static const int S2SLeaveMatchGroupAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLeaveMatchGroupAck, playerid_),
  };
  S2SLeaveMatchGroupAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SLeaveMatchGroupAck_descriptor_,
      S2SLeaveMatchGroupAck::default_instance_,
      S2SLeaveMatchGroupAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLeaveMatchGroupAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLeaveMatchGroupAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SLeaveMatchGroupAck));
  S2SApplyMatchGroupReq_descriptor_ = file->message_type(75);
  static const int S2SApplyMatchGroupReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SApplyMatchGroupReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SApplyMatchGroupReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SApplyMatchGroupReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SApplyMatchGroupReq, pbmember_),
  };
  S2SApplyMatchGroupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SApplyMatchGroupReq_descriptor_,
      S2SApplyMatchGroupReq::default_instance_,
      S2SApplyMatchGroupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SApplyMatchGroupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SApplyMatchGroupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SApplyMatchGroupReq));
  S2SApplyMatchGroupAck_descriptor_ = file->message_type(76);
  static const int S2SApplyMatchGroupAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SApplyMatchGroupAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SApplyMatchGroupAck, pbmember_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SApplyMatchGroupAck, serverid_),
  };
  S2SApplyMatchGroupAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SApplyMatchGroupAck_descriptor_,
      S2SApplyMatchGroupAck::default_instance_,
      S2SApplyMatchGroupAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SApplyMatchGroupAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SApplyMatchGroupAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SApplyMatchGroupAck));
  S2SConsentApplyMatchGroupAck_descriptor_ = file->message_type(77);
  static const int S2SConsentApplyMatchGroupAck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SConsentApplyMatchGroupAck, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SConsentApplyMatchGroupAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SConsentApplyMatchGroupAck, captainid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SConsentApplyMatchGroupAck, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SConsentApplyMatchGroupAck, playername_),
  };
  S2SConsentApplyMatchGroupAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SConsentApplyMatchGroupAck_descriptor_,
      S2SConsentApplyMatchGroupAck::default_instance_,
      S2SConsentApplyMatchGroupAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SConsentApplyMatchGroupAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SConsentApplyMatchGroupAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SConsentApplyMatchGroupAck));
  S2SOnLineQueryMatchGroupReq_descriptor_ = file->message_type(78);
  static const int S2SOnLineQueryMatchGroupReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOnLineQueryMatchGroupReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOnLineQueryMatchGroupReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOnLineQueryMatchGroupReq, serverid_),
  };
  S2SOnLineQueryMatchGroupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SOnLineQueryMatchGroupReq_descriptor_,
      S2SOnLineQueryMatchGroupReq::default_instance_,
      S2SOnLineQueryMatchGroupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOnLineQueryMatchGroupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOnLineQueryMatchGroupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SOnLineQueryMatchGroupReq));
  S2SOffLineUpdateMatchGroupReq_descriptor_ = file->message_type(79);
  static const int S2SOffLineUpdateMatchGroupReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOffLineUpdateMatchGroupReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOffLineUpdateMatchGroupReq, playerid_),
  };
  S2SOffLineUpdateMatchGroupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SOffLineUpdateMatchGroupReq_descriptor_,
      S2SOffLineUpdateMatchGroupReq::default_instance_,
      S2SOffLineUpdateMatchGroupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOffLineUpdateMatchGroupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOffLineUpdateMatchGroupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SOffLineUpdateMatchGroupReq));
  S2SUpdateGroupMemberReq_descriptor_ = file->message_type(80);
  static const int S2SUpdateGroupMemberReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGroupMemberReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGroupMemberReq, memberid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGroupMemberReq, dataname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGroupMemberReq, pbstrings_),
  };
  S2SUpdateGroupMemberReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SUpdateGroupMemberReq_descriptor_,
      S2SUpdateGroupMemberReq::default_instance_,
      S2SUpdateGroupMemberReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGroupMemberReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGroupMemberReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SUpdateGroupMemberReq));
  S2SUpdateGroupMemberAck_descriptor_ = file->message_type(81);
  static const int S2SUpdateGroupMemberAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGroupMemberAck, memberid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGroupMemberAck, dataname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGroupMemberAck, pbstrings_),
  };
  S2SUpdateGroupMemberAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SUpdateGroupMemberAck_descriptor_,
      S2SUpdateGroupMemberAck::default_instance_,
      S2SUpdateGroupMemberAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGroupMemberAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGroupMemberAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SUpdateGroupMemberAck));
  S2SUpdateGroupDataAck_descriptor_ = file->message_type(82);
  static const int S2SUpdateGroupDataAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGroupDataAck, pbstring_),
  };
  S2SUpdateGroupDataAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SUpdateGroupDataAck_descriptor_,
      S2SUpdateGroupDataAck::default_instance_,
      S2SUpdateGroupDataAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGroupDataAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGroupDataAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SUpdateGroupDataAck));
  S2SUpdateGuestListReq_descriptor_ = file->message_type(83);
  static const int S2SUpdateGuestListReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGuestListReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGuestListReq, guestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGuestListReq, guesttime_),
  };
  S2SUpdateGuestListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SUpdateGuestListReq_descriptor_,
      S2SUpdateGuestListReq::default_instance_,
      S2SUpdateGuestListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGuestListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGuestListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SUpdateGuestListReq));
  S2SQueryGuestReq_descriptor_ = file->message_type(84);
  static const int S2SQueryGuestReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryGuestReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryGuestReq, queryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryGuestReq, querytime_),
  };
  S2SQueryGuestReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SQueryGuestReq_descriptor_,
      S2SQueryGuestReq::default_instance_,
      S2SQueryGuestReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryGuestReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryGuestReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SQueryGuestReq));
  S2SQueryGuestAck_descriptor_ = file->message_type(85);
  static const int S2SQueryGuestAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryGuestAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryGuestAck, queryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryGuestAck, guestcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryGuestAck, guestdata_),
  };
  S2SQueryGuestAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SQueryGuestAck_descriptor_,
      S2SQueryGuestAck::default_instance_,
      S2SQueryGuestAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryGuestAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryGuestAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SQueryGuestAck));
  S2SNewPlayerLoginMailReq_descriptor_ = file->message_type(86);
  static const int S2SNewPlayerLoginMailReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNewPlayerLoginMailReq, playerid_),
  };
  S2SNewPlayerLoginMailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SNewPlayerLoginMailReq_descriptor_,
      S2SNewPlayerLoginMailReq::default_instance_,
      S2SNewPlayerLoginMailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNewPlayerLoginMailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNewPlayerLoginMailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SNewPlayerLoginMailReq));
  S2SUpdateRankDataReq_descriptor_ = file->message_type(87);
  static const int S2SUpdateRankDataReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateRankDataReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateRankDataReq, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateRankDataReq, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateRankDataReq, pbrankdata_),
  };
  S2SUpdateRankDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SUpdateRankDataReq_descriptor_,
      S2SUpdateRankDataReq::default_instance_,
      S2SUpdateRankDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateRankDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateRankDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SUpdateRankDataReq));
  S2SQueryRankListReq_descriptor_ = file->message_type(88);
  static const int S2SQueryRankListReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryRankListReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryRankListReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryRankListReq, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryRankListReq, zoneid_),
  };
  S2SQueryRankListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SQueryRankListReq_descriptor_,
      S2SQueryRankListReq::default_instance_,
      S2SQueryRankListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryRankListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryRankListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SQueryRankListReq));
  S2SQueryFriendRankListReq_descriptor_ = file->message_type(89);
  static const int S2SQueryFriendRankListReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryFriendRankListReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryFriendRankListReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryFriendRankListReq, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryFriendRankListReq, friendid_),
  };
  S2SQueryFriendRankListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SQueryFriendRankListReq_descriptor_,
      S2SQueryFriendRankListReq::default_instance_,
      S2SQueryFriendRankListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryFriendRankListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryFriendRankListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SQueryFriendRankListReq));
  S2SAddRecentPlayerDataReq_descriptor_ = file->message_type(90);
  static const int S2SAddRecentPlayerDataReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddRecentPlayerDataReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddRecentPlayerDataReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddRecentPlayerDataReq, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddRecentPlayerDataReq, pbdata_),
  };
  S2SAddRecentPlayerDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SAddRecentPlayerDataReq_descriptor_,
      S2SAddRecentPlayerDataReq::default_instance_,
      S2SAddRecentPlayerDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddRecentPlayerDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddRecentPlayerDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SAddRecentPlayerDataReq));
  S2SQueryRecentListReq_descriptor_ = file->message_type(91);
  static const int S2SQueryRecentListReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryRecentListReq, playerid_),
  };
  S2SQueryRecentListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SQueryRecentListReq_descriptor_,
      S2SQueryRecentListReq::default_instance_,
      S2SQueryRecentListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryRecentListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryRecentListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SQueryRecentListReq));
  S2SQueryRecentListAck_descriptor_ = file->message_type(92);
  static const int S2SQueryRecentListAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryRecentListAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryRecentListAck, pbrelation_),
  };
  S2SQueryRecentListAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SQueryRecentListAck_descriptor_,
      S2SQueryRecentListAck::default_instance_,
      S2SQueryRecentListAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryRecentListAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryRecentListAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SQueryRecentListAck));
  S2SCreateGuidReq_descriptor_ = file->message_type(93);
  static const int S2SCreateGuidReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateGuidReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateGuidReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateGuidReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateGuidReq, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateGuidReq, medal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateGuidReq, manifesto_),
  };
  S2SCreateGuidReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SCreateGuidReq_descriptor_,
      S2SCreateGuidReq::default_instance_,
      S2SCreateGuidReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateGuidReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateGuidReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SCreateGuidReq));
  S2SCreateGuildToShardReq_descriptor_ = file->message_type(94);
  static const int S2SCreateGuildToShardReq_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateGuildToShardReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateGuildToShardReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateGuildToShardReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateGuildToShardReq, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateGuildToShardReq, medal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateGuildToShardReq, manifesto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateGuildToShardReq, guildid_),
  };
  S2SCreateGuildToShardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SCreateGuildToShardReq_descriptor_,
      S2SCreateGuildToShardReq::default_instance_,
      S2SCreateGuildToShardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateGuildToShardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateGuildToShardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SCreateGuildToShardReq));
  S2SCreateGuildAck_descriptor_ = file->message_type(95);
  static const int S2SCreateGuildAck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateGuildAck, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateGuildAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateGuildAck, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateGuildAck, medal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateGuildAck, manifesto_),
  };
  S2SCreateGuildAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SCreateGuildAck_descriptor_,
      S2SCreateGuildAck::default_instance_,
      S2SCreateGuildAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateGuildAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateGuildAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SCreateGuildAck));
  S2SUpdateMemberBasicDataReq_descriptor_ = file->message_type(96);
  static const int S2SUpdateMemberBasicDataReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateMemberBasicDataReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateMemberBasicDataReq, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateMemberBasicDataReq, pbdata_),
  };
  S2SUpdateMemberBasicDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SUpdateMemberBasicDataReq_descriptor_,
      S2SUpdateMemberBasicDataReq::default_instance_,
      S2SUpdateMemberBasicDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateMemberBasicDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateMemberBasicDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SUpdateMemberBasicDataReq));
  S2SInviteGuildReq_descriptor_ = file->message_type(97);
  static const int S2SInviteGuildReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SInviteGuildReq, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SInviteGuildReq, invitor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SInviteGuildReq, invitedid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SInviteGuildReq, serverid_),
  };
  S2SInviteGuildReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SInviteGuildReq_descriptor_,
      S2SInviteGuildReq::default_instance_,
      S2SInviteGuildReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SInviteGuildReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SInviteGuildReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SInviteGuildReq));
  S2SInviteGuildAck_descriptor_ = file->message_type(98);
  static const int S2SInviteGuildAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SInviteGuildAck, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SInviteGuildAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SInviteGuildAck, invitedid_),
  };
  S2SInviteGuildAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SInviteGuildAck_descriptor_,
      S2SInviteGuildAck::default_instance_,
      S2SInviteGuildAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SInviteGuildAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SInviteGuildAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SInviteGuildAck));
  S2SApplyGuildReq_descriptor_ = file->message_type(99);
  static const int S2SApplyGuildReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SApplyGuildReq, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SApplyGuildReq, invitor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SApplyGuildReq, playerid_),
  };
  S2SApplyGuildReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SApplyGuildReq_descriptor_,
      S2SApplyGuildReq::default_instance_,
      S2SApplyGuildReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SApplyGuildReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SApplyGuildReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SApplyGuildReq));
  S2SApplyGuildAck_descriptor_ = file->message_type(100);
  static const int S2SApplyGuildAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SApplyGuildAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SApplyGuildAck, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SApplyGuildAck, code_),
  };
  S2SApplyGuildAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SApplyGuildAck_descriptor_,
      S2SApplyGuildAck::default_instance_,
      S2SApplyGuildAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SApplyGuildAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SApplyGuildAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SApplyGuildAck));
  S2SPlayerGuildChangeReq_descriptor_ = file->message_type(101);
  static const int S2SPlayerGuildChangeReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerGuildChangeReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerGuildChangeReq, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerGuildChangeReq, code_),
  };
  S2SPlayerGuildChangeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SPlayerGuildChangeReq_descriptor_,
      S2SPlayerGuildChangeReq::default_instance_,
      S2SPlayerGuildChangeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerGuildChangeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerGuildChangeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SPlayerGuildChangeReq));
  S2SExitGuildReq_descriptor_ = file->message_type(102);
  static const int S2SExitGuildReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SExitGuildReq, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SExitGuildReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SExitGuildReq, serverid_),
  };
  S2SExitGuildReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SExitGuildReq_descriptor_,
      S2SExitGuildReq::default_instance_,
      S2SExitGuildReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SExitGuildReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SExitGuildReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SExitGuildReq));
  S2STransferMasterReq_descriptor_ = file->message_type(103);
  static const int S2STransferMasterReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransferMasterReq, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransferMasterReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransferMasterReq, newmasterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransferMasterReq, serverid_),
  };
  S2STransferMasterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2STransferMasterReq_descriptor_,
      S2STransferMasterReq::default_instance_,
      S2STransferMasterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransferMasterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransferMasterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2STransferMasterReq));
  S2SReviewApplyReq_descriptor_ = file->message_type(104);
  static const int S2SReviewApplyReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SReviewApplyReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SReviewApplyReq, dealplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SReviewApplyReq, operatortype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SReviewApplyReq, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SReviewApplyReq, serverid_),
  };
  S2SReviewApplyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SReviewApplyReq_descriptor_,
      S2SReviewApplyReq::default_instance_,
      S2SReviewApplyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SReviewApplyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SReviewApplyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SReviewApplyReq));
  S2SDissolveGuildReq_descriptor_ = file->message_type(105);
  static const int S2SDissolveGuildReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDissolveGuildReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDissolveGuildReq, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDissolveGuildReq, serverid_),
  };
  S2SDissolveGuildReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SDissolveGuildReq_descriptor_,
      S2SDissolveGuildReq::default_instance_,
      S2SDissolveGuildReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDissolveGuildReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDissolveGuildReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SDissolveGuildReq));
  S2SModifyMedalReq_descriptor_ = file->message_type(106);
  static const int S2SModifyMedalReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SModifyMedalReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SModifyMedalReq, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SModifyMedalReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SModifyMedalReq, newmedal_),
  };
  S2SModifyMedalReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SModifyMedalReq_descriptor_,
      S2SModifyMedalReq::default_instance_,
      S2SModifyMedalReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SModifyMedalReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SModifyMedalReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SModifyMedalReq));
  S2SQueryGuildListReq_descriptor_ = file->message_type(107);
  static const int S2SQueryGuildListReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryGuildListReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryGuildListReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryGuildListReq, guilds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryGuildListReq, cursor_),
  };
  S2SQueryGuildListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SQueryGuildListReq_descriptor_,
      S2SQueryGuildListReq::default_instance_,
      S2SQueryGuildListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryGuildListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryGuildListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SQueryGuildListReq));
  S2SKickMemberReq_descriptor_ = file->message_type(108);
  static const int S2SKickMemberReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SKickMemberReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SKickMemberReq, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SKickMemberReq, toplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SKickMemberReq, serverid_),
  };
  S2SKickMemberReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SKickMemberReq_descriptor_,
      S2SKickMemberReq::default_instance_,
      S2SKickMemberReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SKickMemberReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SKickMemberReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SKickMemberReq));
  S2SLoginQueryGuildReq_descriptor_ = file->message_type(109);
  static const int S2SLoginQueryGuildReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginQueryGuildReq, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginQueryGuildReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginQueryGuildReq, serverid_),
  };
  S2SLoginQueryGuildReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SLoginQueryGuildReq_descriptor_,
      S2SLoginQueryGuildReq::default_instance_,
      S2SLoginQueryGuildReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginQueryGuildReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginQueryGuildReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SLoginQueryGuildReq));
  S2SLoginQueryGuildAck_descriptor_ = file->message_type(110);
  static const int S2SLoginQueryGuildAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginQueryGuildAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginQueryGuildAck, guilddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginQueryGuildAck, showapplicant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginQueryGuildAck, guildid_),
  };
  S2SLoginQueryGuildAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SLoginQueryGuildAck_descriptor_,
      S2SLoginQueryGuildAck::default_instance_,
      S2SLoginQueryGuildAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginQueryGuildAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginQueryGuildAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SLoginQueryGuildAck));
  S2SUpdateGuildDataReq_descriptor_ = file->message_type(111);
  static const int S2SUpdateGuildDataReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGuildDataReq, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGuildDataReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGuildDataReq, pbdata_),
  };
  S2SUpdateGuildDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SUpdateGuildDataReq_descriptor_,
      S2SUpdateGuildDataReq::default_instance_,
      S2SUpdateGuildDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGuildDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateGuildDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SUpdateGuildDataReq));
  S2SUpgradeGuildReq_descriptor_ = file->message_type(112);
  static const int S2SUpgradeGuildReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpgradeGuildReq, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpgradeGuildReq, playerid_),
  };
  S2SUpgradeGuildReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SUpgradeGuildReq_descriptor_,
      S2SUpgradeGuildReq::default_instance_,
      S2SUpgradeGuildReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpgradeGuildReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpgradeGuildReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SUpgradeGuildReq));
  S2SUpgradeGuildAck_descriptor_ = file->message_type(113);
  static const int S2SUpgradeGuildAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpgradeGuildAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpgradeGuildAck, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpgradeGuildAck, code_),
  };
  S2SUpgradeGuildAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SUpgradeGuildAck_descriptor_,
      S2SUpgradeGuildAck::default_instance_,
      S2SUpgradeGuildAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpgradeGuildAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpgradeGuildAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SUpgradeGuildAck));
  S2SAppointGuildMemberReq_descriptor_ = file->message_type(114);
  static const int S2SAppointGuildMemberReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAppointGuildMemberReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAppointGuildMemberReq, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAppointGuildMemberReq, toplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAppointGuildMemberReq, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAppointGuildMemberReq, serverid_),
  };
  S2SAppointGuildMemberReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SAppointGuildMemberReq_descriptor_,
      S2SAppointGuildMemberReq::default_instance_,
      S2SAppointGuildMemberReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAppointGuildMemberReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAppointGuildMemberReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SAppointGuildMemberReq));
  S2SSearchGuildByNameReq_descriptor_ = file->message_type(115);
  static const int S2SSearchGuildByNameReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSearchGuildByNameReq, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSearchGuildByNameReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSearchGuildByNameReq, playerid_),
  };
  S2SSearchGuildByNameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SSearchGuildByNameReq_descriptor_,
      S2SSearchGuildByNameReq::default_instance_,
      S2SSearchGuildByNameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSearchGuildByNameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSearchGuildByNameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SSearchGuildByNameReq));
  S2SSetGuildSwitchReq_descriptor_ = file->message_type(116);
  static const int S2SSetGuildSwitchReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSetGuildSwitchReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSetGuildSwitchReq, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSetGuildSwitchReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSetGuildSwitchReq, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSetGuildSwitchReq, serverid_),
  };
  S2SSetGuildSwitchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SSetGuildSwitchReq_descriptor_,
      S2SSetGuildSwitchReq::default_instance_,
      S2SSetGuildSwitchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSetGuildSwitchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSetGuildSwitchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SSetGuildSwitchReq));
  S2SLoginQueryGuildidReq_descriptor_ = file->message_type(117);
  static const int S2SLoginQueryGuildidReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginQueryGuildidReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginQueryGuildidReq, serverid_),
  };
  S2SLoginQueryGuildidReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SLoginQueryGuildidReq_descriptor_,
      S2SLoginQueryGuildidReq::default_instance_,
      S2SLoginQueryGuildidReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginQueryGuildidReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginQueryGuildidReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SLoginQueryGuildidReq));
  S2SLoginQueryGuildidAck_descriptor_ = file->message_type(118);
  static const int S2SLoginQueryGuildidAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginQueryGuildidAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginQueryGuildidAck, guildid_),
  };
  S2SLoginQueryGuildidAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SLoginQueryGuildidAck_descriptor_,
      S2SLoginQueryGuildidAck::default_instance_,
      S2SLoginQueryGuildidAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginQueryGuildidAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLoginQueryGuildidAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SLoginQueryGuildidAck));
  S2SQueryGuildLogReq_descriptor_ = file->message_type(119);
  static const int S2SQueryGuildLogReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryGuildLogReq, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryGuildLogReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryGuildLogReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryGuildLogReq, beginpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryGuildLogReq, endpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryGuildLogReq, page_),
  };
  S2SQueryGuildLogReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SQueryGuildLogReq_descriptor_,
      S2SQueryGuildLogReq::default_instance_,
      S2SQueryGuildLogReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryGuildLogReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryGuildLogReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SQueryGuildLogReq));
  S2SAddGuildActivenessReq_descriptor_ = file->message_type(120);
  static const int S2SAddGuildActivenessReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddGuildActivenessReq, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddGuildActivenessReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddGuildActivenessReq, activeness_),
  };
  S2SAddGuildActivenessReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SAddGuildActivenessReq_descriptor_,
      S2SAddGuildActivenessReq::default_instance_,
      S2SAddGuildActivenessReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddGuildActivenessReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddGuildActivenessReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SAddGuildActivenessReq));
  S2SGMAddMailReq_descriptor_ = file->message_type(121);
  static const int S2SGMAddMailReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGMAddMailReq, playerids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGMAddMailReq, mailtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGMAddMailReq, pbmail_),
  };
  S2SGMAddMailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SGMAddMailReq_descriptor_,
      S2SGMAddMailReq::default_instance_,
      S2SGMAddMailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGMAddMailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGMAddMailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SGMAddMailReq));
  S2SSendChatToServer_descriptor_ = file->message_type(122);
  static const int S2SSendChatToServer_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSendChatToServer, chatinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSendChatToServer, isvoice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSendChatToServer, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSendChatToServer, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSendChatToServer, playericon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSendChatToServer, playergrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSendChatToServer, playersex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSendChatToServer, playericonbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSendChatToServer, playerserverid_),
  };
  S2SSendChatToServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SSendChatToServer_descriptor_,
      S2SSendChatToServer::default_instance_,
      S2SSendChatToServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSendChatToServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SSendChatToServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SSendChatToServer));
  ServerProtocol_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_KFServerMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2STransmitMessageReq_descriptor_, &S2STransmitMessageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SBroadcastMessageReq_descriptor_, &S2SBroadcastMessageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SBroadcastToWord_descriptor_, &S2SBroadcastToWord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SBroadcastToGame_descriptor_, &S2SBroadcastToGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SBroadcastToGate_descriptor_, &S2SBroadcastToGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2STransmitToPlayer_descriptor_, &S2STransmitToPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2STransmitToServer_descriptor_, &S2STransmitToServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SUpdateZoneToProxyReq_descriptor_, &S2SUpdateZoneToProxyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2STransmitToDataShardReq_descriptor_, &S2STransmitToDataShardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SSavePlayerReq_descriptor_, &S2SSavePlayerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SDeletePlayerReq_descriptor_, &S2SDeletePlayerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SUpdatePublicDataReq_descriptor_, &S2SUpdatePublicDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SKickGamePlayerReq_descriptor_, &S2SKickGamePlayerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SKickGatePlayerReq_descriptor_, &S2SKickGatePlayerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SLoginLoginVerifyReq_descriptor_, &S2SLoginLoginVerifyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SLoginLoginVerifyAck_descriptor_, &S2SLoginLoginVerifyAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBLoginData_descriptor_, &PBLoginData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SLoginWorldVerifyReq_descriptor_, &S2SLoginWorldVerifyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SLoginFailedToLoginAck_descriptor_, &S2SLoginFailedToLoginAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SLoginTellTokenToGameReq_descriptor_, &S2SLoginTellTokenToGameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SLoginGameAck_descriptor_, &S2SLoginGameAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SLoginLoadPlayerReq_descriptor_, &S2SLoginLoadPlayerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SLoginLoadPlayerAck_descriptor_, &S2SLoginLoadPlayerAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SLoginOutReq_descriptor_, &S2SLoginOutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SPlayerDisconnectionReq_descriptor_, &S2SPlayerDisconnectionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SSetPlayerNameReq_descriptor_, &S2SSetPlayerNameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SSetPlayerNameAck_descriptor_, &S2SSetPlayerNameAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SCreateRoleReq_descriptor_, &S2SCreateRoleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SCreateRoleAck_descriptor_, &S2SCreateRoleAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SPlayerEnterWorldReq_descriptor_, &S2SPlayerEnterWorldReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SPlayerLeaveWorldReq_descriptor_, &S2SPlayerLeaveWorldReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SGameSyncOnlineReq_descriptor_, &S2SGameSyncOnlineReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SQueryMailReq_descriptor_, &S2SQueryMailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMail_descriptor_, &PBMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMails_descriptor_, &PBMails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SQueryMailAck_descriptor_, &S2SQueryMailAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SDeleteMailReq_descriptor_, &S2SDeleteMailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SAddMailReq_descriptor_, &S2SAddMailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SNoticeNewMailReq_descriptor_, &S2SNoticeNewMailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRelation_descriptor_, &PBRelation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SQueryFriendReq_descriptor_, &S2SQueryFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SQueryFriendInviteReq_descriptor_, &S2SQueryFriendInviteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SQueryFriendAck_descriptor_, &S2SQueryFriendAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SQueryFriendInviteAck_descriptor_, &S2SQueryFriendInviteAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SAddFriendInviteReq_descriptor_, &S2SAddFriendInviteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SAddFriendInviteAck_descriptor_, &S2SAddFriendInviteAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SDelFriendReq_descriptor_, &S2SDelFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SDelFriendAck_descriptor_, &S2SDelFriendAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SDelFriendInviteReq_descriptor_, &S2SDelFriendInviteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SAddFriendReq_descriptor_, &S2SAddFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SAddFriendAck_descriptor_, &S2SAddFriendAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SUpdateFriendReq_descriptor_, &S2SUpdateFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SUpdateFriendLinessReq_descriptor_, &S2SUpdateFriendLinessReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SQueryBasicReq_descriptor_, &S2SQueryBasicReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SQueryBasicAck_descriptor_, &S2SQueryBasicAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SQueryPlayerReq_descriptor_, &S2SQueryPlayerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SQueryPlayerAck_descriptor_, &S2SQueryPlayerAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SUpdateMailFlagReq_descriptor_, &S2SUpdateMailFlagReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SUpdateMailFlagAck_descriptor_, &S2SUpdateMailFlagAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SPlayerToastReq_descriptor_, &S2SPlayerToastReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SPlayerToastAck_descriptor_, &S2SPlayerToastAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SQueryToastCountReq_descriptor_, &S2SQueryToastCountReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SUpdateFriendLinessAck_descriptor_, &S2SUpdateFriendLinessAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SCreateMatchGroupReq_descriptor_, &S2SCreateMatchGroupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SUpdateGroupMatchReq_descriptor_, &S2SUpdateGroupMatchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SCreateMatchGroupToShardReq_descriptor_, &S2SCreateMatchGroupToShardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SReceiveInviteMatchGroupReq_descriptor_, &S2SReceiveInviteMatchGroupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SConsentInviteMatchGroupReq_descriptor_, &S2SConsentInviteMatchGroupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SAddMatchGroupMemberReq_descriptor_, &S2SAddMatchGroupMemberReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SAddMatchGroupMemberAck_descriptor_, &S2SAddMatchGroupMemberAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2STellMatchGroupDataAck_descriptor_, &S2STellMatchGroupDataAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SRemoveMatchGroupMemberAck_descriptor_, &S2SRemoveMatchGroupMemberAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SLeaveMatchGroupReq_descriptor_, &S2SLeaveMatchGroupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SKickMatchGroupReq_descriptor_, &S2SKickMatchGroupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SLeaveMatchGroupAck_descriptor_, &S2SLeaveMatchGroupAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SApplyMatchGroupReq_descriptor_, &S2SApplyMatchGroupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SApplyMatchGroupAck_descriptor_, &S2SApplyMatchGroupAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SConsentApplyMatchGroupAck_descriptor_, &S2SConsentApplyMatchGroupAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SOnLineQueryMatchGroupReq_descriptor_, &S2SOnLineQueryMatchGroupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SOffLineUpdateMatchGroupReq_descriptor_, &S2SOffLineUpdateMatchGroupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SUpdateGroupMemberReq_descriptor_, &S2SUpdateGroupMemberReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SUpdateGroupMemberAck_descriptor_, &S2SUpdateGroupMemberAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SUpdateGroupDataAck_descriptor_, &S2SUpdateGroupDataAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SUpdateGuestListReq_descriptor_, &S2SUpdateGuestListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SQueryGuestReq_descriptor_, &S2SQueryGuestReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SQueryGuestAck_descriptor_, &S2SQueryGuestAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SNewPlayerLoginMailReq_descriptor_, &S2SNewPlayerLoginMailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SUpdateRankDataReq_descriptor_, &S2SUpdateRankDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SQueryRankListReq_descriptor_, &S2SQueryRankListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SQueryFriendRankListReq_descriptor_, &S2SQueryFriendRankListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SAddRecentPlayerDataReq_descriptor_, &S2SAddRecentPlayerDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SQueryRecentListReq_descriptor_, &S2SQueryRecentListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SQueryRecentListAck_descriptor_, &S2SQueryRecentListAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SCreateGuidReq_descriptor_, &S2SCreateGuidReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SCreateGuildToShardReq_descriptor_, &S2SCreateGuildToShardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SCreateGuildAck_descriptor_, &S2SCreateGuildAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SUpdateMemberBasicDataReq_descriptor_, &S2SUpdateMemberBasicDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SInviteGuildReq_descriptor_, &S2SInviteGuildReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SInviteGuildAck_descriptor_, &S2SInviteGuildAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SApplyGuildReq_descriptor_, &S2SApplyGuildReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SApplyGuildAck_descriptor_, &S2SApplyGuildAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SPlayerGuildChangeReq_descriptor_, &S2SPlayerGuildChangeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SExitGuildReq_descriptor_, &S2SExitGuildReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2STransferMasterReq_descriptor_, &S2STransferMasterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SReviewApplyReq_descriptor_, &S2SReviewApplyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SDissolveGuildReq_descriptor_, &S2SDissolveGuildReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SModifyMedalReq_descriptor_, &S2SModifyMedalReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SQueryGuildListReq_descriptor_, &S2SQueryGuildListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SKickMemberReq_descriptor_, &S2SKickMemberReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SLoginQueryGuildReq_descriptor_, &S2SLoginQueryGuildReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SLoginQueryGuildAck_descriptor_, &S2SLoginQueryGuildAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SUpdateGuildDataReq_descriptor_, &S2SUpdateGuildDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SUpgradeGuildReq_descriptor_, &S2SUpgradeGuildReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SUpgradeGuildAck_descriptor_, &S2SUpgradeGuildAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SAppointGuildMemberReq_descriptor_, &S2SAppointGuildMemberReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SSearchGuildByNameReq_descriptor_, &S2SSearchGuildByNameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SSetGuildSwitchReq_descriptor_, &S2SSetGuildSwitchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SLoginQueryGuildidReq_descriptor_, &S2SLoginQueryGuildidReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SLoginQueryGuildidAck_descriptor_, &S2SLoginQueryGuildidAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SQueryGuildLogReq_descriptor_, &S2SQueryGuildLogReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SAddGuildActivenessReq_descriptor_, &S2SAddGuildActivenessReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SGMAddMailReq_descriptor_, &S2SGMAddMailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SSendChatToServer_descriptor_, &S2SSendChatToServer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_KFServerMessage_2eproto() {
  delete S2STransmitMessageReq::default_instance_;
  delete S2STransmitMessageReq_reflection_;
  delete S2SBroadcastMessageReq::default_instance_;
  delete S2SBroadcastMessageReq_reflection_;
  delete S2SBroadcastToWord::default_instance_;
  delete S2SBroadcastToWord_reflection_;
  delete S2SBroadcastToGame::default_instance_;
  delete S2SBroadcastToGame_reflection_;
  delete S2SBroadcastToGate::default_instance_;
  delete S2SBroadcastToGate_reflection_;
  delete S2STransmitToPlayer::default_instance_;
  delete S2STransmitToPlayer_reflection_;
  delete S2STransmitToServer::default_instance_;
  delete S2STransmitToServer_reflection_;
  delete S2SUpdateZoneToProxyReq::default_instance_;
  delete S2SUpdateZoneToProxyReq_reflection_;
  delete S2STransmitToDataShardReq::default_instance_;
  delete S2STransmitToDataShardReq_reflection_;
  delete S2SSavePlayerReq::default_instance_;
  delete S2SSavePlayerReq_reflection_;
  delete S2SDeletePlayerReq::default_instance_;
  delete S2SDeletePlayerReq_reflection_;
  delete S2SUpdatePublicDataReq::default_instance_;
  delete S2SUpdatePublicDataReq_reflection_;
  delete S2SKickGamePlayerReq::default_instance_;
  delete S2SKickGamePlayerReq_reflection_;
  delete S2SKickGatePlayerReq::default_instance_;
  delete S2SKickGatePlayerReq_reflection_;
  delete S2SLoginLoginVerifyReq::default_instance_;
  delete S2SLoginLoginVerifyReq_reflection_;
  delete S2SLoginLoginVerifyAck::default_instance_;
  delete S2SLoginLoginVerifyAck_reflection_;
  delete PBLoginData::default_instance_;
  delete PBLoginData_reflection_;
  delete S2SLoginWorldVerifyReq::default_instance_;
  delete S2SLoginWorldVerifyReq_reflection_;
  delete S2SLoginFailedToLoginAck::default_instance_;
  delete S2SLoginFailedToLoginAck_reflection_;
  delete S2SLoginTellTokenToGameReq::default_instance_;
  delete S2SLoginTellTokenToGameReq_reflection_;
  delete S2SLoginGameAck::default_instance_;
  delete S2SLoginGameAck_reflection_;
  delete S2SLoginLoadPlayerReq::default_instance_;
  delete S2SLoginLoadPlayerReq_reflection_;
  delete S2SLoginLoadPlayerAck::default_instance_;
  delete S2SLoginLoadPlayerAck_reflection_;
  delete S2SLoginOutReq::default_instance_;
  delete S2SLoginOutReq_reflection_;
  delete S2SPlayerDisconnectionReq::default_instance_;
  delete S2SPlayerDisconnectionReq_reflection_;
  delete S2SSetPlayerNameReq::default_instance_;
  delete S2SSetPlayerNameReq_reflection_;
  delete S2SSetPlayerNameAck::default_instance_;
  delete S2SSetPlayerNameAck_reflection_;
  delete S2SCreateRoleReq::default_instance_;
  delete S2SCreateRoleReq_reflection_;
  delete S2SCreateRoleAck::default_instance_;
  delete S2SCreateRoleAck_reflection_;
  delete S2SPlayerEnterWorldReq::default_instance_;
  delete S2SPlayerEnterWorldReq_reflection_;
  delete S2SPlayerLeaveWorldReq::default_instance_;
  delete S2SPlayerLeaveWorldReq_reflection_;
  delete S2SGameSyncOnlineReq::default_instance_;
  delete S2SGameSyncOnlineReq_reflection_;
  delete S2SQueryMailReq::default_instance_;
  delete S2SQueryMailReq_reflection_;
  delete PBMail::default_instance_;
  delete PBMail_reflection_;
  delete PBMails::default_instance_;
  delete PBMails_reflection_;
  delete S2SQueryMailAck::default_instance_;
  delete S2SQueryMailAck_reflection_;
  delete S2SDeleteMailReq::default_instance_;
  delete S2SDeleteMailReq_reflection_;
  delete S2SAddMailReq::default_instance_;
  delete S2SAddMailReq_reflection_;
  delete S2SNoticeNewMailReq::default_instance_;
  delete S2SNoticeNewMailReq_reflection_;
  delete PBRelation::default_instance_;
  delete PBRelation_reflection_;
  delete S2SQueryFriendReq::default_instance_;
  delete S2SQueryFriendReq_reflection_;
  delete S2SQueryFriendInviteReq::default_instance_;
  delete S2SQueryFriendInviteReq_reflection_;
  delete S2SQueryFriendAck::default_instance_;
  delete S2SQueryFriendAck_reflection_;
  delete S2SQueryFriendInviteAck::default_instance_;
  delete S2SQueryFriendInviteAck_reflection_;
  delete S2SAddFriendInviteReq::default_instance_;
  delete S2SAddFriendInviteReq_reflection_;
  delete S2SAddFriendInviteAck::default_instance_;
  delete S2SAddFriendInviteAck_reflection_;
  delete S2SDelFriendReq::default_instance_;
  delete S2SDelFriendReq_reflection_;
  delete S2SDelFriendAck::default_instance_;
  delete S2SDelFriendAck_reflection_;
  delete S2SDelFriendInviteReq::default_instance_;
  delete S2SDelFriendInviteReq_reflection_;
  delete S2SAddFriendReq::default_instance_;
  delete S2SAddFriendReq_reflection_;
  delete S2SAddFriendAck::default_instance_;
  delete S2SAddFriendAck_reflection_;
  delete S2SUpdateFriendReq::default_instance_;
  delete S2SUpdateFriendReq_reflection_;
  delete S2SUpdateFriendLinessReq::default_instance_;
  delete S2SUpdateFriendLinessReq_reflection_;
  delete S2SQueryBasicReq::default_instance_;
  delete S2SQueryBasicReq_reflection_;
  delete S2SQueryBasicAck::default_instance_;
  delete S2SQueryBasicAck_reflection_;
  delete S2SQueryPlayerReq::default_instance_;
  delete S2SQueryPlayerReq_reflection_;
  delete S2SQueryPlayerAck::default_instance_;
  delete S2SQueryPlayerAck_reflection_;
  delete S2SUpdateMailFlagReq::default_instance_;
  delete S2SUpdateMailFlagReq_reflection_;
  delete S2SUpdateMailFlagAck::default_instance_;
  delete S2SUpdateMailFlagAck_reflection_;
  delete S2SPlayerToastReq::default_instance_;
  delete S2SPlayerToastReq_reflection_;
  delete S2SPlayerToastAck::default_instance_;
  delete S2SPlayerToastAck_reflection_;
  delete S2SQueryToastCountReq::default_instance_;
  delete S2SQueryToastCountReq_reflection_;
  delete S2SUpdateFriendLinessAck::default_instance_;
  delete S2SUpdateFriendLinessAck_reflection_;
  delete S2SCreateMatchGroupReq::default_instance_;
  delete S2SCreateMatchGroupReq_reflection_;
  delete S2SUpdateGroupMatchReq::default_instance_;
  delete S2SUpdateGroupMatchReq_reflection_;
  delete S2SCreateMatchGroupToShardReq::default_instance_;
  delete S2SCreateMatchGroupToShardReq_reflection_;
  delete S2SReceiveInviteMatchGroupReq::default_instance_;
  delete S2SReceiveInviteMatchGroupReq_reflection_;
  delete S2SConsentInviteMatchGroupReq::default_instance_;
  delete S2SConsentInviteMatchGroupReq_reflection_;
  delete S2SAddMatchGroupMemberReq::default_instance_;
  delete S2SAddMatchGroupMemberReq_reflection_;
  delete S2SAddMatchGroupMemberAck::default_instance_;
  delete S2SAddMatchGroupMemberAck_reflection_;
  delete S2STellMatchGroupDataAck::default_instance_;
  delete S2STellMatchGroupDataAck_reflection_;
  delete S2SRemoveMatchGroupMemberAck::default_instance_;
  delete S2SRemoveMatchGroupMemberAck_reflection_;
  delete S2SLeaveMatchGroupReq::default_instance_;
  delete S2SLeaveMatchGroupReq_reflection_;
  delete S2SKickMatchGroupReq::default_instance_;
  delete S2SKickMatchGroupReq_reflection_;
  delete S2SLeaveMatchGroupAck::default_instance_;
  delete S2SLeaveMatchGroupAck_reflection_;
  delete S2SApplyMatchGroupReq::default_instance_;
  delete S2SApplyMatchGroupReq_reflection_;
  delete S2SApplyMatchGroupAck::default_instance_;
  delete S2SApplyMatchGroupAck_reflection_;
  delete S2SConsentApplyMatchGroupAck::default_instance_;
  delete S2SConsentApplyMatchGroupAck_reflection_;
  delete S2SOnLineQueryMatchGroupReq::default_instance_;
  delete S2SOnLineQueryMatchGroupReq_reflection_;
  delete S2SOffLineUpdateMatchGroupReq::default_instance_;
  delete S2SOffLineUpdateMatchGroupReq_reflection_;
  delete S2SUpdateGroupMemberReq::default_instance_;
  delete S2SUpdateGroupMemberReq_reflection_;
  delete S2SUpdateGroupMemberAck::default_instance_;
  delete S2SUpdateGroupMemberAck_reflection_;
  delete S2SUpdateGroupDataAck::default_instance_;
  delete S2SUpdateGroupDataAck_reflection_;
  delete S2SUpdateGuestListReq::default_instance_;
  delete S2SUpdateGuestListReq_reflection_;
  delete S2SQueryGuestReq::default_instance_;
  delete S2SQueryGuestReq_reflection_;
  delete S2SQueryGuestAck::default_instance_;
  delete S2SQueryGuestAck_reflection_;
  delete S2SNewPlayerLoginMailReq::default_instance_;
  delete S2SNewPlayerLoginMailReq_reflection_;
  delete S2SUpdateRankDataReq::default_instance_;
  delete S2SUpdateRankDataReq_reflection_;
  delete S2SQueryRankListReq::default_instance_;
  delete S2SQueryRankListReq_reflection_;
  delete S2SQueryFriendRankListReq::default_instance_;
  delete S2SQueryFriendRankListReq_reflection_;
  delete S2SAddRecentPlayerDataReq::default_instance_;
  delete S2SAddRecentPlayerDataReq_reflection_;
  delete S2SQueryRecentListReq::default_instance_;
  delete S2SQueryRecentListReq_reflection_;
  delete S2SQueryRecentListAck::default_instance_;
  delete S2SQueryRecentListAck_reflection_;
  delete S2SCreateGuidReq::default_instance_;
  delete S2SCreateGuidReq_reflection_;
  delete S2SCreateGuildToShardReq::default_instance_;
  delete S2SCreateGuildToShardReq_reflection_;
  delete S2SCreateGuildAck::default_instance_;
  delete S2SCreateGuildAck_reflection_;
  delete S2SUpdateMemberBasicDataReq::default_instance_;
  delete S2SUpdateMemberBasicDataReq_reflection_;
  delete S2SInviteGuildReq::default_instance_;
  delete S2SInviteGuildReq_reflection_;
  delete S2SInviteGuildAck::default_instance_;
  delete S2SInviteGuildAck_reflection_;
  delete S2SApplyGuildReq::default_instance_;
  delete S2SApplyGuildReq_reflection_;
  delete S2SApplyGuildAck::default_instance_;
  delete S2SApplyGuildAck_reflection_;
  delete S2SPlayerGuildChangeReq::default_instance_;
  delete S2SPlayerGuildChangeReq_reflection_;
  delete S2SExitGuildReq::default_instance_;
  delete S2SExitGuildReq_reflection_;
  delete S2STransferMasterReq::default_instance_;
  delete S2STransferMasterReq_reflection_;
  delete S2SReviewApplyReq::default_instance_;
  delete S2SReviewApplyReq_reflection_;
  delete S2SDissolveGuildReq::default_instance_;
  delete S2SDissolveGuildReq_reflection_;
  delete S2SModifyMedalReq::default_instance_;
  delete S2SModifyMedalReq_reflection_;
  delete S2SQueryGuildListReq::default_instance_;
  delete S2SQueryGuildListReq_reflection_;
  delete S2SKickMemberReq::default_instance_;
  delete S2SKickMemberReq_reflection_;
  delete S2SLoginQueryGuildReq::default_instance_;
  delete S2SLoginQueryGuildReq_reflection_;
  delete S2SLoginQueryGuildAck::default_instance_;
  delete S2SLoginQueryGuildAck_reflection_;
  delete S2SUpdateGuildDataReq::default_instance_;
  delete S2SUpdateGuildDataReq_reflection_;
  delete S2SUpgradeGuildReq::default_instance_;
  delete S2SUpgradeGuildReq_reflection_;
  delete S2SUpgradeGuildAck::default_instance_;
  delete S2SUpgradeGuildAck_reflection_;
  delete S2SAppointGuildMemberReq::default_instance_;
  delete S2SAppointGuildMemberReq_reflection_;
  delete S2SSearchGuildByNameReq::default_instance_;
  delete S2SSearchGuildByNameReq_reflection_;
  delete S2SSetGuildSwitchReq::default_instance_;
  delete S2SSetGuildSwitchReq_reflection_;
  delete S2SLoginQueryGuildidReq::default_instance_;
  delete S2SLoginQueryGuildidReq_reflection_;
  delete S2SLoginQueryGuildidAck::default_instance_;
  delete S2SLoginQueryGuildidAck_reflection_;
  delete S2SQueryGuildLogReq::default_instance_;
  delete S2SQueryGuildLogReq_reflection_;
  delete S2SAddGuildActivenessReq::default_instance_;
  delete S2SAddGuildActivenessReq_reflection_;
  delete S2SGMAddMailReq::default_instance_;
  delete S2SGMAddMailReq_reflection_;
  delete S2SSendChatToServer::default_instance_;
  delete S2SSendChatToServer_reflection_;
}

void protobuf_AddDesc_KFServerMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::KFMsg::protobuf_AddDesc_KFCommonMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025KFServerMessage.proto\022\005KFMsg\032\025KFCommon"
    "Message.proto\"I\n\025S2STransmitMessageReq\022\020"
    "\n\010playerid\030\001 \002(\r\022\r\n\005msgid\030\002 \002(\r\022\017\n\007msgda"
    "ta\030\003 \002(\t\"8\n\026S2SBroadcastMessageReq\022\r\n\005ms"
    "gid\030\001 \002(\r\022\017\n\007msgdata\030\002 \002(\t\"4\n\022S2SBroadca"
    "stToWord\022\r\n\005msgid\030\001 \002(\r\022\017\n\007msgdata\030\002 \002(\t"
    "\"4\n\022S2SBroadcastToGame\022\r\n\005msgid\030\001 \002(\r\022\017\n"
    "\007msgdata\030\002 \002(\t\"4\n\022S2SBroadcastToGate\022\r\n\005"
    "msgid\030\001 \002(\r\022\017\n\007msgdata\030\002 \002(\t\"G\n\023S2STrans"
    "mitToPlayer\022\020\n\010playerid\030\001 \002(\r\022\r\n\005msgid\030\002"
    " \002(\r\022\017\n\007msgdata\030\003 \002(\t\"5\n\023S2STransmitToSe"
    "rver\022\r\n\005msgid\030\002 \002(\r\022\017\n\007msgdata\030\003 \002(\t\")\n\027"
    "S2SUpdateZoneToProxyReq\022\016\n\006zoneid\030\001 \003(\r\""
    "K\n\031S2STransmitToDataShardReq\022\016\n\006zoneid\030\001"
    " \002(\r\022\r\n\005msgid\030\002 \002(\r\022\017\n\007msgdata\030\003 \002(\t\"M\n\020"
    "S2SSavePlayerReq\022\016\n\006zoneid\030\001 \002(\r\022\n\n\002id\030\002"
    " \002(\r\022\035\n\004data\030\003 \002(\0132\017.KFMsg.PBObject\"0\n\022S"
    "2SDeletePlayerReq\022\016\n\006zoneid\030\001 \002(\r\022\n\n\002id\030"
    "\002 \002(\r\"K\n\026S2SUpdatePublicDataReq\022\020\n\010playe"
    "rid\030\001 \002(\r\022\037\n\006pbdata\030\004 \003(\0132\017.KFMsg.PBStri"
    "ng\"6\n\024S2SKickGamePlayerReq\022\020\n\010playerid\030\001"
    " \002(\r\022\014\n\004type\030\002 \002(\r\"6\n\024S2SKickGatePlayerR"
    "eq\022\020\n\010playerid\030\001 \002(\r\022\014\n\004type\030\002 \002(\r\"Y\n\026S2"
    "SLoginLoginVerifyReq\022\021\n\taccountid\030\001 \002(\r\022"
    "\r\n\005token\030\002 \002(\t\022\n\n\002ip\030\003 \002(\t\022\021\n\tsessionid\030"
    "\004 \002(\r\"N\n\026S2SLoginLoginVerifyAck\022\016\n\006resul"
    "t\030\001 \002(\r\022\021\n\taccountid\030\002 \002(\r\022\021\n\tsessionid\030"
    "\003 \002(\r\"\255\001\n\013PBLoginData\022\r\n\005token\030\001 \002(\t\022\016\n\006"
    "gateid\030\002 \002(\r\022\021\n\tsessionid\030\003 \002(\r\022\017\n\007chann"
    "el\030\004 \002(\r\022\017\n\007account\030\005 \002(\t\022\021\n\taccountid\030\006"
    " \002(\r\022\020\n\010playerid\030\007 \002(\r\022%\n\013channeldata\030\010 "
    "\002(\0132\020.KFMsg.PBStrings\"=\n\026S2SLoginWorldVe"
    "rifyReq\022#\n\007pblogin\030\001 \002(\0132\022.KFMsg.PBLogin"
    "Data\"`\n\030S2SLoginFailedToLoginAck\022\016\n\006gate"
    "id\030\001 \002(\r\022\016\n\006result\030\002 \002(\r\022\021\n\taccountid\030\003 "
    "\002(\r\022\021\n\tsessionid\030\004 \002(\r\"A\n\032S2SLoginTellTo"
    "kenToGameReq\022#\n\007pblogin\030\001 \002(\0132\022.KFMsg.PB"
    "LoginData\"\177\n\017S2SLoginGameAck\022#\n\007pblogin\030"
    "\001 \002(\0132\022.KFMsg.PBLoginData\022\016\n\006result\030\002 \002("
    "\r\022\022\n\nservertime\030\003 \002(\004\022#\n\nplayerdata\030\004 \002("
    "\0132\017.KFMsg.PBObject\"L\n\025S2SLoginLoadPlayer"
    "Req\022#\n\007pblogin\030\001 \002(\0132\022.KFMsg.PBLoginData"
    "\022\016\n\006zoneid\030\002 \002(\r\"q\n\025S2SLoginLoadPlayerAc"
    "k\022#\n\007pblogin\030\001 \002(\0132\022.KFMsg.PBLoginData\022\016"
    "\n\006result\030\002 \002(\r\022#\n\nplayerdata\030\003 \002(\0132\017.KFM"
    "sg.PBObject\"\"\n\016S2SLoginOutReq\022\020\n\010playeri"
    "d\030\001 \002(\r\"-\n\031S2SPlayerDisconnectionReq\022\020\n\010"
    "playerid\030\001 \002(\r\"I\n\023S2SSetPlayerNameReq\022\020\n"
    "\010playerid\030\001 \002(\r\022\017\n\007oldname\030\002 \002(\t\022\017\n\007newn"
    "ame\030\003 \002(\t\"Y\n\023S2SSetPlayerNameAck\022\020\n\010play"
    "erid\030\001 \002(\r\022\017\n\007oldname\030\002 \002(\t\022\017\n\007newname\030\003"
    " \002(\t\022\016\n\006result\030\004 \002(\r\"f\n\020S2SCreateRoleReq"
    "\022\020\n\010playerid\030\001 \002(\r\022\017\n\007newname\030\002 \002(\t\022\017\n\007m"
    "odleid\030\003 \002(\r\022\013\n\003sex\030\004 \002(\r\022\021\n\tinviterid\030\005"
    " \002(\r\"v\n\020S2SCreateRoleAck\022\020\n\010playerid\030\001 \002"
    "(\r\022\017\n\007newname\030\002 \002(\t\022\017\n\007modleid\030\003 \002(\r\022\013\n\003"
    "sex\030\004 \002(\r\022\021\n\tinviterid\030\005 \002(\r\022\016\n\006result\030\006"
    " \002(\r\"=\n\026S2SPlayerEnterWorldReq\022\020\n\010player"
    "id\030\001 \002(\r\022\021\n\taccountid\030\002 \002(\r\"=\n\026S2SPlayer"
    "LeaveWorldReq\022\020\n\010playerid\030\001 \002(\r\022\021\n\taccou"
    "ntid\030\002 \002(\r\"(\n\024S2SGameSyncOnlineReq\022\020\n\010pl"
    "ayerid\030\001 \003(\r\"H\n\017S2SQueryMailReq\022\020\n\010playe"
    "rid\030\001 \002(\r\022\020\n\010mailtype\030\002 \002(\r\022\021\n\tmaxmailid"
    "\030\003 \002(\004\"\'\n\006PBMail\022\035\n\004data\030\001 \003(\0132\017.KFMsg.P"
    "BString\"&\n\007PBMails\022\033\n\004mail\030\001 \003(\0132\r.KFMsg"
    ".PBMail\"T\n\017S2SQueryMailAck\022\020\n\010playerid\030\001"
    " \002(\r\022\035\n\005mails\030\002 \002(\0132\016.KFMsg.PBMails\022\020\n\010m"
    "ailtype\030\003 \002(\r\"F\n\020S2SDeleteMailReq\022\020\n\010pla"
    "yerid\030\001 \002(\r\022\016\n\006mailid\030\002 \002(\004\022\020\n\010mailtype\030"
    "\003 \002(\r\"R\n\rS2SAddMailReq\022\020\n\010playerid\030\001 \002(\r"
    "\022\020\n\010mailtype\030\003 \002(\r\022\035\n\006pbmail\030\005 \002(\0132\r.KFM"
    "sg.PBMail\"9\n\023S2SNoticeNewMailReq\022\020\n\010play"
    "erid\030\001 \002(\r\022\020\n\010mailtype\030\002 \002(\r\"l\n\nPBRelati"
    "on\022\020\n\010playerid\030\001 \002(\r\022$\n\nplayerdata\030\002 \002(\013"
    "2\020.KFMsg.PBStrings\022&\n\014relationdata\030\003 \002(\013"
    "2\020.KFMsg.PBStrings\"7\n\021S2SQueryFriendReq\022"
    "\020\n\010playerid\030\001 \002(\r\022\020\n\010serverid\030\002 \002(\r\"=\n\027S"
    "2SQueryFriendInviteReq\022\020\n\010playerid\030\001 \002(\r"
    "\022\020\n\010serverid\030\002 \002(\r\"J\n\021S2SQueryFriendAck\022"
    "\020\n\010playerid\030\001 \002(\r\022#\n\010pbfriend\030\002 \003(\0132\021.KF"
    "Msg.PBRelation\"P\n\027S2SQueryFriendInviteAc"
    "k\022\020\n\010playerid\030\001 \002(\r\022#\n\010pbfriend\030\002 \003(\0132\021."
    "KFMsg.PBRelation\"|\n\025S2SAddFriendInviteRe"
    "q\022\024\n\014selfplayerid\030\001 \002(\r\022\026\n\016targetplayeri"
    "d\030\002 \002(\r\022\017\n\007message\030\003 \002(\t\022\020\n\010serverid\030\004 \002"
    "(\r\022\022\n\ntargetname\030\005 \002(\t\"N\n\025S2SAddFriendIn"
    "viteAck\022\020\n\010playerid\030\001 \002(\r\022#\n\010pbfriend\030\002 "
    "\002(\0132\021.KFMsg.PBRelation\"\?\n\017S2SDelFriendRe"
    "q\022\024\n\014selfplayerid\030\001 \002(\r\022\026\n\016targetplayeri"
    "d\030\002 \002(\r\";\n\017S2SDelFriendAck\022\020\n\010playerid\030\001"
    " \002(\r\022\026\n\016targetplayerid\030\002 \002(\r\"E\n\025S2SDelFr"
    "iendInviteReq\022\024\n\014selfplayerid\030\001 \002(\r\022\026\n\016t"
    "argetplayerid\030\002 \002(\r\"e\n\017S2SAddFriendReq\022\024"
    "\n\014selfplayerid\030\001 \002(\r\022\026\n\016targetplayerid\030\002"
    " \002(\r\022\020\n\010serverid\030\003 \002(\r\022\022\n\ntargetname\030\004 \002"
    "(\t\"H\n\017S2SAddFriendAck\022\020\n\010playerid\030\001 \002(\r\022"
    "#\n\010pbfriend\030\002 \002(\0132\021.KFMsg.PBRelation\"Y\n\022"
    "S2SUpdateFriendReq\022\020\n\010friendid\030\001 \002(\r\022\020\n\010"
    "serverid\030\002 \002(\r\022\037\n\006pbdata\030\003 \003(\0132\017.KFMsg.P"
    "BString\"l\n\030S2SUpdateFriendLinessReq\022\024\n\014s"
    "elfplayerid\030\001 \002(\r\022\026\n\016targetplayerid\030\002 \002("
    "\r\022\024\n\014friendliness\030\003 \002(\r\022\014\n\004type\030\004 \002(\r\"2\n"
    "\020S2SQueryBasicReq\022\020\n\010playerid\030\001 \002(\r\022\014\n\004n"
    "ame\030\002 \002(\t\"G\n\020S2SQueryBasicAck\022\020\n\010playeri"
    "d\030\001 \002(\r\022!\n\010pbobject\030\002 \002(\0132\017.KFMsg.PBObje"
    "ct\"F\n\021S2SQueryPlayerReq\022\016\n\006zoneid\030\001 \002(\r\022"
    "\020\n\010playerid\030\002 \002(\r\022\017\n\007queryid\030\003 \002(\r\"H\n\021S2"
    "SQueryPlayerAck\022\020\n\010playerid\030\001 \002(\r\022!\n\010pbo"
    "bject\030\002 \002(\0132\017.KFMsg.PBObject\"X\n\024S2SUpdat"
    "eMailFlagReq\022\020\n\010playerid\030\001 \002(\r\022\016\n\006mailid"
    "\030\002 \002(\004\022\020\n\010mailtype\030\003 \002(\r\022\014\n\004flag\030\004 \002(\r\"X"
    "\n\024S2SUpdateMailFlagAck\022\020\n\010playerid\030\001 \002(\r"
    "\022\016\n\006mailid\030\002 \002(\004\022\020\n\010mailtype\030\003 \002(\r\022\014\n\004fl"
    "ag\030\004 \002(\r\"S\n\021S2SPlayerToastReq\022\024\n\014selfpla"
    "yerid\030\001 \002(\r\022\026\n\016targetplayerid\030\002 \002(\r\022\020\n\010s"
    "erverid\030\003 \002(\r\"e\n\021S2SPlayerToastAck\022\016\n\006re"
    "sult\030\001 \002(\r\022\020\n\010playerid\030\002 \002(\r\022\026\n\016targetpl"
    "ayerid\030\003 \002(\r\022\026\n\016targetserverid\030\004 \002(\r\"E\n\025"
    "S2SQueryToastCountReq\022\024\n\014selfplayerid\030\001 "
    "\002(\r\022\026\n\016targetplayerid\030\002 \002(\r\"Z\n\030S2SUpdate"
    "FriendLinessAck\022\020\n\010playerid\030\001 \002(\r\022\026\n\016tar"
    "getplayerid\030\002 \002(\r\022\024\n\014friendliness\030\003 \002(\r\""
    "\201\001\n\026S2SCreateMatchGroupReq\022!\n\010pbmember\030\001"
    " \002(\0132\017.KFMsg.PBObject\022\017\n\007groupid\030\002 \002(\004\022\020"
    "\n\010maxcount\030\003 \002(\r\022\017\n\007matchid\030\004 \002(\r\022\020\n\010pla"
    "yerid\030\005 \002(\r\"^\n\026S2SUpdateGroupMatchReq\022\017\n"
    "\007groupid\030\001 \002(\004\022\020\n\010maxcount\030\002 \002(\r\022\017\n\007matc"
    "hid\030\003 \002(\r\022\020\n\010playerid\030\004 \002(\r\"\210\001\n\035S2SCreat"
    "eMatchGroupToShardReq\022!\n\010pbmember\030\001 \002(\0132"
    "\017.KFMsg.PBObject\022\017\n\007groupid\030\002 \002(\004\022\020\n\010max"
    "count\030\003 \002(\r\022\017\n\007matchid\030\004 \002(\r\022\020\n\010playerid"
    "\030\005 \002(\r\"\313\001\n\035S2SReceiveInviteMatchGroupReq"
    "\022\020\n\010playerid\030\001 \002(\r\022\017\n\007groupid\030\002 \002(\004\022 \n\007i"
    "nviter\030\003 \002(\0132\017.KFMsg.PBObject\022\016\n\006source\030"
    "\004 \002(\t\022\017\n\007matchid\030\005 \002(\r\022\027\n\017inviterplayeri"
    "d\030\006 \002(\r\022\027\n\017inviterserverid\030\007 \002(\r\022\022\n\nplay"
    "ername\030\010 \002(\t\"w\n\035S2SConsentInviteMatchGro"
    "upReq\022\017\n\007groupid\030\001 \002(\004\022\020\n\010playerid\030\002 \002(\r"
    "\022\020\n\010serverid\030\003 \002(\r\022!\n\010pbmember\030\004 \001(\0132\017.K"
    "FMsg.PBObject\"s\n\031S2SAddMatchGroupMemberR"
    "eq\022\017\n\007groupid\030\001 \002(\004\022\020\n\010playerid\030\002 \002(\r\022\020\n"
    "\010serverid\030\003 \002(\r\022!\n\010pbmember\030\004 \001(\0132\017.KFMs"
    "g.PBObject\">\n\031S2SAddMatchGroupMemberAck\022"
    "!\n\010pbmember\030\001 \002(\0132\017.KFMsg.PBObject\"\224\001\n\030S"
    "2STellMatchGroupDataAck\022!\n\010pbmember\030\001 \003("
    "\0132\017.KFMsg.PBObject\022\017\n\007groupid\030\002 \001(\004\022\021\n\tc"
    "aptainid\030\003 \001(\r\022\020\n\010maxcount\030\004 \001(\r\022\017\n\007matc"
    "hid\030\005 \001(\r\022\016\n\006newadd\030\006 \001(\010\"0\n\034S2SRemoveMa"
    "tchGroupMemberAck\022\020\n\010memberid\030\001 \002(\r\":\n\025S"
    "2SLeaveMatchGroupReq\022\017\n\007groupid\030\001 \002(\004\022\020\n"
    "\010playerid\030\002 \002(\r\"^\n\024S2SKickMatchGroupReq\022"
    "\017\n\007groupid\030\001 \002(\004\022\021\n\tcaptainid\030\002 \002(\r\022\020\n\010s"
    "erverid\030\003 \002(\r\022\020\n\010memberid\030\004 \002(\r\")\n\025S2SLe"
    "aveMatchGroupAck\022\020\n\010playerid\030\001 \002(\r\"o\n\025S2"
    "SApplyMatchGroupReq\022\017\n\007groupid\030\001 \002(\004\022\020\n\010"
    "playerid\030\002 \002(\r\022\020\n\010serverid\030\003 \002(\r\022!\n\010pbme"
    "mber\030\004 \002(\0132\017.KFMsg.PBObject\"^\n\025S2SApplyM"
    "atchGroupAck\022\020\n\010playerid\030\001 \002(\r\022!\n\010pbmemb"
    "er\030\002 \002(\0132\017.KFMsg.PBObject\022\020\n\010serverid\030\003 "
    "\002(\r\"z\n\034S2SConsentApplyMatchGroupAck\022\017\n\007g"
    "roupid\030\001 \002(\004\022\020\n\010playerid\030\002 \002(\r\022\021\n\tcaptai"
    "nid\030\003 \002(\r\022\020\n\010serverid\030\004 \002(\r\022\022\n\nplayernam"
    "e\030\005 \002(\t\"R\n\033S2SOnLineQueryMatchGroupReq\022\017"
    "\n\007groupid\030\001 \002(\004\022\020\n\010playerid\030\002 \002(\r\022\020\n\010ser"
    "verid\030\003 \002(\r\"B\n\035S2SOffLineUpdateMatchGrou"
    "pReq\022\017\n\007groupid\030\001 \002(\004\022\020\n\010playerid\030\002 \002(\r\""
    "s\n\027S2SUpdateGroupMemberReq\022\017\n\007groupid\030\001 "
    "\002(\004\022\020\n\010memberid\030\002 \002(\r\022\020\n\010dataname\030\003 \002(\t\022"
    "#\n\tpbstrings\030\004 \002(\0132\020.KFMsg.PBStrings\"b\n\027"
    "S2SUpdateGroupMemberAck\022\020\n\010memberid\030\001 \002("
    "\r\022\020\n\010dataname\030\002 \002(\t\022#\n\tpbstrings\030\003 \002(\0132\020"
    ".KFMsg.PBStrings\":\n\025S2SUpdateGroupDataAc"
    "k\022!\n\010pbstring\030\001 \003(\0132\017.KFMsg.PBString\"M\n\025"
    "S2SUpdateGuestListReq\022\020\n\010playerid\030\001 \002(\r\022"
    "\017\n\007guestid\030\002 \002(\r\022\021\n\tguesttime\030\003 \002(\004\"H\n\020S"
    "2SQueryGuestReq\022\020\n\010playerid\030\001 \002(\r\022\017\n\007que"
    "ryid\030\002 \002(\r\022\021\n\tquerytime\030\003 \002(\004\"p\n\020S2SQuer"
    "yGuestAck\022\020\n\010playerid\030\001 \002(\r\022\017\n\007queryid\030\002"
    " \002(\r\022\022\n\nguestcount\030\003 \002(\r\022%\n\tguestdata\030\004 "
    "\003(\0132\022.KFMsg.PBGuestData\",\n\030S2SNewPlayerL"
    "oginMailReq\022\020\n\010playerid\030\001 \002(\r\"o\n\024S2SUpda"
    "teRankDataReq\022\020\n\010playerid\030\001 \002(\r\022\016\n\006ranki"
    "d\030\002 \002(\r\022\016\n\006zoneid\030\003 \002(\r\022%\n\npbrankdata\030\004 "
    "\002(\0132\021.KFMsg.PBRankData\"Y\n\023S2SQueryRankLi"
    "stReq\022\020\n\010playerid\030\001 \002(\r\022\020\n\010serverid\030\002 \002("
    "\r\022\016\n\006rankid\030\003 \002(\r\022\016\n\006zoneid\030\004 \002(\r\"a\n\031S2S"
    "QueryFriendRankListReq\022\020\n\010playerid\030\001 \002(\r"
    "\022\020\n\010serverid\030\002 \002(\r\022\016\n\006rankid\030\003 \002(\r\022\020\n\010fr"
    "iendid\030\004 \003(\r\"p\n\031S2SAddRecentPlayerDataRe"
    "q\022\016\n\006roomid\030\001 \002(\004\022\020\n\010playerid\030\002 \002(\r\022\017\n\007m"
    "embers\030\003 \003(\r\022 \n\006pbdata\030\004 \002(\0132\020.KFMsg.PBS"
    "trings\")\n\025S2SQueryRecentListReq\022\020\n\010playe"
    "rid\030\001 \002(\r\"P\n\025S2SQueryRecentListAck\022\020\n\010pl"
    "ayerid\030\001 \002(\r\022%\n\npbrelation\030\002 \003(\0132\021.KFMsg"
    ".PBRelation\"y\n\020S2SCreateGuidReq\022\020\n\010playe"
    "rid\030\001 \002(\r\022\020\n\010serverid\030\002 \002(\r\022\014\n\004name\030\003 \002("
    "\t\022\021\n\tguildname\030\004 \002(\t\022\r\n\005medal\030\005 \002(\r\022\021\n\tm"
    "anifesto\030\006 \001(\t\"\222\001\n\030S2SCreateGuildToShard"
    "Req\022\020\n\010playerid\030\001 \002(\r\022\020\n\010serverid\030\002 \002(\r\022"
    "\014\n\004name\030\003 \002(\t\022\021\n\tguildname\030\004 \002(\t\022\r\n\005meda"
    "l\030\005 \002(\r\022\021\n\tmanifesto\030\006 \001(\t\022\017\n\007guildid\030\007 "
    "\002(\004\"f\n\021S2SCreateGuildAck\022\014\n\004code\030\001 \002(\r\022\020"
    "\n\010playerid\030\002 \002(\r\022\017\n\007guildid\030\003 \002(\004\022\r\n\005med"
    "al\030\004 \002(\r\022\021\n\tmanifesto\030\005 \001(\t\"a\n\033S2SUpdate"
    "MemberBasicDataReq\022\020\n\010playerid\030\001 \002(\r\022\017\n\007"
    "guildid\030\002 \002(\004\022\037\n\006pbdata\030\003 \003(\0132\017.KFMsg.PB"
    "String\"Z\n\021S2SInviteGuildReq\022\017\n\007guildid\030\001"
    " \002(\004\022\017\n\007invitor\030\002 \002(\r\022\021\n\tinvitedid\030\003 \002(\r"
    "\022\020\n\010serverid\030\004 \002(\r\"I\n\021S2SInviteGuildAck\022"
    "\017\n\007guildid\030\001 \002(\004\022\020\n\010playerid\030\002 \002(\r\022\021\n\tin"
    "vitedid\030\003 \002(\r\"F\n\020S2SApplyGuildReq\022\017\n\007gui"
    "ldid\030\001 \002(\004\022\017\n\007invitor\030\002 \002(\r\022\020\n\010playerid\030"
    "\003 \002(\r\"C\n\020S2SApplyGuildAck\022\020\n\010playerid\030\001 "
    "\002(\r\022\017\n\007guildid\030\002 \002(\004\022\014\n\004code\030\003 \002(\r\"J\n\027S2"
    "SPlayerGuildChangeReq\022\020\n\010playerid\030\001 \002(\r\022"
    "\017\n\007guildid\030\002 \002(\004\022\014\n\004code\030\003 \002(\r\"F\n\017S2SExi"
    "tGuildReq\022\017\n\007guildid\030\001 \002(\004\022\020\n\010playerid\030\002"
    " \002(\r\022\020\n\010serverid\030\003 \002(\r\"`\n\024S2STransferMas"
    "terReq\022\017\n\007guildid\030\001 \002(\004\022\020\n\010playerid\030\002 \002("
    "\r\022\023\n\013newmasterid\030\003 \002(\r\022\020\n\010serverid\030\004 \002(\r"
    "\"t\n\021S2SReviewApplyReq\022\020\n\010playerid\030\001 \002(\r\022"
    "\024\n\014dealplayerid\030\002 \001(\r\022\024\n\014operatortype\030\003 "
    "\002(\r\022\017\n\007guildid\030\004 \002(\004\022\020\n\010serverid\030\005 \002(\r\"J"
    "\n\023S2SDissolveGuildReq\022\020\n\010playerid\030\001 \002(\r\022"
    "\017\n\007guildid\030\002 \002(\004\022\020\n\010serverid\030\003 \002(\r\"Z\n\021S2"
    "SModifyMedalReq\022\020\n\010playerid\030\001 \002(\r\022\017\n\007gui"
    "ldid\030\002 \002(\004\022\020\n\010serverid\030\003 \002(\r\022\020\n\010newmedal"
    "\030\004 \002(\r\"q\n\024S2SQueryGuildListReq\022\020\n\010player"
    "id\030\001 \002(\r\022\020\n\010serverid\030\002 \002(\r\022%\n\006guilds\030\003 \001"
    "(\0132\025.KFMsg.PBGuildIdArray\022\016\n\006cursor\030\004 \002("
    "\r\"[\n\020S2SKickMemberReq\022\020\n\010playerid\030\001 \002(\r\022"
    "\017\n\007guildid\030\002 \002(\004\022\022\n\ntoplayerid\030\003 \002(\r\022\020\n\010"
    "serverid\030\004 \002(\r\"L\n\025S2SLoginQueryGuildReq\022"
    "\017\n\007guildid\030\001 \002(\004\022\020\n\010playerid\030\002 \002(\r\022\020\n\010se"
    "rverid\030\003 \002(\r\"u\n\025S2SLoginQueryGuildAck\022\020\n"
    "\010playerid\030\001 \002(\r\022\"\n\tguilddata\030\002 \002(\0132\017.KFM"
    "sg.PBObject\022\025\n\rshowapplicant\030\003 \002(\010\022\017\n\007gu"
    "ildid\030\004 \002(\004\"[\n\025S2SUpdateGuildDataReq\022\017\n\007"
    "guildid\030\001 \002(\004\022\020\n\010playerid\030\002 \002(\r\022\037\n\006pbdat"
    "a\030\003 \003(\0132\017.KFMsg.PBString\"7\n\022S2SUpgradeGu"
    "ildReq\022\017\n\007guildid\030\001 \002(\004\022\020\n\010playerid\030\002 \002("
    "\r\"C\n\022S2SUpgradeGuildAck\022\020\n\010playerid\030\001 \002("
    "\r\022\r\n\005level\030\002 \002(\r\022\014\n\004code\030\003 \002(\r\"r\n\030S2SApp"
    "ointGuildMemberReq\022\020\n\010playerid\030\001 \002(\r\022\017\n\007"
    "guildid\030\002 \002(\004\022\022\n\ntoplayerid\030\003 \002(\r\022\r\n\005tit"
    "le\030\004 \002(\r\022\020\n\010serverid\030\005 \002(\r\"P\n\027S2SSearchG"
    "uildByNameReq\022\021\n\tguildname\030\001 \002(\t\022\020\n\010serv"
    "erid\030\002 \002(\r\022\020\n\010playerid\030\003 \002(\r\"g\n\024S2SSetGu"
    "ildSwitchReq\022\020\n\010playerid\030\001 \002(\r\022\017\n\007guildi"
    "d\030\002 \002(\004\022\014\n\004type\030\003 \002(\t\022\014\n\004flag\030\004 \002(\r\022\020\n\010s"
    "erverid\030\005 \002(\r\"=\n\027S2SLoginQueryGuildidReq"
    "\022\020\n\010playerid\030\001 \002(\r\022\020\n\010serverid\030\002 \002(\r\"<\n\027"
    "S2SLoginQueryGuildidAck\022\020\n\010playerid\030\001 \002("
    "\r\022\017\n\007guildid\030\002 \002(\004\"z\n\023S2SQueryGuildLogRe"
    "q\022\017\n\007guildid\030\001 \002(\004\022\020\n\010playerid\030\002 \002(\r\022\020\n\010"
    "serverid\030\003 \002(\r\022\020\n\010beginpos\030\004 \002(\r\022\016\n\006endp"
    "os\030\005 \002(\r\022\014\n\004page\030\006 \002(\r\"Q\n\030S2SAddGuildAct"
    "ivenessReq\022\017\n\007guildid\030\001 \002(\004\022\020\n\010playerid\030"
    "\002 \002(\r\022\022\n\nactiveness\030\003 \002(\r\"i\n\017S2SGMAddMai"
    "lReq\022%\n\tplayerids\030\001 \001(\0132\022.KFMsg.PBPlayer"
    "Ids\022\020\n\010mailtype\030\002 \002(\r\022\035\n\006pbmail\030\003 \002(\0132\r."
    "KFMsg.PBMail\"\311\001\n\023S2SSendChatToServer\022\020\n\010"
    "chatinfo\030\001 \002(\t\022\017\n\007isvoice\030\002 \002(\r\022\022\n\nplaye"
    "rname\030\003 \002(\t\022\020\n\010playerid\030\004 \002(\r\022\022\n\nplayeri"
    "con\030\005 \002(\t\022\023\n\013playergrade\030\006 \002(\r\022\021\n\tplayer"
    "sex\030\007 \002(\r\022\025\n\rplayericonbox\030\010 \002(\t\022\026\n\016play"
    "erserverid\030\t \002(\r*\234\036\n\016ServerProtocol\022\036\n\030S"
    "2S_TRANSMIT_MESSAGE_REQ\020\211\244\001\022\037\n\031S2S_BROAD"
    "CAST_MESSAGE_REQ\020\212\244\001\022\031\n\023S2S_SAVE_PLAYER_"
    "REQ\020\213\244\001\022\033\n\025S2S_DELETE_PLAYER_REQ\020\214\244\001\022 \n\032"
    "S2S_UPDATE_PUBLIC_DATA_REQ\020\215\244\001\022\"\n\034S2S_UP"
    "DATE_ZONE_TO_PROXY_REQ\020\216\244\001\022$\n\036S2S_TRANSM"
    "IT_TO_DATA_SHARD_REQ\020\217\244\001\022\034\n\026S2S_BROADCAS"
    "T_TO_WORLD\020\220\244\001\022\033\n\025S2S_BROADCAST_TO_GAME\020"
    "\221\244\001\022\033\n\025S2S_BROADCAST_TO_GATE\020\222\244\001\022\034\n\026S2S_"
    "TRANSMIT_TO_PLAYER\020\223\244\001\022\034\n\026S2S_TRANSMIT_T"
    "O_SERVER\020\224\244\001\022\036\n\030S2S_KICK_GAME_PLAYER_REQ"
    "\020\355\244\001\022\036\n\030S2S_KICK_GATE_PLAYER_REQ\020\356\244\001\022 \n\032"
    "S2S_LOGIN_LOGIN_VERIFY_REQ\020\360\244\001\022 \n\032S2S_LO"
    "GIN_LOGIN_VERIFY_ACK\020\361\244\001\022&\n S2S_LOGIN_TE"
    "LL_TOKEN_TO_GAME_REQ\020\362\244\001\022 \n\032S2S_LOGIN_WO"
    "RLD_VERIFY_REQ\020\364\244\001\022#\n\035S2S_LOGIN_FAILED_T"
    "O_LOGIN_ACK\020\365\244\001\022\036\n\030S2S_GAME_SYNC_ONLINE_"
    "REQ\020\371\244\001\022\030\n\022S2S_LOGIN_GAME_ACK\020\373\244\001\022\037\n\031S2S"
    "_LOGIN_LOAD_PLAYER_REQ\020\374\244\001\022\037\n\031S2S_LOGIN_"
    "LOAD_PLAYER_ACK\020\375\244\001\022\027\n\021S2S_LOGIN_OUT_REQ"
    "\020\377\244\001\022 \n\032S2S_PLAYER_ENTER_WORLD_REQ\020\200\245\001\022 "
    "\n\032S2S_PLAYER_LEAVE_WORLD_REQ\020\201\245\001\022\035\n\027S2S_"
    "SET_PLAYER_NAME_REQ\020\204\245\001\022\035\n\027S2S_SET_PLAYE"
    "R_NAME_ACK\020\205\245\001\022\"\n\034S2S_PLAYER_DISCONNECTI"
    "ON_REQ\020\206\245\001\022\030\n\022S2S_QUERY_MAIL_REQ\020\207\245\001\022\030\n\022"
    "S2S_QUERY_MAIL_ACK\020\210\245\001\022\031\n\023S2S_DELETE_MAI"
    "L_REQ\020\211\245\001\022\032\n\024S2S_QUERY_FRIEND_REQ\020\212\245\001\022\037\n"
    "\031S2S_ADD_FRIEND_INVITE_REQ\020\213\245\001\022\030\n\022S2S_DE"
    "L_FRIEND_REQ\020\214\245\001\022\032\n\024S2S_QUERY_FRIEND_ACK"
    "\020\215\245\001\022!\n\033S2S_QUERY_FRIEND_INVITE_ACK\020\216\245\001\022"
    "\037\n\031S2S_ADD_FRIEND_INVITE_ACK\020\217\245\001\022\037\n\031S2S_"
    "DEL_FRIEND_INVITE_REQ\020\220\245\001\022\030\n\022S2S_ADD_FRI"
    "END_REQ\020\221\245\001\022\030\n\022S2S_DEL_FRIEND_ACK\020\222\245\001\022\030\n"
    "\022S2S_ADD_FRIEND_ACK\020\223\245\001\022\033\n\025S2S_UPDATE_FR"
    "IEND_REQ\020\224\245\001\022\026\n\020S2S_ADD_MAIL_REQ\020\225\245\001\022\035\n\027"
    "S2S_NOTICE_NEW_MAIL_REQ\020\226\245\001\022\"\n\034S2S_UPDAT"
    "E_FRIEND_LINESS_REQ\020\227\245\001\022\031\n\023S2S_QUERY_BAS"
    "IC_REQ\020\230\245\001\022\032\n\024S2S_QUERY_PLAYER_REQ\020\231\245\001\022\031"
    "\n\023S2S_QUERY_BASIC_ACK\020\232\245\001\022\032\n\024S2S_QUERY_P"
    "LAYER_ACK\020\233\245\001\022!\n\033S2S_QUERY_FRIEND_INVITE"
    "_REQ\020\234\245\001\022\031\n\023S2S_CREATE_ROLE_REQ\020\236\245\001\022\031\n\023S"
    "2S_CREATE_ROLE_ACK\020\237\245\001\022\036\n\030S2S_UPDATE_MAI"
    "L_FLAG_REQ\020\240\245\001\022\036\n\030S2S_UPDATE_MAIL_FLAG_A"
    "CK\020\241\245\001\022\032\n\024S2S_PLAYER_TOAST_REQ\020\244\245\001\022\032\n\024S2"
    "S_PLAYER_TOAST_ACK\020\245\245\001\022!\n\033S2S_UPDATE_FRI"
    "ENDLINESS_ACK\020\246\245\001\022 \n\032S2S_CREATE_MATCH_GR"
    "OUP_REQ\020\247\245\001\022(\n\"S2S_RECEIVE_INVITE_MATCH_"
    "GROUP_REQ\020\250\245\001\022(\n\"S2S_CONSENT_INVITE_MATC"
    "H_GROUP_REQ\020\251\245\001\022$\n\036S2S_ADD_MATCH_GROUP_M"
    "EMBER_REQ\020\252\245\001\022\'\n!S2S_REMOVE_MATCH_GROUP_"
    "MEMBER_ACK\020\253\245\001\022\037\n\031S2S_LEAVE_MATCH_GROUP_"
    "REQ\020\254\245\001\022\036\n\030S2S_KICK_MATCH_GROUP_REQ\020\255\245\001\022"
    "\037\n\031S2S_APPLY_MATCH_GROUP_REQ\020\256\245\001\022\037\n\031S2S_"
    "LEAVE_MATCH_GROUP_ACK\020\257\245\001\022\'\n!S2S_CONSENT"
    "_APPLY_MATCH_GROUP_ACK\020\260\245\001\022&\n S2S_ONLINE"
    "_QUERY_MATCH_GROUP_REQ\020\261\245\001\022$\n\036S2S_ADD_MA"
    "TCH_GROUP_MEMBER_ACK\020\262\245\001\022!\n\033S2S_UPDATE_G"
    "ROUP_MEMBER_ACK\020\263\245\001\022!\n\033S2S_UPDATE_GROUP_"
    "MEMBER_REQ\020\264\245\001\022(\n\"S2S_OFFLINE_UPDATE_MAT"
    "CH_GROUP_REQ\020\265\245\001\022)\n#S2S_CREATE_MATCH_GRO"
    "UP_TO_SHARD_REQ\020\266\245\001\022\037\n\031S2S_UPDATE_GUEST_"
    "LIST_REQ\020\267\245\001\022\031\n\023S2S_QUERY_GUEST_REQ\020\270\245\001\022"
    "\031\n\023S2S_QUERY_GUEST_ACK\020\271\245\001\022\037\n\031S2S_UPDATE"
    "_GROUP_DATA_ACK\020\272\245\001\022\037\n\031S2S_APPLY_MATCH_G"
    "ROUP_ACK\020\273\245\001\022\037\n\031S2S_QUERY_TOAST_COUNT_RE"
    "Q\020\274\245\001\022\037\n\031S2S_QUERY_TOAST_COUNT_ACK\020\275\245\001\022 "
    "\n\032S2S_UPDATE_GROUP_MATCH_REQ\020\276\245\001\022#\n\035S2S_"
    "NEW_PLAYER_LOGIN_MAIL_REQ\020\300\245\001\022\035\n\027S2S_QUE"
    "RY_RANK_LIST_REQ\020\303\245\001\022$\n\036S2S_QUERY_FRIEND"
    "_RANK_LIST_REQ\020\304\245\001\022#\n\035S2S_TELL_MATCH_GRO"
    "UP_DATA_ACK\020\310\245\001\022\036\n\030S2S_UPDATE_RANK_DATA_"
    "REQ\020\311\245\001\022$\n\036S2S_ADD_RECENT_PLAYER_DATA_RE"
    "Q\020\312\245\001\022\037\n\031S2S_QUERY_RECENT_LIST_REQ\020\313\245\001\022\037"
    "\n\031S2S_QUERY_RECENT_LIST_ACK\020\314\245\001\022\032\n\024S2S_C"
    "REATE_GUILD_REQ\020\315\245\001\022#\n\035S2S_CREATE_GUILD_"
    "TO_SHARD_REQ\020\316\245\001\022\032\n\024S2S_CREATE_GUILD_ACK"
    "\020\317\245\001\022&\n S2S_UPDATE_MEMBER_BASIC_DATA_REQ"
    "\020\320\245\001\022\032\n\024S2S_INVITE_GUILD_REQ\020\321\245\001\022\032\n\024S2S_"
    "INVITE_GUILD_ACK\020\322\245\001\022\031\n\023S2S_APPLY_GUILD_"
    "REQ\020\323\245\001\022\031\n\023S2S_APPLY_GUILD_ACK\020\324\245\001\022!\n\033S2"
    "S_PLAYER_GUILD_CHANGE_REQ\020\325\245\001\022\030\n\022S2S_EXI"
    "T_GUILD_REQ\020\326\245\001\022\035\n\027S2S_TRANSFER_MASTER_R"
    "EQ\020\327\245\001\022\032\n\024S2S_REVIEW_APPLY_REQ\020\330\245\001\022\034\n\026S2"
    "S_DISSOLVE_GUILD_REQ\020\331\245\001\022\032\n\024S2S_MODIFY_M"
    "EDAL_REQ\020\332\245\001\022\036\n\030S2S_QUERY_GUILD_LIST_REQ"
    "\020\333\245\001\022\031\n\023S2S_KICK_MEMBER_REQ\020\334\245\001\022\037\n\031S2S_L"
    "OGIN_QUERY_GUILD_REQ\020\335\245\001\022\037\n\031S2S_LOGIN_QU"
    "ERY_GUILD_ACK\020\336\245\001\022\037\n\031S2S_UPDATE_GUILD_DA"
    "TA_REQ\020\337\245\001\022\033\n\025S2S_UPGRADE_GUILD_REQ\020\340\245\001\022"
    "\033\n\025S2S_UPGRADE_GUILD_ACK\020\341\245\001\022\"\n\034S2S_APPO"
    "INT_GUILD_MEMBER_REQ\020\342\245\001\022\"\n\034S2S_SEARCH_G"
    "UILD_BY_NAME_REQ\020\343\245\001\022\036\n\030S2S_SET_GUILD_SW"
    "ITCH_REQ\020\344\245\001\022!\n\033S2S_LOGIN_QUERY_GUILDID_"
    "REQ\020\345\245\001\022!\n\033S2S_LOGIN_QUERY_GUILDID_ACK\020\346"
    "\245\001\022\035\n\027S2S_QUERY_GUILD_LOG_REQ\020\347\245\001\022\"\n\034S2S"
    "_ADD_GUILD_ACTIVENESS_REQ\020\350\245\001\022\031\n\023S2S_GM_"
    "ADD_MAIL_REQ\020\264\246\001\022\035\n\027S2S_SEND_CHAT_TO_SER"
    "VER\020\265\246\001", 14527);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KFServerMessage.proto", &protobuf_RegisterTypes);
  S2STransmitMessageReq::default_instance_ = new S2STransmitMessageReq();
  S2SBroadcastMessageReq::default_instance_ = new S2SBroadcastMessageReq();
  S2SBroadcastToWord::default_instance_ = new S2SBroadcastToWord();
  S2SBroadcastToGame::default_instance_ = new S2SBroadcastToGame();
  S2SBroadcastToGate::default_instance_ = new S2SBroadcastToGate();
  S2STransmitToPlayer::default_instance_ = new S2STransmitToPlayer();
  S2STransmitToServer::default_instance_ = new S2STransmitToServer();
  S2SUpdateZoneToProxyReq::default_instance_ = new S2SUpdateZoneToProxyReq();
  S2STransmitToDataShardReq::default_instance_ = new S2STransmitToDataShardReq();
  S2SSavePlayerReq::default_instance_ = new S2SSavePlayerReq();
  S2SDeletePlayerReq::default_instance_ = new S2SDeletePlayerReq();
  S2SUpdatePublicDataReq::default_instance_ = new S2SUpdatePublicDataReq();
  S2SKickGamePlayerReq::default_instance_ = new S2SKickGamePlayerReq();
  S2SKickGatePlayerReq::default_instance_ = new S2SKickGatePlayerReq();
  S2SLoginLoginVerifyReq::default_instance_ = new S2SLoginLoginVerifyReq();
  S2SLoginLoginVerifyAck::default_instance_ = new S2SLoginLoginVerifyAck();
  PBLoginData::default_instance_ = new PBLoginData();
  S2SLoginWorldVerifyReq::default_instance_ = new S2SLoginWorldVerifyReq();
  S2SLoginFailedToLoginAck::default_instance_ = new S2SLoginFailedToLoginAck();
  S2SLoginTellTokenToGameReq::default_instance_ = new S2SLoginTellTokenToGameReq();
  S2SLoginGameAck::default_instance_ = new S2SLoginGameAck();
  S2SLoginLoadPlayerReq::default_instance_ = new S2SLoginLoadPlayerReq();
  S2SLoginLoadPlayerAck::default_instance_ = new S2SLoginLoadPlayerAck();
  S2SLoginOutReq::default_instance_ = new S2SLoginOutReq();
  S2SPlayerDisconnectionReq::default_instance_ = new S2SPlayerDisconnectionReq();
  S2SSetPlayerNameReq::default_instance_ = new S2SSetPlayerNameReq();
  S2SSetPlayerNameAck::default_instance_ = new S2SSetPlayerNameAck();
  S2SCreateRoleReq::default_instance_ = new S2SCreateRoleReq();
  S2SCreateRoleAck::default_instance_ = new S2SCreateRoleAck();
  S2SPlayerEnterWorldReq::default_instance_ = new S2SPlayerEnterWorldReq();
  S2SPlayerLeaveWorldReq::default_instance_ = new S2SPlayerLeaveWorldReq();
  S2SGameSyncOnlineReq::default_instance_ = new S2SGameSyncOnlineReq();
  S2SQueryMailReq::default_instance_ = new S2SQueryMailReq();
  PBMail::default_instance_ = new PBMail();
  PBMails::default_instance_ = new PBMails();
  S2SQueryMailAck::default_instance_ = new S2SQueryMailAck();
  S2SDeleteMailReq::default_instance_ = new S2SDeleteMailReq();
  S2SAddMailReq::default_instance_ = new S2SAddMailReq();
  S2SNoticeNewMailReq::default_instance_ = new S2SNoticeNewMailReq();
  PBRelation::default_instance_ = new PBRelation();
  S2SQueryFriendReq::default_instance_ = new S2SQueryFriendReq();
  S2SQueryFriendInviteReq::default_instance_ = new S2SQueryFriendInviteReq();
  S2SQueryFriendAck::default_instance_ = new S2SQueryFriendAck();
  S2SQueryFriendInviteAck::default_instance_ = new S2SQueryFriendInviteAck();
  S2SAddFriendInviteReq::default_instance_ = new S2SAddFriendInviteReq();
  S2SAddFriendInviteAck::default_instance_ = new S2SAddFriendInviteAck();
  S2SDelFriendReq::default_instance_ = new S2SDelFriendReq();
  S2SDelFriendAck::default_instance_ = new S2SDelFriendAck();
  S2SDelFriendInviteReq::default_instance_ = new S2SDelFriendInviteReq();
  S2SAddFriendReq::default_instance_ = new S2SAddFriendReq();
  S2SAddFriendAck::default_instance_ = new S2SAddFriendAck();
  S2SUpdateFriendReq::default_instance_ = new S2SUpdateFriendReq();
  S2SUpdateFriendLinessReq::default_instance_ = new S2SUpdateFriendLinessReq();
  S2SQueryBasicReq::default_instance_ = new S2SQueryBasicReq();
  S2SQueryBasicAck::default_instance_ = new S2SQueryBasicAck();
  S2SQueryPlayerReq::default_instance_ = new S2SQueryPlayerReq();
  S2SQueryPlayerAck::default_instance_ = new S2SQueryPlayerAck();
  S2SUpdateMailFlagReq::default_instance_ = new S2SUpdateMailFlagReq();
  S2SUpdateMailFlagAck::default_instance_ = new S2SUpdateMailFlagAck();
  S2SPlayerToastReq::default_instance_ = new S2SPlayerToastReq();
  S2SPlayerToastAck::default_instance_ = new S2SPlayerToastAck();
  S2SQueryToastCountReq::default_instance_ = new S2SQueryToastCountReq();
  S2SUpdateFriendLinessAck::default_instance_ = new S2SUpdateFriendLinessAck();
  S2SCreateMatchGroupReq::default_instance_ = new S2SCreateMatchGroupReq();
  S2SUpdateGroupMatchReq::default_instance_ = new S2SUpdateGroupMatchReq();
  S2SCreateMatchGroupToShardReq::default_instance_ = new S2SCreateMatchGroupToShardReq();
  S2SReceiveInviteMatchGroupReq::default_instance_ = new S2SReceiveInviteMatchGroupReq();
  S2SConsentInviteMatchGroupReq::default_instance_ = new S2SConsentInviteMatchGroupReq();
  S2SAddMatchGroupMemberReq::default_instance_ = new S2SAddMatchGroupMemberReq();
  S2SAddMatchGroupMemberAck::default_instance_ = new S2SAddMatchGroupMemberAck();
  S2STellMatchGroupDataAck::default_instance_ = new S2STellMatchGroupDataAck();
  S2SRemoveMatchGroupMemberAck::default_instance_ = new S2SRemoveMatchGroupMemberAck();
  S2SLeaveMatchGroupReq::default_instance_ = new S2SLeaveMatchGroupReq();
  S2SKickMatchGroupReq::default_instance_ = new S2SKickMatchGroupReq();
  S2SLeaveMatchGroupAck::default_instance_ = new S2SLeaveMatchGroupAck();
  S2SApplyMatchGroupReq::default_instance_ = new S2SApplyMatchGroupReq();
  S2SApplyMatchGroupAck::default_instance_ = new S2SApplyMatchGroupAck();
  S2SConsentApplyMatchGroupAck::default_instance_ = new S2SConsentApplyMatchGroupAck();
  S2SOnLineQueryMatchGroupReq::default_instance_ = new S2SOnLineQueryMatchGroupReq();
  S2SOffLineUpdateMatchGroupReq::default_instance_ = new S2SOffLineUpdateMatchGroupReq();
  S2SUpdateGroupMemberReq::default_instance_ = new S2SUpdateGroupMemberReq();
  S2SUpdateGroupMemberAck::default_instance_ = new S2SUpdateGroupMemberAck();
  S2SUpdateGroupDataAck::default_instance_ = new S2SUpdateGroupDataAck();
  S2SUpdateGuestListReq::default_instance_ = new S2SUpdateGuestListReq();
  S2SQueryGuestReq::default_instance_ = new S2SQueryGuestReq();
  S2SQueryGuestAck::default_instance_ = new S2SQueryGuestAck();
  S2SNewPlayerLoginMailReq::default_instance_ = new S2SNewPlayerLoginMailReq();
  S2SUpdateRankDataReq::default_instance_ = new S2SUpdateRankDataReq();
  S2SQueryRankListReq::default_instance_ = new S2SQueryRankListReq();
  S2SQueryFriendRankListReq::default_instance_ = new S2SQueryFriendRankListReq();
  S2SAddRecentPlayerDataReq::default_instance_ = new S2SAddRecentPlayerDataReq();
  S2SQueryRecentListReq::default_instance_ = new S2SQueryRecentListReq();
  S2SQueryRecentListAck::default_instance_ = new S2SQueryRecentListAck();
  S2SCreateGuidReq::default_instance_ = new S2SCreateGuidReq();
  S2SCreateGuildToShardReq::default_instance_ = new S2SCreateGuildToShardReq();
  S2SCreateGuildAck::default_instance_ = new S2SCreateGuildAck();
  S2SUpdateMemberBasicDataReq::default_instance_ = new S2SUpdateMemberBasicDataReq();
  S2SInviteGuildReq::default_instance_ = new S2SInviteGuildReq();
  S2SInviteGuildAck::default_instance_ = new S2SInviteGuildAck();
  S2SApplyGuildReq::default_instance_ = new S2SApplyGuildReq();
  S2SApplyGuildAck::default_instance_ = new S2SApplyGuildAck();
  S2SPlayerGuildChangeReq::default_instance_ = new S2SPlayerGuildChangeReq();
  S2SExitGuildReq::default_instance_ = new S2SExitGuildReq();
  S2STransferMasterReq::default_instance_ = new S2STransferMasterReq();
  S2SReviewApplyReq::default_instance_ = new S2SReviewApplyReq();
  S2SDissolveGuildReq::default_instance_ = new S2SDissolveGuildReq();
  S2SModifyMedalReq::default_instance_ = new S2SModifyMedalReq();
  S2SQueryGuildListReq::default_instance_ = new S2SQueryGuildListReq();
  S2SKickMemberReq::default_instance_ = new S2SKickMemberReq();
  S2SLoginQueryGuildReq::default_instance_ = new S2SLoginQueryGuildReq();
  S2SLoginQueryGuildAck::default_instance_ = new S2SLoginQueryGuildAck();
  S2SUpdateGuildDataReq::default_instance_ = new S2SUpdateGuildDataReq();
  S2SUpgradeGuildReq::default_instance_ = new S2SUpgradeGuildReq();
  S2SUpgradeGuildAck::default_instance_ = new S2SUpgradeGuildAck();
  S2SAppointGuildMemberReq::default_instance_ = new S2SAppointGuildMemberReq();
  S2SSearchGuildByNameReq::default_instance_ = new S2SSearchGuildByNameReq();
  S2SSetGuildSwitchReq::default_instance_ = new S2SSetGuildSwitchReq();
  S2SLoginQueryGuildidReq::default_instance_ = new S2SLoginQueryGuildidReq();
  S2SLoginQueryGuildidAck::default_instance_ = new S2SLoginQueryGuildidAck();
  S2SQueryGuildLogReq::default_instance_ = new S2SQueryGuildLogReq();
  S2SAddGuildActivenessReq::default_instance_ = new S2SAddGuildActivenessReq();
  S2SGMAddMailReq::default_instance_ = new S2SGMAddMailReq();
  S2SSendChatToServer::default_instance_ = new S2SSendChatToServer();
  S2STransmitMessageReq::default_instance_->InitAsDefaultInstance();
  S2SBroadcastMessageReq::default_instance_->InitAsDefaultInstance();
  S2SBroadcastToWord::default_instance_->InitAsDefaultInstance();
  S2SBroadcastToGame::default_instance_->InitAsDefaultInstance();
  S2SBroadcastToGate::default_instance_->InitAsDefaultInstance();
  S2STransmitToPlayer::default_instance_->InitAsDefaultInstance();
  S2STransmitToServer::default_instance_->InitAsDefaultInstance();
  S2SUpdateZoneToProxyReq::default_instance_->InitAsDefaultInstance();
  S2STransmitToDataShardReq::default_instance_->InitAsDefaultInstance();
  S2SSavePlayerReq::default_instance_->InitAsDefaultInstance();
  S2SDeletePlayerReq::default_instance_->InitAsDefaultInstance();
  S2SUpdatePublicDataReq::default_instance_->InitAsDefaultInstance();
  S2SKickGamePlayerReq::default_instance_->InitAsDefaultInstance();
  S2SKickGatePlayerReq::default_instance_->InitAsDefaultInstance();
  S2SLoginLoginVerifyReq::default_instance_->InitAsDefaultInstance();
  S2SLoginLoginVerifyAck::default_instance_->InitAsDefaultInstance();
  PBLoginData::default_instance_->InitAsDefaultInstance();
  S2SLoginWorldVerifyReq::default_instance_->InitAsDefaultInstance();
  S2SLoginFailedToLoginAck::default_instance_->InitAsDefaultInstance();
  S2SLoginTellTokenToGameReq::default_instance_->InitAsDefaultInstance();
  S2SLoginGameAck::default_instance_->InitAsDefaultInstance();
  S2SLoginLoadPlayerReq::default_instance_->InitAsDefaultInstance();
  S2SLoginLoadPlayerAck::default_instance_->InitAsDefaultInstance();
  S2SLoginOutReq::default_instance_->InitAsDefaultInstance();
  S2SPlayerDisconnectionReq::default_instance_->InitAsDefaultInstance();
  S2SSetPlayerNameReq::default_instance_->InitAsDefaultInstance();
  S2SSetPlayerNameAck::default_instance_->InitAsDefaultInstance();
  S2SCreateRoleReq::default_instance_->InitAsDefaultInstance();
  S2SCreateRoleAck::default_instance_->InitAsDefaultInstance();
  S2SPlayerEnterWorldReq::default_instance_->InitAsDefaultInstance();
  S2SPlayerLeaveWorldReq::default_instance_->InitAsDefaultInstance();
  S2SGameSyncOnlineReq::default_instance_->InitAsDefaultInstance();
  S2SQueryMailReq::default_instance_->InitAsDefaultInstance();
  PBMail::default_instance_->InitAsDefaultInstance();
  PBMails::default_instance_->InitAsDefaultInstance();
  S2SQueryMailAck::default_instance_->InitAsDefaultInstance();
  S2SDeleteMailReq::default_instance_->InitAsDefaultInstance();
  S2SAddMailReq::default_instance_->InitAsDefaultInstance();
  S2SNoticeNewMailReq::default_instance_->InitAsDefaultInstance();
  PBRelation::default_instance_->InitAsDefaultInstance();
  S2SQueryFriendReq::default_instance_->InitAsDefaultInstance();
  S2SQueryFriendInviteReq::default_instance_->InitAsDefaultInstance();
  S2SQueryFriendAck::default_instance_->InitAsDefaultInstance();
  S2SQueryFriendInviteAck::default_instance_->InitAsDefaultInstance();
  S2SAddFriendInviteReq::default_instance_->InitAsDefaultInstance();
  S2SAddFriendInviteAck::default_instance_->InitAsDefaultInstance();
  S2SDelFriendReq::default_instance_->InitAsDefaultInstance();
  S2SDelFriendAck::default_instance_->InitAsDefaultInstance();
  S2SDelFriendInviteReq::default_instance_->InitAsDefaultInstance();
  S2SAddFriendReq::default_instance_->InitAsDefaultInstance();
  S2SAddFriendAck::default_instance_->InitAsDefaultInstance();
  S2SUpdateFriendReq::default_instance_->InitAsDefaultInstance();
  S2SUpdateFriendLinessReq::default_instance_->InitAsDefaultInstance();
  S2SQueryBasicReq::default_instance_->InitAsDefaultInstance();
  S2SQueryBasicAck::default_instance_->InitAsDefaultInstance();
  S2SQueryPlayerReq::default_instance_->InitAsDefaultInstance();
  S2SQueryPlayerAck::default_instance_->InitAsDefaultInstance();
  S2SUpdateMailFlagReq::default_instance_->InitAsDefaultInstance();
  S2SUpdateMailFlagAck::default_instance_->InitAsDefaultInstance();
  S2SPlayerToastReq::default_instance_->InitAsDefaultInstance();
  S2SPlayerToastAck::default_instance_->InitAsDefaultInstance();
  S2SQueryToastCountReq::default_instance_->InitAsDefaultInstance();
  S2SUpdateFriendLinessAck::default_instance_->InitAsDefaultInstance();
  S2SCreateMatchGroupReq::default_instance_->InitAsDefaultInstance();
  S2SUpdateGroupMatchReq::default_instance_->InitAsDefaultInstance();
  S2SCreateMatchGroupToShardReq::default_instance_->InitAsDefaultInstance();
  S2SReceiveInviteMatchGroupReq::default_instance_->InitAsDefaultInstance();
  S2SConsentInviteMatchGroupReq::default_instance_->InitAsDefaultInstance();
  S2SAddMatchGroupMemberReq::default_instance_->InitAsDefaultInstance();
  S2SAddMatchGroupMemberAck::default_instance_->InitAsDefaultInstance();
  S2STellMatchGroupDataAck::default_instance_->InitAsDefaultInstance();
  S2SRemoveMatchGroupMemberAck::default_instance_->InitAsDefaultInstance();
  S2SLeaveMatchGroupReq::default_instance_->InitAsDefaultInstance();
  S2SKickMatchGroupReq::default_instance_->InitAsDefaultInstance();
  S2SLeaveMatchGroupAck::default_instance_->InitAsDefaultInstance();
  S2SApplyMatchGroupReq::default_instance_->InitAsDefaultInstance();
  S2SApplyMatchGroupAck::default_instance_->InitAsDefaultInstance();
  S2SConsentApplyMatchGroupAck::default_instance_->InitAsDefaultInstance();
  S2SOnLineQueryMatchGroupReq::default_instance_->InitAsDefaultInstance();
  S2SOffLineUpdateMatchGroupReq::default_instance_->InitAsDefaultInstance();
  S2SUpdateGroupMemberReq::default_instance_->InitAsDefaultInstance();
  S2SUpdateGroupMemberAck::default_instance_->InitAsDefaultInstance();
  S2SUpdateGroupDataAck::default_instance_->InitAsDefaultInstance();
  S2SUpdateGuestListReq::default_instance_->InitAsDefaultInstance();
  S2SQueryGuestReq::default_instance_->InitAsDefaultInstance();
  S2SQueryGuestAck::default_instance_->InitAsDefaultInstance();
  S2SNewPlayerLoginMailReq::default_instance_->InitAsDefaultInstance();
  S2SUpdateRankDataReq::default_instance_->InitAsDefaultInstance();
  S2SQueryRankListReq::default_instance_->InitAsDefaultInstance();
  S2SQueryFriendRankListReq::default_instance_->InitAsDefaultInstance();
  S2SAddRecentPlayerDataReq::default_instance_->InitAsDefaultInstance();
  S2SQueryRecentListReq::default_instance_->InitAsDefaultInstance();
  S2SQueryRecentListAck::default_instance_->InitAsDefaultInstance();
  S2SCreateGuidReq::default_instance_->InitAsDefaultInstance();
  S2SCreateGuildToShardReq::default_instance_->InitAsDefaultInstance();
  S2SCreateGuildAck::default_instance_->InitAsDefaultInstance();
  S2SUpdateMemberBasicDataReq::default_instance_->InitAsDefaultInstance();
  S2SInviteGuildReq::default_instance_->InitAsDefaultInstance();
  S2SInviteGuildAck::default_instance_->InitAsDefaultInstance();
  S2SApplyGuildReq::default_instance_->InitAsDefaultInstance();
  S2SApplyGuildAck::default_instance_->InitAsDefaultInstance();
  S2SPlayerGuildChangeReq::default_instance_->InitAsDefaultInstance();
  S2SExitGuildReq::default_instance_->InitAsDefaultInstance();
  S2STransferMasterReq::default_instance_->InitAsDefaultInstance();
  S2SReviewApplyReq::default_instance_->InitAsDefaultInstance();
  S2SDissolveGuildReq::default_instance_->InitAsDefaultInstance();
  S2SModifyMedalReq::default_instance_->InitAsDefaultInstance();
  S2SQueryGuildListReq::default_instance_->InitAsDefaultInstance();
  S2SKickMemberReq::default_instance_->InitAsDefaultInstance();
  S2SLoginQueryGuildReq::default_instance_->InitAsDefaultInstance();
  S2SLoginQueryGuildAck::default_instance_->InitAsDefaultInstance();
  S2SUpdateGuildDataReq::default_instance_->InitAsDefaultInstance();
  S2SUpgradeGuildReq::default_instance_->InitAsDefaultInstance();
  S2SUpgradeGuildAck::default_instance_->InitAsDefaultInstance();
  S2SAppointGuildMemberReq::default_instance_->InitAsDefaultInstance();
  S2SSearchGuildByNameReq::default_instance_->InitAsDefaultInstance();
  S2SSetGuildSwitchReq::default_instance_->InitAsDefaultInstance();
  S2SLoginQueryGuildidReq::default_instance_->InitAsDefaultInstance();
  S2SLoginQueryGuildidAck::default_instance_->InitAsDefaultInstance();
  S2SQueryGuildLogReq::default_instance_->InitAsDefaultInstance();
  S2SAddGuildActivenessReq::default_instance_->InitAsDefaultInstance();
  S2SGMAddMailReq::default_instance_->InitAsDefaultInstance();
  S2SSendChatToServer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_KFServerMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_KFServerMessage_2eproto {
  StaticDescriptorInitializer_KFServerMessage_2eproto() {
    protobuf_AddDesc_KFServerMessage_2eproto();
  }
} static_descriptor_initializer_KFServerMessage_2eproto_;
const ::google::protobuf::EnumDescriptor* ServerProtocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerProtocol_descriptor_;
}
bool ServerProtocol_IsValid(int value) {
  switch(value) {
    case 21001:
    case 21002:
    case 21003:
    case 21004:
    case 21005:
    case 21006:
    case 21007:
    case 21008:
    case 21009:
    case 21010:
    case 21011:
    case 21012:
    case 21101:
    case 21102:
    case 21104:
    case 21105:
    case 21106:
    case 21108:
    case 21109:
    case 21113:
    case 21115:
    case 21116:
    case 21117:
    case 21119:
    case 21120:
    case 21121:
    case 21124:
    case 21125:
    case 21126:
    case 21127:
    case 21128:
    case 21129:
    case 21130:
    case 21131:
    case 21132:
    case 21133:
    case 21134:
    case 21135:
    case 21136:
    case 21137:
    case 21138:
    case 21139:
    case 21140:
    case 21141:
    case 21142:
    case 21143:
    case 21144:
    case 21145:
    case 21146:
    case 21147:
    case 21148:
    case 21150:
    case 21151:
    case 21152:
    case 21153:
    case 21156:
    case 21157:
    case 21158:
    case 21159:
    case 21160:
    case 21161:
    case 21162:
    case 21163:
    case 21164:
    case 21165:
    case 21166:
    case 21167:
    case 21168:
    case 21169:
    case 21170:
    case 21171:
    case 21172:
    case 21173:
    case 21174:
    case 21175:
    case 21176:
    case 21177:
    case 21178:
    case 21179:
    case 21180:
    case 21181:
    case 21182:
    case 21184:
    case 21187:
    case 21188:
    case 21192:
    case 21193:
    case 21194:
    case 21195:
    case 21196:
    case 21197:
    case 21198:
    case 21199:
    case 21200:
    case 21201:
    case 21202:
    case 21203:
    case 21204:
    case 21205:
    case 21206:
    case 21207:
    case 21208:
    case 21209:
    case 21210:
    case 21211:
    case 21212:
    case 21213:
    case 21214:
    case 21215:
    case 21216:
    case 21217:
    case 21218:
    case 21219:
    case 21220:
    case 21221:
    case 21222:
    case 21223:
    case 21224:
    case 21300:
    case 21301:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int S2STransmitMessageReq::kPlayeridFieldNumber;
const int S2STransmitMessageReq::kMsgidFieldNumber;
const int S2STransmitMessageReq::kMsgdataFieldNumber;
#endif  // !_MSC_VER

S2STransmitMessageReq::S2STransmitMessageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2STransmitMessageReq::InitAsDefaultInstance() {
}

S2STransmitMessageReq::S2STransmitMessageReq(const S2STransmitMessageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2STransmitMessageReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  msgid_ = 0u;
  msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2STransmitMessageReq::~S2STransmitMessageReq() {
  SharedDtor();
}

void S2STransmitMessageReq::SharedDtor() {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    delete msgdata_;
  }
  if (this != default_instance_) {
  }
}

void S2STransmitMessageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2STransmitMessageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2STransmitMessageReq_descriptor_;
}

const S2STransmitMessageReq& S2STransmitMessageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2STransmitMessageReq* S2STransmitMessageReq::default_instance_ = NULL;

S2STransmitMessageReq* S2STransmitMessageReq::New() const {
  return new S2STransmitMessageReq;
}

void S2STransmitMessageReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    msgid_ = 0u;
    if (has_msgdata()) {
      if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
        msgdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2STransmitMessageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgid;
        break;
      }

      // required uint32 msgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msgdata;
        break;
      }

      // required string msgdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgdata().data(), this->msgdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2STransmitMessageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 msgid = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgid(), output);
  }

  // required string msgdata = 3;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgdata().data(), this->msgdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msgdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2STransmitMessageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 msgid = 2;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgid(), target);
  }

  // required string msgdata = 3;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgdata().data(), this->msgdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msgdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2STransmitMessageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 msgid = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // required string msgdata = 3;
    if (has_msgdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2STransmitMessageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2STransmitMessageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2STransmitMessageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2STransmitMessageReq::MergeFrom(const S2STransmitMessageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_msgdata()) {
      set_msgdata(from.msgdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2STransmitMessageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2STransmitMessageReq::CopyFrom(const S2STransmitMessageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2STransmitMessageReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2STransmitMessageReq::Swap(S2STransmitMessageReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(msgid_, other->msgid_);
    std::swap(msgdata_, other->msgdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2STransmitMessageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2STransmitMessageReq_descriptor_;
  metadata.reflection = S2STransmitMessageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SBroadcastMessageReq::kMsgidFieldNumber;
const int S2SBroadcastMessageReq::kMsgdataFieldNumber;
#endif  // !_MSC_VER

S2SBroadcastMessageReq::S2SBroadcastMessageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SBroadcastMessageReq::InitAsDefaultInstance() {
}

S2SBroadcastMessageReq::S2SBroadcastMessageReq(const S2SBroadcastMessageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SBroadcastMessageReq::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0u;
  msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SBroadcastMessageReq::~S2SBroadcastMessageReq() {
  SharedDtor();
}

void S2SBroadcastMessageReq::SharedDtor() {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    delete msgdata_;
  }
  if (this != default_instance_) {
  }
}

void S2SBroadcastMessageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SBroadcastMessageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SBroadcastMessageReq_descriptor_;
}

const S2SBroadcastMessageReq& S2SBroadcastMessageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SBroadcastMessageReq* S2SBroadcastMessageReq::default_instance_ = NULL;

S2SBroadcastMessageReq* S2SBroadcastMessageReq::New() const {
  return new S2SBroadcastMessageReq;
}

void S2SBroadcastMessageReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0u;
    if (has_msgdata()) {
      if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
        msgdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SBroadcastMessageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 msgid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msgdata;
        break;
      }

      // required string msgdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgdata().data(), this->msgdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SBroadcastMessageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 msgid = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgid(), output);
  }

  // required string msgdata = 2;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgdata().data(), this->msgdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msgdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SBroadcastMessageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 msgid = 1;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgid(), target);
  }

  // required string msgdata = 2;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgdata().data(), this->msgdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msgdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SBroadcastMessageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 msgid = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // required string msgdata = 2;
    if (has_msgdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SBroadcastMessageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SBroadcastMessageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SBroadcastMessageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SBroadcastMessageReq::MergeFrom(const S2SBroadcastMessageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_msgdata()) {
      set_msgdata(from.msgdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SBroadcastMessageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SBroadcastMessageReq::CopyFrom(const S2SBroadcastMessageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SBroadcastMessageReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SBroadcastMessageReq::Swap(S2SBroadcastMessageReq* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(msgdata_, other->msgdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SBroadcastMessageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SBroadcastMessageReq_descriptor_;
  metadata.reflection = S2SBroadcastMessageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SBroadcastToWord::kMsgidFieldNumber;
const int S2SBroadcastToWord::kMsgdataFieldNumber;
#endif  // !_MSC_VER

S2SBroadcastToWord::S2SBroadcastToWord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SBroadcastToWord::InitAsDefaultInstance() {
}

S2SBroadcastToWord::S2SBroadcastToWord(const S2SBroadcastToWord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SBroadcastToWord::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0u;
  msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SBroadcastToWord::~S2SBroadcastToWord() {
  SharedDtor();
}

void S2SBroadcastToWord::SharedDtor() {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    delete msgdata_;
  }
  if (this != default_instance_) {
  }
}

void S2SBroadcastToWord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SBroadcastToWord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SBroadcastToWord_descriptor_;
}

const S2SBroadcastToWord& S2SBroadcastToWord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SBroadcastToWord* S2SBroadcastToWord::default_instance_ = NULL;

S2SBroadcastToWord* S2SBroadcastToWord::New() const {
  return new S2SBroadcastToWord;
}

void S2SBroadcastToWord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0u;
    if (has_msgdata()) {
      if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
        msgdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SBroadcastToWord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 msgid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msgdata;
        break;
      }

      // required string msgdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgdata().data(), this->msgdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SBroadcastToWord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 msgid = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgid(), output);
  }

  // required string msgdata = 2;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgdata().data(), this->msgdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msgdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SBroadcastToWord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 msgid = 1;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgid(), target);
  }

  // required string msgdata = 2;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgdata().data(), this->msgdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msgdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SBroadcastToWord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 msgid = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // required string msgdata = 2;
    if (has_msgdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SBroadcastToWord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SBroadcastToWord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SBroadcastToWord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SBroadcastToWord::MergeFrom(const S2SBroadcastToWord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_msgdata()) {
      set_msgdata(from.msgdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SBroadcastToWord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SBroadcastToWord::CopyFrom(const S2SBroadcastToWord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SBroadcastToWord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SBroadcastToWord::Swap(S2SBroadcastToWord* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(msgdata_, other->msgdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SBroadcastToWord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SBroadcastToWord_descriptor_;
  metadata.reflection = S2SBroadcastToWord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SBroadcastToGame::kMsgidFieldNumber;
const int S2SBroadcastToGame::kMsgdataFieldNumber;
#endif  // !_MSC_VER

S2SBroadcastToGame::S2SBroadcastToGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SBroadcastToGame::InitAsDefaultInstance() {
}

S2SBroadcastToGame::S2SBroadcastToGame(const S2SBroadcastToGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SBroadcastToGame::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0u;
  msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SBroadcastToGame::~S2SBroadcastToGame() {
  SharedDtor();
}

void S2SBroadcastToGame::SharedDtor() {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    delete msgdata_;
  }
  if (this != default_instance_) {
  }
}

void S2SBroadcastToGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SBroadcastToGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SBroadcastToGame_descriptor_;
}

const S2SBroadcastToGame& S2SBroadcastToGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SBroadcastToGame* S2SBroadcastToGame::default_instance_ = NULL;

S2SBroadcastToGame* S2SBroadcastToGame::New() const {
  return new S2SBroadcastToGame;
}

void S2SBroadcastToGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0u;
    if (has_msgdata()) {
      if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
        msgdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SBroadcastToGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 msgid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msgdata;
        break;
      }

      // required string msgdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgdata().data(), this->msgdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SBroadcastToGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 msgid = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgid(), output);
  }

  // required string msgdata = 2;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgdata().data(), this->msgdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msgdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SBroadcastToGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 msgid = 1;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgid(), target);
  }

  // required string msgdata = 2;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgdata().data(), this->msgdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msgdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SBroadcastToGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 msgid = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // required string msgdata = 2;
    if (has_msgdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SBroadcastToGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SBroadcastToGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SBroadcastToGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SBroadcastToGame::MergeFrom(const S2SBroadcastToGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_msgdata()) {
      set_msgdata(from.msgdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SBroadcastToGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SBroadcastToGame::CopyFrom(const S2SBroadcastToGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SBroadcastToGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SBroadcastToGame::Swap(S2SBroadcastToGame* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(msgdata_, other->msgdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SBroadcastToGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SBroadcastToGame_descriptor_;
  metadata.reflection = S2SBroadcastToGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SBroadcastToGate::kMsgidFieldNumber;
const int S2SBroadcastToGate::kMsgdataFieldNumber;
#endif  // !_MSC_VER

S2SBroadcastToGate::S2SBroadcastToGate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SBroadcastToGate::InitAsDefaultInstance() {
}

S2SBroadcastToGate::S2SBroadcastToGate(const S2SBroadcastToGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SBroadcastToGate::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0u;
  msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SBroadcastToGate::~S2SBroadcastToGate() {
  SharedDtor();
}

void S2SBroadcastToGate::SharedDtor() {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    delete msgdata_;
  }
  if (this != default_instance_) {
  }
}

void S2SBroadcastToGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SBroadcastToGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SBroadcastToGate_descriptor_;
}

const S2SBroadcastToGate& S2SBroadcastToGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SBroadcastToGate* S2SBroadcastToGate::default_instance_ = NULL;

S2SBroadcastToGate* S2SBroadcastToGate::New() const {
  return new S2SBroadcastToGate;
}

void S2SBroadcastToGate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0u;
    if (has_msgdata()) {
      if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
        msgdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SBroadcastToGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 msgid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msgdata;
        break;
      }

      // required string msgdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgdata().data(), this->msgdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SBroadcastToGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 msgid = 1;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgid(), output);
  }

  // required string msgdata = 2;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgdata().data(), this->msgdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msgdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SBroadcastToGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 msgid = 1;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgid(), target);
  }

  // required string msgdata = 2;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgdata().data(), this->msgdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msgdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SBroadcastToGate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 msgid = 1;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // required string msgdata = 2;
    if (has_msgdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SBroadcastToGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SBroadcastToGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SBroadcastToGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SBroadcastToGate::MergeFrom(const S2SBroadcastToGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_msgdata()) {
      set_msgdata(from.msgdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SBroadcastToGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SBroadcastToGate::CopyFrom(const S2SBroadcastToGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SBroadcastToGate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SBroadcastToGate::Swap(S2SBroadcastToGate* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(msgdata_, other->msgdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SBroadcastToGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SBroadcastToGate_descriptor_;
  metadata.reflection = S2SBroadcastToGate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2STransmitToPlayer::kPlayeridFieldNumber;
const int S2STransmitToPlayer::kMsgidFieldNumber;
const int S2STransmitToPlayer::kMsgdataFieldNumber;
#endif  // !_MSC_VER

S2STransmitToPlayer::S2STransmitToPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2STransmitToPlayer::InitAsDefaultInstance() {
}

S2STransmitToPlayer::S2STransmitToPlayer(const S2STransmitToPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2STransmitToPlayer::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  msgid_ = 0u;
  msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2STransmitToPlayer::~S2STransmitToPlayer() {
  SharedDtor();
}

void S2STransmitToPlayer::SharedDtor() {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    delete msgdata_;
  }
  if (this != default_instance_) {
  }
}

void S2STransmitToPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2STransmitToPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2STransmitToPlayer_descriptor_;
}

const S2STransmitToPlayer& S2STransmitToPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2STransmitToPlayer* S2STransmitToPlayer::default_instance_ = NULL;

S2STransmitToPlayer* S2STransmitToPlayer::New() const {
  return new S2STransmitToPlayer;
}

void S2STransmitToPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    msgid_ = 0u;
    if (has_msgdata()) {
      if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
        msgdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2STransmitToPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgid;
        break;
      }

      // required uint32 msgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msgdata;
        break;
      }

      // required string msgdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgdata().data(), this->msgdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2STransmitToPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 msgid = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgid(), output);
  }

  // required string msgdata = 3;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgdata().data(), this->msgdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msgdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2STransmitToPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 msgid = 2;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgid(), target);
  }

  // required string msgdata = 3;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgdata().data(), this->msgdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msgdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2STransmitToPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 msgid = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // required string msgdata = 3;
    if (has_msgdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2STransmitToPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2STransmitToPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2STransmitToPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2STransmitToPlayer::MergeFrom(const S2STransmitToPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_msgdata()) {
      set_msgdata(from.msgdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2STransmitToPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2STransmitToPlayer::CopyFrom(const S2STransmitToPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2STransmitToPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2STransmitToPlayer::Swap(S2STransmitToPlayer* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(msgid_, other->msgid_);
    std::swap(msgdata_, other->msgdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2STransmitToPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2STransmitToPlayer_descriptor_;
  metadata.reflection = S2STransmitToPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2STransmitToServer::kMsgidFieldNumber;
const int S2STransmitToServer::kMsgdataFieldNumber;
#endif  // !_MSC_VER

S2STransmitToServer::S2STransmitToServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2STransmitToServer::InitAsDefaultInstance() {
}

S2STransmitToServer::S2STransmitToServer(const S2STransmitToServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2STransmitToServer::SharedCtor() {
  _cached_size_ = 0;
  msgid_ = 0u;
  msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2STransmitToServer::~S2STransmitToServer() {
  SharedDtor();
}

void S2STransmitToServer::SharedDtor() {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    delete msgdata_;
  }
  if (this != default_instance_) {
  }
}

void S2STransmitToServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2STransmitToServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2STransmitToServer_descriptor_;
}

const S2STransmitToServer& S2STransmitToServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2STransmitToServer* S2STransmitToServer::default_instance_ = NULL;

S2STransmitToServer* S2STransmitToServer::New() const {
  return new S2STransmitToServer;
}

void S2STransmitToServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgid_ = 0u;
    if (has_msgdata()) {
      if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
        msgdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2STransmitToServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 msgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msgdata;
        break;
      }

      // required string msgdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgdata().data(), this->msgdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2STransmitToServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 msgid = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgid(), output);
  }

  // required string msgdata = 3;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgdata().data(), this->msgdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msgdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2STransmitToServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 msgid = 2;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgid(), target);
  }

  // required string msgdata = 3;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgdata().data(), this->msgdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msgdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2STransmitToServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 msgid = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // required string msgdata = 3;
    if (has_msgdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2STransmitToServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2STransmitToServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2STransmitToServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2STransmitToServer::MergeFrom(const S2STransmitToServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_msgdata()) {
      set_msgdata(from.msgdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2STransmitToServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2STransmitToServer::CopyFrom(const S2STransmitToServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2STransmitToServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2STransmitToServer::Swap(S2STransmitToServer* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(msgdata_, other->msgdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2STransmitToServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2STransmitToServer_descriptor_;
  metadata.reflection = S2STransmitToServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SUpdateZoneToProxyReq::kZoneidFieldNumber;
#endif  // !_MSC_VER

S2SUpdateZoneToProxyReq::S2SUpdateZoneToProxyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SUpdateZoneToProxyReq::InitAsDefaultInstance() {
}

S2SUpdateZoneToProxyReq::S2SUpdateZoneToProxyReq(const S2SUpdateZoneToProxyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SUpdateZoneToProxyReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SUpdateZoneToProxyReq::~S2SUpdateZoneToProxyReq() {
  SharedDtor();
}

void S2SUpdateZoneToProxyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SUpdateZoneToProxyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SUpdateZoneToProxyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SUpdateZoneToProxyReq_descriptor_;
}

const S2SUpdateZoneToProxyReq& S2SUpdateZoneToProxyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SUpdateZoneToProxyReq* S2SUpdateZoneToProxyReq::default_instance_ = NULL;

S2SUpdateZoneToProxyReq* S2SUpdateZoneToProxyReq::New() const {
  return new S2SUpdateZoneToProxyReq;
}

void S2SUpdateZoneToProxyReq::Clear() {
  zoneid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SUpdateZoneToProxyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 zoneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_zoneid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_zoneid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_zoneid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SUpdateZoneToProxyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 zoneid = 1;
  for (int i = 0; i < this->zoneid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->zoneid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SUpdateZoneToProxyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 zoneid = 1;
  for (int i = 0; i < this->zoneid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->zoneid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SUpdateZoneToProxyReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 zoneid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->zoneid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->zoneid(i));
    }
    total_size += 1 * this->zoneid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SUpdateZoneToProxyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SUpdateZoneToProxyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SUpdateZoneToProxyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SUpdateZoneToProxyReq::MergeFrom(const S2SUpdateZoneToProxyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  zoneid_.MergeFrom(from.zoneid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SUpdateZoneToProxyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SUpdateZoneToProxyReq::CopyFrom(const S2SUpdateZoneToProxyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SUpdateZoneToProxyReq::IsInitialized() const {

  return true;
}

void S2SUpdateZoneToProxyReq::Swap(S2SUpdateZoneToProxyReq* other) {
  if (other != this) {
    zoneid_.Swap(&other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SUpdateZoneToProxyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SUpdateZoneToProxyReq_descriptor_;
  metadata.reflection = S2SUpdateZoneToProxyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2STransmitToDataShardReq::kZoneidFieldNumber;
const int S2STransmitToDataShardReq::kMsgidFieldNumber;
const int S2STransmitToDataShardReq::kMsgdataFieldNumber;
#endif  // !_MSC_VER

S2STransmitToDataShardReq::S2STransmitToDataShardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2STransmitToDataShardReq::InitAsDefaultInstance() {
}

S2STransmitToDataShardReq::S2STransmitToDataShardReq(const S2STransmitToDataShardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2STransmitToDataShardReq::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0u;
  msgid_ = 0u;
  msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2STransmitToDataShardReq::~S2STransmitToDataShardReq() {
  SharedDtor();
}

void S2STransmitToDataShardReq::SharedDtor() {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    delete msgdata_;
  }
  if (this != default_instance_) {
  }
}

void S2STransmitToDataShardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2STransmitToDataShardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2STransmitToDataShardReq_descriptor_;
}

const S2STransmitToDataShardReq& S2STransmitToDataShardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2STransmitToDataShardReq* S2STransmitToDataShardReq::default_instance_ = NULL;

S2STransmitToDataShardReq* S2STransmitToDataShardReq::New() const {
  return new S2STransmitToDataShardReq;
}

void S2STransmitToDataShardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zoneid_ = 0u;
    msgid_ = 0u;
    if (has_msgdata()) {
      if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
        msgdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2STransmitToDataShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zoneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgid;
        break;
      }

      // required uint32 msgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msgdata;
        break;
      }

      // required string msgdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgdata().data(), this->msgdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2STransmitToDataShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  // required uint32 msgid = 2;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgid(), output);
  }

  // required string msgdata = 3;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgdata().data(), this->msgdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msgdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2STransmitToDataShardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  // required uint32 msgid = 2;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->msgid(), target);
  }

  // required string msgdata = 3;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgdata().data(), this->msgdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msgdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2STransmitToDataShardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // required uint32 msgid = 2;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // required string msgdata = 3;
    if (has_msgdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2STransmitToDataShardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2STransmitToDataShardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2STransmitToDataShardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2STransmitToDataShardReq::MergeFrom(const S2STransmitToDataShardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_msgdata()) {
      set_msgdata(from.msgdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2STransmitToDataShardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2STransmitToDataShardReq::CopyFrom(const S2STransmitToDataShardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2STransmitToDataShardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2STransmitToDataShardReq::Swap(S2STransmitToDataShardReq* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(msgid_, other->msgid_);
    std::swap(msgdata_, other->msgdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2STransmitToDataShardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2STransmitToDataShardReq_descriptor_;
  metadata.reflection = S2STransmitToDataShardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SSavePlayerReq::kZoneidFieldNumber;
const int S2SSavePlayerReq::kIdFieldNumber;
const int S2SSavePlayerReq::kDataFieldNumber;
#endif  // !_MSC_VER

S2SSavePlayerReq::S2SSavePlayerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SSavePlayerReq::InitAsDefaultInstance() {
  data_ = const_cast< ::KFMsg::PBObject*>(&::KFMsg::PBObject::default_instance());
}

S2SSavePlayerReq::S2SSavePlayerReq(const S2SSavePlayerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SSavePlayerReq::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0u;
  id_ = 0u;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SSavePlayerReq::~S2SSavePlayerReq() {
  SharedDtor();
}

void S2SSavePlayerReq::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void S2SSavePlayerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SSavePlayerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SSavePlayerReq_descriptor_;
}

const S2SSavePlayerReq& S2SSavePlayerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SSavePlayerReq* S2SSavePlayerReq::default_instance_ = NULL;

S2SSavePlayerReq* S2SSavePlayerReq::New() const {
  return new S2SSavePlayerReq;
}

void S2SSavePlayerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zoneid_ = 0u;
    id_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::KFMsg::PBObject::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SSavePlayerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zoneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required .KFMsg.PBObject data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SSavePlayerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required .KFMsg.PBObject data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SSavePlayerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // required .KFMsg.PBObject data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SSavePlayerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required .KFMsg.PBObject data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SSavePlayerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SSavePlayerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SSavePlayerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SSavePlayerReq::MergeFrom(const S2SSavePlayerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_data()) {
      mutable_data()->::KFMsg::PBObject::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SSavePlayerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SSavePlayerReq::CopyFrom(const S2SSavePlayerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SSavePlayerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SSavePlayerReq::Swap(S2SSavePlayerReq* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(id_, other->id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SSavePlayerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SSavePlayerReq_descriptor_;
  metadata.reflection = S2SSavePlayerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SDeletePlayerReq::kZoneidFieldNumber;
const int S2SDeletePlayerReq::kIdFieldNumber;
#endif  // !_MSC_VER

S2SDeletePlayerReq::S2SDeletePlayerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SDeletePlayerReq::InitAsDefaultInstance() {
}

S2SDeletePlayerReq::S2SDeletePlayerReq(const S2SDeletePlayerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SDeletePlayerReq::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SDeletePlayerReq::~S2SDeletePlayerReq() {
  SharedDtor();
}

void S2SDeletePlayerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SDeletePlayerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SDeletePlayerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SDeletePlayerReq_descriptor_;
}

const S2SDeletePlayerReq& S2SDeletePlayerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SDeletePlayerReq* S2SDeletePlayerReq::default_instance_ = NULL;

S2SDeletePlayerReq* S2SDeletePlayerReq::New() const {
  return new S2SDeletePlayerReq;
}

void S2SDeletePlayerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zoneid_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SDeletePlayerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zoneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SDeletePlayerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SDeletePlayerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SDeletePlayerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SDeletePlayerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SDeletePlayerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SDeletePlayerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SDeletePlayerReq::MergeFrom(const S2SDeletePlayerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SDeletePlayerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SDeletePlayerReq::CopyFrom(const S2SDeletePlayerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SDeletePlayerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SDeletePlayerReq::Swap(S2SDeletePlayerReq* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SDeletePlayerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SDeletePlayerReq_descriptor_;
  metadata.reflection = S2SDeletePlayerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SUpdatePublicDataReq::kPlayeridFieldNumber;
const int S2SUpdatePublicDataReq::kPbdataFieldNumber;
#endif  // !_MSC_VER

S2SUpdatePublicDataReq::S2SUpdatePublicDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SUpdatePublicDataReq::InitAsDefaultInstance() {
}

S2SUpdatePublicDataReq::S2SUpdatePublicDataReq(const S2SUpdatePublicDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SUpdatePublicDataReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SUpdatePublicDataReq::~S2SUpdatePublicDataReq() {
  SharedDtor();
}

void S2SUpdatePublicDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SUpdatePublicDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SUpdatePublicDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SUpdatePublicDataReq_descriptor_;
}

const S2SUpdatePublicDataReq& S2SUpdatePublicDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SUpdatePublicDataReq* S2SUpdatePublicDataReq::default_instance_ = NULL;

S2SUpdatePublicDataReq* S2SUpdatePublicDataReq::New() const {
  return new S2SUpdatePublicDataReq;
}

void S2SUpdatePublicDataReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  pbdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SUpdatePublicDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pbdata;
        break;
      }

      // repeated .KFMsg.PBString pbdata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pbdata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SUpdatePublicDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // repeated .KFMsg.PBString pbdata = 4;
  for (int i = 0; i < this->pbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pbdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SUpdatePublicDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // repeated .KFMsg.PBString pbdata = 4;
  for (int i = 0; i < this->pbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pbdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SUpdatePublicDataReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  // repeated .KFMsg.PBString pbdata = 4;
  total_size += 1 * this->pbdata_size();
  for (int i = 0; i < this->pbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SUpdatePublicDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SUpdatePublicDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SUpdatePublicDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SUpdatePublicDataReq::MergeFrom(const S2SUpdatePublicDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbdata_.MergeFrom(from.pbdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SUpdatePublicDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SUpdatePublicDataReq::CopyFrom(const S2SUpdatePublicDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SUpdatePublicDataReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2SUpdatePublicDataReq::Swap(S2SUpdatePublicDataReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    pbdata_.Swap(&other->pbdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SUpdatePublicDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SUpdatePublicDataReq_descriptor_;
  metadata.reflection = S2SUpdatePublicDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SKickGamePlayerReq::kPlayeridFieldNumber;
const int S2SKickGamePlayerReq::kTypeFieldNumber;
#endif  // !_MSC_VER

S2SKickGamePlayerReq::S2SKickGamePlayerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SKickGamePlayerReq::InitAsDefaultInstance() {
}

S2SKickGamePlayerReq::S2SKickGamePlayerReq(const S2SKickGamePlayerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SKickGamePlayerReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SKickGamePlayerReq::~S2SKickGamePlayerReq() {
  SharedDtor();
}

void S2SKickGamePlayerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SKickGamePlayerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SKickGamePlayerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SKickGamePlayerReq_descriptor_;
}

const S2SKickGamePlayerReq& S2SKickGamePlayerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SKickGamePlayerReq* S2SKickGamePlayerReq::default_instance_ = NULL;

S2SKickGamePlayerReq* S2SKickGamePlayerReq::New() const {
  return new S2SKickGamePlayerReq;
}

void S2SKickGamePlayerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SKickGamePlayerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SKickGamePlayerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SKickGamePlayerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SKickGamePlayerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SKickGamePlayerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SKickGamePlayerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SKickGamePlayerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SKickGamePlayerReq::MergeFrom(const S2SKickGamePlayerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SKickGamePlayerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SKickGamePlayerReq::CopyFrom(const S2SKickGamePlayerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SKickGamePlayerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SKickGamePlayerReq::Swap(S2SKickGamePlayerReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SKickGamePlayerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SKickGamePlayerReq_descriptor_;
  metadata.reflection = S2SKickGamePlayerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SKickGatePlayerReq::kPlayeridFieldNumber;
const int S2SKickGatePlayerReq::kTypeFieldNumber;
#endif  // !_MSC_VER

S2SKickGatePlayerReq::S2SKickGatePlayerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SKickGatePlayerReq::InitAsDefaultInstance() {
}

S2SKickGatePlayerReq::S2SKickGatePlayerReq(const S2SKickGatePlayerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SKickGatePlayerReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SKickGatePlayerReq::~S2SKickGatePlayerReq() {
  SharedDtor();
}

void S2SKickGatePlayerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SKickGatePlayerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SKickGatePlayerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SKickGatePlayerReq_descriptor_;
}

const S2SKickGatePlayerReq& S2SKickGatePlayerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SKickGatePlayerReq* S2SKickGatePlayerReq::default_instance_ = NULL;

S2SKickGatePlayerReq* S2SKickGatePlayerReq::New() const {
  return new S2SKickGatePlayerReq;
}

void S2SKickGatePlayerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SKickGatePlayerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SKickGatePlayerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SKickGatePlayerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SKickGatePlayerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SKickGatePlayerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SKickGatePlayerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SKickGatePlayerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SKickGatePlayerReq::MergeFrom(const S2SKickGatePlayerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SKickGatePlayerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SKickGatePlayerReq::CopyFrom(const S2SKickGatePlayerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SKickGatePlayerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SKickGatePlayerReq::Swap(S2SKickGatePlayerReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SKickGatePlayerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SKickGatePlayerReq_descriptor_;
  metadata.reflection = S2SKickGatePlayerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SLoginLoginVerifyReq::kAccountidFieldNumber;
const int S2SLoginLoginVerifyReq::kTokenFieldNumber;
const int S2SLoginLoginVerifyReq::kIpFieldNumber;
const int S2SLoginLoginVerifyReq::kSessionidFieldNumber;
#endif  // !_MSC_VER

S2SLoginLoginVerifyReq::S2SLoginLoginVerifyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SLoginLoginVerifyReq::InitAsDefaultInstance() {
}

S2SLoginLoginVerifyReq::S2SLoginLoginVerifyReq(const S2SLoginLoginVerifyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SLoginLoginVerifyReq::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sessionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SLoginLoginVerifyReq::~S2SLoginLoginVerifyReq() {
  SharedDtor();
}

void S2SLoginLoginVerifyReq::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void S2SLoginLoginVerifyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SLoginLoginVerifyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SLoginLoginVerifyReq_descriptor_;
}

const S2SLoginLoginVerifyReq& S2SLoginLoginVerifyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SLoginLoginVerifyReq* S2SLoginLoginVerifyReq::default_instance_ = NULL;

S2SLoginLoginVerifyReq* S2SLoginLoginVerifyReq::New() const {
  return new S2SLoginLoginVerifyReq;
}

void S2SLoginLoginVerifyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    sessionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SLoginLoginVerifyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // required string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sessionid;
        break;
      }

      // required uint32 sessionid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SLoginLoginVerifyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // required uint32 sessionid = 4;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sessionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SLoginLoginVerifyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // required uint32 sessionid = 4;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sessionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SLoginLoginVerifyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required uint32 sessionid = 4;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SLoginLoginVerifyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SLoginLoginVerifyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SLoginLoginVerifyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SLoginLoginVerifyReq::MergeFrom(const S2SLoginLoginVerifyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SLoginLoginVerifyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SLoginLoginVerifyReq::CopyFrom(const S2SLoginLoginVerifyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SLoginLoginVerifyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SLoginLoginVerifyReq::Swap(S2SLoginLoginVerifyReq* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(token_, other->token_);
    std::swap(ip_, other->ip_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SLoginLoginVerifyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SLoginLoginVerifyReq_descriptor_;
  metadata.reflection = S2SLoginLoginVerifyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SLoginLoginVerifyAck::kResultFieldNumber;
const int S2SLoginLoginVerifyAck::kAccountidFieldNumber;
const int S2SLoginLoginVerifyAck::kSessionidFieldNumber;
#endif  // !_MSC_VER

S2SLoginLoginVerifyAck::S2SLoginLoginVerifyAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SLoginLoginVerifyAck::InitAsDefaultInstance() {
}

S2SLoginLoginVerifyAck::S2SLoginLoginVerifyAck(const S2SLoginLoginVerifyAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SLoginLoginVerifyAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  accountid_ = 0u;
  sessionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SLoginLoginVerifyAck::~S2SLoginLoginVerifyAck() {
  SharedDtor();
}

void S2SLoginLoginVerifyAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SLoginLoginVerifyAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SLoginLoginVerifyAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SLoginLoginVerifyAck_descriptor_;
}

const S2SLoginLoginVerifyAck& S2SLoginLoginVerifyAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SLoginLoginVerifyAck* S2SLoginLoginVerifyAck::default_instance_ = NULL;

S2SLoginLoginVerifyAck* S2SLoginLoginVerifyAck::New() const {
  return new S2SLoginLoginVerifyAck;
}

void S2SLoginLoginVerifyAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    accountid_ = 0u;
    sessionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SLoginLoginVerifyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accountid;
        break;
      }

      // required uint32 accountid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sessionid;
        break;
      }

      // required uint32 sessionid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SLoginLoginVerifyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // required uint32 accountid = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }

  // required uint32 sessionid = 3;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sessionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SLoginLoginVerifyAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // required uint32 accountid = 2;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }

  // required uint32 sessionid = 3;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sessionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SLoginLoginVerifyAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // required uint32 accountid = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // required uint32 sessionid = 3;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SLoginLoginVerifyAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SLoginLoginVerifyAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SLoginLoginVerifyAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SLoginLoginVerifyAck::MergeFrom(const S2SLoginLoginVerifyAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SLoginLoginVerifyAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SLoginLoginVerifyAck::CopyFrom(const S2SLoginLoginVerifyAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SLoginLoginVerifyAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SLoginLoginVerifyAck::Swap(S2SLoginLoginVerifyAck* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(accountid_, other->accountid_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SLoginLoginVerifyAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SLoginLoginVerifyAck_descriptor_;
  metadata.reflection = S2SLoginLoginVerifyAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBLoginData::kTokenFieldNumber;
const int PBLoginData::kGateidFieldNumber;
const int PBLoginData::kSessionidFieldNumber;
const int PBLoginData::kChannelFieldNumber;
const int PBLoginData::kAccountFieldNumber;
const int PBLoginData::kAccountidFieldNumber;
const int PBLoginData::kPlayeridFieldNumber;
const int PBLoginData::kChanneldataFieldNumber;
#endif  // !_MSC_VER

PBLoginData::PBLoginData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBLoginData::InitAsDefaultInstance() {
  channeldata_ = const_cast< ::KFMsg::PBStrings*>(&::KFMsg::PBStrings::default_instance());
}

PBLoginData::PBLoginData(const PBLoginData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBLoginData::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gateid_ = 0u;
  sessionid_ = 0u;
  channel_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountid_ = 0u;
  playerid_ = 0u;
  channeldata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBLoginData::~PBLoginData() {
  SharedDtor();
}

void PBLoginData::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
    delete channeldata_;
  }
}

void PBLoginData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBLoginData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBLoginData_descriptor_;
}

const PBLoginData& PBLoginData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

PBLoginData* PBLoginData::default_instance_ = NULL;

PBLoginData* PBLoginData::New() const {
  return new PBLoginData;
}

void PBLoginData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    gateid_ = 0u;
    sessionid_ = 0u;
    channel_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    accountid_ = 0u;
    playerid_ = 0u;
    if (has_channeldata()) {
      if (channeldata_ != NULL) channeldata_->::KFMsg::PBStrings::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBLoginData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateid;
        break;
      }

      // required uint32 gateid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sessionid;
        break;
      }

      // required uint32 sessionid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_channel;
        break;
      }

      // required uint32 channel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_account;
        break;
      }

      // required string account = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_accountid;
        break;
      }

      // required uint32 accountid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_channeldata;
        break;
      }

      // required .KFMsg.PBStrings channeldata = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channeldata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channeldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBLoginData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }

  // required uint32 gateid = 2;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gateid(), output);
  }

  // required uint32 sessionid = 3;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sessionid(), output);
  }

  // required uint32 channel = 4;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channel(), output);
  }

  // required string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->account(), output);
  }

  // required uint32 accountid = 6;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->accountid(), output);
  }

  // required uint32 playerid = 7;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->playerid(), output);
  }

  // required .KFMsg.PBStrings channeldata = 8;
  if (has_channeldata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->channeldata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBLoginData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // required uint32 gateid = 2;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gateid(), target);
  }

  // required uint32 sessionid = 3;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sessionid(), target);
  }

  // required uint32 channel = 4;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channel(), target);
  }

  // required string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->account(), target);
  }

  // required uint32 accountid = 6;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->accountid(), target);
  }

  // required uint32 playerid = 7;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->playerid(), target);
  }

  // required .KFMsg.PBStrings channeldata = 8;
  if (has_channeldata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->channeldata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBLoginData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required uint32 gateid = 2;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // required uint32 sessionid = 3;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionid());
    }

    // required uint32 channel = 4;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // required string account = 5;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required uint32 accountid = 6;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // required uint32 playerid = 7;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required .KFMsg.PBStrings channeldata = 8;
    if (has_channeldata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channeldata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBLoginData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBLoginData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBLoginData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBLoginData::MergeFrom(const PBLoginData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_channeldata()) {
      mutable_channeldata()->::KFMsg::PBStrings::MergeFrom(from.channeldata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBLoginData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBLoginData::CopyFrom(const PBLoginData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBLoginData::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void PBLoginData::Swap(PBLoginData* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(gateid_, other->gateid_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(channel_, other->channel_);
    std::swap(account_, other->account_);
    std::swap(accountid_, other->accountid_);
    std::swap(playerid_, other->playerid_);
    std::swap(channeldata_, other->channeldata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBLoginData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBLoginData_descriptor_;
  metadata.reflection = PBLoginData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SLoginWorldVerifyReq::kPbloginFieldNumber;
#endif  // !_MSC_VER

S2SLoginWorldVerifyReq::S2SLoginWorldVerifyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SLoginWorldVerifyReq::InitAsDefaultInstance() {
  pblogin_ = const_cast< ::KFMsg::PBLoginData*>(&::KFMsg::PBLoginData::default_instance());
}

S2SLoginWorldVerifyReq::S2SLoginWorldVerifyReq(const S2SLoginWorldVerifyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SLoginWorldVerifyReq::SharedCtor() {
  _cached_size_ = 0;
  pblogin_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SLoginWorldVerifyReq::~S2SLoginWorldVerifyReq() {
  SharedDtor();
}

void S2SLoginWorldVerifyReq::SharedDtor() {
  if (this != default_instance_) {
    delete pblogin_;
  }
}

void S2SLoginWorldVerifyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SLoginWorldVerifyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SLoginWorldVerifyReq_descriptor_;
}

const S2SLoginWorldVerifyReq& S2SLoginWorldVerifyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SLoginWorldVerifyReq* S2SLoginWorldVerifyReq::default_instance_ = NULL;

S2SLoginWorldVerifyReq* S2SLoginWorldVerifyReq::New() const {
  return new S2SLoginWorldVerifyReq;
}

void S2SLoginWorldVerifyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pblogin()) {
      if (pblogin_ != NULL) pblogin_->::KFMsg::PBLoginData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SLoginWorldVerifyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KFMsg.PBLoginData pblogin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pblogin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SLoginWorldVerifyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KFMsg.PBLoginData pblogin = 1;
  if (has_pblogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pblogin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SLoginWorldVerifyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KFMsg.PBLoginData pblogin = 1;
  if (has_pblogin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pblogin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SLoginWorldVerifyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KFMsg.PBLoginData pblogin = 1;
    if (has_pblogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pblogin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SLoginWorldVerifyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SLoginWorldVerifyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SLoginWorldVerifyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SLoginWorldVerifyReq::MergeFrom(const S2SLoginWorldVerifyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pblogin()) {
      mutable_pblogin()->::KFMsg::PBLoginData::MergeFrom(from.pblogin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SLoginWorldVerifyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SLoginWorldVerifyReq::CopyFrom(const S2SLoginWorldVerifyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SLoginWorldVerifyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pblogin()) {
    if (!this->pblogin().IsInitialized()) return false;
  }
  return true;
}

void S2SLoginWorldVerifyReq::Swap(S2SLoginWorldVerifyReq* other) {
  if (other != this) {
    std::swap(pblogin_, other->pblogin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SLoginWorldVerifyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SLoginWorldVerifyReq_descriptor_;
  metadata.reflection = S2SLoginWorldVerifyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SLoginFailedToLoginAck::kGateidFieldNumber;
const int S2SLoginFailedToLoginAck::kResultFieldNumber;
const int S2SLoginFailedToLoginAck::kAccountidFieldNumber;
const int S2SLoginFailedToLoginAck::kSessionidFieldNumber;
#endif  // !_MSC_VER

S2SLoginFailedToLoginAck::S2SLoginFailedToLoginAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SLoginFailedToLoginAck::InitAsDefaultInstance() {
}

S2SLoginFailedToLoginAck::S2SLoginFailedToLoginAck(const S2SLoginFailedToLoginAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SLoginFailedToLoginAck::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = 0u;
  result_ = 0u;
  accountid_ = 0u;
  sessionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SLoginFailedToLoginAck::~S2SLoginFailedToLoginAck() {
  SharedDtor();
}

void S2SLoginFailedToLoginAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SLoginFailedToLoginAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SLoginFailedToLoginAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SLoginFailedToLoginAck_descriptor_;
}

const S2SLoginFailedToLoginAck& S2SLoginFailedToLoginAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SLoginFailedToLoginAck* S2SLoginFailedToLoginAck::default_instance_ = NULL;

S2SLoginFailedToLoginAck* S2SLoginFailedToLoginAck::New() const {
  return new S2SLoginFailedToLoginAck;
}

void S2SLoginFailedToLoginAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gateid_ = 0u;
    result_ = 0u;
    accountid_ = 0u;
    sessionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SLoginFailedToLoginAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 gateid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accountid;
        break;
      }

      // required uint32 accountid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sessionid;
        break;
      }

      // required uint32 sessionid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SLoginFailedToLoginAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 gateid = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gateid(), output);
  }

  // required uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  // required uint32 accountid = 3;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->accountid(), output);
  }

  // required uint32 sessionid = 4;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sessionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SLoginFailedToLoginAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 gateid = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gateid(), target);
  }

  // required uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  // required uint32 accountid = 3;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->accountid(), target);
  }

  // required uint32 sessionid = 4;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sessionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SLoginFailedToLoginAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 gateid = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // required uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // required uint32 accountid = 3;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // required uint32 sessionid = 4;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SLoginFailedToLoginAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SLoginFailedToLoginAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SLoginFailedToLoginAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SLoginFailedToLoginAck::MergeFrom(const S2SLoginFailedToLoginAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SLoginFailedToLoginAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SLoginFailedToLoginAck::CopyFrom(const S2SLoginFailedToLoginAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SLoginFailedToLoginAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SLoginFailedToLoginAck::Swap(S2SLoginFailedToLoginAck* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    std::swap(result_, other->result_);
    std::swap(accountid_, other->accountid_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SLoginFailedToLoginAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SLoginFailedToLoginAck_descriptor_;
  metadata.reflection = S2SLoginFailedToLoginAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SLoginTellTokenToGameReq::kPbloginFieldNumber;
#endif  // !_MSC_VER

S2SLoginTellTokenToGameReq::S2SLoginTellTokenToGameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SLoginTellTokenToGameReq::InitAsDefaultInstance() {
  pblogin_ = const_cast< ::KFMsg::PBLoginData*>(&::KFMsg::PBLoginData::default_instance());
}

S2SLoginTellTokenToGameReq::S2SLoginTellTokenToGameReq(const S2SLoginTellTokenToGameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SLoginTellTokenToGameReq::SharedCtor() {
  _cached_size_ = 0;
  pblogin_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SLoginTellTokenToGameReq::~S2SLoginTellTokenToGameReq() {
  SharedDtor();
}

void S2SLoginTellTokenToGameReq::SharedDtor() {
  if (this != default_instance_) {
    delete pblogin_;
  }
}

void S2SLoginTellTokenToGameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SLoginTellTokenToGameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SLoginTellTokenToGameReq_descriptor_;
}

const S2SLoginTellTokenToGameReq& S2SLoginTellTokenToGameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SLoginTellTokenToGameReq* S2SLoginTellTokenToGameReq::default_instance_ = NULL;

S2SLoginTellTokenToGameReq* S2SLoginTellTokenToGameReq::New() const {
  return new S2SLoginTellTokenToGameReq;
}

void S2SLoginTellTokenToGameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pblogin()) {
      if (pblogin_ != NULL) pblogin_->::KFMsg::PBLoginData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SLoginTellTokenToGameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KFMsg.PBLoginData pblogin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pblogin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SLoginTellTokenToGameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KFMsg.PBLoginData pblogin = 1;
  if (has_pblogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pblogin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SLoginTellTokenToGameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KFMsg.PBLoginData pblogin = 1;
  if (has_pblogin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pblogin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SLoginTellTokenToGameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KFMsg.PBLoginData pblogin = 1;
    if (has_pblogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pblogin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SLoginTellTokenToGameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SLoginTellTokenToGameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SLoginTellTokenToGameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SLoginTellTokenToGameReq::MergeFrom(const S2SLoginTellTokenToGameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pblogin()) {
      mutable_pblogin()->::KFMsg::PBLoginData::MergeFrom(from.pblogin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SLoginTellTokenToGameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SLoginTellTokenToGameReq::CopyFrom(const S2SLoginTellTokenToGameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SLoginTellTokenToGameReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pblogin()) {
    if (!this->pblogin().IsInitialized()) return false;
  }
  return true;
}

void S2SLoginTellTokenToGameReq::Swap(S2SLoginTellTokenToGameReq* other) {
  if (other != this) {
    std::swap(pblogin_, other->pblogin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SLoginTellTokenToGameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SLoginTellTokenToGameReq_descriptor_;
  metadata.reflection = S2SLoginTellTokenToGameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SLoginGameAck::kPbloginFieldNumber;
const int S2SLoginGameAck::kResultFieldNumber;
const int S2SLoginGameAck::kServertimeFieldNumber;
const int S2SLoginGameAck::kPlayerdataFieldNumber;
#endif  // !_MSC_VER

S2SLoginGameAck::S2SLoginGameAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SLoginGameAck::InitAsDefaultInstance() {
  pblogin_ = const_cast< ::KFMsg::PBLoginData*>(&::KFMsg::PBLoginData::default_instance());
  playerdata_ = const_cast< ::KFMsg::PBObject*>(&::KFMsg::PBObject::default_instance());
}

S2SLoginGameAck::S2SLoginGameAck(const S2SLoginGameAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SLoginGameAck::SharedCtor() {
  _cached_size_ = 0;
  pblogin_ = NULL;
  result_ = 0u;
  servertime_ = GOOGLE_ULONGLONG(0);
  playerdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SLoginGameAck::~S2SLoginGameAck() {
  SharedDtor();
}

void S2SLoginGameAck::SharedDtor() {
  if (this != default_instance_) {
    delete pblogin_;
    delete playerdata_;
  }
}

void S2SLoginGameAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SLoginGameAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SLoginGameAck_descriptor_;
}

const S2SLoginGameAck& S2SLoginGameAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SLoginGameAck* S2SLoginGameAck::default_instance_ = NULL;

S2SLoginGameAck* S2SLoginGameAck::New() const {
  return new S2SLoginGameAck;
}

void S2SLoginGameAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pblogin()) {
      if (pblogin_ != NULL) pblogin_->::KFMsg::PBLoginData::Clear();
    }
    result_ = 0u;
    servertime_ = GOOGLE_ULONGLONG(0);
    if (has_playerdata()) {
      if (playerdata_ != NULL) playerdata_->::KFMsg::PBObject::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SLoginGameAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KFMsg.PBLoginData pblogin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pblogin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_servertime;
        break;
      }

      // required uint64 servertime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_servertime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_playerdata;
        break;
      }

      // required .KFMsg.PBObject playerdata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SLoginGameAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KFMsg.PBLoginData pblogin = 1;
  if (has_pblogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pblogin(), output);
  }

  // required uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  // required uint64 servertime = 3;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->servertime(), output);
  }

  // required .KFMsg.PBObject playerdata = 4;
  if (has_playerdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->playerdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SLoginGameAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KFMsg.PBLoginData pblogin = 1;
  if (has_pblogin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pblogin(), target);
  }

  // required uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  // required uint64 servertime = 3;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->servertime(), target);
  }

  // required .KFMsg.PBObject playerdata = 4;
  if (has_playerdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->playerdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SLoginGameAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KFMsg.PBLoginData pblogin = 1;
    if (has_pblogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pblogin());
    }

    // required uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // required uint64 servertime = 3;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->servertime());
    }

    // required .KFMsg.PBObject playerdata = 4;
    if (has_playerdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SLoginGameAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SLoginGameAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SLoginGameAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SLoginGameAck::MergeFrom(const S2SLoginGameAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pblogin()) {
      mutable_pblogin()->::KFMsg::PBLoginData::MergeFrom(from.pblogin());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
    if (from.has_playerdata()) {
      mutable_playerdata()->::KFMsg::PBObject::MergeFrom(from.playerdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SLoginGameAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SLoginGameAck::CopyFrom(const S2SLoginGameAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SLoginGameAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_pblogin()) {
    if (!this->pblogin().IsInitialized()) return false;
  }
  return true;
}

void S2SLoginGameAck::Swap(S2SLoginGameAck* other) {
  if (other != this) {
    std::swap(pblogin_, other->pblogin_);
    std::swap(result_, other->result_);
    std::swap(servertime_, other->servertime_);
    std::swap(playerdata_, other->playerdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SLoginGameAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SLoginGameAck_descriptor_;
  metadata.reflection = S2SLoginGameAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SLoginLoadPlayerReq::kPbloginFieldNumber;
const int S2SLoginLoadPlayerReq::kZoneidFieldNumber;
#endif  // !_MSC_VER

S2SLoginLoadPlayerReq::S2SLoginLoadPlayerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SLoginLoadPlayerReq::InitAsDefaultInstance() {
  pblogin_ = const_cast< ::KFMsg::PBLoginData*>(&::KFMsg::PBLoginData::default_instance());
}

S2SLoginLoadPlayerReq::S2SLoginLoadPlayerReq(const S2SLoginLoadPlayerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SLoginLoadPlayerReq::SharedCtor() {
  _cached_size_ = 0;
  pblogin_ = NULL;
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SLoginLoadPlayerReq::~S2SLoginLoadPlayerReq() {
  SharedDtor();
}

void S2SLoginLoadPlayerReq::SharedDtor() {
  if (this != default_instance_) {
    delete pblogin_;
  }
}

void S2SLoginLoadPlayerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SLoginLoadPlayerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SLoginLoadPlayerReq_descriptor_;
}

const S2SLoginLoadPlayerReq& S2SLoginLoadPlayerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SLoginLoadPlayerReq* S2SLoginLoadPlayerReq::default_instance_ = NULL;

S2SLoginLoadPlayerReq* S2SLoginLoadPlayerReq::New() const {
  return new S2SLoginLoadPlayerReq;
}

void S2SLoginLoadPlayerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pblogin()) {
      if (pblogin_ != NULL) pblogin_->::KFMsg::PBLoginData::Clear();
    }
    zoneid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SLoginLoadPlayerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KFMsg.PBLoginData pblogin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pblogin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SLoginLoadPlayerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KFMsg.PBLoginData pblogin = 1;
  if (has_pblogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pblogin(), output);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SLoginLoadPlayerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KFMsg.PBLoginData pblogin = 1;
  if (has_pblogin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pblogin(), target);
  }

  // required uint32 zoneid = 2;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SLoginLoadPlayerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KFMsg.PBLoginData pblogin = 1;
    if (has_pblogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pblogin());
    }

    // required uint32 zoneid = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SLoginLoadPlayerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SLoginLoadPlayerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SLoginLoadPlayerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SLoginLoadPlayerReq::MergeFrom(const S2SLoginLoadPlayerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pblogin()) {
      mutable_pblogin()->::KFMsg::PBLoginData::MergeFrom(from.pblogin());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SLoginLoadPlayerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SLoginLoadPlayerReq::CopyFrom(const S2SLoginLoadPlayerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SLoginLoadPlayerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pblogin()) {
    if (!this->pblogin().IsInitialized()) return false;
  }
  return true;
}

void S2SLoginLoadPlayerReq::Swap(S2SLoginLoadPlayerReq* other) {
  if (other != this) {
    std::swap(pblogin_, other->pblogin_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SLoginLoadPlayerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SLoginLoadPlayerReq_descriptor_;
  metadata.reflection = S2SLoginLoadPlayerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SLoginLoadPlayerAck::kPbloginFieldNumber;
const int S2SLoginLoadPlayerAck::kResultFieldNumber;
const int S2SLoginLoadPlayerAck::kPlayerdataFieldNumber;
#endif  // !_MSC_VER

S2SLoginLoadPlayerAck::S2SLoginLoadPlayerAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SLoginLoadPlayerAck::InitAsDefaultInstance() {
  pblogin_ = const_cast< ::KFMsg::PBLoginData*>(&::KFMsg::PBLoginData::default_instance());
  playerdata_ = const_cast< ::KFMsg::PBObject*>(&::KFMsg::PBObject::default_instance());
}

S2SLoginLoadPlayerAck::S2SLoginLoadPlayerAck(const S2SLoginLoadPlayerAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SLoginLoadPlayerAck::SharedCtor() {
  _cached_size_ = 0;
  pblogin_ = NULL;
  result_ = 0u;
  playerdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SLoginLoadPlayerAck::~S2SLoginLoadPlayerAck() {
  SharedDtor();
}

void S2SLoginLoadPlayerAck::SharedDtor() {
  if (this != default_instance_) {
    delete pblogin_;
    delete playerdata_;
  }
}

void S2SLoginLoadPlayerAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SLoginLoadPlayerAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SLoginLoadPlayerAck_descriptor_;
}

const S2SLoginLoadPlayerAck& S2SLoginLoadPlayerAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SLoginLoadPlayerAck* S2SLoginLoadPlayerAck::default_instance_ = NULL;

S2SLoginLoadPlayerAck* S2SLoginLoadPlayerAck::New() const {
  return new S2SLoginLoadPlayerAck;
}

void S2SLoginLoadPlayerAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pblogin()) {
      if (pblogin_ != NULL) pblogin_->::KFMsg::PBLoginData::Clear();
    }
    result_ = 0u;
    if (has_playerdata()) {
      if (playerdata_ != NULL) playerdata_->::KFMsg::PBObject::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SLoginLoadPlayerAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KFMsg.PBLoginData pblogin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pblogin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playerdata;
        break;
      }

      // required .KFMsg.PBObject playerdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SLoginLoadPlayerAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KFMsg.PBLoginData pblogin = 1;
  if (has_pblogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pblogin(), output);
  }

  // required uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  // required .KFMsg.PBObject playerdata = 3;
  if (has_playerdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->playerdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SLoginLoadPlayerAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KFMsg.PBLoginData pblogin = 1;
  if (has_pblogin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pblogin(), target);
  }

  // required uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  // required .KFMsg.PBObject playerdata = 3;
  if (has_playerdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->playerdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SLoginLoadPlayerAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KFMsg.PBLoginData pblogin = 1;
    if (has_pblogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pblogin());
    }

    // required uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // required .KFMsg.PBObject playerdata = 3;
    if (has_playerdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SLoginLoadPlayerAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SLoginLoadPlayerAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SLoginLoadPlayerAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SLoginLoadPlayerAck::MergeFrom(const S2SLoginLoadPlayerAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pblogin()) {
      mutable_pblogin()->::KFMsg::PBLoginData::MergeFrom(from.pblogin());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_playerdata()) {
      mutable_playerdata()->::KFMsg::PBObject::MergeFrom(from.playerdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SLoginLoadPlayerAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SLoginLoadPlayerAck::CopyFrom(const S2SLoginLoadPlayerAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SLoginLoadPlayerAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_pblogin()) {
    if (!this->pblogin().IsInitialized()) return false;
  }
  return true;
}

void S2SLoginLoadPlayerAck::Swap(S2SLoginLoadPlayerAck* other) {
  if (other != this) {
    std::swap(pblogin_, other->pblogin_);
    std::swap(result_, other->result_);
    std::swap(playerdata_, other->playerdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SLoginLoadPlayerAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SLoginLoadPlayerAck_descriptor_;
  metadata.reflection = S2SLoginLoadPlayerAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SLoginOutReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SLoginOutReq::S2SLoginOutReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SLoginOutReq::InitAsDefaultInstance() {
}

S2SLoginOutReq::S2SLoginOutReq(const S2SLoginOutReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SLoginOutReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SLoginOutReq::~S2SLoginOutReq() {
  SharedDtor();
}

void S2SLoginOutReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SLoginOutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SLoginOutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SLoginOutReq_descriptor_;
}

const S2SLoginOutReq& S2SLoginOutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SLoginOutReq* S2SLoginOutReq::default_instance_ = NULL;

S2SLoginOutReq* S2SLoginOutReq::New() const {
  return new S2SLoginOutReq;
}

void S2SLoginOutReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SLoginOutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SLoginOutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SLoginOutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SLoginOutReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SLoginOutReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SLoginOutReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SLoginOutReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SLoginOutReq::MergeFrom(const S2SLoginOutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SLoginOutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SLoginOutReq::CopyFrom(const S2SLoginOutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SLoginOutReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2SLoginOutReq::Swap(S2SLoginOutReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SLoginOutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SLoginOutReq_descriptor_;
  metadata.reflection = S2SLoginOutReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SPlayerDisconnectionReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SPlayerDisconnectionReq::S2SPlayerDisconnectionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SPlayerDisconnectionReq::InitAsDefaultInstance() {
}

S2SPlayerDisconnectionReq::S2SPlayerDisconnectionReq(const S2SPlayerDisconnectionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SPlayerDisconnectionReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SPlayerDisconnectionReq::~S2SPlayerDisconnectionReq() {
  SharedDtor();
}

void S2SPlayerDisconnectionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SPlayerDisconnectionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SPlayerDisconnectionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SPlayerDisconnectionReq_descriptor_;
}

const S2SPlayerDisconnectionReq& S2SPlayerDisconnectionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SPlayerDisconnectionReq* S2SPlayerDisconnectionReq::default_instance_ = NULL;

S2SPlayerDisconnectionReq* S2SPlayerDisconnectionReq::New() const {
  return new S2SPlayerDisconnectionReq;
}

void S2SPlayerDisconnectionReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SPlayerDisconnectionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SPlayerDisconnectionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SPlayerDisconnectionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SPlayerDisconnectionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SPlayerDisconnectionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SPlayerDisconnectionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SPlayerDisconnectionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SPlayerDisconnectionReq::MergeFrom(const S2SPlayerDisconnectionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SPlayerDisconnectionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SPlayerDisconnectionReq::CopyFrom(const S2SPlayerDisconnectionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SPlayerDisconnectionReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2SPlayerDisconnectionReq::Swap(S2SPlayerDisconnectionReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SPlayerDisconnectionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SPlayerDisconnectionReq_descriptor_;
  metadata.reflection = S2SPlayerDisconnectionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SSetPlayerNameReq::kPlayeridFieldNumber;
const int S2SSetPlayerNameReq::kOldnameFieldNumber;
const int S2SSetPlayerNameReq::kNewnameFieldNumber;
#endif  // !_MSC_VER

S2SSetPlayerNameReq::S2SSetPlayerNameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SSetPlayerNameReq::InitAsDefaultInstance() {
}

S2SSetPlayerNameReq::S2SSetPlayerNameReq(const S2SSetPlayerNameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SSetPlayerNameReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  oldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SSetPlayerNameReq::~S2SSetPlayerNameReq() {
  SharedDtor();
}

void S2SSetPlayerNameReq::SharedDtor() {
  if (oldname_ != &::google::protobuf::internal::kEmptyString) {
    delete oldname_;
  }
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    delete newname_;
  }
  if (this != default_instance_) {
  }
}

void S2SSetPlayerNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SSetPlayerNameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SSetPlayerNameReq_descriptor_;
}

const S2SSetPlayerNameReq& S2SSetPlayerNameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SSetPlayerNameReq* S2SSetPlayerNameReq::default_instance_ = NULL;

S2SSetPlayerNameReq* S2SSetPlayerNameReq::New() const {
  return new S2SSetPlayerNameReq;
}

void S2SSetPlayerNameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_oldname()) {
      if (oldname_ != &::google::protobuf::internal::kEmptyString) {
        oldname_->clear();
      }
    }
    if (has_newname()) {
      if (newname_ != &::google::protobuf::internal::kEmptyString) {
        newname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SSetPlayerNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_oldname;
        break;
      }

      // required string oldname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oldname().data(), this->oldname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_newname;
        break;
      }

      // required string newname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newname().data(), this->newname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SSetPlayerNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required string oldname = 2;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->oldname(), output);
  }

  // required string newname = 3;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->newname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SSetPlayerNameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required string oldname = 2;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->oldname(), target);
  }

  // required string newname = 3;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->newname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SSetPlayerNameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required string oldname = 2;
    if (has_oldname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldname());
    }

    // required string newname = 3;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SSetPlayerNameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SSetPlayerNameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SSetPlayerNameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SSetPlayerNameReq::MergeFrom(const S2SSetPlayerNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_oldname()) {
      set_oldname(from.oldname());
    }
    if (from.has_newname()) {
      set_newname(from.newname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SSetPlayerNameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SSetPlayerNameReq::CopyFrom(const S2SSetPlayerNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SSetPlayerNameReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SSetPlayerNameReq::Swap(S2SSetPlayerNameReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(oldname_, other->oldname_);
    std::swap(newname_, other->newname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SSetPlayerNameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SSetPlayerNameReq_descriptor_;
  metadata.reflection = S2SSetPlayerNameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SSetPlayerNameAck::kPlayeridFieldNumber;
const int S2SSetPlayerNameAck::kOldnameFieldNumber;
const int S2SSetPlayerNameAck::kNewnameFieldNumber;
const int S2SSetPlayerNameAck::kResultFieldNumber;
#endif  // !_MSC_VER

S2SSetPlayerNameAck::S2SSetPlayerNameAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SSetPlayerNameAck::InitAsDefaultInstance() {
}

S2SSetPlayerNameAck::S2SSetPlayerNameAck(const S2SSetPlayerNameAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SSetPlayerNameAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  oldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SSetPlayerNameAck::~S2SSetPlayerNameAck() {
  SharedDtor();
}

void S2SSetPlayerNameAck::SharedDtor() {
  if (oldname_ != &::google::protobuf::internal::kEmptyString) {
    delete oldname_;
  }
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    delete newname_;
  }
  if (this != default_instance_) {
  }
}

void S2SSetPlayerNameAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SSetPlayerNameAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SSetPlayerNameAck_descriptor_;
}

const S2SSetPlayerNameAck& S2SSetPlayerNameAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SSetPlayerNameAck* S2SSetPlayerNameAck::default_instance_ = NULL;

S2SSetPlayerNameAck* S2SSetPlayerNameAck::New() const {
  return new S2SSetPlayerNameAck;
}

void S2SSetPlayerNameAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_oldname()) {
      if (oldname_ != &::google::protobuf::internal::kEmptyString) {
        oldname_->clear();
      }
    }
    if (has_newname()) {
      if (newname_ != &::google::protobuf::internal::kEmptyString) {
        newname_->clear();
      }
    }
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SSetPlayerNameAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_oldname;
        break;
      }

      // required string oldname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oldname().data(), this->oldname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_newname;
        break;
      }

      // required string newname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newname().data(), this->newname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // required uint32 result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SSetPlayerNameAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required string oldname = 2;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->oldname(), output);
  }

  // required string newname = 3;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->newname(), output);
  }

  // required uint32 result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SSetPlayerNameAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required string oldname = 2;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->oldname(), target);
  }

  // required string newname = 3;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->newname(), target);
  }

  // required uint32 result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SSetPlayerNameAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required string oldname = 2;
    if (has_oldname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldname());
    }

    // required string newname = 3;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newname());
    }

    // required uint32 result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SSetPlayerNameAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SSetPlayerNameAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SSetPlayerNameAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SSetPlayerNameAck::MergeFrom(const S2SSetPlayerNameAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_oldname()) {
      set_oldname(from.oldname());
    }
    if (from.has_newname()) {
      set_newname(from.newname());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SSetPlayerNameAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SSetPlayerNameAck::CopyFrom(const S2SSetPlayerNameAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SSetPlayerNameAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SSetPlayerNameAck::Swap(S2SSetPlayerNameAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(oldname_, other->oldname_);
    std::swap(newname_, other->newname_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SSetPlayerNameAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SSetPlayerNameAck_descriptor_;
  metadata.reflection = S2SSetPlayerNameAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SCreateRoleReq::kPlayeridFieldNumber;
const int S2SCreateRoleReq::kNewnameFieldNumber;
const int S2SCreateRoleReq::kModleidFieldNumber;
const int S2SCreateRoleReq::kSexFieldNumber;
const int S2SCreateRoleReq::kInviteridFieldNumber;
#endif  // !_MSC_VER

S2SCreateRoleReq::S2SCreateRoleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SCreateRoleReq::InitAsDefaultInstance() {
}

S2SCreateRoleReq::S2SCreateRoleReq(const S2SCreateRoleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SCreateRoleReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modleid_ = 0u;
  sex_ = 0u;
  inviterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SCreateRoleReq::~S2SCreateRoleReq() {
  SharedDtor();
}

void S2SCreateRoleReq::SharedDtor() {
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    delete newname_;
  }
  if (this != default_instance_) {
  }
}

void S2SCreateRoleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SCreateRoleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SCreateRoleReq_descriptor_;
}

const S2SCreateRoleReq& S2SCreateRoleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SCreateRoleReq* S2SCreateRoleReq::default_instance_ = NULL;

S2SCreateRoleReq* S2SCreateRoleReq::New() const {
  return new S2SCreateRoleReq;
}

void S2SCreateRoleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_newname()) {
      if (newname_ != &::google::protobuf::internal::kEmptyString) {
        newname_->clear();
      }
    }
    modleid_ = 0u;
    sex_ = 0u;
    inviterid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SCreateRoleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_newname;
        break;
      }

      // required string newname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newname().data(), this->newname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_modleid;
        break;
      }

      // required uint32 modleid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modleid_)));
          set_has_modleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // required uint32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_inviterid;
        break;
      }

      // required uint32 inviterid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviterid_)));
          set_has_inviterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SCreateRoleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required string newname = 2;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->newname(), output);
  }

  // required uint32 modleid = 3;
  if (has_modleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->modleid(), output);
  }

  // required uint32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sex(), output);
  }

  // required uint32 inviterid = 5;
  if (has_inviterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->inviterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SCreateRoleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required string newname = 2;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->newname(), target);
  }

  // required uint32 modleid = 3;
  if (has_modleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->modleid(), target);
  }

  // required uint32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sex(), target);
  }

  // required uint32 inviterid = 5;
  if (has_inviterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->inviterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SCreateRoleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required string newname = 2;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newname());
    }

    // required uint32 modleid = 3;
    if (has_modleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modleid());
    }

    // required uint32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // required uint32 inviterid = 5;
    if (has_inviterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inviterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SCreateRoleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SCreateRoleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SCreateRoleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SCreateRoleReq::MergeFrom(const S2SCreateRoleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_newname()) {
      set_newname(from.newname());
    }
    if (from.has_modleid()) {
      set_modleid(from.modleid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_inviterid()) {
      set_inviterid(from.inviterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SCreateRoleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SCreateRoleReq::CopyFrom(const S2SCreateRoleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SCreateRoleReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2SCreateRoleReq::Swap(S2SCreateRoleReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(newname_, other->newname_);
    std::swap(modleid_, other->modleid_);
    std::swap(sex_, other->sex_);
    std::swap(inviterid_, other->inviterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SCreateRoleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SCreateRoleReq_descriptor_;
  metadata.reflection = S2SCreateRoleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SCreateRoleAck::kPlayeridFieldNumber;
const int S2SCreateRoleAck::kNewnameFieldNumber;
const int S2SCreateRoleAck::kModleidFieldNumber;
const int S2SCreateRoleAck::kSexFieldNumber;
const int S2SCreateRoleAck::kInviteridFieldNumber;
const int S2SCreateRoleAck::kResultFieldNumber;
#endif  // !_MSC_VER

S2SCreateRoleAck::S2SCreateRoleAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SCreateRoleAck::InitAsDefaultInstance() {
}

S2SCreateRoleAck::S2SCreateRoleAck(const S2SCreateRoleAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SCreateRoleAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modleid_ = 0u;
  sex_ = 0u;
  inviterid_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SCreateRoleAck::~S2SCreateRoleAck() {
  SharedDtor();
}

void S2SCreateRoleAck::SharedDtor() {
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    delete newname_;
  }
  if (this != default_instance_) {
  }
}

void S2SCreateRoleAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SCreateRoleAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SCreateRoleAck_descriptor_;
}

const S2SCreateRoleAck& S2SCreateRoleAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SCreateRoleAck* S2SCreateRoleAck::default_instance_ = NULL;

S2SCreateRoleAck* S2SCreateRoleAck::New() const {
  return new S2SCreateRoleAck;
}

void S2SCreateRoleAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_newname()) {
      if (newname_ != &::google::protobuf::internal::kEmptyString) {
        newname_->clear();
      }
    }
    modleid_ = 0u;
    sex_ = 0u;
    inviterid_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SCreateRoleAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_newname;
        break;
      }

      // required string newname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newname().data(), this->newname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_modleid;
        break;
      }

      // required uint32 modleid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modleid_)));
          set_has_modleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // required uint32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_inviterid;
        break;
      }

      // required uint32 inviterid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviterid_)));
          set_has_inviterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_result;
        break;
      }

      // required uint32 result = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SCreateRoleAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required string newname = 2;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->newname(), output);
  }

  // required uint32 modleid = 3;
  if (has_modleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->modleid(), output);
  }

  // required uint32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sex(), output);
  }

  // required uint32 inviterid = 5;
  if (has_inviterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->inviterid(), output);
  }

  // required uint32 result = 6;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SCreateRoleAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required string newname = 2;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->newname(), target);
  }

  // required uint32 modleid = 3;
  if (has_modleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->modleid(), target);
  }

  // required uint32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sex(), target);
  }

  // required uint32 inviterid = 5;
  if (has_inviterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->inviterid(), target);
  }

  // required uint32 result = 6;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SCreateRoleAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required string newname = 2;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newname());
    }

    // required uint32 modleid = 3;
    if (has_modleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modleid());
    }

    // required uint32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // required uint32 inviterid = 5;
    if (has_inviterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inviterid());
    }

    // required uint32 result = 6;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SCreateRoleAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SCreateRoleAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SCreateRoleAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SCreateRoleAck::MergeFrom(const S2SCreateRoleAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_newname()) {
      set_newname(from.newname());
    }
    if (from.has_modleid()) {
      set_modleid(from.modleid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_inviterid()) {
      set_inviterid(from.inviterid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SCreateRoleAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SCreateRoleAck::CopyFrom(const S2SCreateRoleAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SCreateRoleAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void S2SCreateRoleAck::Swap(S2SCreateRoleAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(newname_, other->newname_);
    std::swap(modleid_, other->modleid_);
    std::swap(sex_, other->sex_);
    std::swap(inviterid_, other->inviterid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SCreateRoleAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SCreateRoleAck_descriptor_;
  metadata.reflection = S2SCreateRoleAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SPlayerEnterWorldReq::kPlayeridFieldNumber;
const int S2SPlayerEnterWorldReq::kAccountidFieldNumber;
#endif  // !_MSC_VER

S2SPlayerEnterWorldReq::S2SPlayerEnterWorldReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SPlayerEnterWorldReq::InitAsDefaultInstance() {
}

S2SPlayerEnterWorldReq::S2SPlayerEnterWorldReq(const S2SPlayerEnterWorldReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SPlayerEnterWorldReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  accountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SPlayerEnterWorldReq::~S2SPlayerEnterWorldReq() {
  SharedDtor();
}

void S2SPlayerEnterWorldReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SPlayerEnterWorldReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SPlayerEnterWorldReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SPlayerEnterWorldReq_descriptor_;
}

const S2SPlayerEnterWorldReq& S2SPlayerEnterWorldReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SPlayerEnterWorldReq* S2SPlayerEnterWorldReq::default_instance_ = NULL;

S2SPlayerEnterWorldReq* S2SPlayerEnterWorldReq::New() const {
  return new S2SPlayerEnterWorldReq;
}

void S2SPlayerEnterWorldReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    accountid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SPlayerEnterWorldReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accountid;
        break;
      }

      // required uint32 accountid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SPlayerEnterWorldReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 accountid = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SPlayerEnterWorldReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 accountid = 2;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SPlayerEnterWorldReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 accountid = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SPlayerEnterWorldReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SPlayerEnterWorldReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SPlayerEnterWorldReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SPlayerEnterWorldReq::MergeFrom(const S2SPlayerEnterWorldReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SPlayerEnterWorldReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SPlayerEnterWorldReq::CopyFrom(const S2SPlayerEnterWorldReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SPlayerEnterWorldReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SPlayerEnterWorldReq::Swap(S2SPlayerEnterWorldReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SPlayerEnterWorldReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SPlayerEnterWorldReq_descriptor_;
  metadata.reflection = S2SPlayerEnterWorldReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SPlayerLeaveWorldReq::kPlayeridFieldNumber;
const int S2SPlayerLeaveWorldReq::kAccountidFieldNumber;
#endif  // !_MSC_VER

S2SPlayerLeaveWorldReq::S2SPlayerLeaveWorldReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SPlayerLeaveWorldReq::InitAsDefaultInstance() {
}

S2SPlayerLeaveWorldReq::S2SPlayerLeaveWorldReq(const S2SPlayerLeaveWorldReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SPlayerLeaveWorldReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  accountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SPlayerLeaveWorldReq::~S2SPlayerLeaveWorldReq() {
  SharedDtor();
}

void S2SPlayerLeaveWorldReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SPlayerLeaveWorldReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SPlayerLeaveWorldReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SPlayerLeaveWorldReq_descriptor_;
}

const S2SPlayerLeaveWorldReq& S2SPlayerLeaveWorldReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SPlayerLeaveWorldReq* S2SPlayerLeaveWorldReq::default_instance_ = NULL;

S2SPlayerLeaveWorldReq* S2SPlayerLeaveWorldReq::New() const {
  return new S2SPlayerLeaveWorldReq;
}

void S2SPlayerLeaveWorldReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    accountid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SPlayerLeaveWorldReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accountid;
        break;
      }

      // required uint32 accountid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SPlayerLeaveWorldReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 accountid = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SPlayerLeaveWorldReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 accountid = 2;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SPlayerLeaveWorldReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 accountid = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SPlayerLeaveWorldReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SPlayerLeaveWorldReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SPlayerLeaveWorldReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SPlayerLeaveWorldReq::MergeFrom(const S2SPlayerLeaveWorldReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SPlayerLeaveWorldReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SPlayerLeaveWorldReq::CopyFrom(const S2SPlayerLeaveWorldReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SPlayerLeaveWorldReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SPlayerLeaveWorldReq::Swap(S2SPlayerLeaveWorldReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SPlayerLeaveWorldReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SPlayerLeaveWorldReq_descriptor_;
  metadata.reflection = S2SPlayerLeaveWorldReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SGameSyncOnlineReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SGameSyncOnlineReq::S2SGameSyncOnlineReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SGameSyncOnlineReq::InitAsDefaultInstance() {
}

S2SGameSyncOnlineReq::S2SGameSyncOnlineReq(const S2SGameSyncOnlineReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SGameSyncOnlineReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SGameSyncOnlineReq::~S2SGameSyncOnlineReq() {
  SharedDtor();
}

void S2SGameSyncOnlineReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SGameSyncOnlineReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SGameSyncOnlineReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SGameSyncOnlineReq_descriptor_;
}

const S2SGameSyncOnlineReq& S2SGameSyncOnlineReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SGameSyncOnlineReq* S2SGameSyncOnlineReq::default_instance_ = NULL;

S2SGameSyncOnlineReq* S2SGameSyncOnlineReq::New() const {
  return new S2SGameSyncOnlineReq;
}

void S2SGameSyncOnlineReq::Clear() {
  playerid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SGameSyncOnlineReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_playerid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_playerid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_playerid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SGameSyncOnlineReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 playerid = 1;
  for (int i = 0; i < this->playerid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->playerid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SGameSyncOnlineReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 playerid = 1;
  for (int i = 0; i < this->playerid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->playerid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SGameSyncOnlineReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 playerid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->playerid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->playerid(i));
    }
    total_size += 1 * this->playerid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SGameSyncOnlineReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SGameSyncOnlineReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SGameSyncOnlineReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SGameSyncOnlineReq::MergeFrom(const S2SGameSyncOnlineReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerid_.MergeFrom(from.playerid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SGameSyncOnlineReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SGameSyncOnlineReq::CopyFrom(const S2SGameSyncOnlineReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SGameSyncOnlineReq::IsInitialized() const {

  return true;
}

void S2SGameSyncOnlineReq::Swap(S2SGameSyncOnlineReq* other) {
  if (other != this) {
    playerid_.Swap(&other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SGameSyncOnlineReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SGameSyncOnlineReq_descriptor_;
  metadata.reflection = S2SGameSyncOnlineReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SQueryMailReq::kPlayeridFieldNumber;
const int S2SQueryMailReq::kMailtypeFieldNumber;
const int S2SQueryMailReq::kMaxmailidFieldNumber;
#endif  // !_MSC_VER

S2SQueryMailReq::S2SQueryMailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SQueryMailReq::InitAsDefaultInstance() {
}

S2SQueryMailReq::S2SQueryMailReq(const S2SQueryMailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SQueryMailReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  mailtype_ = 0u;
  maxmailid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SQueryMailReq::~S2SQueryMailReq() {
  SharedDtor();
}

void S2SQueryMailReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SQueryMailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SQueryMailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SQueryMailReq_descriptor_;
}

const S2SQueryMailReq& S2SQueryMailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SQueryMailReq* S2SQueryMailReq::default_instance_ = NULL;

S2SQueryMailReq* S2SQueryMailReq::New() const {
  return new S2SQueryMailReq;
}

void S2SQueryMailReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    mailtype_ = 0u;
    maxmailid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SQueryMailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mailtype;
        break;
      }

      // required uint32 mailtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailtype_)));
          set_has_mailtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxmailid;
        break;
      }

      // required uint64 maxmailid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxmailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxmailid_)));
          set_has_maxmailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SQueryMailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 mailtype = 2;
  if (has_mailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mailtype(), output);
  }

  // required uint64 maxmailid = 3;
  if (has_maxmailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->maxmailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SQueryMailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 mailtype = 2;
  if (has_mailtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mailtype(), target);
  }

  // required uint64 maxmailid = 3;
  if (has_maxmailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->maxmailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SQueryMailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 mailtype = 2;
    if (has_mailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailtype());
    }

    // required uint64 maxmailid = 3;
    if (has_maxmailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxmailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SQueryMailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SQueryMailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SQueryMailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SQueryMailReq::MergeFrom(const S2SQueryMailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_mailtype()) {
      set_mailtype(from.mailtype());
    }
    if (from.has_maxmailid()) {
      set_maxmailid(from.maxmailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SQueryMailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryMailReq::CopyFrom(const S2SQueryMailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryMailReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SQueryMailReq::Swap(S2SQueryMailReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(mailtype_, other->mailtype_);
    std::swap(maxmailid_, other->maxmailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SQueryMailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SQueryMailReq_descriptor_;
  metadata.reflection = S2SQueryMailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMail::kDataFieldNumber;
#endif  // !_MSC_VER

PBMail::PBMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMail::InitAsDefaultInstance() {
}

PBMail::PBMail(const PBMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMail::~PBMail() {
  SharedDtor();
}

void PBMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMail_descriptor_;
}

const PBMail& PBMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

PBMail* PBMail::default_instance_ = NULL;

PBMail* PBMail::New() const {
  return new PBMail;
}

void PBMail::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .KFMsg.PBString data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .KFMsg.PBString data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .KFMsg.PBString data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMail::ByteSize() const {
  int total_size = 0;

  // repeated .KFMsg.PBString data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMail::MergeFrom(const PBMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMail::CopyFrom(const PBMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMail::IsInitialized() const {

  return true;
}

void PBMail::Swap(PBMail* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMail_descriptor_;
  metadata.reflection = PBMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMails::kMailFieldNumber;
#endif  // !_MSC_VER

PBMails::PBMails()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMails::InitAsDefaultInstance() {
}

PBMails::PBMails(const PBMails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMails::~PBMails() {
  SharedDtor();
}

void PBMails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBMails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMails_descriptor_;
}

const PBMails& PBMails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

PBMails* PBMails::default_instance_ = NULL;

PBMails* PBMails::New() const {
  return new PBMails;
}

void PBMails::Clear() {
  mail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .KFMsg.PBMail mail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mail;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .KFMsg.PBMail mail = 1;
  for (int i = 0; i < this->mail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mail(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .KFMsg.PBMail mail = 1;
  for (int i = 0; i < this->mail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mail(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMails::ByteSize() const {
  int total_size = 0;

  // repeated .KFMsg.PBMail mail = 1;
  total_size += 1 * this->mail_size();
  for (int i = 0; i < this->mail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mail(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMails::MergeFrom(const PBMails& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_.MergeFrom(from.mail_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMails::CopyFrom(const PBMails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMails::IsInitialized() const {

  return true;
}

void PBMails::Swap(PBMails* other) {
  if (other != this) {
    mail_.Swap(&other->mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMails_descriptor_;
  metadata.reflection = PBMails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SQueryMailAck::kPlayeridFieldNumber;
const int S2SQueryMailAck::kMailsFieldNumber;
const int S2SQueryMailAck::kMailtypeFieldNumber;
#endif  // !_MSC_VER

S2SQueryMailAck::S2SQueryMailAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SQueryMailAck::InitAsDefaultInstance() {
  mails_ = const_cast< ::KFMsg::PBMails*>(&::KFMsg::PBMails::default_instance());
}

S2SQueryMailAck::S2SQueryMailAck(const S2SQueryMailAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SQueryMailAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  mails_ = NULL;
  mailtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SQueryMailAck::~S2SQueryMailAck() {
  SharedDtor();
}

void S2SQueryMailAck::SharedDtor() {
  if (this != default_instance_) {
    delete mails_;
  }
}

void S2SQueryMailAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SQueryMailAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SQueryMailAck_descriptor_;
}

const S2SQueryMailAck& S2SQueryMailAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SQueryMailAck* S2SQueryMailAck::default_instance_ = NULL;

S2SQueryMailAck* S2SQueryMailAck::New() const {
  return new S2SQueryMailAck;
}

void S2SQueryMailAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_mails()) {
      if (mails_ != NULL) mails_->::KFMsg::PBMails::Clear();
    }
    mailtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SQueryMailAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mails;
        break;
      }

      // required .KFMsg.PBMails mails = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mailtype;
        break;
      }

      // required uint32 mailtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailtype_)));
          set_has_mailtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SQueryMailAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required .KFMsg.PBMails mails = 2;
  if (has_mails()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mails(), output);
  }

  // required uint32 mailtype = 3;
  if (has_mailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mailtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SQueryMailAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required .KFMsg.PBMails mails = 2;
  if (has_mails()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mails(), target);
  }

  // required uint32 mailtype = 3;
  if (has_mailtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mailtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SQueryMailAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required .KFMsg.PBMails mails = 2;
    if (has_mails()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mails());
    }

    // required uint32 mailtype = 3;
    if (has_mailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SQueryMailAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SQueryMailAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SQueryMailAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SQueryMailAck::MergeFrom(const S2SQueryMailAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_mails()) {
      mutable_mails()->::KFMsg::PBMails::MergeFrom(from.mails());
    }
    if (from.has_mailtype()) {
      set_mailtype(from.mailtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SQueryMailAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryMailAck::CopyFrom(const S2SQueryMailAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryMailAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SQueryMailAck::Swap(S2SQueryMailAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(mails_, other->mails_);
    std::swap(mailtype_, other->mailtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SQueryMailAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SQueryMailAck_descriptor_;
  metadata.reflection = S2SQueryMailAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SDeleteMailReq::kPlayeridFieldNumber;
const int S2SDeleteMailReq::kMailidFieldNumber;
const int S2SDeleteMailReq::kMailtypeFieldNumber;
#endif  // !_MSC_VER

S2SDeleteMailReq::S2SDeleteMailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SDeleteMailReq::InitAsDefaultInstance() {
}

S2SDeleteMailReq::S2SDeleteMailReq(const S2SDeleteMailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SDeleteMailReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  mailid_ = GOOGLE_ULONGLONG(0);
  mailtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SDeleteMailReq::~S2SDeleteMailReq() {
  SharedDtor();
}

void S2SDeleteMailReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SDeleteMailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SDeleteMailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SDeleteMailReq_descriptor_;
}

const S2SDeleteMailReq& S2SDeleteMailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SDeleteMailReq* S2SDeleteMailReq::default_instance_ = NULL;

S2SDeleteMailReq* S2SDeleteMailReq::New() const {
  return new S2SDeleteMailReq;
}

void S2SDeleteMailReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    mailid_ = GOOGLE_ULONGLONG(0);
    mailtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SDeleteMailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mailid;
        break;
      }

      // required uint64 mailid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mailtype;
        break;
      }

      // required uint32 mailtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailtype_)));
          set_has_mailtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SDeleteMailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint64 mailid = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mailid(), output);
  }

  // required uint32 mailtype = 3;
  if (has_mailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mailtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SDeleteMailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint64 mailid = 2;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mailid(), target);
  }

  // required uint32 mailtype = 3;
  if (has_mailtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mailtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SDeleteMailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint64 mailid = 2;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

    // required uint32 mailtype = 3;
    if (has_mailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SDeleteMailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SDeleteMailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SDeleteMailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SDeleteMailReq::MergeFrom(const S2SDeleteMailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_mailtype()) {
      set_mailtype(from.mailtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SDeleteMailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SDeleteMailReq::CopyFrom(const S2SDeleteMailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SDeleteMailReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SDeleteMailReq::Swap(S2SDeleteMailReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(mailid_, other->mailid_);
    std::swap(mailtype_, other->mailtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SDeleteMailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SDeleteMailReq_descriptor_;
  metadata.reflection = S2SDeleteMailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SAddMailReq::kPlayeridFieldNumber;
const int S2SAddMailReq::kMailtypeFieldNumber;
const int S2SAddMailReq::kPbmailFieldNumber;
#endif  // !_MSC_VER

S2SAddMailReq::S2SAddMailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SAddMailReq::InitAsDefaultInstance() {
  pbmail_ = const_cast< ::KFMsg::PBMail*>(&::KFMsg::PBMail::default_instance());
}

S2SAddMailReq::S2SAddMailReq(const S2SAddMailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SAddMailReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  mailtype_ = 0u;
  pbmail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SAddMailReq::~S2SAddMailReq() {
  SharedDtor();
}

void S2SAddMailReq::SharedDtor() {
  if (this != default_instance_) {
    delete pbmail_;
  }
}

void S2SAddMailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SAddMailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SAddMailReq_descriptor_;
}

const S2SAddMailReq& S2SAddMailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SAddMailReq* S2SAddMailReq::default_instance_ = NULL;

S2SAddMailReq* S2SAddMailReq::New() const {
  return new S2SAddMailReq;
}

void S2SAddMailReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    mailtype_ = 0u;
    if (has_pbmail()) {
      if (pbmail_ != NULL) pbmail_->::KFMsg::PBMail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SAddMailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mailtype;
        break;
      }

      // required uint32 mailtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailtype_)));
          set_has_mailtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pbmail;
        break;
      }

      // required .KFMsg.PBMail pbmail = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbmail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbmail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SAddMailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 mailtype = 3;
  if (has_mailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mailtype(), output);
  }

  // required .KFMsg.PBMail pbmail = 5;
  if (has_pbmail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pbmail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SAddMailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 mailtype = 3;
  if (has_mailtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mailtype(), target);
  }

  // required .KFMsg.PBMail pbmail = 5;
  if (has_pbmail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pbmail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SAddMailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 mailtype = 3;
    if (has_mailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailtype());
    }

    // required .KFMsg.PBMail pbmail = 5;
    if (has_pbmail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbmail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SAddMailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SAddMailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SAddMailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SAddMailReq::MergeFrom(const S2SAddMailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_mailtype()) {
      set_mailtype(from.mailtype());
    }
    if (from.has_pbmail()) {
      mutable_pbmail()->::KFMsg::PBMail::MergeFrom(from.pbmail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SAddMailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SAddMailReq::CopyFrom(const S2SAddMailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SAddMailReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SAddMailReq::Swap(S2SAddMailReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(mailtype_, other->mailtype_);
    std::swap(pbmail_, other->pbmail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SAddMailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SAddMailReq_descriptor_;
  metadata.reflection = S2SAddMailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SNoticeNewMailReq::kPlayeridFieldNumber;
const int S2SNoticeNewMailReq::kMailtypeFieldNumber;
#endif  // !_MSC_VER

S2SNoticeNewMailReq::S2SNoticeNewMailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SNoticeNewMailReq::InitAsDefaultInstance() {
}

S2SNoticeNewMailReq::S2SNoticeNewMailReq(const S2SNoticeNewMailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SNoticeNewMailReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  mailtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SNoticeNewMailReq::~S2SNoticeNewMailReq() {
  SharedDtor();
}

void S2SNoticeNewMailReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SNoticeNewMailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SNoticeNewMailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SNoticeNewMailReq_descriptor_;
}

const S2SNoticeNewMailReq& S2SNoticeNewMailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SNoticeNewMailReq* S2SNoticeNewMailReq::default_instance_ = NULL;

S2SNoticeNewMailReq* S2SNoticeNewMailReq::New() const {
  return new S2SNoticeNewMailReq;
}

void S2SNoticeNewMailReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    mailtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SNoticeNewMailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mailtype;
        break;
      }

      // required uint32 mailtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailtype_)));
          set_has_mailtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SNoticeNewMailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 mailtype = 2;
  if (has_mailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mailtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SNoticeNewMailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 mailtype = 2;
  if (has_mailtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mailtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SNoticeNewMailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 mailtype = 2;
    if (has_mailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SNoticeNewMailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SNoticeNewMailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SNoticeNewMailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SNoticeNewMailReq::MergeFrom(const S2SNoticeNewMailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_mailtype()) {
      set_mailtype(from.mailtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SNoticeNewMailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SNoticeNewMailReq::CopyFrom(const S2SNoticeNewMailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SNoticeNewMailReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SNoticeNewMailReq::Swap(S2SNoticeNewMailReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(mailtype_, other->mailtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SNoticeNewMailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SNoticeNewMailReq_descriptor_;
  metadata.reflection = S2SNoticeNewMailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRelation::kPlayeridFieldNumber;
const int PBRelation::kPlayerdataFieldNumber;
const int PBRelation::kRelationdataFieldNumber;
#endif  // !_MSC_VER

PBRelation::PBRelation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRelation::InitAsDefaultInstance() {
  playerdata_ = const_cast< ::KFMsg::PBStrings*>(&::KFMsg::PBStrings::default_instance());
  relationdata_ = const_cast< ::KFMsg::PBStrings*>(&::KFMsg::PBStrings::default_instance());
}

PBRelation::PBRelation(const PBRelation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRelation::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  playerdata_ = NULL;
  relationdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRelation::~PBRelation() {
  SharedDtor();
}

void PBRelation::SharedDtor() {
  if (this != default_instance_) {
    delete playerdata_;
    delete relationdata_;
  }
}

void PBRelation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRelation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRelation_descriptor_;
}

const PBRelation& PBRelation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

PBRelation* PBRelation::default_instance_ = NULL;

PBRelation* PBRelation::New() const {
  return new PBRelation;
}

void PBRelation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_playerdata()) {
      if (playerdata_ != NULL) playerdata_->::KFMsg::PBStrings::Clear();
    }
    if (has_relationdata()) {
      if (relationdata_ != NULL) relationdata_->::KFMsg::PBStrings::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRelation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerdata;
        break;
      }

      // required .KFMsg.PBStrings playerdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_relationdata;
        break;
      }

      // required .KFMsg.PBStrings relationdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relationdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relationdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRelation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required .KFMsg.PBStrings playerdata = 2;
  if (has_playerdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerdata(), output);
  }

  // required .KFMsg.PBStrings relationdata = 3;
  if (has_relationdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->relationdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRelation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required .KFMsg.PBStrings playerdata = 2;
  if (has_playerdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerdata(), target);
  }

  // required .KFMsg.PBStrings relationdata = 3;
  if (has_relationdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->relationdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRelation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required .KFMsg.PBStrings playerdata = 2;
    if (has_playerdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerdata());
    }

    // required .KFMsg.PBStrings relationdata = 3;
    if (has_relationdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->relationdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRelation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRelation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRelation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRelation::MergeFrom(const PBRelation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playerdata()) {
      mutable_playerdata()->::KFMsg::PBStrings::MergeFrom(from.playerdata());
    }
    if (from.has_relationdata()) {
      mutable_relationdata()->::KFMsg::PBStrings::MergeFrom(from.relationdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRelation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRelation::CopyFrom(const PBRelation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRelation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PBRelation::Swap(PBRelation* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(playerdata_, other->playerdata_);
    std::swap(relationdata_, other->relationdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRelation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRelation_descriptor_;
  metadata.reflection = PBRelation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SQueryFriendReq::kPlayeridFieldNumber;
const int S2SQueryFriendReq::kServeridFieldNumber;
#endif  // !_MSC_VER

S2SQueryFriendReq::S2SQueryFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SQueryFriendReq::InitAsDefaultInstance() {
}

S2SQueryFriendReq::S2SQueryFriendReq(const S2SQueryFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SQueryFriendReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SQueryFriendReq::~S2SQueryFriendReq() {
  SharedDtor();
}

void S2SQueryFriendReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SQueryFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SQueryFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SQueryFriendReq_descriptor_;
}

const S2SQueryFriendReq& S2SQueryFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SQueryFriendReq* S2SQueryFriendReq::default_instance_ = NULL;

S2SQueryFriendReq* S2SQueryFriendReq::New() const {
  return new S2SQueryFriendReq;
}

void S2SQueryFriendReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SQueryFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SQueryFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SQueryFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SQueryFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SQueryFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SQueryFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SQueryFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SQueryFriendReq::MergeFrom(const S2SQueryFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SQueryFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryFriendReq::CopyFrom(const S2SQueryFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryFriendReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SQueryFriendReq::Swap(S2SQueryFriendReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SQueryFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SQueryFriendReq_descriptor_;
  metadata.reflection = S2SQueryFriendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SQueryFriendInviteReq::kPlayeridFieldNumber;
const int S2SQueryFriendInviteReq::kServeridFieldNumber;
#endif  // !_MSC_VER

S2SQueryFriendInviteReq::S2SQueryFriendInviteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SQueryFriendInviteReq::InitAsDefaultInstance() {
}

S2SQueryFriendInviteReq::S2SQueryFriendInviteReq(const S2SQueryFriendInviteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SQueryFriendInviteReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SQueryFriendInviteReq::~S2SQueryFriendInviteReq() {
  SharedDtor();
}

void S2SQueryFriendInviteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SQueryFriendInviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SQueryFriendInviteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SQueryFriendInviteReq_descriptor_;
}

const S2SQueryFriendInviteReq& S2SQueryFriendInviteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SQueryFriendInviteReq* S2SQueryFriendInviteReq::default_instance_ = NULL;

S2SQueryFriendInviteReq* S2SQueryFriendInviteReq::New() const {
  return new S2SQueryFriendInviteReq;
}

void S2SQueryFriendInviteReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SQueryFriendInviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SQueryFriendInviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SQueryFriendInviteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SQueryFriendInviteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SQueryFriendInviteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SQueryFriendInviteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SQueryFriendInviteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SQueryFriendInviteReq::MergeFrom(const S2SQueryFriendInviteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SQueryFriendInviteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryFriendInviteReq::CopyFrom(const S2SQueryFriendInviteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryFriendInviteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SQueryFriendInviteReq::Swap(S2SQueryFriendInviteReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SQueryFriendInviteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SQueryFriendInviteReq_descriptor_;
  metadata.reflection = S2SQueryFriendInviteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SQueryFriendAck::kPlayeridFieldNumber;
const int S2SQueryFriendAck::kPbfriendFieldNumber;
#endif  // !_MSC_VER

S2SQueryFriendAck::S2SQueryFriendAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SQueryFriendAck::InitAsDefaultInstance() {
}

S2SQueryFriendAck::S2SQueryFriendAck(const S2SQueryFriendAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SQueryFriendAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SQueryFriendAck::~S2SQueryFriendAck() {
  SharedDtor();
}

void S2SQueryFriendAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SQueryFriendAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SQueryFriendAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SQueryFriendAck_descriptor_;
}

const S2SQueryFriendAck& S2SQueryFriendAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SQueryFriendAck* S2SQueryFriendAck::default_instance_ = NULL;

S2SQueryFriendAck* S2SQueryFriendAck::New() const {
  return new S2SQueryFriendAck;
}

void S2SQueryFriendAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  pbfriend_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SQueryFriendAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbfriend;
        break;
      }

      // repeated .KFMsg.PBRelation pbfriend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbfriend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbfriend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbfriend;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SQueryFriendAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // repeated .KFMsg.PBRelation pbfriend = 2;
  for (int i = 0; i < this->pbfriend_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pbfriend(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SQueryFriendAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // repeated .KFMsg.PBRelation pbfriend = 2;
  for (int i = 0; i < this->pbfriend_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pbfriend(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SQueryFriendAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  // repeated .KFMsg.PBRelation pbfriend = 2;
  total_size += 1 * this->pbfriend_size();
  for (int i = 0; i < this->pbfriend_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbfriend(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SQueryFriendAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SQueryFriendAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SQueryFriendAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SQueryFriendAck::MergeFrom(const S2SQueryFriendAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbfriend_.MergeFrom(from.pbfriend_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SQueryFriendAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryFriendAck::CopyFrom(const S2SQueryFriendAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryFriendAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < pbfriend_size(); i++) {
    if (!this->pbfriend(i).IsInitialized()) return false;
  }
  return true;
}

void S2SQueryFriendAck::Swap(S2SQueryFriendAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    pbfriend_.Swap(&other->pbfriend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SQueryFriendAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SQueryFriendAck_descriptor_;
  metadata.reflection = S2SQueryFriendAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SQueryFriendInviteAck::kPlayeridFieldNumber;
const int S2SQueryFriendInviteAck::kPbfriendFieldNumber;
#endif  // !_MSC_VER

S2SQueryFriendInviteAck::S2SQueryFriendInviteAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SQueryFriendInviteAck::InitAsDefaultInstance() {
}

S2SQueryFriendInviteAck::S2SQueryFriendInviteAck(const S2SQueryFriendInviteAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SQueryFriendInviteAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SQueryFriendInviteAck::~S2SQueryFriendInviteAck() {
  SharedDtor();
}

void S2SQueryFriendInviteAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SQueryFriendInviteAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SQueryFriendInviteAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SQueryFriendInviteAck_descriptor_;
}

const S2SQueryFriendInviteAck& S2SQueryFriendInviteAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SQueryFriendInviteAck* S2SQueryFriendInviteAck::default_instance_ = NULL;

S2SQueryFriendInviteAck* S2SQueryFriendInviteAck::New() const {
  return new S2SQueryFriendInviteAck;
}

void S2SQueryFriendInviteAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  pbfriend_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SQueryFriendInviteAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbfriend;
        break;
      }

      // repeated .KFMsg.PBRelation pbfriend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbfriend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbfriend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbfriend;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SQueryFriendInviteAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // repeated .KFMsg.PBRelation pbfriend = 2;
  for (int i = 0; i < this->pbfriend_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pbfriend(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SQueryFriendInviteAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // repeated .KFMsg.PBRelation pbfriend = 2;
  for (int i = 0; i < this->pbfriend_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pbfriend(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SQueryFriendInviteAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  // repeated .KFMsg.PBRelation pbfriend = 2;
  total_size += 1 * this->pbfriend_size();
  for (int i = 0; i < this->pbfriend_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbfriend(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SQueryFriendInviteAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SQueryFriendInviteAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SQueryFriendInviteAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SQueryFriendInviteAck::MergeFrom(const S2SQueryFriendInviteAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbfriend_.MergeFrom(from.pbfriend_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SQueryFriendInviteAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryFriendInviteAck::CopyFrom(const S2SQueryFriendInviteAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryFriendInviteAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < pbfriend_size(); i++) {
    if (!this->pbfriend(i).IsInitialized()) return false;
  }
  return true;
}

void S2SQueryFriendInviteAck::Swap(S2SQueryFriendInviteAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    pbfriend_.Swap(&other->pbfriend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SQueryFriendInviteAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SQueryFriendInviteAck_descriptor_;
  metadata.reflection = S2SQueryFriendInviteAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SAddFriendInviteReq::kSelfplayeridFieldNumber;
const int S2SAddFriendInviteReq::kTargetplayeridFieldNumber;
const int S2SAddFriendInviteReq::kMessageFieldNumber;
const int S2SAddFriendInviteReq::kServeridFieldNumber;
const int S2SAddFriendInviteReq::kTargetnameFieldNumber;
#endif  // !_MSC_VER

S2SAddFriendInviteReq::S2SAddFriendInviteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SAddFriendInviteReq::InitAsDefaultInstance() {
}

S2SAddFriendInviteReq::S2SAddFriendInviteReq(const S2SAddFriendInviteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SAddFriendInviteReq::SharedCtor() {
  _cached_size_ = 0;
  selfplayerid_ = 0u;
  targetplayerid_ = 0u;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0u;
  targetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SAddFriendInviteReq::~S2SAddFriendInviteReq() {
  SharedDtor();
}

void S2SAddFriendInviteReq::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (targetname_ != &::google::protobuf::internal::kEmptyString) {
    delete targetname_;
  }
  if (this != default_instance_) {
  }
}

void S2SAddFriendInviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SAddFriendInviteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SAddFriendInviteReq_descriptor_;
}

const S2SAddFriendInviteReq& S2SAddFriendInviteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SAddFriendInviteReq* S2SAddFriendInviteReq::default_instance_ = NULL;

S2SAddFriendInviteReq* S2SAddFriendInviteReq::New() const {
  return new S2SAddFriendInviteReq;
}

void S2SAddFriendInviteReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    selfplayerid_ = 0u;
    targetplayerid_ = 0u;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    serverid_ = 0u;
    if (has_targetname()) {
      if (targetname_ != &::google::protobuf::internal::kEmptyString) {
        targetname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SAddFriendInviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 selfplayerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selfplayerid_)));
          set_has_selfplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetplayerid;
        break;
      }

      // required uint32 targetplayerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetplayerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetplayerid_)));
          set_has_targetplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // required string message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_targetname;
        break;
      }

      // required string targetname = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->targetname().data(), this->targetname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SAddFriendInviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 selfplayerid = 1;
  if (has_selfplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->selfplayerid(), output);
  }

  // required uint32 targetplayerid = 2;
  if (has_targetplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetplayerid(), output);
  }

  // required string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->message(), output);
  }

  // required uint32 serverid = 4;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->serverid(), output);
  }

  // required string targetname = 5;
  if (has_targetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetname().data(), this->targetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->targetname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SAddFriendInviteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 selfplayerid = 1;
  if (has_selfplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->selfplayerid(), target);
  }

  // required uint32 targetplayerid = 2;
  if (has_targetplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targetplayerid(), target);
  }

  // required string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // required uint32 serverid = 4;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->serverid(), target);
  }

  // required string targetname = 5;
  if (has_targetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetname().data(), this->targetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->targetname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SAddFriendInviteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 selfplayerid = 1;
    if (has_selfplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selfplayerid());
    }

    // required uint32 targetplayerid = 2;
    if (has_targetplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetplayerid());
    }

    // required string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // required uint32 serverid = 4;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required string targetname = 5;
    if (has_targetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SAddFriendInviteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SAddFriendInviteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SAddFriendInviteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SAddFriendInviteReq::MergeFrom(const S2SAddFriendInviteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfplayerid()) {
      set_selfplayerid(from.selfplayerid());
    }
    if (from.has_targetplayerid()) {
      set_targetplayerid(from.targetplayerid());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_targetname()) {
      set_targetname(from.targetname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SAddFriendInviteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SAddFriendInviteReq::CopyFrom(const S2SAddFriendInviteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SAddFriendInviteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2SAddFriendInviteReq::Swap(S2SAddFriendInviteReq* other) {
  if (other != this) {
    std::swap(selfplayerid_, other->selfplayerid_);
    std::swap(targetplayerid_, other->targetplayerid_);
    std::swap(message_, other->message_);
    std::swap(serverid_, other->serverid_);
    std::swap(targetname_, other->targetname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SAddFriendInviteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SAddFriendInviteReq_descriptor_;
  metadata.reflection = S2SAddFriendInviteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SAddFriendInviteAck::kPlayeridFieldNumber;
const int S2SAddFriendInviteAck::kPbfriendFieldNumber;
#endif  // !_MSC_VER

S2SAddFriendInviteAck::S2SAddFriendInviteAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SAddFriendInviteAck::InitAsDefaultInstance() {
  pbfriend_ = const_cast< ::KFMsg::PBRelation*>(&::KFMsg::PBRelation::default_instance());
}

S2SAddFriendInviteAck::S2SAddFriendInviteAck(const S2SAddFriendInviteAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SAddFriendInviteAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  pbfriend_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SAddFriendInviteAck::~S2SAddFriendInviteAck() {
  SharedDtor();
}

void S2SAddFriendInviteAck::SharedDtor() {
  if (this != default_instance_) {
    delete pbfriend_;
  }
}

void S2SAddFriendInviteAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SAddFriendInviteAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SAddFriendInviteAck_descriptor_;
}

const S2SAddFriendInviteAck& S2SAddFriendInviteAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SAddFriendInviteAck* S2SAddFriendInviteAck::default_instance_ = NULL;

S2SAddFriendInviteAck* S2SAddFriendInviteAck::New() const {
  return new S2SAddFriendInviteAck;
}

void S2SAddFriendInviteAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_pbfriend()) {
      if (pbfriend_ != NULL) pbfriend_->::KFMsg::PBRelation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SAddFriendInviteAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbfriend;
        break;
      }

      // required .KFMsg.PBRelation pbfriend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbfriend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbfriend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SAddFriendInviteAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required .KFMsg.PBRelation pbfriend = 2;
  if (has_pbfriend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pbfriend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SAddFriendInviteAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required .KFMsg.PBRelation pbfriend = 2;
  if (has_pbfriend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pbfriend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SAddFriendInviteAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required .KFMsg.PBRelation pbfriend = 2;
    if (has_pbfriend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbfriend());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SAddFriendInviteAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SAddFriendInviteAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SAddFriendInviteAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SAddFriendInviteAck::MergeFrom(const S2SAddFriendInviteAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_pbfriend()) {
      mutable_pbfriend()->::KFMsg::PBRelation::MergeFrom(from.pbfriend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SAddFriendInviteAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SAddFriendInviteAck::CopyFrom(const S2SAddFriendInviteAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SAddFriendInviteAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pbfriend()) {
    if (!this->pbfriend().IsInitialized()) return false;
  }
  return true;
}

void S2SAddFriendInviteAck::Swap(S2SAddFriendInviteAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(pbfriend_, other->pbfriend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SAddFriendInviteAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SAddFriendInviteAck_descriptor_;
  metadata.reflection = S2SAddFriendInviteAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SDelFriendReq::kSelfplayeridFieldNumber;
const int S2SDelFriendReq::kTargetplayeridFieldNumber;
#endif  // !_MSC_VER

S2SDelFriendReq::S2SDelFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SDelFriendReq::InitAsDefaultInstance() {
}

S2SDelFriendReq::S2SDelFriendReq(const S2SDelFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SDelFriendReq::SharedCtor() {
  _cached_size_ = 0;
  selfplayerid_ = 0u;
  targetplayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SDelFriendReq::~S2SDelFriendReq() {
  SharedDtor();
}

void S2SDelFriendReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SDelFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SDelFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SDelFriendReq_descriptor_;
}

const S2SDelFriendReq& S2SDelFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SDelFriendReq* S2SDelFriendReq::default_instance_ = NULL;

S2SDelFriendReq* S2SDelFriendReq::New() const {
  return new S2SDelFriendReq;
}

void S2SDelFriendReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    selfplayerid_ = 0u;
    targetplayerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SDelFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 selfplayerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selfplayerid_)));
          set_has_selfplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetplayerid;
        break;
      }

      // required uint32 targetplayerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetplayerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetplayerid_)));
          set_has_targetplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SDelFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 selfplayerid = 1;
  if (has_selfplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->selfplayerid(), output);
  }

  // required uint32 targetplayerid = 2;
  if (has_targetplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetplayerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SDelFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 selfplayerid = 1;
  if (has_selfplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->selfplayerid(), target);
  }

  // required uint32 targetplayerid = 2;
  if (has_targetplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targetplayerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SDelFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 selfplayerid = 1;
    if (has_selfplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selfplayerid());
    }

    // required uint32 targetplayerid = 2;
    if (has_targetplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetplayerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SDelFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SDelFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SDelFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SDelFriendReq::MergeFrom(const S2SDelFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfplayerid()) {
      set_selfplayerid(from.selfplayerid());
    }
    if (from.has_targetplayerid()) {
      set_targetplayerid(from.targetplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SDelFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SDelFriendReq::CopyFrom(const S2SDelFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SDelFriendReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SDelFriendReq::Swap(S2SDelFriendReq* other) {
  if (other != this) {
    std::swap(selfplayerid_, other->selfplayerid_);
    std::swap(targetplayerid_, other->targetplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SDelFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SDelFriendReq_descriptor_;
  metadata.reflection = S2SDelFriendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SDelFriendAck::kPlayeridFieldNumber;
const int S2SDelFriendAck::kTargetplayeridFieldNumber;
#endif  // !_MSC_VER

S2SDelFriendAck::S2SDelFriendAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SDelFriendAck::InitAsDefaultInstance() {
}

S2SDelFriendAck::S2SDelFriendAck(const S2SDelFriendAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SDelFriendAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  targetplayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SDelFriendAck::~S2SDelFriendAck() {
  SharedDtor();
}

void S2SDelFriendAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SDelFriendAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SDelFriendAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SDelFriendAck_descriptor_;
}

const S2SDelFriendAck& S2SDelFriendAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SDelFriendAck* S2SDelFriendAck::default_instance_ = NULL;

S2SDelFriendAck* S2SDelFriendAck::New() const {
  return new S2SDelFriendAck;
}

void S2SDelFriendAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    targetplayerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SDelFriendAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetplayerid;
        break;
      }

      // required uint32 targetplayerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetplayerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetplayerid_)));
          set_has_targetplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SDelFriendAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 targetplayerid = 2;
  if (has_targetplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetplayerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SDelFriendAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 targetplayerid = 2;
  if (has_targetplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targetplayerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SDelFriendAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 targetplayerid = 2;
    if (has_targetplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetplayerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SDelFriendAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SDelFriendAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SDelFriendAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SDelFriendAck::MergeFrom(const S2SDelFriendAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_targetplayerid()) {
      set_targetplayerid(from.targetplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SDelFriendAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SDelFriendAck::CopyFrom(const S2SDelFriendAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SDelFriendAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SDelFriendAck::Swap(S2SDelFriendAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(targetplayerid_, other->targetplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SDelFriendAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SDelFriendAck_descriptor_;
  metadata.reflection = S2SDelFriendAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SDelFriendInviteReq::kSelfplayeridFieldNumber;
const int S2SDelFriendInviteReq::kTargetplayeridFieldNumber;
#endif  // !_MSC_VER

S2SDelFriendInviteReq::S2SDelFriendInviteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SDelFriendInviteReq::InitAsDefaultInstance() {
}

S2SDelFriendInviteReq::S2SDelFriendInviteReq(const S2SDelFriendInviteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SDelFriendInviteReq::SharedCtor() {
  _cached_size_ = 0;
  selfplayerid_ = 0u;
  targetplayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SDelFriendInviteReq::~S2SDelFriendInviteReq() {
  SharedDtor();
}

void S2SDelFriendInviteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SDelFriendInviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SDelFriendInviteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SDelFriendInviteReq_descriptor_;
}

const S2SDelFriendInviteReq& S2SDelFriendInviteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SDelFriendInviteReq* S2SDelFriendInviteReq::default_instance_ = NULL;

S2SDelFriendInviteReq* S2SDelFriendInviteReq::New() const {
  return new S2SDelFriendInviteReq;
}

void S2SDelFriendInviteReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    selfplayerid_ = 0u;
    targetplayerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SDelFriendInviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 selfplayerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selfplayerid_)));
          set_has_selfplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetplayerid;
        break;
      }

      // required uint32 targetplayerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetplayerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetplayerid_)));
          set_has_targetplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SDelFriendInviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 selfplayerid = 1;
  if (has_selfplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->selfplayerid(), output);
  }

  // required uint32 targetplayerid = 2;
  if (has_targetplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetplayerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SDelFriendInviteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 selfplayerid = 1;
  if (has_selfplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->selfplayerid(), target);
  }

  // required uint32 targetplayerid = 2;
  if (has_targetplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targetplayerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SDelFriendInviteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 selfplayerid = 1;
    if (has_selfplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selfplayerid());
    }

    // required uint32 targetplayerid = 2;
    if (has_targetplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetplayerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SDelFriendInviteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SDelFriendInviteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SDelFriendInviteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SDelFriendInviteReq::MergeFrom(const S2SDelFriendInviteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfplayerid()) {
      set_selfplayerid(from.selfplayerid());
    }
    if (from.has_targetplayerid()) {
      set_targetplayerid(from.targetplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SDelFriendInviteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SDelFriendInviteReq::CopyFrom(const S2SDelFriendInviteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SDelFriendInviteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SDelFriendInviteReq::Swap(S2SDelFriendInviteReq* other) {
  if (other != this) {
    std::swap(selfplayerid_, other->selfplayerid_);
    std::swap(targetplayerid_, other->targetplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SDelFriendInviteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SDelFriendInviteReq_descriptor_;
  metadata.reflection = S2SDelFriendInviteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SAddFriendReq::kSelfplayeridFieldNumber;
const int S2SAddFriendReq::kTargetplayeridFieldNumber;
const int S2SAddFriendReq::kServeridFieldNumber;
const int S2SAddFriendReq::kTargetnameFieldNumber;
#endif  // !_MSC_VER

S2SAddFriendReq::S2SAddFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SAddFriendReq::InitAsDefaultInstance() {
}

S2SAddFriendReq::S2SAddFriendReq(const S2SAddFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SAddFriendReq::SharedCtor() {
  _cached_size_ = 0;
  selfplayerid_ = 0u;
  targetplayerid_ = 0u;
  serverid_ = 0u;
  targetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SAddFriendReq::~S2SAddFriendReq() {
  SharedDtor();
}

void S2SAddFriendReq::SharedDtor() {
  if (targetname_ != &::google::protobuf::internal::kEmptyString) {
    delete targetname_;
  }
  if (this != default_instance_) {
  }
}

void S2SAddFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SAddFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SAddFriendReq_descriptor_;
}

const S2SAddFriendReq& S2SAddFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SAddFriendReq* S2SAddFriendReq::default_instance_ = NULL;

S2SAddFriendReq* S2SAddFriendReq::New() const {
  return new S2SAddFriendReq;
}

void S2SAddFriendReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    selfplayerid_ = 0u;
    targetplayerid_ = 0u;
    serverid_ = 0u;
    if (has_targetname()) {
      if (targetname_ != &::google::protobuf::internal::kEmptyString) {
        targetname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SAddFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 selfplayerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selfplayerid_)));
          set_has_selfplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetplayerid;
        break;
      }

      // required uint32 targetplayerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetplayerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetplayerid_)));
          set_has_targetplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_targetname;
        break;
      }

      // required string targetname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->targetname().data(), this->targetname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SAddFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 selfplayerid = 1;
  if (has_selfplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->selfplayerid(), output);
  }

  // required uint32 targetplayerid = 2;
  if (has_targetplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetplayerid(), output);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  // required string targetname = 4;
  if (has_targetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetname().data(), this->targetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->targetname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SAddFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 selfplayerid = 1;
  if (has_selfplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->selfplayerid(), target);
  }

  // required uint32 targetplayerid = 2;
  if (has_targetplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targetplayerid(), target);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  // required string targetname = 4;
  if (has_targetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetname().data(), this->targetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->targetname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SAddFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 selfplayerid = 1;
    if (has_selfplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selfplayerid());
    }

    // required uint32 targetplayerid = 2;
    if (has_targetplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetplayerid());
    }

    // required uint32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required string targetname = 4;
    if (has_targetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SAddFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SAddFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SAddFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SAddFriendReq::MergeFrom(const S2SAddFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfplayerid()) {
      set_selfplayerid(from.selfplayerid());
    }
    if (from.has_targetplayerid()) {
      set_targetplayerid(from.targetplayerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_targetname()) {
      set_targetname(from.targetname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SAddFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SAddFriendReq::CopyFrom(const S2SAddFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SAddFriendReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SAddFriendReq::Swap(S2SAddFriendReq* other) {
  if (other != this) {
    std::swap(selfplayerid_, other->selfplayerid_);
    std::swap(targetplayerid_, other->targetplayerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(targetname_, other->targetname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SAddFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SAddFriendReq_descriptor_;
  metadata.reflection = S2SAddFriendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SAddFriendAck::kPlayeridFieldNumber;
const int S2SAddFriendAck::kPbfriendFieldNumber;
#endif  // !_MSC_VER

S2SAddFriendAck::S2SAddFriendAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SAddFriendAck::InitAsDefaultInstance() {
  pbfriend_ = const_cast< ::KFMsg::PBRelation*>(&::KFMsg::PBRelation::default_instance());
}

S2SAddFriendAck::S2SAddFriendAck(const S2SAddFriendAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SAddFriendAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  pbfriend_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SAddFriendAck::~S2SAddFriendAck() {
  SharedDtor();
}

void S2SAddFriendAck::SharedDtor() {
  if (this != default_instance_) {
    delete pbfriend_;
  }
}

void S2SAddFriendAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SAddFriendAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SAddFriendAck_descriptor_;
}

const S2SAddFriendAck& S2SAddFriendAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SAddFriendAck* S2SAddFriendAck::default_instance_ = NULL;

S2SAddFriendAck* S2SAddFriendAck::New() const {
  return new S2SAddFriendAck;
}

void S2SAddFriendAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_pbfriend()) {
      if (pbfriend_ != NULL) pbfriend_->::KFMsg::PBRelation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SAddFriendAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbfriend;
        break;
      }

      // required .KFMsg.PBRelation pbfriend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbfriend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbfriend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SAddFriendAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required .KFMsg.PBRelation pbfriend = 2;
  if (has_pbfriend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pbfriend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SAddFriendAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required .KFMsg.PBRelation pbfriend = 2;
  if (has_pbfriend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pbfriend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SAddFriendAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required .KFMsg.PBRelation pbfriend = 2;
    if (has_pbfriend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbfriend());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SAddFriendAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SAddFriendAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SAddFriendAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SAddFriendAck::MergeFrom(const S2SAddFriendAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_pbfriend()) {
      mutable_pbfriend()->::KFMsg::PBRelation::MergeFrom(from.pbfriend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SAddFriendAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SAddFriendAck::CopyFrom(const S2SAddFriendAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SAddFriendAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pbfriend()) {
    if (!this->pbfriend().IsInitialized()) return false;
  }
  return true;
}

void S2SAddFriendAck::Swap(S2SAddFriendAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(pbfriend_, other->pbfriend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SAddFriendAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SAddFriendAck_descriptor_;
  metadata.reflection = S2SAddFriendAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SUpdateFriendReq::kFriendidFieldNumber;
const int S2SUpdateFriendReq::kServeridFieldNumber;
const int S2SUpdateFriendReq::kPbdataFieldNumber;
#endif  // !_MSC_VER

S2SUpdateFriendReq::S2SUpdateFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SUpdateFriendReq::InitAsDefaultInstance() {
}

S2SUpdateFriendReq::S2SUpdateFriendReq(const S2SUpdateFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SUpdateFriendReq::SharedCtor() {
  _cached_size_ = 0;
  friendid_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SUpdateFriendReq::~S2SUpdateFriendReq() {
  SharedDtor();
}

void S2SUpdateFriendReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SUpdateFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SUpdateFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SUpdateFriendReq_descriptor_;
}

const S2SUpdateFriendReq& S2SUpdateFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SUpdateFriendReq* S2SUpdateFriendReq::default_instance_ = NULL;

S2SUpdateFriendReq* S2SUpdateFriendReq::New() const {
  return new S2SUpdateFriendReq;
}

void S2SUpdateFriendReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friendid_ = 0u;
    serverid_ = 0u;
  }
  pbdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SUpdateFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 friendid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendid_)));
          set_has_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pbdata;
        break;
      }

      // repeated .KFMsg.PBString pbdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pbdata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SUpdateFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 friendid = 1;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->friendid(), output);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  // repeated .KFMsg.PBString pbdata = 3;
  for (int i = 0; i < this->pbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pbdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SUpdateFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 friendid = 1;
  if (has_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->friendid(), target);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  // repeated .KFMsg.PBString pbdata = 3;
  for (int i = 0; i < this->pbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pbdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SUpdateFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 friendid = 1;
    if (has_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friendid());
    }

    // required uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  // repeated .KFMsg.PBString pbdata = 3;
  total_size += 1 * this->pbdata_size();
  for (int i = 0; i < this->pbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SUpdateFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SUpdateFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SUpdateFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SUpdateFriendReq::MergeFrom(const S2SUpdateFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbdata_.MergeFrom(from.pbdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SUpdateFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SUpdateFriendReq::CopyFrom(const S2SUpdateFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SUpdateFriendReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SUpdateFriendReq::Swap(S2SUpdateFriendReq* other) {
  if (other != this) {
    std::swap(friendid_, other->friendid_);
    std::swap(serverid_, other->serverid_);
    pbdata_.Swap(&other->pbdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SUpdateFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SUpdateFriendReq_descriptor_;
  metadata.reflection = S2SUpdateFriendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SUpdateFriendLinessReq::kSelfplayeridFieldNumber;
const int S2SUpdateFriendLinessReq::kTargetplayeridFieldNumber;
const int S2SUpdateFriendLinessReq::kFriendlinessFieldNumber;
const int S2SUpdateFriendLinessReq::kTypeFieldNumber;
#endif  // !_MSC_VER

S2SUpdateFriendLinessReq::S2SUpdateFriendLinessReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SUpdateFriendLinessReq::InitAsDefaultInstance() {
}

S2SUpdateFriendLinessReq::S2SUpdateFriendLinessReq(const S2SUpdateFriendLinessReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SUpdateFriendLinessReq::SharedCtor() {
  _cached_size_ = 0;
  selfplayerid_ = 0u;
  targetplayerid_ = 0u;
  friendliness_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SUpdateFriendLinessReq::~S2SUpdateFriendLinessReq() {
  SharedDtor();
}

void S2SUpdateFriendLinessReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SUpdateFriendLinessReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SUpdateFriendLinessReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SUpdateFriendLinessReq_descriptor_;
}

const S2SUpdateFriendLinessReq& S2SUpdateFriendLinessReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SUpdateFriendLinessReq* S2SUpdateFriendLinessReq::default_instance_ = NULL;

S2SUpdateFriendLinessReq* S2SUpdateFriendLinessReq::New() const {
  return new S2SUpdateFriendLinessReq;
}

void S2SUpdateFriendLinessReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    selfplayerid_ = 0u;
    targetplayerid_ = 0u;
    friendliness_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SUpdateFriendLinessReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 selfplayerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selfplayerid_)));
          set_has_selfplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetplayerid;
        break;
      }

      // required uint32 targetplayerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetplayerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetplayerid_)));
          set_has_targetplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_friendliness;
        break;
      }

      // required uint32 friendliness = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendliness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendliness_)));
          set_has_friendliness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SUpdateFriendLinessReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 selfplayerid = 1;
  if (has_selfplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->selfplayerid(), output);
  }

  // required uint32 targetplayerid = 2;
  if (has_targetplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetplayerid(), output);
  }

  // required uint32 friendliness = 3;
  if (has_friendliness()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->friendliness(), output);
  }

  // required uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SUpdateFriendLinessReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 selfplayerid = 1;
  if (has_selfplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->selfplayerid(), target);
  }

  // required uint32 targetplayerid = 2;
  if (has_targetplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targetplayerid(), target);
  }

  // required uint32 friendliness = 3;
  if (has_friendliness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->friendliness(), target);
  }

  // required uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SUpdateFriendLinessReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 selfplayerid = 1;
    if (has_selfplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selfplayerid());
    }

    // required uint32 targetplayerid = 2;
    if (has_targetplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetplayerid());
    }

    // required uint32 friendliness = 3;
    if (has_friendliness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friendliness());
    }

    // required uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SUpdateFriendLinessReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SUpdateFriendLinessReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SUpdateFriendLinessReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SUpdateFriendLinessReq::MergeFrom(const S2SUpdateFriendLinessReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfplayerid()) {
      set_selfplayerid(from.selfplayerid());
    }
    if (from.has_targetplayerid()) {
      set_targetplayerid(from.targetplayerid());
    }
    if (from.has_friendliness()) {
      set_friendliness(from.friendliness());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SUpdateFriendLinessReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SUpdateFriendLinessReq::CopyFrom(const S2SUpdateFriendLinessReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SUpdateFriendLinessReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SUpdateFriendLinessReq::Swap(S2SUpdateFriendLinessReq* other) {
  if (other != this) {
    std::swap(selfplayerid_, other->selfplayerid_);
    std::swap(targetplayerid_, other->targetplayerid_);
    std::swap(friendliness_, other->friendliness_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SUpdateFriendLinessReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SUpdateFriendLinessReq_descriptor_;
  metadata.reflection = S2SUpdateFriendLinessReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SQueryBasicReq::kPlayeridFieldNumber;
const int S2SQueryBasicReq::kNameFieldNumber;
#endif  // !_MSC_VER

S2SQueryBasicReq::S2SQueryBasicReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SQueryBasicReq::InitAsDefaultInstance() {
}

S2SQueryBasicReq::S2SQueryBasicReq(const S2SQueryBasicReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SQueryBasicReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SQueryBasicReq::~S2SQueryBasicReq() {
  SharedDtor();
}

void S2SQueryBasicReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void S2SQueryBasicReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SQueryBasicReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SQueryBasicReq_descriptor_;
}

const S2SQueryBasicReq& S2SQueryBasicReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SQueryBasicReq* S2SQueryBasicReq::default_instance_ = NULL;

S2SQueryBasicReq* S2SQueryBasicReq::New() const {
  return new S2SQueryBasicReq;
}

void S2SQueryBasicReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SQueryBasicReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SQueryBasicReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SQueryBasicReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SQueryBasicReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SQueryBasicReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SQueryBasicReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SQueryBasicReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SQueryBasicReq::MergeFrom(const S2SQueryBasicReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SQueryBasicReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryBasicReq::CopyFrom(const S2SQueryBasicReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryBasicReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SQueryBasicReq::Swap(S2SQueryBasicReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SQueryBasicReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SQueryBasicReq_descriptor_;
  metadata.reflection = S2SQueryBasicReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SQueryBasicAck::kPlayeridFieldNumber;
const int S2SQueryBasicAck::kPbobjectFieldNumber;
#endif  // !_MSC_VER

S2SQueryBasicAck::S2SQueryBasicAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SQueryBasicAck::InitAsDefaultInstance() {
  pbobject_ = const_cast< ::KFMsg::PBObject*>(&::KFMsg::PBObject::default_instance());
}

S2SQueryBasicAck::S2SQueryBasicAck(const S2SQueryBasicAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SQueryBasicAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  pbobject_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SQueryBasicAck::~S2SQueryBasicAck() {
  SharedDtor();
}

void S2SQueryBasicAck::SharedDtor() {
  if (this != default_instance_) {
    delete pbobject_;
  }
}

void S2SQueryBasicAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SQueryBasicAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SQueryBasicAck_descriptor_;
}

const S2SQueryBasicAck& S2SQueryBasicAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SQueryBasicAck* S2SQueryBasicAck::default_instance_ = NULL;

S2SQueryBasicAck* S2SQueryBasicAck::New() const {
  return new S2SQueryBasicAck;
}

void S2SQueryBasicAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_pbobject()) {
      if (pbobject_ != NULL) pbobject_->::KFMsg::PBObject::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SQueryBasicAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbobject;
        break;
      }

      // required .KFMsg.PBObject pbobject = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbobject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbobject()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SQueryBasicAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required .KFMsg.PBObject pbobject = 2;
  if (has_pbobject()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pbobject(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SQueryBasicAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required .KFMsg.PBObject pbobject = 2;
  if (has_pbobject()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pbobject(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SQueryBasicAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required .KFMsg.PBObject pbobject = 2;
    if (has_pbobject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbobject());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SQueryBasicAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SQueryBasicAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SQueryBasicAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SQueryBasicAck::MergeFrom(const S2SQueryBasicAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_pbobject()) {
      mutable_pbobject()->::KFMsg::PBObject::MergeFrom(from.pbobject());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SQueryBasicAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryBasicAck::CopyFrom(const S2SQueryBasicAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryBasicAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SQueryBasicAck::Swap(S2SQueryBasicAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(pbobject_, other->pbobject_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SQueryBasicAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SQueryBasicAck_descriptor_;
  metadata.reflection = S2SQueryBasicAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SQueryPlayerReq::kZoneidFieldNumber;
const int S2SQueryPlayerReq::kPlayeridFieldNumber;
const int S2SQueryPlayerReq::kQueryidFieldNumber;
#endif  // !_MSC_VER

S2SQueryPlayerReq::S2SQueryPlayerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SQueryPlayerReq::InitAsDefaultInstance() {
}

S2SQueryPlayerReq::S2SQueryPlayerReq(const S2SQueryPlayerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SQueryPlayerReq::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0u;
  playerid_ = 0u;
  queryid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SQueryPlayerReq::~S2SQueryPlayerReq() {
  SharedDtor();
}

void S2SQueryPlayerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SQueryPlayerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SQueryPlayerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SQueryPlayerReq_descriptor_;
}

const S2SQueryPlayerReq& S2SQueryPlayerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SQueryPlayerReq* S2SQueryPlayerReq::default_instance_ = NULL;

S2SQueryPlayerReq* S2SQueryPlayerReq::New() const {
  return new S2SQueryPlayerReq;
}

void S2SQueryPlayerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zoneid_ = 0u;
    playerid_ = 0u;
    queryid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SQueryPlayerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zoneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_queryid;
        break;
      }

      // required uint32 queryid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queryid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queryid_)));
          set_has_queryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SQueryPlayerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required uint32 queryid = 3;
  if (has_queryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->queryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SQueryPlayerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // required uint32 queryid = 3;
  if (has_queryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->queryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SQueryPlayerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 queryid = 3;
    if (has_queryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SQueryPlayerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SQueryPlayerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SQueryPlayerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SQueryPlayerReq::MergeFrom(const S2SQueryPlayerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_queryid()) {
      set_queryid(from.queryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SQueryPlayerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryPlayerReq::CopyFrom(const S2SQueryPlayerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryPlayerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SQueryPlayerReq::Swap(S2SQueryPlayerReq* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(playerid_, other->playerid_);
    std::swap(queryid_, other->queryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SQueryPlayerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SQueryPlayerReq_descriptor_;
  metadata.reflection = S2SQueryPlayerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SQueryPlayerAck::kPlayeridFieldNumber;
const int S2SQueryPlayerAck::kPbobjectFieldNumber;
#endif  // !_MSC_VER

S2SQueryPlayerAck::S2SQueryPlayerAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SQueryPlayerAck::InitAsDefaultInstance() {
  pbobject_ = const_cast< ::KFMsg::PBObject*>(&::KFMsg::PBObject::default_instance());
}

S2SQueryPlayerAck::S2SQueryPlayerAck(const S2SQueryPlayerAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SQueryPlayerAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  pbobject_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SQueryPlayerAck::~S2SQueryPlayerAck() {
  SharedDtor();
}

void S2SQueryPlayerAck::SharedDtor() {
  if (this != default_instance_) {
    delete pbobject_;
  }
}

void S2SQueryPlayerAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SQueryPlayerAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SQueryPlayerAck_descriptor_;
}

const S2SQueryPlayerAck& S2SQueryPlayerAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SQueryPlayerAck* S2SQueryPlayerAck::default_instance_ = NULL;

S2SQueryPlayerAck* S2SQueryPlayerAck::New() const {
  return new S2SQueryPlayerAck;
}

void S2SQueryPlayerAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_pbobject()) {
      if (pbobject_ != NULL) pbobject_->::KFMsg::PBObject::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SQueryPlayerAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbobject;
        break;
      }

      // required .KFMsg.PBObject pbobject = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbobject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbobject()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SQueryPlayerAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required .KFMsg.PBObject pbobject = 2;
  if (has_pbobject()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pbobject(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SQueryPlayerAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required .KFMsg.PBObject pbobject = 2;
  if (has_pbobject()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pbobject(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SQueryPlayerAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required .KFMsg.PBObject pbobject = 2;
    if (has_pbobject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbobject());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SQueryPlayerAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SQueryPlayerAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SQueryPlayerAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SQueryPlayerAck::MergeFrom(const S2SQueryPlayerAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_pbobject()) {
      mutable_pbobject()->::KFMsg::PBObject::MergeFrom(from.pbobject());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SQueryPlayerAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryPlayerAck::CopyFrom(const S2SQueryPlayerAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryPlayerAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SQueryPlayerAck::Swap(S2SQueryPlayerAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(pbobject_, other->pbobject_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SQueryPlayerAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SQueryPlayerAck_descriptor_;
  metadata.reflection = S2SQueryPlayerAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SUpdateMailFlagReq::kPlayeridFieldNumber;
const int S2SUpdateMailFlagReq::kMailidFieldNumber;
const int S2SUpdateMailFlagReq::kMailtypeFieldNumber;
const int S2SUpdateMailFlagReq::kFlagFieldNumber;
#endif  // !_MSC_VER

S2SUpdateMailFlagReq::S2SUpdateMailFlagReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SUpdateMailFlagReq::InitAsDefaultInstance() {
}

S2SUpdateMailFlagReq::S2SUpdateMailFlagReq(const S2SUpdateMailFlagReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SUpdateMailFlagReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  mailid_ = GOOGLE_ULONGLONG(0);
  mailtype_ = 0u;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SUpdateMailFlagReq::~S2SUpdateMailFlagReq() {
  SharedDtor();
}

void S2SUpdateMailFlagReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SUpdateMailFlagReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SUpdateMailFlagReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SUpdateMailFlagReq_descriptor_;
}

const S2SUpdateMailFlagReq& S2SUpdateMailFlagReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SUpdateMailFlagReq* S2SUpdateMailFlagReq::default_instance_ = NULL;

S2SUpdateMailFlagReq* S2SUpdateMailFlagReq::New() const {
  return new S2SUpdateMailFlagReq;
}

void S2SUpdateMailFlagReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    mailid_ = GOOGLE_ULONGLONG(0);
    mailtype_ = 0u;
    flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SUpdateMailFlagReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mailid;
        break;
      }

      // required uint64 mailid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mailtype;
        break;
      }

      // required uint32 mailtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailtype_)));
          set_has_mailtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }

      // required uint32 flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SUpdateMailFlagReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint64 mailid = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mailid(), output);
  }

  // required uint32 mailtype = 3;
  if (has_mailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mailtype(), output);
  }

  // required uint32 flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SUpdateMailFlagReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint64 mailid = 2;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mailid(), target);
  }

  // required uint32 mailtype = 3;
  if (has_mailtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mailtype(), target);
  }

  // required uint32 flag = 4;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SUpdateMailFlagReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint64 mailid = 2;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

    // required uint32 mailtype = 3;
    if (has_mailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailtype());
    }

    // required uint32 flag = 4;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SUpdateMailFlagReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SUpdateMailFlagReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SUpdateMailFlagReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SUpdateMailFlagReq::MergeFrom(const S2SUpdateMailFlagReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_mailtype()) {
      set_mailtype(from.mailtype());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SUpdateMailFlagReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SUpdateMailFlagReq::CopyFrom(const S2SUpdateMailFlagReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SUpdateMailFlagReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SUpdateMailFlagReq::Swap(S2SUpdateMailFlagReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(mailid_, other->mailid_);
    std::swap(mailtype_, other->mailtype_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SUpdateMailFlagReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SUpdateMailFlagReq_descriptor_;
  metadata.reflection = S2SUpdateMailFlagReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SUpdateMailFlagAck::kPlayeridFieldNumber;
const int S2SUpdateMailFlagAck::kMailidFieldNumber;
const int S2SUpdateMailFlagAck::kMailtypeFieldNumber;
const int S2SUpdateMailFlagAck::kFlagFieldNumber;
#endif  // !_MSC_VER

S2SUpdateMailFlagAck::S2SUpdateMailFlagAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SUpdateMailFlagAck::InitAsDefaultInstance() {
}

S2SUpdateMailFlagAck::S2SUpdateMailFlagAck(const S2SUpdateMailFlagAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SUpdateMailFlagAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  mailid_ = GOOGLE_ULONGLONG(0);
  mailtype_ = 0u;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SUpdateMailFlagAck::~S2SUpdateMailFlagAck() {
  SharedDtor();
}

void S2SUpdateMailFlagAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SUpdateMailFlagAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SUpdateMailFlagAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SUpdateMailFlagAck_descriptor_;
}

const S2SUpdateMailFlagAck& S2SUpdateMailFlagAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SUpdateMailFlagAck* S2SUpdateMailFlagAck::default_instance_ = NULL;

S2SUpdateMailFlagAck* S2SUpdateMailFlagAck::New() const {
  return new S2SUpdateMailFlagAck;
}

void S2SUpdateMailFlagAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    mailid_ = GOOGLE_ULONGLONG(0);
    mailtype_ = 0u;
    flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SUpdateMailFlagAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mailid;
        break;
      }

      // required uint64 mailid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mailtype;
        break;
      }

      // required uint32 mailtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailtype_)));
          set_has_mailtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }

      // required uint32 flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SUpdateMailFlagAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint64 mailid = 2;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mailid(), output);
  }

  // required uint32 mailtype = 3;
  if (has_mailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mailtype(), output);
  }

  // required uint32 flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SUpdateMailFlagAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint64 mailid = 2;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mailid(), target);
  }

  // required uint32 mailtype = 3;
  if (has_mailtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mailtype(), target);
  }

  // required uint32 flag = 4;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SUpdateMailFlagAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint64 mailid = 2;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

    // required uint32 mailtype = 3;
    if (has_mailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailtype());
    }

    // required uint32 flag = 4;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SUpdateMailFlagAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SUpdateMailFlagAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SUpdateMailFlagAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SUpdateMailFlagAck::MergeFrom(const S2SUpdateMailFlagAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_mailtype()) {
      set_mailtype(from.mailtype());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SUpdateMailFlagAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SUpdateMailFlagAck::CopyFrom(const S2SUpdateMailFlagAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SUpdateMailFlagAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SUpdateMailFlagAck::Swap(S2SUpdateMailFlagAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(mailid_, other->mailid_);
    std::swap(mailtype_, other->mailtype_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SUpdateMailFlagAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SUpdateMailFlagAck_descriptor_;
  metadata.reflection = S2SUpdateMailFlagAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SPlayerToastReq::kSelfplayeridFieldNumber;
const int S2SPlayerToastReq::kTargetplayeridFieldNumber;
const int S2SPlayerToastReq::kServeridFieldNumber;
#endif  // !_MSC_VER

S2SPlayerToastReq::S2SPlayerToastReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SPlayerToastReq::InitAsDefaultInstance() {
}

S2SPlayerToastReq::S2SPlayerToastReq(const S2SPlayerToastReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SPlayerToastReq::SharedCtor() {
  _cached_size_ = 0;
  selfplayerid_ = 0u;
  targetplayerid_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SPlayerToastReq::~S2SPlayerToastReq() {
  SharedDtor();
}

void S2SPlayerToastReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SPlayerToastReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SPlayerToastReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SPlayerToastReq_descriptor_;
}

const S2SPlayerToastReq& S2SPlayerToastReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SPlayerToastReq* S2SPlayerToastReq::default_instance_ = NULL;

S2SPlayerToastReq* S2SPlayerToastReq::New() const {
  return new S2SPlayerToastReq;
}

void S2SPlayerToastReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    selfplayerid_ = 0u;
    targetplayerid_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SPlayerToastReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 selfplayerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selfplayerid_)));
          set_has_selfplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetplayerid;
        break;
      }

      // required uint32 targetplayerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetplayerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetplayerid_)));
          set_has_targetplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SPlayerToastReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 selfplayerid = 1;
  if (has_selfplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->selfplayerid(), output);
  }

  // required uint32 targetplayerid = 2;
  if (has_targetplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetplayerid(), output);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SPlayerToastReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 selfplayerid = 1;
  if (has_selfplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->selfplayerid(), target);
  }

  // required uint32 targetplayerid = 2;
  if (has_targetplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targetplayerid(), target);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SPlayerToastReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 selfplayerid = 1;
    if (has_selfplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selfplayerid());
    }

    // required uint32 targetplayerid = 2;
    if (has_targetplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetplayerid());
    }

    // required uint32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SPlayerToastReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SPlayerToastReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SPlayerToastReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SPlayerToastReq::MergeFrom(const S2SPlayerToastReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfplayerid()) {
      set_selfplayerid(from.selfplayerid());
    }
    if (from.has_targetplayerid()) {
      set_targetplayerid(from.targetplayerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SPlayerToastReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SPlayerToastReq::CopyFrom(const S2SPlayerToastReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SPlayerToastReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SPlayerToastReq::Swap(S2SPlayerToastReq* other) {
  if (other != this) {
    std::swap(selfplayerid_, other->selfplayerid_);
    std::swap(targetplayerid_, other->targetplayerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SPlayerToastReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SPlayerToastReq_descriptor_;
  metadata.reflection = S2SPlayerToastReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SPlayerToastAck::kResultFieldNumber;
const int S2SPlayerToastAck::kPlayeridFieldNumber;
const int S2SPlayerToastAck::kTargetplayeridFieldNumber;
const int S2SPlayerToastAck::kTargetserveridFieldNumber;
#endif  // !_MSC_VER

S2SPlayerToastAck::S2SPlayerToastAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SPlayerToastAck::InitAsDefaultInstance() {
}

S2SPlayerToastAck::S2SPlayerToastAck(const S2SPlayerToastAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SPlayerToastAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  playerid_ = 0u;
  targetplayerid_ = 0u;
  targetserverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SPlayerToastAck::~S2SPlayerToastAck() {
  SharedDtor();
}

void S2SPlayerToastAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SPlayerToastAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SPlayerToastAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SPlayerToastAck_descriptor_;
}

const S2SPlayerToastAck& S2SPlayerToastAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SPlayerToastAck* S2SPlayerToastAck::default_instance_ = NULL;

S2SPlayerToastAck* S2SPlayerToastAck::New() const {
  return new S2SPlayerToastAck;
}

void S2SPlayerToastAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    playerid_ = 0u;
    targetplayerid_ = 0u;
    targetserverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SPlayerToastAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetplayerid;
        break;
      }

      // required uint32 targetplayerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetplayerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetplayerid_)));
          set_has_targetplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_targetserverid;
        break;
      }

      // required uint32 targetserverid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetserverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetserverid_)));
          set_has_targetserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SPlayerToastAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required uint32 targetplayerid = 3;
  if (has_targetplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->targetplayerid(), output);
  }

  // required uint32 targetserverid = 4;
  if (has_targetserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->targetserverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SPlayerToastAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // required uint32 targetplayerid = 3;
  if (has_targetplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->targetplayerid(), target);
  }

  // required uint32 targetserverid = 4;
  if (has_targetserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->targetserverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SPlayerToastAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 targetplayerid = 3;
    if (has_targetplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetplayerid());
    }

    // required uint32 targetserverid = 4;
    if (has_targetserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetserverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SPlayerToastAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SPlayerToastAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SPlayerToastAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SPlayerToastAck::MergeFrom(const S2SPlayerToastAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_targetplayerid()) {
      set_targetplayerid(from.targetplayerid());
    }
    if (from.has_targetserverid()) {
      set_targetserverid(from.targetserverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SPlayerToastAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SPlayerToastAck::CopyFrom(const S2SPlayerToastAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SPlayerToastAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SPlayerToastAck::Swap(S2SPlayerToastAck* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(playerid_, other->playerid_);
    std::swap(targetplayerid_, other->targetplayerid_);
    std::swap(targetserverid_, other->targetserverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SPlayerToastAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SPlayerToastAck_descriptor_;
  metadata.reflection = S2SPlayerToastAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SQueryToastCountReq::kSelfplayeridFieldNumber;
const int S2SQueryToastCountReq::kTargetplayeridFieldNumber;
#endif  // !_MSC_VER

S2SQueryToastCountReq::S2SQueryToastCountReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SQueryToastCountReq::InitAsDefaultInstance() {
}

S2SQueryToastCountReq::S2SQueryToastCountReq(const S2SQueryToastCountReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SQueryToastCountReq::SharedCtor() {
  _cached_size_ = 0;
  selfplayerid_ = 0u;
  targetplayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SQueryToastCountReq::~S2SQueryToastCountReq() {
  SharedDtor();
}

void S2SQueryToastCountReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SQueryToastCountReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SQueryToastCountReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SQueryToastCountReq_descriptor_;
}

const S2SQueryToastCountReq& S2SQueryToastCountReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SQueryToastCountReq* S2SQueryToastCountReq::default_instance_ = NULL;

S2SQueryToastCountReq* S2SQueryToastCountReq::New() const {
  return new S2SQueryToastCountReq;
}

void S2SQueryToastCountReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    selfplayerid_ = 0u;
    targetplayerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SQueryToastCountReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 selfplayerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selfplayerid_)));
          set_has_selfplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetplayerid;
        break;
      }

      // required uint32 targetplayerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetplayerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetplayerid_)));
          set_has_targetplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SQueryToastCountReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 selfplayerid = 1;
  if (has_selfplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->selfplayerid(), output);
  }

  // required uint32 targetplayerid = 2;
  if (has_targetplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetplayerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SQueryToastCountReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 selfplayerid = 1;
  if (has_selfplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->selfplayerid(), target);
  }

  // required uint32 targetplayerid = 2;
  if (has_targetplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targetplayerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SQueryToastCountReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 selfplayerid = 1;
    if (has_selfplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selfplayerid());
    }

    // required uint32 targetplayerid = 2;
    if (has_targetplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetplayerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SQueryToastCountReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SQueryToastCountReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SQueryToastCountReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SQueryToastCountReq::MergeFrom(const S2SQueryToastCountReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfplayerid()) {
      set_selfplayerid(from.selfplayerid());
    }
    if (from.has_targetplayerid()) {
      set_targetplayerid(from.targetplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SQueryToastCountReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryToastCountReq::CopyFrom(const S2SQueryToastCountReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryToastCountReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SQueryToastCountReq::Swap(S2SQueryToastCountReq* other) {
  if (other != this) {
    std::swap(selfplayerid_, other->selfplayerid_);
    std::swap(targetplayerid_, other->targetplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SQueryToastCountReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SQueryToastCountReq_descriptor_;
  metadata.reflection = S2SQueryToastCountReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SUpdateFriendLinessAck::kPlayeridFieldNumber;
const int S2SUpdateFriendLinessAck::kTargetplayeridFieldNumber;
const int S2SUpdateFriendLinessAck::kFriendlinessFieldNumber;
#endif  // !_MSC_VER

S2SUpdateFriendLinessAck::S2SUpdateFriendLinessAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SUpdateFriendLinessAck::InitAsDefaultInstance() {
}

S2SUpdateFriendLinessAck::S2SUpdateFriendLinessAck(const S2SUpdateFriendLinessAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SUpdateFriendLinessAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  targetplayerid_ = 0u;
  friendliness_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SUpdateFriendLinessAck::~S2SUpdateFriendLinessAck() {
  SharedDtor();
}

void S2SUpdateFriendLinessAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SUpdateFriendLinessAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SUpdateFriendLinessAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SUpdateFriendLinessAck_descriptor_;
}

const S2SUpdateFriendLinessAck& S2SUpdateFriendLinessAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SUpdateFriendLinessAck* S2SUpdateFriendLinessAck::default_instance_ = NULL;

S2SUpdateFriendLinessAck* S2SUpdateFriendLinessAck::New() const {
  return new S2SUpdateFriendLinessAck;
}

void S2SUpdateFriendLinessAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    targetplayerid_ = 0u;
    friendliness_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SUpdateFriendLinessAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetplayerid;
        break;
      }

      // required uint32 targetplayerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetplayerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetplayerid_)));
          set_has_targetplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_friendliness;
        break;
      }

      // required uint32 friendliness = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendliness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendliness_)));
          set_has_friendliness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SUpdateFriendLinessAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 targetplayerid = 2;
  if (has_targetplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetplayerid(), output);
  }

  // required uint32 friendliness = 3;
  if (has_friendliness()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->friendliness(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SUpdateFriendLinessAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 targetplayerid = 2;
  if (has_targetplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targetplayerid(), target);
  }

  // required uint32 friendliness = 3;
  if (has_friendliness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->friendliness(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SUpdateFriendLinessAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 targetplayerid = 2;
    if (has_targetplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetplayerid());
    }

    // required uint32 friendliness = 3;
    if (has_friendliness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friendliness());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SUpdateFriendLinessAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SUpdateFriendLinessAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SUpdateFriendLinessAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SUpdateFriendLinessAck::MergeFrom(const S2SUpdateFriendLinessAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_targetplayerid()) {
      set_targetplayerid(from.targetplayerid());
    }
    if (from.has_friendliness()) {
      set_friendliness(from.friendliness());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SUpdateFriendLinessAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SUpdateFriendLinessAck::CopyFrom(const S2SUpdateFriendLinessAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SUpdateFriendLinessAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SUpdateFriendLinessAck::Swap(S2SUpdateFriendLinessAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(targetplayerid_, other->targetplayerid_);
    std::swap(friendliness_, other->friendliness_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SUpdateFriendLinessAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SUpdateFriendLinessAck_descriptor_;
  metadata.reflection = S2SUpdateFriendLinessAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SCreateMatchGroupReq::kPbmemberFieldNumber;
const int S2SCreateMatchGroupReq::kGroupidFieldNumber;
const int S2SCreateMatchGroupReq::kMaxcountFieldNumber;
const int S2SCreateMatchGroupReq::kMatchidFieldNumber;
const int S2SCreateMatchGroupReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SCreateMatchGroupReq::S2SCreateMatchGroupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SCreateMatchGroupReq::InitAsDefaultInstance() {
  pbmember_ = const_cast< ::KFMsg::PBObject*>(&::KFMsg::PBObject::default_instance());
}

S2SCreateMatchGroupReq::S2SCreateMatchGroupReq(const S2SCreateMatchGroupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SCreateMatchGroupReq::SharedCtor() {
  _cached_size_ = 0;
  pbmember_ = NULL;
  groupid_ = GOOGLE_ULONGLONG(0);
  maxcount_ = 0u;
  matchid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SCreateMatchGroupReq::~S2SCreateMatchGroupReq() {
  SharedDtor();
}

void S2SCreateMatchGroupReq::SharedDtor() {
  if (this != default_instance_) {
    delete pbmember_;
  }
}

void S2SCreateMatchGroupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SCreateMatchGroupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SCreateMatchGroupReq_descriptor_;
}

const S2SCreateMatchGroupReq& S2SCreateMatchGroupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SCreateMatchGroupReq* S2SCreateMatchGroupReq::default_instance_ = NULL;

S2SCreateMatchGroupReq* S2SCreateMatchGroupReq::New() const {
  return new S2SCreateMatchGroupReq;
}

void S2SCreateMatchGroupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pbmember()) {
      if (pbmember_ != NULL) pbmember_->::KFMsg::PBObject::Clear();
    }
    groupid_ = GOOGLE_ULONGLONG(0);
    maxcount_ = 0u;
    matchid_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SCreateMatchGroupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KFMsg.PBObject pbmember = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbmember()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupid;
        break;
      }

      // required uint64 groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxcount;
        break;
      }

      // required uint32 maxcount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxcount_)));
          set_has_maxcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_matchid;
        break;
      }

      // required uint32 matchid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SCreateMatchGroupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KFMsg.PBObject pbmember = 1;
  if (has_pbmember()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pbmember(), output);
  }

  // required uint64 groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->groupid(), output);
  }

  // required uint32 maxcount = 3;
  if (has_maxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxcount(), output);
  }

  // required uint32 matchid = 4;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->matchid(), output);
  }

  // required uint32 playerid = 5;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SCreateMatchGroupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KFMsg.PBObject pbmember = 1;
  if (has_pbmember()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pbmember(), target);
  }

  // required uint64 groupid = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->groupid(), target);
  }

  // required uint32 maxcount = 3;
  if (has_maxcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxcount(), target);
  }

  // required uint32 matchid = 4;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->matchid(), target);
  }

  // required uint32 playerid = 5;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SCreateMatchGroupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KFMsg.PBObject pbmember = 1;
    if (has_pbmember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbmember());
    }

    // required uint64 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required uint32 maxcount = 3;
    if (has_maxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxcount());
    }

    // required uint32 matchid = 4;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // required uint32 playerid = 5;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SCreateMatchGroupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SCreateMatchGroupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SCreateMatchGroupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SCreateMatchGroupReq::MergeFrom(const S2SCreateMatchGroupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pbmember()) {
      mutable_pbmember()->::KFMsg::PBObject::MergeFrom(from.pbmember());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_maxcount()) {
      set_maxcount(from.maxcount());
    }
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SCreateMatchGroupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SCreateMatchGroupReq::CopyFrom(const S2SCreateMatchGroupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SCreateMatchGroupReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2SCreateMatchGroupReq::Swap(S2SCreateMatchGroupReq* other) {
  if (other != this) {
    std::swap(pbmember_, other->pbmember_);
    std::swap(groupid_, other->groupid_);
    std::swap(maxcount_, other->maxcount_);
    std::swap(matchid_, other->matchid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SCreateMatchGroupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SCreateMatchGroupReq_descriptor_;
  metadata.reflection = S2SCreateMatchGroupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SUpdateGroupMatchReq::kGroupidFieldNumber;
const int S2SUpdateGroupMatchReq::kMaxcountFieldNumber;
const int S2SUpdateGroupMatchReq::kMatchidFieldNumber;
const int S2SUpdateGroupMatchReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SUpdateGroupMatchReq::S2SUpdateGroupMatchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SUpdateGroupMatchReq::InitAsDefaultInstance() {
}

S2SUpdateGroupMatchReq::S2SUpdateGroupMatchReq(const S2SUpdateGroupMatchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SUpdateGroupMatchReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  maxcount_ = 0u;
  matchid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SUpdateGroupMatchReq::~S2SUpdateGroupMatchReq() {
  SharedDtor();
}

void S2SUpdateGroupMatchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SUpdateGroupMatchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SUpdateGroupMatchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SUpdateGroupMatchReq_descriptor_;
}

const S2SUpdateGroupMatchReq& S2SUpdateGroupMatchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SUpdateGroupMatchReq* S2SUpdateGroupMatchReq::default_instance_ = NULL;

S2SUpdateGroupMatchReq* S2SUpdateGroupMatchReq::New() const {
  return new S2SUpdateGroupMatchReq;
}

void S2SUpdateGroupMatchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    maxcount_ = 0u;
    matchid_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SUpdateGroupMatchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxcount;
        break;
      }

      // required uint32 maxcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxcount_)));
          set_has_maxcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_matchid;
        break;
      }

      // required uint32 matchid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SUpdateGroupMatchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required uint32 maxcount = 2;
  if (has_maxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxcount(), output);
  }

  // required uint32 matchid = 3;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->matchid(), output);
  }

  // required uint32 playerid = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SUpdateGroupMatchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required uint32 maxcount = 2;
  if (has_maxcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxcount(), target);
  }

  // required uint32 matchid = 3;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->matchid(), target);
  }

  // required uint32 playerid = 4;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SUpdateGroupMatchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required uint32 maxcount = 2;
    if (has_maxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxcount());
    }

    // required uint32 matchid = 3;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // required uint32 playerid = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SUpdateGroupMatchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SUpdateGroupMatchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SUpdateGroupMatchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SUpdateGroupMatchReq::MergeFrom(const S2SUpdateGroupMatchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_maxcount()) {
      set_maxcount(from.maxcount());
    }
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SUpdateGroupMatchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SUpdateGroupMatchReq::CopyFrom(const S2SUpdateGroupMatchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SUpdateGroupMatchReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SUpdateGroupMatchReq::Swap(S2SUpdateGroupMatchReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(maxcount_, other->maxcount_);
    std::swap(matchid_, other->matchid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SUpdateGroupMatchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SUpdateGroupMatchReq_descriptor_;
  metadata.reflection = S2SUpdateGroupMatchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SCreateMatchGroupToShardReq::kPbmemberFieldNumber;
const int S2SCreateMatchGroupToShardReq::kGroupidFieldNumber;
const int S2SCreateMatchGroupToShardReq::kMaxcountFieldNumber;
const int S2SCreateMatchGroupToShardReq::kMatchidFieldNumber;
const int S2SCreateMatchGroupToShardReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SCreateMatchGroupToShardReq::S2SCreateMatchGroupToShardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SCreateMatchGroupToShardReq::InitAsDefaultInstance() {
  pbmember_ = const_cast< ::KFMsg::PBObject*>(&::KFMsg::PBObject::default_instance());
}

S2SCreateMatchGroupToShardReq::S2SCreateMatchGroupToShardReq(const S2SCreateMatchGroupToShardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SCreateMatchGroupToShardReq::SharedCtor() {
  _cached_size_ = 0;
  pbmember_ = NULL;
  groupid_ = GOOGLE_ULONGLONG(0);
  maxcount_ = 0u;
  matchid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SCreateMatchGroupToShardReq::~S2SCreateMatchGroupToShardReq() {
  SharedDtor();
}

void S2SCreateMatchGroupToShardReq::SharedDtor() {
  if (this != default_instance_) {
    delete pbmember_;
  }
}

void S2SCreateMatchGroupToShardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SCreateMatchGroupToShardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SCreateMatchGroupToShardReq_descriptor_;
}

const S2SCreateMatchGroupToShardReq& S2SCreateMatchGroupToShardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SCreateMatchGroupToShardReq* S2SCreateMatchGroupToShardReq::default_instance_ = NULL;

S2SCreateMatchGroupToShardReq* S2SCreateMatchGroupToShardReq::New() const {
  return new S2SCreateMatchGroupToShardReq;
}

void S2SCreateMatchGroupToShardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pbmember()) {
      if (pbmember_ != NULL) pbmember_->::KFMsg::PBObject::Clear();
    }
    groupid_ = GOOGLE_ULONGLONG(0);
    maxcount_ = 0u;
    matchid_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SCreateMatchGroupToShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KFMsg.PBObject pbmember = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbmember()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupid;
        break;
      }

      // required uint64 groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxcount;
        break;
      }

      // required uint32 maxcount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxcount_)));
          set_has_maxcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_matchid;
        break;
      }

      // required uint32 matchid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SCreateMatchGroupToShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KFMsg.PBObject pbmember = 1;
  if (has_pbmember()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pbmember(), output);
  }

  // required uint64 groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->groupid(), output);
  }

  // required uint32 maxcount = 3;
  if (has_maxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxcount(), output);
  }

  // required uint32 matchid = 4;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->matchid(), output);
  }

  // required uint32 playerid = 5;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SCreateMatchGroupToShardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KFMsg.PBObject pbmember = 1;
  if (has_pbmember()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pbmember(), target);
  }

  // required uint64 groupid = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->groupid(), target);
  }

  // required uint32 maxcount = 3;
  if (has_maxcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxcount(), target);
  }

  // required uint32 matchid = 4;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->matchid(), target);
  }

  // required uint32 playerid = 5;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SCreateMatchGroupToShardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KFMsg.PBObject pbmember = 1;
    if (has_pbmember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbmember());
    }

    // required uint64 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required uint32 maxcount = 3;
    if (has_maxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxcount());
    }

    // required uint32 matchid = 4;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // required uint32 playerid = 5;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SCreateMatchGroupToShardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SCreateMatchGroupToShardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SCreateMatchGroupToShardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SCreateMatchGroupToShardReq::MergeFrom(const S2SCreateMatchGroupToShardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pbmember()) {
      mutable_pbmember()->::KFMsg::PBObject::MergeFrom(from.pbmember());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_maxcount()) {
      set_maxcount(from.maxcount());
    }
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SCreateMatchGroupToShardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SCreateMatchGroupToShardReq::CopyFrom(const S2SCreateMatchGroupToShardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SCreateMatchGroupToShardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2SCreateMatchGroupToShardReq::Swap(S2SCreateMatchGroupToShardReq* other) {
  if (other != this) {
    std::swap(pbmember_, other->pbmember_);
    std::swap(groupid_, other->groupid_);
    std::swap(maxcount_, other->maxcount_);
    std::swap(matchid_, other->matchid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SCreateMatchGroupToShardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SCreateMatchGroupToShardReq_descriptor_;
  metadata.reflection = S2SCreateMatchGroupToShardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SReceiveInviteMatchGroupReq::kPlayeridFieldNumber;
const int S2SReceiveInviteMatchGroupReq::kGroupidFieldNumber;
const int S2SReceiveInviteMatchGroupReq::kInviterFieldNumber;
const int S2SReceiveInviteMatchGroupReq::kSourceFieldNumber;
const int S2SReceiveInviteMatchGroupReq::kMatchidFieldNumber;
const int S2SReceiveInviteMatchGroupReq::kInviterplayeridFieldNumber;
const int S2SReceiveInviteMatchGroupReq::kInviterserveridFieldNumber;
const int S2SReceiveInviteMatchGroupReq::kPlayernameFieldNumber;
#endif  // !_MSC_VER

S2SReceiveInviteMatchGroupReq::S2SReceiveInviteMatchGroupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SReceiveInviteMatchGroupReq::InitAsDefaultInstance() {
  inviter_ = const_cast< ::KFMsg::PBObject*>(&::KFMsg::PBObject::default_instance());
}

S2SReceiveInviteMatchGroupReq::S2SReceiveInviteMatchGroupReq(const S2SReceiveInviteMatchGroupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SReceiveInviteMatchGroupReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  groupid_ = GOOGLE_ULONGLONG(0);
  inviter_ = NULL;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  matchid_ = 0u;
  inviterplayerid_ = 0u;
  inviterserverid_ = 0u;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SReceiveInviteMatchGroupReq::~S2SReceiveInviteMatchGroupReq() {
  SharedDtor();
}

void S2SReceiveInviteMatchGroupReq::SharedDtor() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
    delete inviter_;
  }
}

void S2SReceiveInviteMatchGroupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SReceiveInviteMatchGroupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SReceiveInviteMatchGroupReq_descriptor_;
}

const S2SReceiveInviteMatchGroupReq& S2SReceiveInviteMatchGroupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SReceiveInviteMatchGroupReq* S2SReceiveInviteMatchGroupReq::default_instance_ = NULL;

S2SReceiveInviteMatchGroupReq* S2SReceiveInviteMatchGroupReq::New() const {
  return new S2SReceiveInviteMatchGroupReq;
}

void S2SReceiveInviteMatchGroupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    groupid_ = GOOGLE_ULONGLONG(0);
    if (has_inviter()) {
      if (inviter_ != NULL) inviter_->::KFMsg::PBObject::Clear();
    }
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::kEmptyString) {
        source_->clear();
      }
    }
    matchid_ = 0u;
    inviterplayerid_ = 0u;
    inviterserverid_ = 0u;
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SReceiveInviteMatchGroupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupid;
        break;
      }

      // required uint64 groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_inviter;
        break;
      }

      // required .KFMsg.PBObject inviter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inviter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inviter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_source;
        break;
      }

      // required string source = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_matchid;
        break;
      }

      // required uint32 matchid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_inviterplayerid;
        break;
      }

      // required uint32 inviterplayerid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviterplayerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviterplayerid_)));
          set_has_inviterplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_inviterserverid;
        break;
      }

      // required uint32 inviterserverid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviterserverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviterserverid_)));
          set_has_inviterserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_playername;
        break;
      }

      // required string playername = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SReceiveInviteMatchGroupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint64 groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->groupid(), output);
  }

  // required .KFMsg.PBObject inviter = 3;
  if (has_inviter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->inviter(), output);
  }

  // required string source = 4;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->source(), output);
  }

  // required uint32 matchid = 5;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->matchid(), output);
  }

  // required uint32 inviterplayerid = 6;
  if (has_inviterplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->inviterplayerid(), output);
  }

  // required uint32 inviterserverid = 7;
  if (has_inviterserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->inviterserverid(), output);
  }

  // required string playername = 8;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->playername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SReceiveInviteMatchGroupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint64 groupid = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->groupid(), target);
  }

  // required .KFMsg.PBObject inviter = 3;
  if (has_inviter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->inviter(), target);
  }

  // required string source = 4;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->source(), target);
  }

  // required uint32 matchid = 5;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->matchid(), target);
  }

  // required uint32 inviterplayerid = 6;
  if (has_inviterplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->inviterplayerid(), target);
  }

  // required uint32 inviterserverid = 7;
  if (has_inviterserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->inviterserverid(), target);
  }

  // required string playername = 8;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->playername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SReceiveInviteMatchGroupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint64 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required .KFMsg.PBObject inviter = 3;
    if (has_inviter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inviter());
    }

    // required string source = 4;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // required uint32 matchid = 5;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // required uint32 inviterplayerid = 6;
    if (has_inviterplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inviterplayerid());
    }

    // required uint32 inviterserverid = 7;
    if (has_inviterserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inviterserverid());
    }

    // required string playername = 8;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SReceiveInviteMatchGroupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SReceiveInviteMatchGroupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SReceiveInviteMatchGroupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SReceiveInviteMatchGroupReq::MergeFrom(const S2SReceiveInviteMatchGroupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_inviter()) {
      mutable_inviter()->::KFMsg::PBObject::MergeFrom(from.inviter());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_inviterplayerid()) {
      set_inviterplayerid(from.inviterplayerid());
    }
    if (from.has_inviterserverid()) {
      set_inviterserverid(from.inviterserverid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SReceiveInviteMatchGroupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SReceiveInviteMatchGroupReq::CopyFrom(const S2SReceiveInviteMatchGroupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SReceiveInviteMatchGroupReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void S2SReceiveInviteMatchGroupReq::Swap(S2SReceiveInviteMatchGroupReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(groupid_, other->groupid_);
    std::swap(inviter_, other->inviter_);
    std::swap(source_, other->source_);
    std::swap(matchid_, other->matchid_);
    std::swap(inviterplayerid_, other->inviterplayerid_);
    std::swap(inviterserverid_, other->inviterserverid_);
    std::swap(playername_, other->playername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SReceiveInviteMatchGroupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SReceiveInviteMatchGroupReq_descriptor_;
  metadata.reflection = S2SReceiveInviteMatchGroupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SConsentInviteMatchGroupReq::kGroupidFieldNumber;
const int S2SConsentInviteMatchGroupReq::kPlayeridFieldNumber;
const int S2SConsentInviteMatchGroupReq::kServeridFieldNumber;
const int S2SConsentInviteMatchGroupReq::kPbmemberFieldNumber;
#endif  // !_MSC_VER

S2SConsentInviteMatchGroupReq::S2SConsentInviteMatchGroupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SConsentInviteMatchGroupReq::InitAsDefaultInstance() {
  pbmember_ = const_cast< ::KFMsg::PBObject*>(&::KFMsg::PBObject::default_instance());
}

S2SConsentInviteMatchGroupReq::S2SConsentInviteMatchGroupReq(const S2SConsentInviteMatchGroupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SConsentInviteMatchGroupReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  playerid_ = 0u;
  serverid_ = 0u;
  pbmember_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SConsentInviteMatchGroupReq::~S2SConsentInviteMatchGroupReq() {
  SharedDtor();
}

void S2SConsentInviteMatchGroupReq::SharedDtor() {
  if (this != default_instance_) {
    delete pbmember_;
  }
}

void S2SConsentInviteMatchGroupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SConsentInviteMatchGroupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SConsentInviteMatchGroupReq_descriptor_;
}

const S2SConsentInviteMatchGroupReq& S2SConsentInviteMatchGroupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SConsentInviteMatchGroupReq* S2SConsentInviteMatchGroupReq::default_instance_ = NULL;

S2SConsentInviteMatchGroupReq* S2SConsentInviteMatchGroupReq::New() const {
  return new S2SConsentInviteMatchGroupReq;
}

void S2SConsentInviteMatchGroupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    playerid_ = 0u;
    serverid_ = 0u;
    if (has_pbmember()) {
      if (pbmember_ != NULL) pbmember_->::KFMsg::PBObject::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SConsentInviteMatchGroupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pbmember;
        break;
      }

      // optional .KFMsg.PBObject pbmember = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbmember:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbmember()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SConsentInviteMatchGroupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  // optional .KFMsg.PBObject pbmember = 4;
  if (has_pbmember()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pbmember(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SConsentInviteMatchGroupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  // optional .KFMsg.PBObject pbmember = 4;
  if (has_pbmember()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pbmember(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SConsentInviteMatchGroupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // optional .KFMsg.PBObject pbmember = 4;
    if (has_pbmember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbmember());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SConsentInviteMatchGroupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SConsentInviteMatchGroupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SConsentInviteMatchGroupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SConsentInviteMatchGroupReq::MergeFrom(const S2SConsentInviteMatchGroupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_pbmember()) {
      mutable_pbmember()->::KFMsg::PBObject::MergeFrom(from.pbmember());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SConsentInviteMatchGroupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SConsentInviteMatchGroupReq::CopyFrom(const S2SConsentInviteMatchGroupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SConsentInviteMatchGroupReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SConsentInviteMatchGroupReq::Swap(S2SConsentInviteMatchGroupReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(pbmember_, other->pbmember_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SConsentInviteMatchGroupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SConsentInviteMatchGroupReq_descriptor_;
  metadata.reflection = S2SConsentInviteMatchGroupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SAddMatchGroupMemberReq::kGroupidFieldNumber;
const int S2SAddMatchGroupMemberReq::kPlayeridFieldNumber;
const int S2SAddMatchGroupMemberReq::kServeridFieldNumber;
const int S2SAddMatchGroupMemberReq::kPbmemberFieldNumber;
#endif  // !_MSC_VER

S2SAddMatchGroupMemberReq::S2SAddMatchGroupMemberReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SAddMatchGroupMemberReq::InitAsDefaultInstance() {
  pbmember_ = const_cast< ::KFMsg::PBObject*>(&::KFMsg::PBObject::default_instance());
}

S2SAddMatchGroupMemberReq::S2SAddMatchGroupMemberReq(const S2SAddMatchGroupMemberReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SAddMatchGroupMemberReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  playerid_ = 0u;
  serverid_ = 0u;
  pbmember_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SAddMatchGroupMemberReq::~S2SAddMatchGroupMemberReq() {
  SharedDtor();
}

void S2SAddMatchGroupMemberReq::SharedDtor() {
  if (this != default_instance_) {
    delete pbmember_;
  }
}

void S2SAddMatchGroupMemberReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SAddMatchGroupMemberReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SAddMatchGroupMemberReq_descriptor_;
}

const S2SAddMatchGroupMemberReq& S2SAddMatchGroupMemberReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SAddMatchGroupMemberReq* S2SAddMatchGroupMemberReq::default_instance_ = NULL;

S2SAddMatchGroupMemberReq* S2SAddMatchGroupMemberReq::New() const {
  return new S2SAddMatchGroupMemberReq;
}

void S2SAddMatchGroupMemberReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    playerid_ = 0u;
    serverid_ = 0u;
    if (has_pbmember()) {
      if (pbmember_ != NULL) pbmember_->::KFMsg::PBObject::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SAddMatchGroupMemberReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pbmember;
        break;
      }

      // optional .KFMsg.PBObject pbmember = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbmember:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbmember()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SAddMatchGroupMemberReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  // optional .KFMsg.PBObject pbmember = 4;
  if (has_pbmember()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pbmember(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SAddMatchGroupMemberReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  // optional .KFMsg.PBObject pbmember = 4;
  if (has_pbmember()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pbmember(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SAddMatchGroupMemberReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // optional .KFMsg.PBObject pbmember = 4;
    if (has_pbmember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbmember());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SAddMatchGroupMemberReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SAddMatchGroupMemberReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SAddMatchGroupMemberReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SAddMatchGroupMemberReq::MergeFrom(const S2SAddMatchGroupMemberReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_pbmember()) {
      mutable_pbmember()->::KFMsg::PBObject::MergeFrom(from.pbmember());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SAddMatchGroupMemberReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SAddMatchGroupMemberReq::CopyFrom(const S2SAddMatchGroupMemberReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SAddMatchGroupMemberReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SAddMatchGroupMemberReq::Swap(S2SAddMatchGroupMemberReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(pbmember_, other->pbmember_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SAddMatchGroupMemberReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SAddMatchGroupMemberReq_descriptor_;
  metadata.reflection = S2SAddMatchGroupMemberReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SAddMatchGroupMemberAck::kPbmemberFieldNumber;
#endif  // !_MSC_VER

S2SAddMatchGroupMemberAck::S2SAddMatchGroupMemberAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SAddMatchGroupMemberAck::InitAsDefaultInstance() {
  pbmember_ = const_cast< ::KFMsg::PBObject*>(&::KFMsg::PBObject::default_instance());
}

S2SAddMatchGroupMemberAck::S2SAddMatchGroupMemberAck(const S2SAddMatchGroupMemberAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SAddMatchGroupMemberAck::SharedCtor() {
  _cached_size_ = 0;
  pbmember_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SAddMatchGroupMemberAck::~S2SAddMatchGroupMemberAck() {
  SharedDtor();
}

void S2SAddMatchGroupMemberAck::SharedDtor() {
  if (this != default_instance_) {
    delete pbmember_;
  }
}

void S2SAddMatchGroupMemberAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SAddMatchGroupMemberAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SAddMatchGroupMemberAck_descriptor_;
}

const S2SAddMatchGroupMemberAck& S2SAddMatchGroupMemberAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SAddMatchGroupMemberAck* S2SAddMatchGroupMemberAck::default_instance_ = NULL;

S2SAddMatchGroupMemberAck* S2SAddMatchGroupMemberAck::New() const {
  return new S2SAddMatchGroupMemberAck;
}

void S2SAddMatchGroupMemberAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pbmember()) {
      if (pbmember_ != NULL) pbmember_->::KFMsg::PBObject::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SAddMatchGroupMemberAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KFMsg.PBObject pbmember = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbmember()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SAddMatchGroupMemberAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KFMsg.PBObject pbmember = 1;
  if (has_pbmember()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pbmember(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SAddMatchGroupMemberAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KFMsg.PBObject pbmember = 1;
  if (has_pbmember()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pbmember(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SAddMatchGroupMemberAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KFMsg.PBObject pbmember = 1;
    if (has_pbmember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbmember());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SAddMatchGroupMemberAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SAddMatchGroupMemberAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SAddMatchGroupMemberAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SAddMatchGroupMemberAck::MergeFrom(const S2SAddMatchGroupMemberAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pbmember()) {
      mutable_pbmember()->::KFMsg::PBObject::MergeFrom(from.pbmember());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SAddMatchGroupMemberAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SAddMatchGroupMemberAck::CopyFrom(const S2SAddMatchGroupMemberAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SAddMatchGroupMemberAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2SAddMatchGroupMemberAck::Swap(S2SAddMatchGroupMemberAck* other) {
  if (other != this) {
    std::swap(pbmember_, other->pbmember_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SAddMatchGroupMemberAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SAddMatchGroupMemberAck_descriptor_;
  metadata.reflection = S2SAddMatchGroupMemberAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2STellMatchGroupDataAck::kPbmemberFieldNumber;
const int S2STellMatchGroupDataAck::kGroupidFieldNumber;
const int S2STellMatchGroupDataAck::kCaptainidFieldNumber;
const int S2STellMatchGroupDataAck::kMaxcountFieldNumber;
const int S2STellMatchGroupDataAck::kMatchidFieldNumber;
const int S2STellMatchGroupDataAck::kNewaddFieldNumber;
#endif  // !_MSC_VER

S2STellMatchGroupDataAck::S2STellMatchGroupDataAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2STellMatchGroupDataAck::InitAsDefaultInstance() {
}

S2STellMatchGroupDataAck::S2STellMatchGroupDataAck(const S2STellMatchGroupDataAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2STellMatchGroupDataAck::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  captainid_ = 0u;
  maxcount_ = 0u;
  matchid_ = 0u;
  newadd_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2STellMatchGroupDataAck::~S2STellMatchGroupDataAck() {
  SharedDtor();
}

void S2STellMatchGroupDataAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2STellMatchGroupDataAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2STellMatchGroupDataAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2STellMatchGroupDataAck_descriptor_;
}

const S2STellMatchGroupDataAck& S2STellMatchGroupDataAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2STellMatchGroupDataAck* S2STellMatchGroupDataAck::default_instance_ = NULL;

S2STellMatchGroupDataAck* S2STellMatchGroupDataAck::New() const {
  return new S2STellMatchGroupDataAck;
}

void S2STellMatchGroupDataAck::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    captainid_ = 0u;
    maxcount_ = 0u;
    matchid_ = 0u;
    newadd_ = false;
  }
  pbmember_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2STellMatchGroupDataAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .KFMsg.PBObject pbmember = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbmember:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbmember()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pbmember;
        if (input->ExpectTag(16)) goto parse_groupid;
        break;
      }

      // optional uint64 groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_captainid;
        break;
      }

      // optional uint32 captainid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_captainid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &captainid_)));
          set_has_captainid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxcount;
        break;
      }

      // optional uint32 maxcount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxcount_)));
          set_has_maxcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_matchid;
        break;
      }

      // optional uint32 matchid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_newadd;
        break;
      }

      // optional bool newadd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newadd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newadd_)));
          set_has_newadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2STellMatchGroupDataAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .KFMsg.PBObject pbmember = 1;
  for (int i = 0; i < this->pbmember_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pbmember(i), output);
  }

  // optional uint64 groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->groupid(), output);
  }

  // optional uint32 captainid = 3;
  if (has_captainid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->captainid(), output);
  }

  // optional uint32 maxcount = 4;
  if (has_maxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxcount(), output);
  }

  // optional uint32 matchid = 5;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->matchid(), output);
  }

  // optional bool newadd = 6;
  if (has_newadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->newadd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2STellMatchGroupDataAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .KFMsg.PBObject pbmember = 1;
  for (int i = 0; i < this->pbmember_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pbmember(i), target);
  }

  // optional uint64 groupid = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->groupid(), target);
  }

  // optional uint32 captainid = 3;
  if (has_captainid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->captainid(), target);
  }

  // optional uint32 maxcount = 4;
  if (has_maxcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxcount(), target);
  }

  // optional uint32 matchid = 5;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->matchid(), target);
  }

  // optional bool newadd = 6;
  if (has_newadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->newadd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2STellMatchGroupDataAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // optional uint32 captainid = 3;
    if (has_captainid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->captainid());
    }

    // optional uint32 maxcount = 4;
    if (has_maxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxcount());
    }

    // optional uint32 matchid = 5;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // optional bool newadd = 6;
    if (has_newadd()) {
      total_size += 1 + 1;
    }

  }
  // repeated .KFMsg.PBObject pbmember = 1;
  total_size += 1 * this->pbmember_size();
  for (int i = 0; i < this->pbmember_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbmember(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2STellMatchGroupDataAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2STellMatchGroupDataAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2STellMatchGroupDataAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2STellMatchGroupDataAck::MergeFrom(const S2STellMatchGroupDataAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbmember_.MergeFrom(from.pbmember_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_captainid()) {
      set_captainid(from.captainid());
    }
    if (from.has_maxcount()) {
      set_maxcount(from.maxcount());
    }
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_newadd()) {
      set_newadd(from.newadd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2STellMatchGroupDataAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2STellMatchGroupDataAck::CopyFrom(const S2STellMatchGroupDataAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2STellMatchGroupDataAck::IsInitialized() const {

  return true;
}

void S2STellMatchGroupDataAck::Swap(S2STellMatchGroupDataAck* other) {
  if (other != this) {
    pbmember_.Swap(&other->pbmember_);
    std::swap(groupid_, other->groupid_);
    std::swap(captainid_, other->captainid_);
    std::swap(maxcount_, other->maxcount_);
    std::swap(matchid_, other->matchid_);
    std::swap(newadd_, other->newadd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2STellMatchGroupDataAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2STellMatchGroupDataAck_descriptor_;
  metadata.reflection = S2STellMatchGroupDataAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SRemoveMatchGroupMemberAck::kMemberidFieldNumber;
#endif  // !_MSC_VER

S2SRemoveMatchGroupMemberAck::S2SRemoveMatchGroupMemberAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SRemoveMatchGroupMemberAck::InitAsDefaultInstance() {
}

S2SRemoveMatchGroupMemberAck::S2SRemoveMatchGroupMemberAck(const S2SRemoveMatchGroupMemberAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SRemoveMatchGroupMemberAck::SharedCtor() {
  _cached_size_ = 0;
  memberid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SRemoveMatchGroupMemberAck::~S2SRemoveMatchGroupMemberAck() {
  SharedDtor();
}

void S2SRemoveMatchGroupMemberAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SRemoveMatchGroupMemberAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SRemoveMatchGroupMemberAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SRemoveMatchGroupMemberAck_descriptor_;
}

const S2SRemoveMatchGroupMemberAck& S2SRemoveMatchGroupMemberAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SRemoveMatchGroupMemberAck* S2SRemoveMatchGroupMemberAck::default_instance_ = NULL;

S2SRemoveMatchGroupMemberAck* S2SRemoveMatchGroupMemberAck::New() const {
  return new S2SRemoveMatchGroupMemberAck;
}

void S2SRemoveMatchGroupMemberAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    memberid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SRemoveMatchGroupMemberAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 memberid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memberid_)));
          set_has_memberid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SRemoveMatchGroupMemberAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 memberid = 1;
  if (has_memberid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->memberid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SRemoveMatchGroupMemberAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 memberid = 1;
  if (has_memberid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->memberid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SRemoveMatchGroupMemberAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 memberid = 1;
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memberid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SRemoveMatchGroupMemberAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SRemoveMatchGroupMemberAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SRemoveMatchGroupMemberAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SRemoveMatchGroupMemberAck::MergeFrom(const S2SRemoveMatchGroupMemberAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memberid()) {
      set_memberid(from.memberid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SRemoveMatchGroupMemberAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SRemoveMatchGroupMemberAck::CopyFrom(const S2SRemoveMatchGroupMemberAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SRemoveMatchGroupMemberAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2SRemoveMatchGroupMemberAck::Swap(S2SRemoveMatchGroupMemberAck* other) {
  if (other != this) {
    std::swap(memberid_, other->memberid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SRemoveMatchGroupMemberAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SRemoveMatchGroupMemberAck_descriptor_;
  metadata.reflection = S2SRemoveMatchGroupMemberAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SLeaveMatchGroupReq::kGroupidFieldNumber;
const int S2SLeaveMatchGroupReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SLeaveMatchGroupReq::S2SLeaveMatchGroupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SLeaveMatchGroupReq::InitAsDefaultInstance() {
}

S2SLeaveMatchGroupReq::S2SLeaveMatchGroupReq(const S2SLeaveMatchGroupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SLeaveMatchGroupReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SLeaveMatchGroupReq::~S2SLeaveMatchGroupReq() {
  SharedDtor();
}

void S2SLeaveMatchGroupReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SLeaveMatchGroupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SLeaveMatchGroupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SLeaveMatchGroupReq_descriptor_;
}

const S2SLeaveMatchGroupReq& S2SLeaveMatchGroupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SLeaveMatchGroupReq* S2SLeaveMatchGroupReq::default_instance_ = NULL;

S2SLeaveMatchGroupReq* S2SLeaveMatchGroupReq::New() const {
  return new S2SLeaveMatchGroupReq;
}

void S2SLeaveMatchGroupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SLeaveMatchGroupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SLeaveMatchGroupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SLeaveMatchGroupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SLeaveMatchGroupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SLeaveMatchGroupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SLeaveMatchGroupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SLeaveMatchGroupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SLeaveMatchGroupReq::MergeFrom(const S2SLeaveMatchGroupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SLeaveMatchGroupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SLeaveMatchGroupReq::CopyFrom(const S2SLeaveMatchGroupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SLeaveMatchGroupReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SLeaveMatchGroupReq::Swap(S2SLeaveMatchGroupReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SLeaveMatchGroupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SLeaveMatchGroupReq_descriptor_;
  metadata.reflection = S2SLeaveMatchGroupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SKickMatchGroupReq::kGroupidFieldNumber;
const int S2SKickMatchGroupReq::kCaptainidFieldNumber;
const int S2SKickMatchGroupReq::kServeridFieldNumber;
const int S2SKickMatchGroupReq::kMemberidFieldNumber;
#endif  // !_MSC_VER

S2SKickMatchGroupReq::S2SKickMatchGroupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SKickMatchGroupReq::InitAsDefaultInstance() {
}

S2SKickMatchGroupReq::S2SKickMatchGroupReq(const S2SKickMatchGroupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SKickMatchGroupReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  captainid_ = 0u;
  serverid_ = 0u;
  memberid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SKickMatchGroupReq::~S2SKickMatchGroupReq() {
  SharedDtor();
}

void S2SKickMatchGroupReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SKickMatchGroupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SKickMatchGroupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SKickMatchGroupReq_descriptor_;
}

const S2SKickMatchGroupReq& S2SKickMatchGroupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SKickMatchGroupReq* S2SKickMatchGroupReq::default_instance_ = NULL;

S2SKickMatchGroupReq* S2SKickMatchGroupReq::New() const {
  return new S2SKickMatchGroupReq;
}

void S2SKickMatchGroupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    captainid_ = 0u;
    serverid_ = 0u;
    memberid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SKickMatchGroupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_captainid;
        break;
      }

      // required uint32 captainid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_captainid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &captainid_)));
          set_has_captainid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_memberid;
        break;
      }

      // required uint32 memberid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memberid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memberid_)));
          set_has_memberid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SKickMatchGroupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required uint32 captainid = 2;
  if (has_captainid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->captainid(), output);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  // required uint32 memberid = 4;
  if (has_memberid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->memberid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SKickMatchGroupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required uint32 captainid = 2;
  if (has_captainid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->captainid(), target);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  // required uint32 memberid = 4;
  if (has_memberid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->memberid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SKickMatchGroupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required uint32 captainid = 2;
    if (has_captainid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->captainid());
    }

    // required uint32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required uint32 memberid = 4;
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memberid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SKickMatchGroupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SKickMatchGroupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SKickMatchGroupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SKickMatchGroupReq::MergeFrom(const S2SKickMatchGroupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_captainid()) {
      set_captainid(from.captainid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_memberid()) {
      set_memberid(from.memberid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SKickMatchGroupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SKickMatchGroupReq::CopyFrom(const S2SKickMatchGroupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SKickMatchGroupReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SKickMatchGroupReq::Swap(S2SKickMatchGroupReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(captainid_, other->captainid_);
    std::swap(serverid_, other->serverid_);
    std::swap(memberid_, other->memberid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SKickMatchGroupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SKickMatchGroupReq_descriptor_;
  metadata.reflection = S2SKickMatchGroupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SLeaveMatchGroupAck::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SLeaveMatchGroupAck::S2SLeaveMatchGroupAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SLeaveMatchGroupAck::InitAsDefaultInstance() {
}

S2SLeaveMatchGroupAck::S2SLeaveMatchGroupAck(const S2SLeaveMatchGroupAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SLeaveMatchGroupAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SLeaveMatchGroupAck::~S2SLeaveMatchGroupAck() {
  SharedDtor();
}

void S2SLeaveMatchGroupAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SLeaveMatchGroupAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SLeaveMatchGroupAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SLeaveMatchGroupAck_descriptor_;
}

const S2SLeaveMatchGroupAck& S2SLeaveMatchGroupAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SLeaveMatchGroupAck* S2SLeaveMatchGroupAck::default_instance_ = NULL;

S2SLeaveMatchGroupAck* S2SLeaveMatchGroupAck::New() const {
  return new S2SLeaveMatchGroupAck;
}

void S2SLeaveMatchGroupAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SLeaveMatchGroupAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SLeaveMatchGroupAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SLeaveMatchGroupAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SLeaveMatchGroupAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SLeaveMatchGroupAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SLeaveMatchGroupAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SLeaveMatchGroupAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SLeaveMatchGroupAck::MergeFrom(const S2SLeaveMatchGroupAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SLeaveMatchGroupAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SLeaveMatchGroupAck::CopyFrom(const S2SLeaveMatchGroupAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SLeaveMatchGroupAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2SLeaveMatchGroupAck::Swap(S2SLeaveMatchGroupAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SLeaveMatchGroupAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SLeaveMatchGroupAck_descriptor_;
  metadata.reflection = S2SLeaveMatchGroupAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SApplyMatchGroupReq::kGroupidFieldNumber;
const int S2SApplyMatchGroupReq::kPlayeridFieldNumber;
const int S2SApplyMatchGroupReq::kServeridFieldNumber;
const int S2SApplyMatchGroupReq::kPbmemberFieldNumber;
#endif  // !_MSC_VER

S2SApplyMatchGroupReq::S2SApplyMatchGroupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SApplyMatchGroupReq::InitAsDefaultInstance() {
  pbmember_ = const_cast< ::KFMsg::PBObject*>(&::KFMsg::PBObject::default_instance());
}

S2SApplyMatchGroupReq::S2SApplyMatchGroupReq(const S2SApplyMatchGroupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SApplyMatchGroupReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  playerid_ = 0u;
  serverid_ = 0u;
  pbmember_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SApplyMatchGroupReq::~S2SApplyMatchGroupReq() {
  SharedDtor();
}

void S2SApplyMatchGroupReq::SharedDtor() {
  if (this != default_instance_) {
    delete pbmember_;
  }
}

void S2SApplyMatchGroupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SApplyMatchGroupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SApplyMatchGroupReq_descriptor_;
}

const S2SApplyMatchGroupReq& S2SApplyMatchGroupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SApplyMatchGroupReq* S2SApplyMatchGroupReq::default_instance_ = NULL;

S2SApplyMatchGroupReq* S2SApplyMatchGroupReq::New() const {
  return new S2SApplyMatchGroupReq;
}

void S2SApplyMatchGroupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    playerid_ = 0u;
    serverid_ = 0u;
    if (has_pbmember()) {
      if (pbmember_ != NULL) pbmember_->::KFMsg::PBObject::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SApplyMatchGroupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pbmember;
        break;
      }

      // required .KFMsg.PBObject pbmember = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbmember:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbmember()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SApplyMatchGroupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  // required .KFMsg.PBObject pbmember = 4;
  if (has_pbmember()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pbmember(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SApplyMatchGroupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  // required .KFMsg.PBObject pbmember = 4;
  if (has_pbmember()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pbmember(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SApplyMatchGroupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required .KFMsg.PBObject pbmember = 4;
    if (has_pbmember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbmember());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SApplyMatchGroupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SApplyMatchGroupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SApplyMatchGroupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SApplyMatchGroupReq::MergeFrom(const S2SApplyMatchGroupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_pbmember()) {
      mutable_pbmember()->::KFMsg::PBObject::MergeFrom(from.pbmember());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SApplyMatchGroupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SApplyMatchGroupReq::CopyFrom(const S2SApplyMatchGroupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SApplyMatchGroupReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SApplyMatchGroupReq::Swap(S2SApplyMatchGroupReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(pbmember_, other->pbmember_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SApplyMatchGroupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SApplyMatchGroupReq_descriptor_;
  metadata.reflection = S2SApplyMatchGroupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SApplyMatchGroupAck::kPlayeridFieldNumber;
const int S2SApplyMatchGroupAck::kPbmemberFieldNumber;
const int S2SApplyMatchGroupAck::kServeridFieldNumber;
#endif  // !_MSC_VER

S2SApplyMatchGroupAck::S2SApplyMatchGroupAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SApplyMatchGroupAck::InitAsDefaultInstance() {
  pbmember_ = const_cast< ::KFMsg::PBObject*>(&::KFMsg::PBObject::default_instance());
}

S2SApplyMatchGroupAck::S2SApplyMatchGroupAck(const S2SApplyMatchGroupAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SApplyMatchGroupAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  pbmember_ = NULL;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SApplyMatchGroupAck::~S2SApplyMatchGroupAck() {
  SharedDtor();
}

void S2SApplyMatchGroupAck::SharedDtor() {
  if (this != default_instance_) {
    delete pbmember_;
  }
}

void S2SApplyMatchGroupAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SApplyMatchGroupAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SApplyMatchGroupAck_descriptor_;
}

const S2SApplyMatchGroupAck& S2SApplyMatchGroupAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SApplyMatchGroupAck* S2SApplyMatchGroupAck::default_instance_ = NULL;

S2SApplyMatchGroupAck* S2SApplyMatchGroupAck::New() const {
  return new S2SApplyMatchGroupAck;
}

void S2SApplyMatchGroupAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_pbmember()) {
      if (pbmember_ != NULL) pbmember_->::KFMsg::PBObject::Clear();
    }
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SApplyMatchGroupAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbmember;
        break;
      }

      // required .KFMsg.PBObject pbmember = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbmember:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbmember()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SApplyMatchGroupAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required .KFMsg.PBObject pbmember = 2;
  if (has_pbmember()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pbmember(), output);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SApplyMatchGroupAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required .KFMsg.PBObject pbmember = 2;
  if (has_pbmember()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pbmember(), target);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SApplyMatchGroupAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required .KFMsg.PBObject pbmember = 2;
    if (has_pbmember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbmember());
    }

    // required uint32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SApplyMatchGroupAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SApplyMatchGroupAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SApplyMatchGroupAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SApplyMatchGroupAck::MergeFrom(const S2SApplyMatchGroupAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_pbmember()) {
      mutable_pbmember()->::KFMsg::PBObject::MergeFrom(from.pbmember());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SApplyMatchGroupAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SApplyMatchGroupAck::CopyFrom(const S2SApplyMatchGroupAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SApplyMatchGroupAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SApplyMatchGroupAck::Swap(S2SApplyMatchGroupAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(pbmember_, other->pbmember_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SApplyMatchGroupAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SApplyMatchGroupAck_descriptor_;
  metadata.reflection = S2SApplyMatchGroupAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SConsentApplyMatchGroupAck::kGroupidFieldNumber;
const int S2SConsentApplyMatchGroupAck::kPlayeridFieldNumber;
const int S2SConsentApplyMatchGroupAck::kCaptainidFieldNumber;
const int S2SConsentApplyMatchGroupAck::kServeridFieldNumber;
const int S2SConsentApplyMatchGroupAck::kPlayernameFieldNumber;
#endif  // !_MSC_VER

S2SConsentApplyMatchGroupAck::S2SConsentApplyMatchGroupAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SConsentApplyMatchGroupAck::InitAsDefaultInstance() {
}

S2SConsentApplyMatchGroupAck::S2SConsentApplyMatchGroupAck(const S2SConsentApplyMatchGroupAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SConsentApplyMatchGroupAck::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  playerid_ = 0u;
  captainid_ = 0u;
  serverid_ = 0u;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SConsentApplyMatchGroupAck::~S2SConsentApplyMatchGroupAck() {
  SharedDtor();
}

void S2SConsentApplyMatchGroupAck::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void S2SConsentApplyMatchGroupAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SConsentApplyMatchGroupAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SConsentApplyMatchGroupAck_descriptor_;
}

const S2SConsentApplyMatchGroupAck& S2SConsentApplyMatchGroupAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SConsentApplyMatchGroupAck* S2SConsentApplyMatchGroupAck::default_instance_ = NULL;

S2SConsentApplyMatchGroupAck* S2SConsentApplyMatchGroupAck::New() const {
  return new S2SConsentApplyMatchGroupAck;
}

void S2SConsentApplyMatchGroupAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    playerid_ = 0u;
    captainid_ = 0u;
    serverid_ = 0u;
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SConsentApplyMatchGroupAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_captainid;
        break;
      }

      // required uint32 captainid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_captainid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &captainid_)));
          set_has_captainid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_playername;
        break;
      }

      // required string playername = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SConsentApplyMatchGroupAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required uint32 captainid = 3;
  if (has_captainid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->captainid(), output);
  }

  // required uint32 serverid = 4;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->serverid(), output);
  }

  // required string playername = 5;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->playername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SConsentApplyMatchGroupAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // required uint32 captainid = 3;
  if (has_captainid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->captainid(), target);
  }

  // required uint32 serverid = 4;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->serverid(), target);
  }

  // required string playername = 5;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->playername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SConsentApplyMatchGroupAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 captainid = 3;
    if (has_captainid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->captainid());
    }

    // required uint32 serverid = 4;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required string playername = 5;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SConsentApplyMatchGroupAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SConsentApplyMatchGroupAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SConsentApplyMatchGroupAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SConsentApplyMatchGroupAck::MergeFrom(const S2SConsentApplyMatchGroupAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_captainid()) {
      set_captainid(from.captainid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SConsentApplyMatchGroupAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SConsentApplyMatchGroupAck::CopyFrom(const S2SConsentApplyMatchGroupAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SConsentApplyMatchGroupAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2SConsentApplyMatchGroupAck::Swap(S2SConsentApplyMatchGroupAck* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(playerid_, other->playerid_);
    std::swap(captainid_, other->captainid_);
    std::swap(serverid_, other->serverid_);
    std::swap(playername_, other->playername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SConsentApplyMatchGroupAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SConsentApplyMatchGroupAck_descriptor_;
  metadata.reflection = S2SConsentApplyMatchGroupAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SOnLineQueryMatchGroupReq::kGroupidFieldNumber;
const int S2SOnLineQueryMatchGroupReq::kPlayeridFieldNumber;
const int S2SOnLineQueryMatchGroupReq::kServeridFieldNumber;
#endif  // !_MSC_VER

S2SOnLineQueryMatchGroupReq::S2SOnLineQueryMatchGroupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SOnLineQueryMatchGroupReq::InitAsDefaultInstance() {
}

S2SOnLineQueryMatchGroupReq::S2SOnLineQueryMatchGroupReq(const S2SOnLineQueryMatchGroupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SOnLineQueryMatchGroupReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  playerid_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SOnLineQueryMatchGroupReq::~S2SOnLineQueryMatchGroupReq() {
  SharedDtor();
}

void S2SOnLineQueryMatchGroupReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SOnLineQueryMatchGroupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SOnLineQueryMatchGroupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SOnLineQueryMatchGroupReq_descriptor_;
}

const S2SOnLineQueryMatchGroupReq& S2SOnLineQueryMatchGroupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SOnLineQueryMatchGroupReq* S2SOnLineQueryMatchGroupReq::default_instance_ = NULL;

S2SOnLineQueryMatchGroupReq* S2SOnLineQueryMatchGroupReq::New() const {
  return new S2SOnLineQueryMatchGroupReq;
}

void S2SOnLineQueryMatchGroupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    playerid_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SOnLineQueryMatchGroupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SOnLineQueryMatchGroupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SOnLineQueryMatchGroupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SOnLineQueryMatchGroupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SOnLineQueryMatchGroupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SOnLineQueryMatchGroupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SOnLineQueryMatchGroupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SOnLineQueryMatchGroupReq::MergeFrom(const S2SOnLineQueryMatchGroupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SOnLineQueryMatchGroupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SOnLineQueryMatchGroupReq::CopyFrom(const S2SOnLineQueryMatchGroupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SOnLineQueryMatchGroupReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SOnLineQueryMatchGroupReq::Swap(S2SOnLineQueryMatchGroupReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SOnLineQueryMatchGroupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SOnLineQueryMatchGroupReq_descriptor_;
  metadata.reflection = S2SOnLineQueryMatchGroupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SOffLineUpdateMatchGroupReq::kGroupidFieldNumber;
const int S2SOffLineUpdateMatchGroupReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SOffLineUpdateMatchGroupReq::S2SOffLineUpdateMatchGroupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SOffLineUpdateMatchGroupReq::InitAsDefaultInstance() {
}

S2SOffLineUpdateMatchGroupReq::S2SOffLineUpdateMatchGroupReq(const S2SOffLineUpdateMatchGroupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SOffLineUpdateMatchGroupReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SOffLineUpdateMatchGroupReq::~S2SOffLineUpdateMatchGroupReq() {
  SharedDtor();
}

void S2SOffLineUpdateMatchGroupReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SOffLineUpdateMatchGroupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SOffLineUpdateMatchGroupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SOffLineUpdateMatchGroupReq_descriptor_;
}

const S2SOffLineUpdateMatchGroupReq& S2SOffLineUpdateMatchGroupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SOffLineUpdateMatchGroupReq* S2SOffLineUpdateMatchGroupReq::default_instance_ = NULL;

S2SOffLineUpdateMatchGroupReq* S2SOffLineUpdateMatchGroupReq::New() const {
  return new S2SOffLineUpdateMatchGroupReq;
}

void S2SOffLineUpdateMatchGroupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SOffLineUpdateMatchGroupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SOffLineUpdateMatchGroupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SOffLineUpdateMatchGroupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SOffLineUpdateMatchGroupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SOffLineUpdateMatchGroupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SOffLineUpdateMatchGroupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SOffLineUpdateMatchGroupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SOffLineUpdateMatchGroupReq::MergeFrom(const S2SOffLineUpdateMatchGroupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SOffLineUpdateMatchGroupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SOffLineUpdateMatchGroupReq::CopyFrom(const S2SOffLineUpdateMatchGroupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SOffLineUpdateMatchGroupReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SOffLineUpdateMatchGroupReq::Swap(S2SOffLineUpdateMatchGroupReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SOffLineUpdateMatchGroupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SOffLineUpdateMatchGroupReq_descriptor_;
  metadata.reflection = S2SOffLineUpdateMatchGroupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SUpdateGroupMemberReq::kGroupidFieldNumber;
const int S2SUpdateGroupMemberReq::kMemberidFieldNumber;
const int S2SUpdateGroupMemberReq::kDatanameFieldNumber;
const int S2SUpdateGroupMemberReq::kPbstringsFieldNumber;
#endif  // !_MSC_VER

S2SUpdateGroupMemberReq::S2SUpdateGroupMemberReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SUpdateGroupMemberReq::InitAsDefaultInstance() {
  pbstrings_ = const_cast< ::KFMsg::PBStrings*>(&::KFMsg::PBStrings::default_instance());
}

S2SUpdateGroupMemberReq::S2SUpdateGroupMemberReq(const S2SUpdateGroupMemberReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SUpdateGroupMemberReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  memberid_ = 0u;
  dataname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pbstrings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SUpdateGroupMemberReq::~S2SUpdateGroupMemberReq() {
  SharedDtor();
}

void S2SUpdateGroupMemberReq::SharedDtor() {
  if (dataname_ != &::google::protobuf::internal::kEmptyString) {
    delete dataname_;
  }
  if (this != default_instance_) {
    delete pbstrings_;
  }
}

void S2SUpdateGroupMemberReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SUpdateGroupMemberReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SUpdateGroupMemberReq_descriptor_;
}

const S2SUpdateGroupMemberReq& S2SUpdateGroupMemberReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SUpdateGroupMemberReq* S2SUpdateGroupMemberReq::default_instance_ = NULL;

S2SUpdateGroupMemberReq* S2SUpdateGroupMemberReq::New() const {
  return new S2SUpdateGroupMemberReq;
}

void S2SUpdateGroupMemberReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    memberid_ = 0u;
    if (has_dataname()) {
      if (dataname_ != &::google::protobuf::internal::kEmptyString) {
        dataname_->clear();
      }
    }
    if (has_pbstrings()) {
      if (pbstrings_ != NULL) pbstrings_->::KFMsg::PBStrings::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SUpdateGroupMemberReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_memberid;
        break;
      }

      // required uint32 memberid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memberid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memberid_)));
          set_has_memberid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dataname;
        break;
      }

      // required string dataname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dataname().data(), this->dataname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pbstrings;
        break;
      }

      // required .KFMsg.PBStrings pbstrings = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbstrings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbstrings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SUpdateGroupMemberReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required uint32 memberid = 2;
  if (has_memberid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->memberid(), output);
  }

  // required string dataname = 3;
  if (has_dataname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataname().data(), this->dataname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->dataname(), output);
  }

  // required .KFMsg.PBStrings pbstrings = 4;
  if (has_pbstrings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pbstrings(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SUpdateGroupMemberReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required uint32 memberid = 2;
  if (has_memberid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->memberid(), target);
  }

  // required string dataname = 3;
  if (has_dataname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataname().data(), this->dataname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dataname(), target);
  }

  // required .KFMsg.PBStrings pbstrings = 4;
  if (has_pbstrings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pbstrings(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SUpdateGroupMemberReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required uint32 memberid = 2;
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memberid());
    }

    // required string dataname = 3;
    if (has_dataname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataname());
    }

    // required .KFMsg.PBStrings pbstrings = 4;
    if (has_pbstrings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbstrings());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SUpdateGroupMemberReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SUpdateGroupMemberReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SUpdateGroupMemberReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SUpdateGroupMemberReq::MergeFrom(const S2SUpdateGroupMemberReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_memberid()) {
      set_memberid(from.memberid());
    }
    if (from.has_dataname()) {
      set_dataname(from.dataname());
    }
    if (from.has_pbstrings()) {
      mutable_pbstrings()->::KFMsg::PBStrings::MergeFrom(from.pbstrings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SUpdateGroupMemberReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SUpdateGroupMemberReq::CopyFrom(const S2SUpdateGroupMemberReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SUpdateGroupMemberReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SUpdateGroupMemberReq::Swap(S2SUpdateGroupMemberReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(memberid_, other->memberid_);
    std::swap(dataname_, other->dataname_);
    std::swap(pbstrings_, other->pbstrings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SUpdateGroupMemberReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SUpdateGroupMemberReq_descriptor_;
  metadata.reflection = S2SUpdateGroupMemberReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SUpdateGroupMemberAck::kMemberidFieldNumber;
const int S2SUpdateGroupMemberAck::kDatanameFieldNumber;
const int S2SUpdateGroupMemberAck::kPbstringsFieldNumber;
#endif  // !_MSC_VER

S2SUpdateGroupMemberAck::S2SUpdateGroupMemberAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SUpdateGroupMemberAck::InitAsDefaultInstance() {
  pbstrings_ = const_cast< ::KFMsg::PBStrings*>(&::KFMsg::PBStrings::default_instance());
}

S2SUpdateGroupMemberAck::S2SUpdateGroupMemberAck(const S2SUpdateGroupMemberAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SUpdateGroupMemberAck::SharedCtor() {
  _cached_size_ = 0;
  memberid_ = 0u;
  dataname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pbstrings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SUpdateGroupMemberAck::~S2SUpdateGroupMemberAck() {
  SharedDtor();
}

void S2SUpdateGroupMemberAck::SharedDtor() {
  if (dataname_ != &::google::protobuf::internal::kEmptyString) {
    delete dataname_;
  }
  if (this != default_instance_) {
    delete pbstrings_;
  }
}

void S2SUpdateGroupMemberAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SUpdateGroupMemberAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SUpdateGroupMemberAck_descriptor_;
}

const S2SUpdateGroupMemberAck& S2SUpdateGroupMemberAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SUpdateGroupMemberAck* S2SUpdateGroupMemberAck::default_instance_ = NULL;

S2SUpdateGroupMemberAck* S2SUpdateGroupMemberAck::New() const {
  return new S2SUpdateGroupMemberAck;
}

void S2SUpdateGroupMemberAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    memberid_ = 0u;
    if (has_dataname()) {
      if (dataname_ != &::google::protobuf::internal::kEmptyString) {
        dataname_->clear();
      }
    }
    if (has_pbstrings()) {
      if (pbstrings_ != NULL) pbstrings_->::KFMsg::PBStrings::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SUpdateGroupMemberAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 memberid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memberid_)));
          set_has_memberid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dataname;
        break;
      }

      // required string dataname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dataname().data(), this->dataname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pbstrings;
        break;
      }

      // required .KFMsg.PBStrings pbstrings = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbstrings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbstrings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SUpdateGroupMemberAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 memberid = 1;
  if (has_memberid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->memberid(), output);
  }

  // required string dataname = 2;
  if (has_dataname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataname().data(), this->dataname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dataname(), output);
  }

  // required .KFMsg.PBStrings pbstrings = 3;
  if (has_pbstrings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pbstrings(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SUpdateGroupMemberAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 memberid = 1;
  if (has_memberid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->memberid(), target);
  }

  // required string dataname = 2;
  if (has_dataname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataname().data(), this->dataname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dataname(), target);
  }

  // required .KFMsg.PBStrings pbstrings = 3;
  if (has_pbstrings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pbstrings(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SUpdateGroupMemberAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 memberid = 1;
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memberid());
    }

    // required string dataname = 2;
    if (has_dataname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataname());
    }

    // required .KFMsg.PBStrings pbstrings = 3;
    if (has_pbstrings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbstrings());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SUpdateGroupMemberAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SUpdateGroupMemberAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SUpdateGroupMemberAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SUpdateGroupMemberAck::MergeFrom(const S2SUpdateGroupMemberAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memberid()) {
      set_memberid(from.memberid());
    }
    if (from.has_dataname()) {
      set_dataname(from.dataname());
    }
    if (from.has_pbstrings()) {
      mutable_pbstrings()->::KFMsg::PBStrings::MergeFrom(from.pbstrings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SUpdateGroupMemberAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SUpdateGroupMemberAck::CopyFrom(const S2SUpdateGroupMemberAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SUpdateGroupMemberAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SUpdateGroupMemberAck::Swap(S2SUpdateGroupMemberAck* other) {
  if (other != this) {
    std::swap(memberid_, other->memberid_);
    std::swap(dataname_, other->dataname_);
    std::swap(pbstrings_, other->pbstrings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SUpdateGroupMemberAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SUpdateGroupMemberAck_descriptor_;
  metadata.reflection = S2SUpdateGroupMemberAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SUpdateGroupDataAck::kPbstringFieldNumber;
#endif  // !_MSC_VER

S2SUpdateGroupDataAck::S2SUpdateGroupDataAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SUpdateGroupDataAck::InitAsDefaultInstance() {
}

S2SUpdateGroupDataAck::S2SUpdateGroupDataAck(const S2SUpdateGroupDataAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SUpdateGroupDataAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SUpdateGroupDataAck::~S2SUpdateGroupDataAck() {
  SharedDtor();
}

void S2SUpdateGroupDataAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SUpdateGroupDataAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SUpdateGroupDataAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SUpdateGroupDataAck_descriptor_;
}

const S2SUpdateGroupDataAck& S2SUpdateGroupDataAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SUpdateGroupDataAck* S2SUpdateGroupDataAck::default_instance_ = NULL;

S2SUpdateGroupDataAck* S2SUpdateGroupDataAck::New() const {
  return new S2SUpdateGroupDataAck;
}

void S2SUpdateGroupDataAck::Clear() {
  pbstring_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SUpdateGroupDataAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .KFMsg.PBString pbstring = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbstring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbstring()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pbstring;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SUpdateGroupDataAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .KFMsg.PBString pbstring = 1;
  for (int i = 0; i < this->pbstring_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pbstring(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SUpdateGroupDataAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .KFMsg.PBString pbstring = 1;
  for (int i = 0; i < this->pbstring_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pbstring(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SUpdateGroupDataAck::ByteSize() const {
  int total_size = 0;

  // repeated .KFMsg.PBString pbstring = 1;
  total_size += 1 * this->pbstring_size();
  for (int i = 0; i < this->pbstring_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbstring(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SUpdateGroupDataAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SUpdateGroupDataAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SUpdateGroupDataAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SUpdateGroupDataAck::MergeFrom(const S2SUpdateGroupDataAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbstring_.MergeFrom(from.pbstring_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SUpdateGroupDataAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SUpdateGroupDataAck::CopyFrom(const S2SUpdateGroupDataAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SUpdateGroupDataAck::IsInitialized() const {

  return true;
}

void S2SUpdateGroupDataAck::Swap(S2SUpdateGroupDataAck* other) {
  if (other != this) {
    pbstring_.Swap(&other->pbstring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SUpdateGroupDataAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SUpdateGroupDataAck_descriptor_;
  metadata.reflection = S2SUpdateGroupDataAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SUpdateGuestListReq::kPlayeridFieldNumber;
const int S2SUpdateGuestListReq::kGuestidFieldNumber;
const int S2SUpdateGuestListReq::kGuesttimeFieldNumber;
#endif  // !_MSC_VER

S2SUpdateGuestListReq::S2SUpdateGuestListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SUpdateGuestListReq::InitAsDefaultInstance() {
}

S2SUpdateGuestListReq::S2SUpdateGuestListReq(const S2SUpdateGuestListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SUpdateGuestListReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  guestid_ = 0u;
  guesttime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SUpdateGuestListReq::~S2SUpdateGuestListReq() {
  SharedDtor();
}

void S2SUpdateGuestListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SUpdateGuestListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SUpdateGuestListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SUpdateGuestListReq_descriptor_;
}

const S2SUpdateGuestListReq& S2SUpdateGuestListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SUpdateGuestListReq* S2SUpdateGuestListReq::default_instance_ = NULL;

S2SUpdateGuestListReq* S2SUpdateGuestListReq::New() const {
  return new S2SUpdateGuestListReq;
}

void S2SUpdateGuestListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    guestid_ = 0u;
    guesttime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SUpdateGuestListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guestid;
        break;
      }

      // required uint32 guestid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guestid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guestid_)));
          set_has_guestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guesttime;
        break;
      }

      // required uint64 guesttime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guesttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guesttime_)));
          set_has_guesttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SUpdateGuestListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 guestid = 2;
  if (has_guestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guestid(), output);
  }

  // required uint64 guesttime = 3;
  if (has_guesttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guesttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SUpdateGuestListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 guestid = 2;
  if (has_guestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guestid(), target);
  }

  // required uint64 guesttime = 3;
  if (has_guesttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guesttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SUpdateGuestListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 guestid = 2;
    if (has_guestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guestid());
    }

    // required uint64 guesttime = 3;
    if (has_guesttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guesttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SUpdateGuestListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SUpdateGuestListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SUpdateGuestListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SUpdateGuestListReq::MergeFrom(const S2SUpdateGuestListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_guestid()) {
      set_guestid(from.guestid());
    }
    if (from.has_guesttime()) {
      set_guesttime(from.guesttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SUpdateGuestListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SUpdateGuestListReq::CopyFrom(const S2SUpdateGuestListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SUpdateGuestListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SUpdateGuestListReq::Swap(S2SUpdateGuestListReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(guestid_, other->guestid_);
    std::swap(guesttime_, other->guesttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SUpdateGuestListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SUpdateGuestListReq_descriptor_;
  metadata.reflection = S2SUpdateGuestListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SQueryGuestReq::kPlayeridFieldNumber;
const int S2SQueryGuestReq::kQueryidFieldNumber;
const int S2SQueryGuestReq::kQuerytimeFieldNumber;
#endif  // !_MSC_VER

S2SQueryGuestReq::S2SQueryGuestReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SQueryGuestReq::InitAsDefaultInstance() {
}

S2SQueryGuestReq::S2SQueryGuestReq(const S2SQueryGuestReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SQueryGuestReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  queryid_ = 0u;
  querytime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SQueryGuestReq::~S2SQueryGuestReq() {
  SharedDtor();
}

void S2SQueryGuestReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SQueryGuestReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SQueryGuestReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SQueryGuestReq_descriptor_;
}

const S2SQueryGuestReq& S2SQueryGuestReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SQueryGuestReq* S2SQueryGuestReq::default_instance_ = NULL;

S2SQueryGuestReq* S2SQueryGuestReq::New() const {
  return new S2SQueryGuestReq;
}

void S2SQueryGuestReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    queryid_ = 0u;
    querytime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SQueryGuestReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_queryid;
        break;
      }

      // required uint32 queryid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queryid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queryid_)));
          set_has_queryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_querytime;
        break;
      }

      // required uint64 querytime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_querytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &querytime_)));
          set_has_querytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SQueryGuestReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 queryid = 2;
  if (has_queryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->queryid(), output);
  }

  // required uint64 querytime = 3;
  if (has_querytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->querytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SQueryGuestReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 queryid = 2;
  if (has_queryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->queryid(), target);
  }

  // required uint64 querytime = 3;
  if (has_querytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->querytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SQueryGuestReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 queryid = 2;
    if (has_queryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queryid());
    }

    // required uint64 querytime = 3;
    if (has_querytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->querytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SQueryGuestReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SQueryGuestReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SQueryGuestReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SQueryGuestReq::MergeFrom(const S2SQueryGuestReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_queryid()) {
      set_queryid(from.queryid());
    }
    if (from.has_querytime()) {
      set_querytime(from.querytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SQueryGuestReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryGuestReq::CopyFrom(const S2SQueryGuestReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryGuestReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SQueryGuestReq::Swap(S2SQueryGuestReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(queryid_, other->queryid_);
    std::swap(querytime_, other->querytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SQueryGuestReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SQueryGuestReq_descriptor_;
  metadata.reflection = S2SQueryGuestReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SQueryGuestAck::kPlayeridFieldNumber;
const int S2SQueryGuestAck::kQueryidFieldNumber;
const int S2SQueryGuestAck::kGuestcountFieldNumber;
const int S2SQueryGuestAck::kGuestdataFieldNumber;
#endif  // !_MSC_VER

S2SQueryGuestAck::S2SQueryGuestAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SQueryGuestAck::InitAsDefaultInstance() {
}

S2SQueryGuestAck::S2SQueryGuestAck(const S2SQueryGuestAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SQueryGuestAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  queryid_ = 0u;
  guestcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SQueryGuestAck::~S2SQueryGuestAck() {
  SharedDtor();
}

void S2SQueryGuestAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SQueryGuestAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SQueryGuestAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SQueryGuestAck_descriptor_;
}

const S2SQueryGuestAck& S2SQueryGuestAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SQueryGuestAck* S2SQueryGuestAck::default_instance_ = NULL;

S2SQueryGuestAck* S2SQueryGuestAck::New() const {
  return new S2SQueryGuestAck;
}

void S2SQueryGuestAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    queryid_ = 0u;
    guestcount_ = 0u;
  }
  guestdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SQueryGuestAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_queryid;
        break;
      }

      // required uint32 queryid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queryid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queryid_)));
          set_has_queryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guestcount;
        break;
      }

      // required uint32 guestcount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guestcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guestcount_)));
          set_has_guestcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guestdata;
        break;
      }

      // repeated .KFMsg.PBGuestData guestdata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guestdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guestdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guestdata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SQueryGuestAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 queryid = 2;
  if (has_queryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->queryid(), output);
  }

  // required uint32 guestcount = 3;
  if (has_guestcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->guestcount(), output);
  }

  // repeated .KFMsg.PBGuestData guestdata = 4;
  for (int i = 0; i < this->guestdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->guestdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SQueryGuestAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 queryid = 2;
  if (has_queryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->queryid(), target);
  }

  // required uint32 guestcount = 3;
  if (has_guestcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->guestcount(), target);
  }

  // repeated .KFMsg.PBGuestData guestdata = 4;
  for (int i = 0; i < this->guestdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->guestdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SQueryGuestAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 queryid = 2;
    if (has_queryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queryid());
    }

    // required uint32 guestcount = 3;
    if (has_guestcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guestcount());
    }

  }
  // repeated .KFMsg.PBGuestData guestdata = 4;
  total_size += 1 * this->guestdata_size();
  for (int i = 0; i < this->guestdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guestdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SQueryGuestAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SQueryGuestAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SQueryGuestAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SQueryGuestAck::MergeFrom(const S2SQueryGuestAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  guestdata_.MergeFrom(from.guestdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_queryid()) {
      set_queryid(from.queryid());
    }
    if (from.has_guestcount()) {
      set_guestcount(from.guestcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SQueryGuestAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryGuestAck::CopyFrom(const S2SQueryGuestAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryGuestAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < guestdata_size(); i++) {
    if (!this->guestdata(i).IsInitialized()) return false;
  }
  return true;
}

void S2SQueryGuestAck::Swap(S2SQueryGuestAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(queryid_, other->queryid_);
    std::swap(guestcount_, other->guestcount_);
    guestdata_.Swap(&other->guestdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SQueryGuestAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SQueryGuestAck_descriptor_;
  metadata.reflection = S2SQueryGuestAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SNewPlayerLoginMailReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SNewPlayerLoginMailReq::S2SNewPlayerLoginMailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SNewPlayerLoginMailReq::InitAsDefaultInstance() {
}

S2SNewPlayerLoginMailReq::S2SNewPlayerLoginMailReq(const S2SNewPlayerLoginMailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SNewPlayerLoginMailReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SNewPlayerLoginMailReq::~S2SNewPlayerLoginMailReq() {
  SharedDtor();
}

void S2SNewPlayerLoginMailReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SNewPlayerLoginMailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SNewPlayerLoginMailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SNewPlayerLoginMailReq_descriptor_;
}

const S2SNewPlayerLoginMailReq& S2SNewPlayerLoginMailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SNewPlayerLoginMailReq* S2SNewPlayerLoginMailReq::default_instance_ = NULL;

S2SNewPlayerLoginMailReq* S2SNewPlayerLoginMailReq::New() const {
  return new S2SNewPlayerLoginMailReq;
}

void S2SNewPlayerLoginMailReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SNewPlayerLoginMailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SNewPlayerLoginMailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SNewPlayerLoginMailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SNewPlayerLoginMailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SNewPlayerLoginMailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SNewPlayerLoginMailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SNewPlayerLoginMailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SNewPlayerLoginMailReq::MergeFrom(const S2SNewPlayerLoginMailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SNewPlayerLoginMailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SNewPlayerLoginMailReq::CopyFrom(const S2SNewPlayerLoginMailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SNewPlayerLoginMailReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2SNewPlayerLoginMailReq::Swap(S2SNewPlayerLoginMailReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SNewPlayerLoginMailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SNewPlayerLoginMailReq_descriptor_;
  metadata.reflection = S2SNewPlayerLoginMailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SUpdateRankDataReq::kPlayeridFieldNumber;
const int S2SUpdateRankDataReq::kRankidFieldNumber;
const int S2SUpdateRankDataReq::kZoneidFieldNumber;
const int S2SUpdateRankDataReq::kPbrankdataFieldNumber;
#endif  // !_MSC_VER

S2SUpdateRankDataReq::S2SUpdateRankDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SUpdateRankDataReq::InitAsDefaultInstance() {
  pbrankdata_ = const_cast< ::KFMsg::PBRankData*>(&::KFMsg::PBRankData::default_instance());
}

S2SUpdateRankDataReq::S2SUpdateRankDataReq(const S2SUpdateRankDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SUpdateRankDataReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  rankid_ = 0u;
  zoneid_ = 0u;
  pbrankdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SUpdateRankDataReq::~S2SUpdateRankDataReq() {
  SharedDtor();
}

void S2SUpdateRankDataReq::SharedDtor() {
  if (this != default_instance_) {
    delete pbrankdata_;
  }
}

void S2SUpdateRankDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SUpdateRankDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SUpdateRankDataReq_descriptor_;
}

const S2SUpdateRankDataReq& S2SUpdateRankDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SUpdateRankDataReq* S2SUpdateRankDataReq::default_instance_ = NULL;

S2SUpdateRankDataReq* S2SUpdateRankDataReq::New() const {
  return new S2SUpdateRankDataReq;
}

void S2SUpdateRankDataReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    rankid_ = 0u;
    zoneid_ = 0u;
    if (has_pbrankdata()) {
      if (pbrankdata_ != NULL) pbrankdata_->::KFMsg::PBRankData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SUpdateRankDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rankid;
        break;
      }

      // required uint32 rankid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pbrankdata;
        break;
      }

      // required .KFMsg.PBRankData pbrankdata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbrankdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbrankdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SUpdateRankDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 rankid = 2;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rankid(), output);
  }

  // required uint32 zoneid = 3;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  // required .KFMsg.PBRankData pbrankdata = 4;
  if (has_pbrankdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pbrankdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SUpdateRankDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 rankid = 2;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rankid(), target);
  }

  // required uint32 zoneid = 3;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  // required .KFMsg.PBRankData pbrankdata = 4;
  if (has_pbrankdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pbrankdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SUpdateRankDataReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 rankid = 2;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

    // required uint32 zoneid = 3;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // required .KFMsg.PBRankData pbrankdata = 4;
    if (has_pbrankdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbrankdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SUpdateRankDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SUpdateRankDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SUpdateRankDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SUpdateRankDataReq::MergeFrom(const S2SUpdateRankDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_pbrankdata()) {
      mutable_pbrankdata()->::KFMsg::PBRankData::MergeFrom(from.pbrankdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SUpdateRankDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SUpdateRankDataReq::CopyFrom(const S2SUpdateRankDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SUpdateRankDataReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SUpdateRankDataReq::Swap(S2SUpdateRankDataReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(rankid_, other->rankid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(pbrankdata_, other->pbrankdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SUpdateRankDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SUpdateRankDataReq_descriptor_;
  metadata.reflection = S2SUpdateRankDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SQueryRankListReq::kPlayeridFieldNumber;
const int S2SQueryRankListReq::kServeridFieldNumber;
const int S2SQueryRankListReq::kRankidFieldNumber;
const int S2SQueryRankListReq::kZoneidFieldNumber;
#endif  // !_MSC_VER

S2SQueryRankListReq::S2SQueryRankListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SQueryRankListReq::InitAsDefaultInstance() {
}

S2SQueryRankListReq::S2SQueryRankListReq(const S2SQueryRankListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SQueryRankListReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  serverid_ = 0u;
  rankid_ = 0u;
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SQueryRankListReq::~S2SQueryRankListReq() {
  SharedDtor();
}

void S2SQueryRankListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SQueryRankListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SQueryRankListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SQueryRankListReq_descriptor_;
}

const S2SQueryRankListReq& S2SQueryRankListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SQueryRankListReq* S2SQueryRankListReq::default_instance_ = NULL;

S2SQueryRankListReq* S2SQueryRankListReq::New() const {
  return new S2SQueryRankListReq;
}

void S2SQueryRankListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    serverid_ = 0u;
    rankid_ = 0u;
    zoneid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SQueryRankListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rankid;
        break;
      }

      // required uint32 rankid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SQueryRankListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  // required uint32 rankid = 3;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rankid(), output);
  }

  // required uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SQueryRankListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  // required uint32 rankid = 3;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rankid(), target);
  }

  // required uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SQueryRankListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required uint32 rankid = 3;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

    // required uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SQueryRankListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SQueryRankListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SQueryRankListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SQueryRankListReq::MergeFrom(const S2SQueryRankListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SQueryRankListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryRankListReq::CopyFrom(const S2SQueryRankListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryRankListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SQueryRankListReq::Swap(S2SQueryRankListReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(rankid_, other->rankid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SQueryRankListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SQueryRankListReq_descriptor_;
  metadata.reflection = S2SQueryRankListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SQueryFriendRankListReq::kPlayeridFieldNumber;
const int S2SQueryFriendRankListReq::kServeridFieldNumber;
const int S2SQueryFriendRankListReq::kRankidFieldNumber;
const int S2SQueryFriendRankListReq::kFriendidFieldNumber;
#endif  // !_MSC_VER

S2SQueryFriendRankListReq::S2SQueryFriendRankListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SQueryFriendRankListReq::InitAsDefaultInstance() {
}

S2SQueryFriendRankListReq::S2SQueryFriendRankListReq(const S2SQueryFriendRankListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SQueryFriendRankListReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  serverid_ = 0u;
  rankid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SQueryFriendRankListReq::~S2SQueryFriendRankListReq() {
  SharedDtor();
}

void S2SQueryFriendRankListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SQueryFriendRankListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SQueryFriendRankListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SQueryFriendRankListReq_descriptor_;
}

const S2SQueryFriendRankListReq& S2SQueryFriendRankListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SQueryFriendRankListReq* S2SQueryFriendRankListReq::default_instance_ = NULL;

S2SQueryFriendRankListReq* S2SQueryFriendRankListReq::New() const {
  return new S2SQueryFriendRankListReq;
}

void S2SQueryFriendRankListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    serverid_ = 0u;
    rankid_ = 0u;
  }
  friendid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SQueryFriendRankListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rankid;
        break;
      }

      // required uint32 rankid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_friendid;
        break;
      }

      // repeated uint32 friendid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_friendid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_friendid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_friendid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SQueryFriendRankListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  // required uint32 rankid = 3;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rankid(), output);
  }

  // repeated uint32 friendid = 4;
  for (int i = 0; i < this->friendid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->friendid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SQueryFriendRankListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  // required uint32 rankid = 3;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rankid(), target);
  }

  // repeated uint32 friendid = 4;
  for (int i = 0; i < this->friendid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->friendid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SQueryFriendRankListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required uint32 rankid = 3;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

  }
  // repeated uint32 friendid = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->friendid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->friendid(i));
    }
    total_size += 1 * this->friendid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SQueryFriendRankListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SQueryFriendRankListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SQueryFriendRankListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SQueryFriendRankListReq::MergeFrom(const S2SQueryFriendRankListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendid_.MergeFrom(from.friendid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SQueryFriendRankListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryFriendRankListReq::CopyFrom(const S2SQueryFriendRankListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryFriendRankListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SQueryFriendRankListReq::Swap(S2SQueryFriendRankListReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(rankid_, other->rankid_);
    friendid_.Swap(&other->friendid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SQueryFriendRankListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SQueryFriendRankListReq_descriptor_;
  metadata.reflection = S2SQueryFriendRankListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SAddRecentPlayerDataReq::kRoomidFieldNumber;
const int S2SAddRecentPlayerDataReq::kPlayeridFieldNumber;
const int S2SAddRecentPlayerDataReq::kMembersFieldNumber;
const int S2SAddRecentPlayerDataReq::kPbdataFieldNumber;
#endif  // !_MSC_VER

S2SAddRecentPlayerDataReq::S2SAddRecentPlayerDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SAddRecentPlayerDataReq::InitAsDefaultInstance() {
  pbdata_ = const_cast< ::KFMsg::PBStrings*>(&::KFMsg::PBStrings::default_instance());
}

S2SAddRecentPlayerDataReq::S2SAddRecentPlayerDataReq(const S2SAddRecentPlayerDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SAddRecentPlayerDataReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  playerid_ = 0u;
  pbdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SAddRecentPlayerDataReq::~S2SAddRecentPlayerDataReq() {
  SharedDtor();
}

void S2SAddRecentPlayerDataReq::SharedDtor() {
  if (this != default_instance_) {
    delete pbdata_;
  }
}

void S2SAddRecentPlayerDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SAddRecentPlayerDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SAddRecentPlayerDataReq_descriptor_;
}

const S2SAddRecentPlayerDataReq& S2SAddRecentPlayerDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SAddRecentPlayerDataReq* S2SAddRecentPlayerDataReq::default_instance_ = NULL;

S2SAddRecentPlayerDataReq* S2SAddRecentPlayerDataReq::New() const {
  return new S2SAddRecentPlayerDataReq;
}

void S2SAddRecentPlayerDataReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
    playerid_ = 0u;
    if (has_pbdata()) {
      if (pbdata_ != NULL) pbdata_->::KFMsg::PBStrings::Clear();
    }
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SAddRecentPlayerDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_members;
        break;
      }

      // repeated uint32 members = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_members())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_members())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_members;
        if (input->ExpectTag(34)) goto parse_pbdata;
        break;
      }

      // required .KFMsg.PBStrings pbdata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SAddRecentPlayerDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // repeated uint32 members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->members(i), output);
  }

  // required .KFMsg.PBStrings pbdata = 4;
  if (has_pbdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pbdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SAddRecentPlayerDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // repeated uint32 members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->members(i), target);
  }

  // required .KFMsg.PBStrings pbdata = 4;
  if (has_pbdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pbdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SAddRecentPlayerDataReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required .KFMsg.PBStrings pbdata = 4;
    if (has_pbdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbdata());
    }

  }
  // repeated uint32 members = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->members_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->members(i));
    }
    total_size += 1 * this->members_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SAddRecentPlayerDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SAddRecentPlayerDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SAddRecentPlayerDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SAddRecentPlayerDataReq::MergeFrom(const S2SAddRecentPlayerDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_pbdata()) {
      mutable_pbdata()->::KFMsg::PBStrings::MergeFrom(from.pbdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SAddRecentPlayerDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SAddRecentPlayerDataReq::CopyFrom(const S2SAddRecentPlayerDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SAddRecentPlayerDataReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void S2SAddRecentPlayerDataReq::Swap(S2SAddRecentPlayerDataReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(playerid_, other->playerid_);
    members_.Swap(&other->members_);
    std::swap(pbdata_, other->pbdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SAddRecentPlayerDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SAddRecentPlayerDataReq_descriptor_;
  metadata.reflection = S2SAddRecentPlayerDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SQueryRecentListReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SQueryRecentListReq::S2SQueryRecentListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SQueryRecentListReq::InitAsDefaultInstance() {
}

S2SQueryRecentListReq::S2SQueryRecentListReq(const S2SQueryRecentListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SQueryRecentListReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SQueryRecentListReq::~S2SQueryRecentListReq() {
  SharedDtor();
}

void S2SQueryRecentListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SQueryRecentListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SQueryRecentListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SQueryRecentListReq_descriptor_;
}

const S2SQueryRecentListReq& S2SQueryRecentListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SQueryRecentListReq* S2SQueryRecentListReq::default_instance_ = NULL;

S2SQueryRecentListReq* S2SQueryRecentListReq::New() const {
  return new S2SQueryRecentListReq;
}

void S2SQueryRecentListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SQueryRecentListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SQueryRecentListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SQueryRecentListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SQueryRecentListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SQueryRecentListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SQueryRecentListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SQueryRecentListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SQueryRecentListReq::MergeFrom(const S2SQueryRecentListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SQueryRecentListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryRecentListReq::CopyFrom(const S2SQueryRecentListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryRecentListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2SQueryRecentListReq::Swap(S2SQueryRecentListReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SQueryRecentListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SQueryRecentListReq_descriptor_;
  metadata.reflection = S2SQueryRecentListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SQueryRecentListAck::kPlayeridFieldNumber;
const int S2SQueryRecentListAck::kPbrelationFieldNumber;
#endif  // !_MSC_VER

S2SQueryRecentListAck::S2SQueryRecentListAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SQueryRecentListAck::InitAsDefaultInstance() {
}

S2SQueryRecentListAck::S2SQueryRecentListAck(const S2SQueryRecentListAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SQueryRecentListAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SQueryRecentListAck::~S2SQueryRecentListAck() {
  SharedDtor();
}

void S2SQueryRecentListAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SQueryRecentListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SQueryRecentListAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SQueryRecentListAck_descriptor_;
}

const S2SQueryRecentListAck& S2SQueryRecentListAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SQueryRecentListAck* S2SQueryRecentListAck::default_instance_ = NULL;

S2SQueryRecentListAck* S2SQueryRecentListAck::New() const {
  return new S2SQueryRecentListAck;
}

void S2SQueryRecentListAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  pbrelation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SQueryRecentListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbrelation;
        break;
      }

      // repeated .KFMsg.PBRelation pbrelation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbrelation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbrelation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbrelation;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SQueryRecentListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // repeated .KFMsg.PBRelation pbrelation = 2;
  for (int i = 0; i < this->pbrelation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pbrelation(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SQueryRecentListAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // repeated .KFMsg.PBRelation pbrelation = 2;
  for (int i = 0; i < this->pbrelation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pbrelation(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SQueryRecentListAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  // repeated .KFMsg.PBRelation pbrelation = 2;
  total_size += 1 * this->pbrelation_size();
  for (int i = 0; i < this->pbrelation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbrelation(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SQueryRecentListAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SQueryRecentListAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SQueryRecentListAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SQueryRecentListAck::MergeFrom(const S2SQueryRecentListAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbrelation_.MergeFrom(from.pbrelation_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SQueryRecentListAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryRecentListAck::CopyFrom(const S2SQueryRecentListAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryRecentListAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < pbrelation_size(); i++) {
    if (!this->pbrelation(i).IsInitialized()) return false;
  }
  return true;
}

void S2SQueryRecentListAck::Swap(S2SQueryRecentListAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    pbrelation_.Swap(&other->pbrelation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SQueryRecentListAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SQueryRecentListAck_descriptor_;
  metadata.reflection = S2SQueryRecentListAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SCreateGuidReq::kPlayeridFieldNumber;
const int S2SCreateGuidReq::kServeridFieldNumber;
const int S2SCreateGuidReq::kNameFieldNumber;
const int S2SCreateGuidReq::kGuildnameFieldNumber;
const int S2SCreateGuidReq::kMedalFieldNumber;
const int S2SCreateGuidReq::kManifestoFieldNumber;
#endif  // !_MSC_VER

S2SCreateGuidReq::S2SCreateGuidReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SCreateGuidReq::InitAsDefaultInstance() {
}

S2SCreateGuidReq::S2SCreateGuidReq(const S2SCreateGuidReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SCreateGuidReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  serverid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  medal_ = 0u;
  manifesto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SCreateGuidReq::~S2SCreateGuidReq() {
  SharedDtor();
}

void S2SCreateGuidReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (manifesto_ != &::google::protobuf::internal::kEmptyString) {
    delete manifesto_;
  }
  if (this != default_instance_) {
  }
}

void S2SCreateGuidReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SCreateGuidReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SCreateGuidReq_descriptor_;
}

const S2SCreateGuidReq& S2SCreateGuidReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SCreateGuidReq* S2SCreateGuidReq::default_instance_ = NULL;

S2SCreateGuidReq* S2SCreateGuidReq::New() const {
  return new S2SCreateGuidReq;
}

void S2SCreateGuidReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    serverid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    medal_ = 0u;
    if (has_manifesto()) {
      if (manifesto_ != &::google::protobuf::internal::kEmptyString) {
        manifesto_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SCreateGuidReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guildname;
        break;
      }

      // required string guildname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_medal;
        break;
      }

      // required uint32 medal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_medal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &medal_)));
          set_has_medal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_manifesto;
        break;
      }

      // optional string manifesto = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manifesto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manifesto()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->manifesto().data(), this->manifesto().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SCreateGuidReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required string guildname = 4;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->guildname(), output);
  }

  // required uint32 medal = 5;
  if (has_medal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->medal(), output);
  }

  // optional string manifesto = 6;
  if (has_manifesto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manifesto().data(), this->manifesto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->manifesto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SCreateGuidReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required string guildname = 4;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guildname(), target);
  }

  // required uint32 medal = 5;
  if (has_medal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->medal(), target);
  }

  // optional string manifesto = 6;
  if (has_manifesto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manifesto().data(), this->manifesto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->manifesto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SCreateGuidReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string guildname = 4;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // required uint32 medal = 5;
    if (has_medal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->medal());
    }

    // optional string manifesto = 6;
    if (has_manifesto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manifesto());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SCreateGuidReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SCreateGuidReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SCreateGuidReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SCreateGuidReq::MergeFrom(const S2SCreateGuidReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_medal()) {
      set_medal(from.medal());
    }
    if (from.has_manifesto()) {
      set_manifesto(from.manifesto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SCreateGuidReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SCreateGuidReq::CopyFrom(const S2SCreateGuidReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SCreateGuidReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2SCreateGuidReq::Swap(S2SCreateGuidReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(name_, other->name_);
    std::swap(guildname_, other->guildname_);
    std::swap(medal_, other->medal_);
    std::swap(manifesto_, other->manifesto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SCreateGuidReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SCreateGuidReq_descriptor_;
  metadata.reflection = S2SCreateGuidReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SCreateGuildToShardReq::kPlayeridFieldNumber;
const int S2SCreateGuildToShardReq::kServeridFieldNumber;
const int S2SCreateGuildToShardReq::kNameFieldNumber;
const int S2SCreateGuildToShardReq::kGuildnameFieldNumber;
const int S2SCreateGuildToShardReq::kMedalFieldNumber;
const int S2SCreateGuildToShardReq::kManifestoFieldNumber;
const int S2SCreateGuildToShardReq::kGuildidFieldNumber;
#endif  // !_MSC_VER

S2SCreateGuildToShardReq::S2SCreateGuildToShardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SCreateGuildToShardReq::InitAsDefaultInstance() {
}

S2SCreateGuildToShardReq::S2SCreateGuildToShardReq(const S2SCreateGuildToShardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SCreateGuildToShardReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  serverid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  medal_ = 0u;
  manifesto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SCreateGuildToShardReq::~S2SCreateGuildToShardReq() {
  SharedDtor();
}

void S2SCreateGuildToShardReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (manifesto_ != &::google::protobuf::internal::kEmptyString) {
    delete manifesto_;
  }
  if (this != default_instance_) {
  }
}

void S2SCreateGuildToShardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SCreateGuildToShardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SCreateGuildToShardReq_descriptor_;
}

const S2SCreateGuildToShardReq& S2SCreateGuildToShardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SCreateGuildToShardReq* S2SCreateGuildToShardReq::default_instance_ = NULL;

S2SCreateGuildToShardReq* S2SCreateGuildToShardReq::New() const {
  return new S2SCreateGuildToShardReq;
}

void S2SCreateGuildToShardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    serverid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    medal_ = 0u;
    if (has_manifesto()) {
      if (manifesto_ != &::google::protobuf::internal::kEmptyString) {
        manifesto_->clear();
      }
    }
    guildid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SCreateGuildToShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guildname;
        break;
      }

      // required string guildname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_medal;
        break;
      }

      // required uint32 medal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_medal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &medal_)));
          set_has_medal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_manifesto;
        break;
      }

      // optional string manifesto = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manifesto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manifesto()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->manifesto().data(), this->manifesto().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_guildid;
        break;
      }

      // required uint64 guildid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SCreateGuildToShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required string guildname = 4;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->guildname(), output);
  }

  // required uint32 medal = 5;
  if (has_medal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->medal(), output);
  }

  // optional string manifesto = 6;
  if (has_manifesto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manifesto().data(), this->manifesto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->manifesto(), output);
  }

  // required uint64 guildid = 7;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SCreateGuildToShardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required string guildname = 4;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guildname(), target);
  }

  // required uint32 medal = 5;
  if (has_medal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->medal(), target);
  }

  // optional string manifesto = 6;
  if (has_manifesto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manifesto().data(), this->manifesto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->manifesto(), target);
  }

  // required uint64 guildid = 7;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SCreateGuildToShardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string guildname = 4;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // required uint32 medal = 5;
    if (has_medal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->medal());
    }

    // optional string manifesto = 6;
    if (has_manifesto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manifesto());
    }

    // required uint64 guildid = 7;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SCreateGuildToShardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SCreateGuildToShardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SCreateGuildToShardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SCreateGuildToShardReq::MergeFrom(const S2SCreateGuildToShardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_medal()) {
      set_medal(from.medal());
    }
    if (from.has_manifesto()) {
      set_manifesto(from.manifesto());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SCreateGuildToShardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SCreateGuildToShardReq::CopyFrom(const S2SCreateGuildToShardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SCreateGuildToShardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000005f) != 0x0000005f) return false;

  return true;
}

void S2SCreateGuildToShardReq::Swap(S2SCreateGuildToShardReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(name_, other->name_);
    std::swap(guildname_, other->guildname_);
    std::swap(medal_, other->medal_);
    std::swap(manifesto_, other->manifesto_);
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SCreateGuildToShardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SCreateGuildToShardReq_descriptor_;
  metadata.reflection = S2SCreateGuildToShardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SCreateGuildAck::kCodeFieldNumber;
const int S2SCreateGuildAck::kPlayeridFieldNumber;
const int S2SCreateGuildAck::kGuildidFieldNumber;
const int S2SCreateGuildAck::kMedalFieldNumber;
const int S2SCreateGuildAck::kManifestoFieldNumber;
#endif  // !_MSC_VER

S2SCreateGuildAck::S2SCreateGuildAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SCreateGuildAck::InitAsDefaultInstance() {
}

S2SCreateGuildAck::S2SCreateGuildAck(const S2SCreateGuildAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SCreateGuildAck::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0u;
  playerid_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  medal_ = 0u;
  manifesto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SCreateGuildAck::~S2SCreateGuildAck() {
  SharedDtor();
}

void S2SCreateGuildAck::SharedDtor() {
  if (manifesto_ != &::google::protobuf::internal::kEmptyString) {
    delete manifesto_;
  }
  if (this != default_instance_) {
  }
}

void S2SCreateGuildAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SCreateGuildAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SCreateGuildAck_descriptor_;
}

const S2SCreateGuildAck& S2SCreateGuildAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SCreateGuildAck* S2SCreateGuildAck::default_instance_ = NULL;

S2SCreateGuildAck* S2SCreateGuildAck::New() const {
  return new S2SCreateGuildAck;
}

void S2SCreateGuildAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0u;
    playerid_ = 0u;
    guildid_ = GOOGLE_ULONGLONG(0);
    medal_ = 0u;
    if (has_manifesto()) {
      if (manifesto_ != &::google::protobuf::internal::kEmptyString) {
        manifesto_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SCreateGuildAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }

      // required uint64 guildid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_medal;
        break;
      }

      // required uint32 medal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_medal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &medal_)));
          set_has_medal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_manifesto;
        break;
      }

      // optional string manifesto = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manifesto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manifesto()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->manifesto().data(), this->manifesto().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SCreateGuildAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->code(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required uint64 guildid = 3;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildid(), output);
  }

  // required uint32 medal = 4;
  if (has_medal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->medal(), output);
  }

  // optional string manifesto = 5;
  if (has_manifesto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manifesto().data(), this->manifesto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->manifesto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SCreateGuildAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->code(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // required uint64 guildid = 3;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildid(), target);
  }

  // required uint32 medal = 4;
  if (has_medal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->medal(), target);
  }

  // optional string manifesto = 5;
  if (has_manifesto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manifesto().data(), this->manifesto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->manifesto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SCreateGuildAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint64 guildid = 3;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required uint32 medal = 4;
    if (has_medal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->medal());
    }

    // optional string manifesto = 5;
    if (has_manifesto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manifesto());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SCreateGuildAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SCreateGuildAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SCreateGuildAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SCreateGuildAck::MergeFrom(const S2SCreateGuildAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_medal()) {
      set_medal(from.medal());
    }
    if (from.has_manifesto()) {
      set_manifesto(from.manifesto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SCreateGuildAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SCreateGuildAck::CopyFrom(const S2SCreateGuildAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SCreateGuildAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SCreateGuildAck::Swap(S2SCreateGuildAck* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(playerid_, other->playerid_);
    std::swap(guildid_, other->guildid_);
    std::swap(medal_, other->medal_);
    std::swap(manifesto_, other->manifesto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SCreateGuildAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SCreateGuildAck_descriptor_;
  metadata.reflection = S2SCreateGuildAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SUpdateMemberBasicDataReq::kPlayeridFieldNumber;
const int S2SUpdateMemberBasicDataReq::kGuildidFieldNumber;
const int S2SUpdateMemberBasicDataReq::kPbdataFieldNumber;
#endif  // !_MSC_VER

S2SUpdateMemberBasicDataReq::S2SUpdateMemberBasicDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SUpdateMemberBasicDataReq::InitAsDefaultInstance() {
}

S2SUpdateMemberBasicDataReq::S2SUpdateMemberBasicDataReq(const S2SUpdateMemberBasicDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SUpdateMemberBasicDataReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SUpdateMemberBasicDataReq::~S2SUpdateMemberBasicDataReq() {
  SharedDtor();
}

void S2SUpdateMemberBasicDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SUpdateMemberBasicDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SUpdateMemberBasicDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SUpdateMemberBasicDataReq_descriptor_;
}

const S2SUpdateMemberBasicDataReq& S2SUpdateMemberBasicDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SUpdateMemberBasicDataReq* S2SUpdateMemberBasicDataReq::default_instance_ = NULL;

S2SUpdateMemberBasicDataReq* S2SUpdateMemberBasicDataReq::New() const {
  return new S2SUpdateMemberBasicDataReq;
}

void S2SUpdateMemberBasicDataReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    guildid_ = GOOGLE_ULONGLONG(0);
  }
  pbdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SUpdateMemberBasicDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guildid;
        break;
      }

      // required uint64 guildid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pbdata;
        break;
      }

      // repeated .KFMsg.PBString pbdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pbdata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SUpdateMemberBasicDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint64 guildid = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guildid(), output);
  }

  // repeated .KFMsg.PBString pbdata = 3;
  for (int i = 0; i < this->pbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pbdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SUpdateMemberBasicDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint64 guildid = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guildid(), target);
  }

  // repeated .KFMsg.PBString pbdata = 3;
  for (int i = 0; i < this->pbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pbdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SUpdateMemberBasicDataReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint64 guildid = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  // repeated .KFMsg.PBString pbdata = 3;
  total_size += 1 * this->pbdata_size();
  for (int i = 0; i < this->pbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SUpdateMemberBasicDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SUpdateMemberBasicDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SUpdateMemberBasicDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SUpdateMemberBasicDataReq::MergeFrom(const S2SUpdateMemberBasicDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbdata_.MergeFrom(from.pbdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SUpdateMemberBasicDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SUpdateMemberBasicDataReq::CopyFrom(const S2SUpdateMemberBasicDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SUpdateMemberBasicDataReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SUpdateMemberBasicDataReq::Swap(S2SUpdateMemberBasicDataReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(guildid_, other->guildid_);
    pbdata_.Swap(&other->pbdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SUpdateMemberBasicDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SUpdateMemberBasicDataReq_descriptor_;
  metadata.reflection = S2SUpdateMemberBasicDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SInviteGuildReq::kGuildidFieldNumber;
const int S2SInviteGuildReq::kInvitorFieldNumber;
const int S2SInviteGuildReq::kInvitedidFieldNumber;
const int S2SInviteGuildReq::kServeridFieldNumber;
#endif  // !_MSC_VER

S2SInviteGuildReq::S2SInviteGuildReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SInviteGuildReq::InitAsDefaultInstance() {
}

S2SInviteGuildReq::S2SInviteGuildReq(const S2SInviteGuildReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SInviteGuildReq::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  invitor_ = 0u;
  invitedid_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SInviteGuildReq::~S2SInviteGuildReq() {
  SharedDtor();
}

void S2SInviteGuildReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SInviteGuildReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SInviteGuildReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SInviteGuildReq_descriptor_;
}

const S2SInviteGuildReq& S2SInviteGuildReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SInviteGuildReq* S2SInviteGuildReq::default_instance_ = NULL;

S2SInviteGuildReq* S2SInviteGuildReq::New() const {
  return new S2SInviteGuildReq;
}

void S2SInviteGuildReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    invitor_ = 0u;
    invitedid_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SInviteGuildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_invitor;
        break;
      }

      // required uint32 invitor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invitor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invitor_)));
          set_has_invitor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_invitedid;
        break;
      }

      // required uint32 invitedid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invitedid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invitedid_)));
          set_has_invitedid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SInviteGuildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // required uint32 invitor = 2;
  if (has_invitor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->invitor(), output);
  }

  // required uint32 invitedid = 3;
  if (has_invitedid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->invitedid(), output);
  }

  // required uint32 serverid = 4;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SInviteGuildReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // required uint32 invitor = 2;
  if (has_invitor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->invitor(), target);
  }

  // required uint32 invitedid = 3;
  if (has_invitedid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->invitedid(), target);
  }

  // required uint32 serverid = 4;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SInviteGuildReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required uint32 invitor = 2;
    if (has_invitor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invitor());
    }

    // required uint32 invitedid = 3;
    if (has_invitedid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invitedid());
    }

    // required uint32 serverid = 4;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SInviteGuildReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SInviteGuildReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SInviteGuildReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SInviteGuildReq::MergeFrom(const S2SInviteGuildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_invitor()) {
      set_invitor(from.invitor());
    }
    if (from.has_invitedid()) {
      set_invitedid(from.invitedid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SInviteGuildReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SInviteGuildReq::CopyFrom(const S2SInviteGuildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SInviteGuildReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SInviteGuildReq::Swap(S2SInviteGuildReq* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(invitor_, other->invitor_);
    std::swap(invitedid_, other->invitedid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SInviteGuildReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SInviteGuildReq_descriptor_;
  metadata.reflection = S2SInviteGuildReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SInviteGuildAck::kGuildidFieldNumber;
const int S2SInviteGuildAck::kPlayeridFieldNumber;
const int S2SInviteGuildAck::kInvitedidFieldNumber;
#endif  // !_MSC_VER

S2SInviteGuildAck::S2SInviteGuildAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SInviteGuildAck::InitAsDefaultInstance() {
}

S2SInviteGuildAck::S2SInviteGuildAck(const S2SInviteGuildAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SInviteGuildAck::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  playerid_ = 0u;
  invitedid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SInviteGuildAck::~S2SInviteGuildAck() {
  SharedDtor();
}

void S2SInviteGuildAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SInviteGuildAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SInviteGuildAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SInviteGuildAck_descriptor_;
}

const S2SInviteGuildAck& S2SInviteGuildAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SInviteGuildAck* S2SInviteGuildAck::default_instance_ = NULL;

S2SInviteGuildAck* S2SInviteGuildAck::New() const {
  return new S2SInviteGuildAck;
}

void S2SInviteGuildAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    playerid_ = 0u;
    invitedid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SInviteGuildAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_invitedid;
        break;
      }

      // required uint32 invitedid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invitedid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invitedid_)));
          set_has_invitedid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SInviteGuildAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required uint32 invitedid = 3;
  if (has_invitedid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->invitedid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SInviteGuildAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // required uint32 invitedid = 3;
  if (has_invitedid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->invitedid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SInviteGuildAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 invitedid = 3;
    if (has_invitedid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invitedid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SInviteGuildAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SInviteGuildAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SInviteGuildAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SInviteGuildAck::MergeFrom(const S2SInviteGuildAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_invitedid()) {
      set_invitedid(from.invitedid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SInviteGuildAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SInviteGuildAck::CopyFrom(const S2SInviteGuildAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SInviteGuildAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SInviteGuildAck::Swap(S2SInviteGuildAck* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(playerid_, other->playerid_);
    std::swap(invitedid_, other->invitedid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SInviteGuildAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SInviteGuildAck_descriptor_;
  metadata.reflection = S2SInviteGuildAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SApplyGuildReq::kGuildidFieldNumber;
const int S2SApplyGuildReq::kInvitorFieldNumber;
const int S2SApplyGuildReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SApplyGuildReq::S2SApplyGuildReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SApplyGuildReq::InitAsDefaultInstance() {
}

S2SApplyGuildReq::S2SApplyGuildReq(const S2SApplyGuildReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SApplyGuildReq::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  invitor_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SApplyGuildReq::~S2SApplyGuildReq() {
  SharedDtor();
}

void S2SApplyGuildReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SApplyGuildReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SApplyGuildReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SApplyGuildReq_descriptor_;
}

const S2SApplyGuildReq& S2SApplyGuildReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SApplyGuildReq* S2SApplyGuildReq::default_instance_ = NULL;

S2SApplyGuildReq* S2SApplyGuildReq::New() const {
  return new S2SApplyGuildReq;
}

void S2SApplyGuildReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    invitor_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SApplyGuildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_invitor;
        break;
      }

      // required uint32 invitor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invitor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invitor_)));
          set_has_invitor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SApplyGuildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // required uint32 invitor = 2;
  if (has_invitor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->invitor(), output);
  }

  // required uint32 playerid = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SApplyGuildReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // required uint32 invitor = 2;
  if (has_invitor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->invitor(), target);
  }

  // required uint32 playerid = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SApplyGuildReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required uint32 invitor = 2;
    if (has_invitor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invitor());
    }

    // required uint32 playerid = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SApplyGuildReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SApplyGuildReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SApplyGuildReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SApplyGuildReq::MergeFrom(const S2SApplyGuildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_invitor()) {
      set_invitor(from.invitor());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SApplyGuildReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SApplyGuildReq::CopyFrom(const S2SApplyGuildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SApplyGuildReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SApplyGuildReq::Swap(S2SApplyGuildReq* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(invitor_, other->invitor_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SApplyGuildReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SApplyGuildReq_descriptor_;
  metadata.reflection = S2SApplyGuildReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SApplyGuildAck::kPlayeridFieldNumber;
const int S2SApplyGuildAck::kGuildidFieldNumber;
const int S2SApplyGuildAck::kCodeFieldNumber;
#endif  // !_MSC_VER

S2SApplyGuildAck::S2SApplyGuildAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SApplyGuildAck::InitAsDefaultInstance() {
}

S2SApplyGuildAck::S2SApplyGuildAck(const S2SApplyGuildAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SApplyGuildAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SApplyGuildAck::~S2SApplyGuildAck() {
  SharedDtor();
}

void S2SApplyGuildAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SApplyGuildAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SApplyGuildAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SApplyGuildAck_descriptor_;
}

const S2SApplyGuildAck& S2SApplyGuildAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SApplyGuildAck* S2SApplyGuildAck::default_instance_ = NULL;

S2SApplyGuildAck* S2SApplyGuildAck::New() const {
  return new S2SApplyGuildAck;
}

void S2SApplyGuildAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    guildid_ = GOOGLE_ULONGLONG(0);
    code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SApplyGuildAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guildid;
        break;
      }

      // required uint64 guildid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_code;
        break;
      }

      // required uint32 code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SApplyGuildAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint64 guildid = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guildid(), output);
  }

  // required uint32 code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SApplyGuildAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint64 guildid = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guildid(), target);
  }

  // required uint32 code = 3;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SApplyGuildAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint64 guildid = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required uint32 code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SApplyGuildAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SApplyGuildAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SApplyGuildAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SApplyGuildAck::MergeFrom(const S2SApplyGuildAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SApplyGuildAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SApplyGuildAck::CopyFrom(const S2SApplyGuildAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SApplyGuildAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SApplyGuildAck::Swap(S2SApplyGuildAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(guildid_, other->guildid_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SApplyGuildAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SApplyGuildAck_descriptor_;
  metadata.reflection = S2SApplyGuildAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SPlayerGuildChangeReq::kPlayeridFieldNumber;
const int S2SPlayerGuildChangeReq::kGuildidFieldNumber;
const int S2SPlayerGuildChangeReq::kCodeFieldNumber;
#endif  // !_MSC_VER

S2SPlayerGuildChangeReq::S2SPlayerGuildChangeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SPlayerGuildChangeReq::InitAsDefaultInstance() {
}

S2SPlayerGuildChangeReq::S2SPlayerGuildChangeReq(const S2SPlayerGuildChangeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SPlayerGuildChangeReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SPlayerGuildChangeReq::~S2SPlayerGuildChangeReq() {
  SharedDtor();
}

void S2SPlayerGuildChangeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SPlayerGuildChangeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SPlayerGuildChangeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SPlayerGuildChangeReq_descriptor_;
}

const S2SPlayerGuildChangeReq& S2SPlayerGuildChangeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SPlayerGuildChangeReq* S2SPlayerGuildChangeReq::default_instance_ = NULL;

S2SPlayerGuildChangeReq* S2SPlayerGuildChangeReq::New() const {
  return new S2SPlayerGuildChangeReq;
}

void S2SPlayerGuildChangeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    guildid_ = GOOGLE_ULONGLONG(0);
    code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SPlayerGuildChangeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guildid;
        break;
      }

      // required uint64 guildid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_code;
        break;
      }

      // required uint32 code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SPlayerGuildChangeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint64 guildid = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guildid(), output);
  }

  // required uint32 code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SPlayerGuildChangeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint64 guildid = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guildid(), target);
  }

  // required uint32 code = 3;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SPlayerGuildChangeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint64 guildid = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required uint32 code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SPlayerGuildChangeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SPlayerGuildChangeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SPlayerGuildChangeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SPlayerGuildChangeReq::MergeFrom(const S2SPlayerGuildChangeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SPlayerGuildChangeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SPlayerGuildChangeReq::CopyFrom(const S2SPlayerGuildChangeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SPlayerGuildChangeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SPlayerGuildChangeReq::Swap(S2SPlayerGuildChangeReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(guildid_, other->guildid_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SPlayerGuildChangeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SPlayerGuildChangeReq_descriptor_;
  metadata.reflection = S2SPlayerGuildChangeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SExitGuildReq::kGuildidFieldNumber;
const int S2SExitGuildReq::kPlayeridFieldNumber;
const int S2SExitGuildReq::kServeridFieldNumber;
#endif  // !_MSC_VER

S2SExitGuildReq::S2SExitGuildReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SExitGuildReq::InitAsDefaultInstance() {
}

S2SExitGuildReq::S2SExitGuildReq(const S2SExitGuildReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SExitGuildReq::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  playerid_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SExitGuildReq::~S2SExitGuildReq() {
  SharedDtor();
}

void S2SExitGuildReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SExitGuildReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SExitGuildReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SExitGuildReq_descriptor_;
}

const S2SExitGuildReq& S2SExitGuildReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SExitGuildReq* S2SExitGuildReq::default_instance_ = NULL;

S2SExitGuildReq* S2SExitGuildReq::New() const {
  return new S2SExitGuildReq;
}

void S2SExitGuildReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    playerid_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SExitGuildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SExitGuildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SExitGuildReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SExitGuildReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SExitGuildReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SExitGuildReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SExitGuildReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SExitGuildReq::MergeFrom(const S2SExitGuildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SExitGuildReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SExitGuildReq::CopyFrom(const S2SExitGuildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SExitGuildReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SExitGuildReq::Swap(S2SExitGuildReq* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SExitGuildReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SExitGuildReq_descriptor_;
  metadata.reflection = S2SExitGuildReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2STransferMasterReq::kGuildidFieldNumber;
const int S2STransferMasterReq::kPlayeridFieldNumber;
const int S2STransferMasterReq::kNewmasteridFieldNumber;
const int S2STransferMasterReq::kServeridFieldNumber;
#endif  // !_MSC_VER

S2STransferMasterReq::S2STransferMasterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2STransferMasterReq::InitAsDefaultInstance() {
}

S2STransferMasterReq::S2STransferMasterReq(const S2STransferMasterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2STransferMasterReq::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  playerid_ = 0u;
  newmasterid_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2STransferMasterReq::~S2STransferMasterReq() {
  SharedDtor();
}

void S2STransferMasterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2STransferMasterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2STransferMasterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2STransferMasterReq_descriptor_;
}

const S2STransferMasterReq& S2STransferMasterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2STransferMasterReq* S2STransferMasterReq::default_instance_ = NULL;

S2STransferMasterReq* S2STransferMasterReq::New() const {
  return new S2STransferMasterReq;
}

void S2STransferMasterReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    playerid_ = 0u;
    newmasterid_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2STransferMasterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_newmasterid;
        break;
      }

      // required uint32 newmasterid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newmasterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newmasterid_)));
          set_has_newmasterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2STransferMasterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required uint32 newmasterid = 3;
  if (has_newmasterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->newmasterid(), output);
  }

  // required uint32 serverid = 4;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2STransferMasterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // required uint32 newmasterid = 3;
  if (has_newmasterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->newmasterid(), target);
  }

  // required uint32 serverid = 4;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2STransferMasterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 newmasterid = 3;
    if (has_newmasterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newmasterid());
    }

    // required uint32 serverid = 4;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2STransferMasterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2STransferMasterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2STransferMasterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2STransferMasterReq::MergeFrom(const S2STransferMasterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_newmasterid()) {
      set_newmasterid(from.newmasterid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2STransferMasterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2STransferMasterReq::CopyFrom(const S2STransferMasterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2STransferMasterReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2STransferMasterReq::Swap(S2STransferMasterReq* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(playerid_, other->playerid_);
    std::swap(newmasterid_, other->newmasterid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2STransferMasterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2STransferMasterReq_descriptor_;
  metadata.reflection = S2STransferMasterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SReviewApplyReq::kPlayeridFieldNumber;
const int S2SReviewApplyReq::kDealplayeridFieldNumber;
const int S2SReviewApplyReq::kOperatortypeFieldNumber;
const int S2SReviewApplyReq::kGuildidFieldNumber;
const int S2SReviewApplyReq::kServeridFieldNumber;
#endif  // !_MSC_VER

S2SReviewApplyReq::S2SReviewApplyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SReviewApplyReq::InitAsDefaultInstance() {
}

S2SReviewApplyReq::S2SReviewApplyReq(const S2SReviewApplyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SReviewApplyReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  dealplayerid_ = 0u;
  operatortype_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SReviewApplyReq::~S2SReviewApplyReq() {
  SharedDtor();
}

void S2SReviewApplyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SReviewApplyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SReviewApplyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SReviewApplyReq_descriptor_;
}

const S2SReviewApplyReq& S2SReviewApplyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SReviewApplyReq* S2SReviewApplyReq::default_instance_ = NULL;

S2SReviewApplyReq* S2SReviewApplyReq::New() const {
  return new S2SReviewApplyReq;
}

void S2SReviewApplyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    dealplayerid_ = 0u;
    operatortype_ = 0u;
    guildid_ = GOOGLE_ULONGLONG(0);
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SReviewApplyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dealplayerid;
        break;
      }

      // optional uint32 dealplayerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dealplayerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dealplayerid_)));
          set_has_dealplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_operatortype;
        break;
      }

      // required uint32 operatortype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operatortype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operatortype_)));
          set_has_operatortype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_guildid;
        break;
      }

      // required uint64 guildid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SReviewApplyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // optional uint32 dealplayerid = 2;
  if (has_dealplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dealplayerid(), output);
  }

  // required uint32 operatortype = 3;
  if (has_operatortype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->operatortype(), output);
  }

  // required uint64 guildid = 4;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->guildid(), output);
  }

  // required uint32 serverid = 5;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SReviewApplyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // optional uint32 dealplayerid = 2;
  if (has_dealplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dealplayerid(), target);
  }

  // required uint32 operatortype = 3;
  if (has_operatortype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->operatortype(), target);
  }

  // required uint64 guildid = 4;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->guildid(), target);
  }

  // required uint32 serverid = 5;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SReviewApplyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // optional uint32 dealplayerid = 2;
    if (has_dealplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dealplayerid());
    }

    // required uint32 operatortype = 3;
    if (has_operatortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operatortype());
    }

    // required uint64 guildid = 4;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required uint32 serverid = 5;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SReviewApplyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SReviewApplyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SReviewApplyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SReviewApplyReq::MergeFrom(const S2SReviewApplyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_dealplayerid()) {
      set_dealplayerid(from.dealplayerid());
    }
    if (from.has_operatortype()) {
      set_operatortype(from.operatortype());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SReviewApplyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SReviewApplyReq::CopyFrom(const S2SReviewApplyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SReviewApplyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  return true;
}

void S2SReviewApplyReq::Swap(S2SReviewApplyReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(dealplayerid_, other->dealplayerid_);
    std::swap(operatortype_, other->operatortype_);
    std::swap(guildid_, other->guildid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SReviewApplyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SReviewApplyReq_descriptor_;
  metadata.reflection = S2SReviewApplyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SDissolveGuildReq::kPlayeridFieldNumber;
const int S2SDissolveGuildReq::kGuildidFieldNumber;
const int S2SDissolveGuildReq::kServeridFieldNumber;
#endif  // !_MSC_VER

S2SDissolveGuildReq::S2SDissolveGuildReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SDissolveGuildReq::InitAsDefaultInstance() {
}

S2SDissolveGuildReq::S2SDissolveGuildReq(const S2SDissolveGuildReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SDissolveGuildReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SDissolveGuildReq::~S2SDissolveGuildReq() {
  SharedDtor();
}

void S2SDissolveGuildReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SDissolveGuildReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SDissolveGuildReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SDissolveGuildReq_descriptor_;
}

const S2SDissolveGuildReq& S2SDissolveGuildReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SDissolveGuildReq* S2SDissolveGuildReq::default_instance_ = NULL;

S2SDissolveGuildReq* S2SDissolveGuildReq::New() const {
  return new S2SDissolveGuildReq;
}

void S2SDissolveGuildReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    guildid_ = GOOGLE_ULONGLONG(0);
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SDissolveGuildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guildid;
        break;
      }

      // required uint64 guildid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SDissolveGuildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint64 guildid = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guildid(), output);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SDissolveGuildReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint64 guildid = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guildid(), target);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SDissolveGuildReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint64 guildid = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required uint32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SDissolveGuildReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SDissolveGuildReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SDissolveGuildReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SDissolveGuildReq::MergeFrom(const S2SDissolveGuildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SDissolveGuildReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SDissolveGuildReq::CopyFrom(const S2SDissolveGuildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SDissolveGuildReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SDissolveGuildReq::Swap(S2SDissolveGuildReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(guildid_, other->guildid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SDissolveGuildReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SDissolveGuildReq_descriptor_;
  metadata.reflection = S2SDissolveGuildReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SModifyMedalReq::kPlayeridFieldNumber;
const int S2SModifyMedalReq::kGuildidFieldNumber;
const int S2SModifyMedalReq::kServeridFieldNumber;
const int S2SModifyMedalReq::kNewmedalFieldNumber;
#endif  // !_MSC_VER

S2SModifyMedalReq::S2SModifyMedalReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SModifyMedalReq::InitAsDefaultInstance() {
}

S2SModifyMedalReq::S2SModifyMedalReq(const S2SModifyMedalReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SModifyMedalReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  serverid_ = 0u;
  newmedal_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SModifyMedalReq::~S2SModifyMedalReq() {
  SharedDtor();
}

void S2SModifyMedalReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SModifyMedalReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SModifyMedalReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SModifyMedalReq_descriptor_;
}

const S2SModifyMedalReq& S2SModifyMedalReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SModifyMedalReq* S2SModifyMedalReq::default_instance_ = NULL;

S2SModifyMedalReq* S2SModifyMedalReq::New() const {
  return new S2SModifyMedalReq;
}

void S2SModifyMedalReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    guildid_ = GOOGLE_ULONGLONG(0);
    serverid_ = 0u;
    newmedal_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SModifyMedalReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guildid;
        break;
      }

      // required uint64 guildid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_newmedal;
        break;
      }

      // required uint32 newmedal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newmedal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newmedal_)));
          set_has_newmedal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SModifyMedalReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint64 guildid = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guildid(), output);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  // required uint32 newmedal = 4;
  if (has_newmedal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->newmedal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SModifyMedalReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint64 guildid = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guildid(), target);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  // required uint32 newmedal = 4;
  if (has_newmedal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->newmedal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SModifyMedalReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint64 guildid = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required uint32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required uint32 newmedal = 4;
    if (has_newmedal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newmedal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SModifyMedalReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SModifyMedalReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SModifyMedalReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SModifyMedalReq::MergeFrom(const S2SModifyMedalReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_newmedal()) {
      set_newmedal(from.newmedal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SModifyMedalReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SModifyMedalReq::CopyFrom(const S2SModifyMedalReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SModifyMedalReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SModifyMedalReq::Swap(S2SModifyMedalReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(guildid_, other->guildid_);
    std::swap(serverid_, other->serverid_);
    std::swap(newmedal_, other->newmedal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SModifyMedalReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SModifyMedalReq_descriptor_;
  metadata.reflection = S2SModifyMedalReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SQueryGuildListReq::kPlayeridFieldNumber;
const int S2SQueryGuildListReq::kServeridFieldNumber;
const int S2SQueryGuildListReq::kGuildsFieldNumber;
const int S2SQueryGuildListReq::kCursorFieldNumber;
#endif  // !_MSC_VER

S2SQueryGuildListReq::S2SQueryGuildListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SQueryGuildListReq::InitAsDefaultInstance() {
  guilds_ = const_cast< ::KFMsg::PBGuildIdArray*>(&::KFMsg::PBGuildIdArray::default_instance());
}

S2SQueryGuildListReq::S2SQueryGuildListReq(const S2SQueryGuildListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SQueryGuildListReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  serverid_ = 0u;
  guilds_ = NULL;
  cursor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SQueryGuildListReq::~S2SQueryGuildListReq() {
  SharedDtor();
}

void S2SQueryGuildListReq::SharedDtor() {
  if (this != default_instance_) {
    delete guilds_;
  }
}

void S2SQueryGuildListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SQueryGuildListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SQueryGuildListReq_descriptor_;
}

const S2SQueryGuildListReq& S2SQueryGuildListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SQueryGuildListReq* S2SQueryGuildListReq::default_instance_ = NULL;

S2SQueryGuildListReq* S2SQueryGuildListReq::New() const {
  return new S2SQueryGuildListReq;
}

void S2SQueryGuildListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    serverid_ = 0u;
    if (has_guilds()) {
      if (guilds_ != NULL) guilds_->::KFMsg::PBGuildIdArray::Clear();
    }
    cursor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SQueryGuildListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guilds;
        break;
      }

      // optional .KFMsg.PBGuildIdArray guilds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guilds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guilds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cursor;
        break;
      }

      // required uint32 cursor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cursor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cursor_)));
          set_has_cursor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SQueryGuildListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  // optional .KFMsg.PBGuildIdArray guilds = 3;
  if (has_guilds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->guilds(), output);
  }

  // required uint32 cursor = 4;
  if (has_cursor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cursor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SQueryGuildListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  // optional .KFMsg.PBGuildIdArray guilds = 3;
  if (has_guilds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->guilds(), target);
  }

  // required uint32 cursor = 4;
  if (has_cursor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cursor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SQueryGuildListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // optional .KFMsg.PBGuildIdArray guilds = 3;
    if (has_guilds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guilds());
    }

    // required uint32 cursor = 4;
    if (has_cursor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cursor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SQueryGuildListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SQueryGuildListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SQueryGuildListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SQueryGuildListReq::MergeFrom(const S2SQueryGuildListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_guilds()) {
      mutable_guilds()->::KFMsg::PBGuildIdArray::MergeFrom(from.guilds());
    }
    if (from.has_cursor()) {
      set_cursor(from.cursor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SQueryGuildListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryGuildListReq::CopyFrom(const S2SQueryGuildListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryGuildListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void S2SQueryGuildListReq::Swap(S2SQueryGuildListReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(guilds_, other->guilds_);
    std::swap(cursor_, other->cursor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SQueryGuildListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SQueryGuildListReq_descriptor_;
  metadata.reflection = S2SQueryGuildListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SKickMemberReq::kPlayeridFieldNumber;
const int S2SKickMemberReq::kGuildidFieldNumber;
const int S2SKickMemberReq::kToplayeridFieldNumber;
const int S2SKickMemberReq::kServeridFieldNumber;
#endif  // !_MSC_VER

S2SKickMemberReq::S2SKickMemberReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SKickMemberReq::InitAsDefaultInstance() {
}

S2SKickMemberReq::S2SKickMemberReq(const S2SKickMemberReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SKickMemberReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  toplayerid_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SKickMemberReq::~S2SKickMemberReq() {
  SharedDtor();
}

void S2SKickMemberReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SKickMemberReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SKickMemberReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SKickMemberReq_descriptor_;
}

const S2SKickMemberReq& S2SKickMemberReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SKickMemberReq* S2SKickMemberReq::default_instance_ = NULL;

S2SKickMemberReq* S2SKickMemberReq::New() const {
  return new S2SKickMemberReq;
}

void S2SKickMemberReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    guildid_ = GOOGLE_ULONGLONG(0);
    toplayerid_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SKickMemberReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guildid;
        break;
      }

      // required uint64 guildid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_toplayerid;
        break;
      }

      // required uint32 toplayerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toplayerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &toplayerid_)));
          set_has_toplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SKickMemberReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint64 guildid = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guildid(), output);
  }

  // required uint32 toplayerid = 3;
  if (has_toplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->toplayerid(), output);
  }

  // required uint32 serverid = 4;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SKickMemberReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint64 guildid = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guildid(), target);
  }

  // required uint32 toplayerid = 3;
  if (has_toplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->toplayerid(), target);
  }

  // required uint32 serverid = 4;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SKickMemberReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint64 guildid = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required uint32 toplayerid = 3;
    if (has_toplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->toplayerid());
    }

    // required uint32 serverid = 4;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SKickMemberReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SKickMemberReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SKickMemberReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SKickMemberReq::MergeFrom(const S2SKickMemberReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_toplayerid()) {
      set_toplayerid(from.toplayerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SKickMemberReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SKickMemberReq::CopyFrom(const S2SKickMemberReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SKickMemberReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SKickMemberReq::Swap(S2SKickMemberReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(guildid_, other->guildid_);
    std::swap(toplayerid_, other->toplayerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SKickMemberReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SKickMemberReq_descriptor_;
  metadata.reflection = S2SKickMemberReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SLoginQueryGuildReq::kGuildidFieldNumber;
const int S2SLoginQueryGuildReq::kPlayeridFieldNumber;
const int S2SLoginQueryGuildReq::kServeridFieldNumber;
#endif  // !_MSC_VER

S2SLoginQueryGuildReq::S2SLoginQueryGuildReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SLoginQueryGuildReq::InitAsDefaultInstance() {
}

S2SLoginQueryGuildReq::S2SLoginQueryGuildReq(const S2SLoginQueryGuildReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SLoginQueryGuildReq::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  playerid_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SLoginQueryGuildReq::~S2SLoginQueryGuildReq() {
  SharedDtor();
}

void S2SLoginQueryGuildReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SLoginQueryGuildReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SLoginQueryGuildReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SLoginQueryGuildReq_descriptor_;
}

const S2SLoginQueryGuildReq& S2SLoginQueryGuildReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SLoginQueryGuildReq* S2SLoginQueryGuildReq::default_instance_ = NULL;

S2SLoginQueryGuildReq* S2SLoginQueryGuildReq::New() const {
  return new S2SLoginQueryGuildReq;
}

void S2SLoginQueryGuildReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    playerid_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SLoginQueryGuildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SLoginQueryGuildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SLoginQueryGuildReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SLoginQueryGuildReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SLoginQueryGuildReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SLoginQueryGuildReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SLoginQueryGuildReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SLoginQueryGuildReq::MergeFrom(const S2SLoginQueryGuildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SLoginQueryGuildReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SLoginQueryGuildReq::CopyFrom(const S2SLoginQueryGuildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SLoginQueryGuildReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SLoginQueryGuildReq::Swap(S2SLoginQueryGuildReq* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SLoginQueryGuildReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SLoginQueryGuildReq_descriptor_;
  metadata.reflection = S2SLoginQueryGuildReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SLoginQueryGuildAck::kPlayeridFieldNumber;
const int S2SLoginQueryGuildAck::kGuilddataFieldNumber;
const int S2SLoginQueryGuildAck::kShowapplicantFieldNumber;
const int S2SLoginQueryGuildAck::kGuildidFieldNumber;
#endif  // !_MSC_VER

S2SLoginQueryGuildAck::S2SLoginQueryGuildAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SLoginQueryGuildAck::InitAsDefaultInstance() {
  guilddata_ = const_cast< ::KFMsg::PBObject*>(&::KFMsg::PBObject::default_instance());
}

S2SLoginQueryGuildAck::S2SLoginQueryGuildAck(const S2SLoginQueryGuildAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SLoginQueryGuildAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  guilddata_ = NULL;
  showapplicant_ = false;
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SLoginQueryGuildAck::~S2SLoginQueryGuildAck() {
  SharedDtor();
}

void S2SLoginQueryGuildAck::SharedDtor() {
  if (this != default_instance_) {
    delete guilddata_;
  }
}

void S2SLoginQueryGuildAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SLoginQueryGuildAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SLoginQueryGuildAck_descriptor_;
}

const S2SLoginQueryGuildAck& S2SLoginQueryGuildAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SLoginQueryGuildAck* S2SLoginQueryGuildAck::default_instance_ = NULL;

S2SLoginQueryGuildAck* S2SLoginQueryGuildAck::New() const {
  return new S2SLoginQueryGuildAck;
}

void S2SLoginQueryGuildAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_guilddata()) {
      if (guilddata_ != NULL) guilddata_->::KFMsg::PBObject::Clear();
    }
    showapplicant_ = false;
    guildid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SLoginQueryGuildAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guilddata;
        break;
      }

      // required .KFMsg.PBObject guilddata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guilddata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guilddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_showapplicant;
        break;
      }

      // required bool showapplicant = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showapplicant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showapplicant_)));
          set_has_showapplicant();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_guildid;
        break;
      }

      // required uint64 guildid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SLoginQueryGuildAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required .KFMsg.PBObject guilddata = 2;
  if (has_guilddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guilddata(), output);
  }

  // required bool showapplicant = 3;
  if (has_showapplicant()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->showapplicant(), output);
  }

  // required uint64 guildid = 4;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SLoginQueryGuildAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required .KFMsg.PBObject guilddata = 2;
  if (has_guilddata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guilddata(), target);
  }

  // required bool showapplicant = 3;
  if (has_showapplicant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->showapplicant(), target);
  }

  // required uint64 guildid = 4;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SLoginQueryGuildAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required .KFMsg.PBObject guilddata = 2;
    if (has_guilddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guilddata());
    }

    // required bool showapplicant = 3;
    if (has_showapplicant()) {
      total_size += 1 + 1;
    }

    // required uint64 guildid = 4;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SLoginQueryGuildAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SLoginQueryGuildAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SLoginQueryGuildAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SLoginQueryGuildAck::MergeFrom(const S2SLoginQueryGuildAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_guilddata()) {
      mutable_guilddata()->::KFMsg::PBObject::MergeFrom(from.guilddata());
    }
    if (from.has_showapplicant()) {
      set_showapplicant(from.showapplicant());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SLoginQueryGuildAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SLoginQueryGuildAck::CopyFrom(const S2SLoginQueryGuildAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SLoginQueryGuildAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SLoginQueryGuildAck::Swap(S2SLoginQueryGuildAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(guilddata_, other->guilddata_);
    std::swap(showapplicant_, other->showapplicant_);
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SLoginQueryGuildAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SLoginQueryGuildAck_descriptor_;
  metadata.reflection = S2SLoginQueryGuildAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SUpdateGuildDataReq::kGuildidFieldNumber;
const int S2SUpdateGuildDataReq::kPlayeridFieldNumber;
const int S2SUpdateGuildDataReq::kPbdataFieldNumber;
#endif  // !_MSC_VER

S2SUpdateGuildDataReq::S2SUpdateGuildDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SUpdateGuildDataReq::InitAsDefaultInstance() {
}

S2SUpdateGuildDataReq::S2SUpdateGuildDataReq(const S2SUpdateGuildDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SUpdateGuildDataReq::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SUpdateGuildDataReq::~S2SUpdateGuildDataReq() {
  SharedDtor();
}

void S2SUpdateGuildDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SUpdateGuildDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SUpdateGuildDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SUpdateGuildDataReq_descriptor_;
}

const S2SUpdateGuildDataReq& S2SUpdateGuildDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SUpdateGuildDataReq* S2SUpdateGuildDataReq::default_instance_ = NULL;

S2SUpdateGuildDataReq* S2SUpdateGuildDataReq::New() const {
  return new S2SUpdateGuildDataReq;
}

void S2SUpdateGuildDataReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    playerid_ = 0u;
  }
  pbdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SUpdateGuildDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pbdata;
        break;
      }

      // repeated .KFMsg.PBString pbdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pbdata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SUpdateGuildDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // repeated .KFMsg.PBString pbdata = 3;
  for (int i = 0; i < this->pbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pbdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SUpdateGuildDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // repeated .KFMsg.PBString pbdata = 3;
  for (int i = 0; i < this->pbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pbdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SUpdateGuildDataReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  // repeated .KFMsg.PBString pbdata = 3;
  total_size += 1 * this->pbdata_size();
  for (int i = 0; i < this->pbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SUpdateGuildDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SUpdateGuildDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SUpdateGuildDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SUpdateGuildDataReq::MergeFrom(const S2SUpdateGuildDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbdata_.MergeFrom(from.pbdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SUpdateGuildDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SUpdateGuildDataReq::CopyFrom(const S2SUpdateGuildDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SUpdateGuildDataReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SUpdateGuildDataReq::Swap(S2SUpdateGuildDataReq* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(playerid_, other->playerid_);
    pbdata_.Swap(&other->pbdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SUpdateGuildDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SUpdateGuildDataReq_descriptor_;
  metadata.reflection = S2SUpdateGuildDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SUpgradeGuildReq::kGuildidFieldNumber;
const int S2SUpgradeGuildReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SUpgradeGuildReq::S2SUpgradeGuildReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SUpgradeGuildReq::InitAsDefaultInstance() {
}

S2SUpgradeGuildReq::S2SUpgradeGuildReq(const S2SUpgradeGuildReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SUpgradeGuildReq::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SUpgradeGuildReq::~S2SUpgradeGuildReq() {
  SharedDtor();
}

void S2SUpgradeGuildReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SUpgradeGuildReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SUpgradeGuildReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SUpgradeGuildReq_descriptor_;
}

const S2SUpgradeGuildReq& S2SUpgradeGuildReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SUpgradeGuildReq* S2SUpgradeGuildReq::default_instance_ = NULL;

S2SUpgradeGuildReq* S2SUpgradeGuildReq::New() const {
  return new S2SUpgradeGuildReq;
}

void S2SUpgradeGuildReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SUpgradeGuildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SUpgradeGuildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SUpgradeGuildReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SUpgradeGuildReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SUpgradeGuildReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SUpgradeGuildReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SUpgradeGuildReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SUpgradeGuildReq::MergeFrom(const S2SUpgradeGuildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SUpgradeGuildReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SUpgradeGuildReq::CopyFrom(const S2SUpgradeGuildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SUpgradeGuildReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SUpgradeGuildReq::Swap(S2SUpgradeGuildReq* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SUpgradeGuildReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SUpgradeGuildReq_descriptor_;
  metadata.reflection = S2SUpgradeGuildReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SUpgradeGuildAck::kPlayeridFieldNumber;
const int S2SUpgradeGuildAck::kLevelFieldNumber;
const int S2SUpgradeGuildAck::kCodeFieldNumber;
#endif  // !_MSC_VER

S2SUpgradeGuildAck::S2SUpgradeGuildAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SUpgradeGuildAck::InitAsDefaultInstance() {
}

S2SUpgradeGuildAck::S2SUpgradeGuildAck(const S2SUpgradeGuildAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SUpgradeGuildAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  level_ = 0u;
  code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SUpgradeGuildAck::~S2SUpgradeGuildAck() {
  SharedDtor();
}

void S2SUpgradeGuildAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SUpgradeGuildAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SUpgradeGuildAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SUpgradeGuildAck_descriptor_;
}

const S2SUpgradeGuildAck& S2SUpgradeGuildAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SUpgradeGuildAck* S2SUpgradeGuildAck::default_instance_ = NULL;

S2SUpgradeGuildAck* S2SUpgradeGuildAck::New() const {
  return new S2SUpgradeGuildAck;
}

void S2SUpgradeGuildAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    level_ = 0u;
    code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SUpgradeGuildAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_code;
        break;
      }

      // required uint32 code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SUpgradeGuildAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SUpgradeGuildAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 code = 3;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SUpgradeGuildAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SUpgradeGuildAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SUpgradeGuildAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SUpgradeGuildAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SUpgradeGuildAck::MergeFrom(const S2SUpgradeGuildAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SUpgradeGuildAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SUpgradeGuildAck::CopyFrom(const S2SUpgradeGuildAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SUpgradeGuildAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SUpgradeGuildAck::Swap(S2SUpgradeGuildAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(level_, other->level_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SUpgradeGuildAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SUpgradeGuildAck_descriptor_;
  metadata.reflection = S2SUpgradeGuildAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SAppointGuildMemberReq::kPlayeridFieldNumber;
const int S2SAppointGuildMemberReq::kGuildidFieldNumber;
const int S2SAppointGuildMemberReq::kToplayeridFieldNumber;
const int S2SAppointGuildMemberReq::kTitleFieldNumber;
const int S2SAppointGuildMemberReq::kServeridFieldNumber;
#endif  // !_MSC_VER

S2SAppointGuildMemberReq::S2SAppointGuildMemberReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SAppointGuildMemberReq::InitAsDefaultInstance() {
}

S2SAppointGuildMemberReq::S2SAppointGuildMemberReq(const S2SAppointGuildMemberReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SAppointGuildMemberReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  toplayerid_ = 0u;
  title_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SAppointGuildMemberReq::~S2SAppointGuildMemberReq() {
  SharedDtor();
}

void S2SAppointGuildMemberReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SAppointGuildMemberReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SAppointGuildMemberReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SAppointGuildMemberReq_descriptor_;
}

const S2SAppointGuildMemberReq& S2SAppointGuildMemberReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SAppointGuildMemberReq* S2SAppointGuildMemberReq::default_instance_ = NULL;

S2SAppointGuildMemberReq* S2SAppointGuildMemberReq::New() const {
  return new S2SAppointGuildMemberReq;
}

void S2SAppointGuildMemberReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    guildid_ = GOOGLE_ULONGLONG(0);
    toplayerid_ = 0u;
    title_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SAppointGuildMemberReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guildid;
        break;
      }

      // required uint64 guildid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_toplayerid;
        break;
      }

      // required uint32 toplayerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toplayerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &toplayerid_)));
          set_has_toplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_title;
        break;
      }

      // required uint32 title = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SAppointGuildMemberReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint64 guildid = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guildid(), output);
  }

  // required uint32 toplayerid = 3;
  if (has_toplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->toplayerid(), output);
  }

  // required uint32 title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->title(), output);
  }

  // required uint32 serverid = 5;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SAppointGuildMemberReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint64 guildid = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guildid(), target);
  }

  // required uint32 toplayerid = 3;
  if (has_toplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->toplayerid(), target);
  }

  // required uint32 title = 4;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->title(), target);
  }

  // required uint32 serverid = 5;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SAppointGuildMemberReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint64 guildid = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required uint32 toplayerid = 3;
    if (has_toplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->toplayerid());
    }

    // required uint32 title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->title());
    }

    // required uint32 serverid = 5;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SAppointGuildMemberReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SAppointGuildMemberReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SAppointGuildMemberReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SAppointGuildMemberReq::MergeFrom(const S2SAppointGuildMemberReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_toplayerid()) {
      set_toplayerid(from.toplayerid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SAppointGuildMemberReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SAppointGuildMemberReq::CopyFrom(const S2SAppointGuildMemberReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SAppointGuildMemberReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2SAppointGuildMemberReq::Swap(S2SAppointGuildMemberReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(guildid_, other->guildid_);
    std::swap(toplayerid_, other->toplayerid_);
    std::swap(title_, other->title_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SAppointGuildMemberReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SAppointGuildMemberReq_descriptor_;
  metadata.reflection = S2SAppointGuildMemberReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SSearchGuildByNameReq::kGuildnameFieldNumber;
const int S2SSearchGuildByNameReq::kServeridFieldNumber;
const int S2SSearchGuildByNameReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SSearchGuildByNameReq::S2SSearchGuildByNameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SSearchGuildByNameReq::InitAsDefaultInstance() {
}

S2SSearchGuildByNameReq::S2SSearchGuildByNameReq(const S2SSearchGuildByNameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SSearchGuildByNameReq::SharedCtor() {
  _cached_size_ = 0;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SSearchGuildByNameReq::~S2SSearchGuildByNameReq() {
  SharedDtor();
}

void S2SSearchGuildByNameReq::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void S2SSearchGuildByNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SSearchGuildByNameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SSearchGuildByNameReq_descriptor_;
}

const S2SSearchGuildByNameReq& S2SSearchGuildByNameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SSearchGuildByNameReq* S2SSearchGuildByNameReq::default_instance_ = NULL;

S2SSearchGuildByNameReq* S2SSearchGuildByNameReq::New() const {
  return new S2SSearchGuildByNameReq;
}

void S2SSearchGuildByNameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    serverid_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SSearchGuildByNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string guildname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SSearchGuildByNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string guildname = 1;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guildname(), output);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  // required uint32 playerid = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SSearchGuildByNameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string guildname = 1;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guildname(), target);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  // required uint32 playerid = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SSearchGuildByNameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string guildname = 1;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // required uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required uint32 playerid = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SSearchGuildByNameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SSearchGuildByNameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SSearchGuildByNameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SSearchGuildByNameReq::MergeFrom(const S2SSearchGuildByNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SSearchGuildByNameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SSearchGuildByNameReq::CopyFrom(const S2SSearchGuildByNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SSearchGuildByNameReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SSearchGuildByNameReq::Swap(S2SSearchGuildByNameReq* other) {
  if (other != this) {
    std::swap(guildname_, other->guildname_);
    std::swap(serverid_, other->serverid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SSearchGuildByNameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SSearchGuildByNameReq_descriptor_;
  metadata.reflection = S2SSearchGuildByNameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SSetGuildSwitchReq::kPlayeridFieldNumber;
const int S2SSetGuildSwitchReq::kGuildidFieldNumber;
const int S2SSetGuildSwitchReq::kTypeFieldNumber;
const int S2SSetGuildSwitchReq::kFlagFieldNumber;
const int S2SSetGuildSwitchReq::kServeridFieldNumber;
#endif  // !_MSC_VER

S2SSetGuildSwitchReq::S2SSetGuildSwitchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SSetGuildSwitchReq::InitAsDefaultInstance() {
}

S2SSetGuildSwitchReq::S2SSetGuildSwitchReq(const S2SSetGuildSwitchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SSetGuildSwitchReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SSetGuildSwitchReq::~S2SSetGuildSwitchReq() {
  SharedDtor();
}

void S2SSetGuildSwitchReq::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void S2SSetGuildSwitchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SSetGuildSwitchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SSetGuildSwitchReq_descriptor_;
}

const S2SSetGuildSwitchReq& S2SSetGuildSwitchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SSetGuildSwitchReq* S2SSetGuildSwitchReq::default_instance_ = NULL;

S2SSetGuildSwitchReq* S2SSetGuildSwitchReq::New() const {
  return new S2SSetGuildSwitchReq;
}

void S2SSetGuildSwitchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    flag_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SSetGuildSwitchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guildid;
        break;
      }

      // required uint64 guildid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // required string type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }

      // required uint32 flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SSetGuildSwitchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint64 guildid = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guildid(), output);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->type(), output);
  }

  // required uint32 flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flag(), output);
  }

  // required uint32 serverid = 5;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SSetGuildSwitchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint64 guildid = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guildid(), target);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // required uint32 flag = 4;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flag(), target);
  }

  // required uint32 serverid = 5;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SSetGuildSwitchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint64 guildid = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required uint32 flag = 4;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // required uint32 serverid = 5;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SSetGuildSwitchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SSetGuildSwitchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SSetGuildSwitchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SSetGuildSwitchReq::MergeFrom(const S2SSetGuildSwitchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SSetGuildSwitchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SSetGuildSwitchReq::CopyFrom(const S2SSetGuildSwitchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SSetGuildSwitchReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2SSetGuildSwitchReq::Swap(S2SSetGuildSwitchReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(guildid_, other->guildid_);
    std::swap(type_, other->type_);
    std::swap(flag_, other->flag_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SSetGuildSwitchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SSetGuildSwitchReq_descriptor_;
  metadata.reflection = S2SSetGuildSwitchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SLoginQueryGuildidReq::kPlayeridFieldNumber;
const int S2SLoginQueryGuildidReq::kServeridFieldNumber;
#endif  // !_MSC_VER

S2SLoginQueryGuildidReq::S2SLoginQueryGuildidReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SLoginQueryGuildidReq::InitAsDefaultInstance() {
}

S2SLoginQueryGuildidReq::S2SLoginQueryGuildidReq(const S2SLoginQueryGuildidReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SLoginQueryGuildidReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SLoginQueryGuildidReq::~S2SLoginQueryGuildidReq() {
  SharedDtor();
}

void S2SLoginQueryGuildidReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SLoginQueryGuildidReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SLoginQueryGuildidReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SLoginQueryGuildidReq_descriptor_;
}

const S2SLoginQueryGuildidReq& S2SLoginQueryGuildidReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SLoginQueryGuildidReq* S2SLoginQueryGuildidReq::default_instance_ = NULL;

S2SLoginQueryGuildidReq* S2SLoginQueryGuildidReq::New() const {
  return new S2SLoginQueryGuildidReq;
}

void S2SLoginQueryGuildidReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SLoginQueryGuildidReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SLoginQueryGuildidReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SLoginQueryGuildidReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SLoginQueryGuildidReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SLoginQueryGuildidReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SLoginQueryGuildidReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SLoginQueryGuildidReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SLoginQueryGuildidReq::MergeFrom(const S2SLoginQueryGuildidReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SLoginQueryGuildidReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SLoginQueryGuildidReq::CopyFrom(const S2SLoginQueryGuildidReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SLoginQueryGuildidReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SLoginQueryGuildidReq::Swap(S2SLoginQueryGuildidReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SLoginQueryGuildidReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SLoginQueryGuildidReq_descriptor_;
  metadata.reflection = S2SLoginQueryGuildidReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SLoginQueryGuildidAck::kPlayeridFieldNumber;
const int S2SLoginQueryGuildidAck::kGuildidFieldNumber;
#endif  // !_MSC_VER

S2SLoginQueryGuildidAck::S2SLoginQueryGuildidAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SLoginQueryGuildidAck::InitAsDefaultInstance() {
}

S2SLoginQueryGuildidAck::S2SLoginQueryGuildidAck(const S2SLoginQueryGuildidAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SLoginQueryGuildidAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SLoginQueryGuildidAck::~S2SLoginQueryGuildidAck() {
  SharedDtor();
}

void S2SLoginQueryGuildidAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SLoginQueryGuildidAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SLoginQueryGuildidAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SLoginQueryGuildidAck_descriptor_;
}

const S2SLoginQueryGuildidAck& S2SLoginQueryGuildidAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SLoginQueryGuildidAck* S2SLoginQueryGuildidAck::default_instance_ = NULL;

S2SLoginQueryGuildidAck* S2SLoginQueryGuildidAck::New() const {
  return new S2SLoginQueryGuildidAck;
}

void S2SLoginQueryGuildidAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    guildid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SLoginQueryGuildidAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guildid;
        break;
      }

      // required uint64 guildid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SLoginQueryGuildidAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint64 guildid = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SLoginQueryGuildidAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint64 guildid = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SLoginQueryGuildidAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint64 guildid = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SLoginQueryGuildidAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SLoginQueryGuildidAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SLoginQueryGuildidAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SLoginQueryGuildidAck::MergeFrom(const S2SLoginQueryGuildidAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SLoginQueryGuildidAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SLoginQueryGuildidAck::CopyFrom(const S2SLoginQueryGuildidAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SLoginQueryGuildidAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SLoginQueryGuildidAck::Swap(S2SLoginQueryGuildidAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SLoginQueryGuildidAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SLoginQueryGuildidAck_descriptor_;
  metadata.reflection = S2SLoginQueryGuildidAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SQueryGuildLogReq::kGuildidFieldNumber;
const int S2SQueryGuildLogReq::kPlayeridFieldNumber;
const int S2SQueryGuildLogReq::kServeridFieldNumber;
const int S2SQueryGuildLogReq::kBeginposFieldNumber;
const int S2SQueryGuildLogReq::kEndposFieldNumber;
const int S2SQueryGuildLogReq::kPageFieldNumber;
#endif  // !_MSC_VER

S2SQueryGuildLogReq::S2SQueryGuildLogReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SQueryGuildLogReq::InitAsDefaultInstance() {
}

S2SQueryGuildLogReq::S2SQueryGuildLogReq(const S2SQueryGuildLogReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SQueryGuildLogReq::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  playerid_ = 0u;
  serverid_ = 0u;
  beginpos_ = 0u;
  endpos_ = 0u;
  page_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SQueryGuildLogReq::~S2SQueryGuildLogReq() {
  SharedDtor();
}

void S2SQueryGuildLogReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SQueryGuildLogReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SQueryGuildLogReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SQueryGuildLogReq_descriptor_;
}

const S2SQueryGuildLogReq& S2SQueryGuildLogReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SQueryGuildLogReq* S2SQueryGuildLogReq::default_instance_ = NULL;

S2SQueryGuildLogReq* S2SQueryGuildLogReq::New() const {
  return new S2SQueryGuildLogReq;
}

void S2SQueryGuildLogReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    playerid_ = 0u;
    serverid_ = 0u;
    beginpos_ = 0u;
    endpos_ = 0u;
    page_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SQueryGuildLogReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_beginpos;
        break;
      }

      // required uint32 beginpos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beginpos_)));
          set_has_beginpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_endpos;
        break;
      }

      // required uint32 endpos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endpos_)));
          set_has_endpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_page;
        break;
      }

      // required uint32 page = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SQueryGuildLogReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  // required uint32 beginpos = 4;
  if (has_beginpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->beginpos(), output);
  }

  // required uint32 endpos = 5;
  if (has_endpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->endpos(), output);
  }

  // required uint32 page = 6;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->page(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SQueryGuildLogReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  // required uint32 beginpos = 4;
  if (has_beginpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->beginpos(), target);
  }

  // required uint32 endpos = 5;
  if (has_endpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->endpos(), target);
  }

  // required uint32 page = 6;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->page(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SQueryGuildLogReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required uint32 beginpos = 4;
    if (has_beginpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beginpos());
    }

    // required uint32 endpos = 5;
    if (has_endpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endpos());
    }

    // required uint32 page = 6;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SQueryGuildLogReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SQueryGuildLogReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SQueryGuildLogReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SQueryGuildLogReq::MergeFrom(const S2SQueryGuildLogReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_beginpos()) {
      set_beginpos(from.beginpos());
    }
    if (from.has_endpos()) {
      set_endpos(from.endpos());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SQueryGuildLogReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryGuildLogReq::CopyFrom(const S2SQueryGuildLogReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryGuildLogReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void S2SQueryGuildLogReq::Swap(S2SQueryGuildLogReq* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(beginpos_, other->beginpos_);
    std::swap(endpos_, other->endpos_);
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SQueryGuildLogReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SQueryGuildLogReq_descriptor_;
  metadata.reflection = S2SQueryGuildLogReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SAddGuildActivenessReq::kGuildidFieldNumber;
const int S2SAddGuildActivenessReq::kPlayeridFieldNumber;
const int S2SAddGuildActivenessReq::kActivenessFieldNumber;
#endif  // !_MSC_VER

S2SAddGuildActivenessReq::S2SAddGuildActivenessReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SAddGuildActivenessReq::InitAsDefaultInstance() {
}

S2SAddGuildActivenessReq::S2SAddGuildActivenessReq(const S2SAddGuildActivenessReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SAddGuildActivenessReq::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  playerid_ = 0u;
  activeness_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SAddGuildActivenessReq::~S2SAddGuildActivenessReq() {
  SharedDtor();
}

void S2SAddGuildActivenessReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SAddGuildActivenessReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SAddGuildActivenessReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SAddGuildActivenessReq_descriptor_;
}

const S2SAddGuildActivenessReq& S2SAddGuildActivenessReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SAddGuildActivenessReq* S2SAddGuildActivenessReq::default_instance_ = NULL;

S2SAddGuildActivenessReq* S2SAddGuildActivenessReq::New() const {
  return new S2SAddGuildActivenessReq;
}

void S2SAddGuildActivenessReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    playerid_ = 0u;
    activeness_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SAddGuildActivenessReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_activeness;
        break;
      }

      // required uint32 activeness = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activeness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activeness_)));
          set_has_activeness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SAddGuildActivenessReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required uint32 activeness = 3;
  if (has_activeness()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->activeness(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SAddGuildActivenessReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // required uint32 activeness = 3;
  if (has_activeness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->activeness(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SAddGuildActivenessReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 activeness = 3;
    if (has_activeness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activeness());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SAddGuildActivenessReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SAddGuildActivenessReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SAddGuildActivenessReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SAddGuildActivenessReq::MergeFrom(const S2SAddGuildActivenessReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_activeness()) {
      set_activeness(from.activeness());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SAddGuildActivenessReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SAddGuildActivenessReq::CopyFrom(const S2SAddGuildActivenessReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SAddGuildActivenessReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SAddGuildActivenessReq::Swap(S2SAddGuildActivenessReq* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(playerid_, other->playerid_);
    std::swap(activeness_, other->activeness_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SAddGuildActivenessReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SAddGuildActivenessReq_descriptor_;
  metadata.reflection = S2SAddGuildActivenessReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SGMAddMailReq::kPlayeridsFieldNumber;
const int S2SGMAddMailReq::kMailtypeFieldNumber;
const int S2SGMAddMailReq::kPbmailFieldNumber;
#endif  // !_MSC_VER

S2SGMAddMailReq::S2SGMAddMailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SGMAddMailReq::InitAsDefaultInstance() {
  playerids_ = const_cast< ::KFMsg::PBPlayerIds*>(&::KFMsg::PBPlayerIds::default_instance());
  pbmail_ = const_cast< ::KFMsg::PBMail*>(&::KFMsg::PBMail::default_instance());
}

S2SGMAddMailReq::S2SGMAddMailReq(const S2SGMAddMailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SGMAddMailReq::SharedCtor() {
  _cached_size_ = 0;
  playerids_ = NULL;
  mailtype_ = 0u;
  pbmail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SGMAddMailReq::~S2SGMAddMailReq() {
  SharedDtor();
}

void S2SGMAddMailReq::SharedDtor() {
  if (this != default_instance_) {
    delete playerids_;
    delete pbmail_;
  }
}

void S2SGMAddMailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SGMAddMailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SGMAddMailReq_descriptor_;
}

const S2SGMAddMailReq& S2SGMAddMailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SGMAddMailReq* S2SGMAddMailReq::default_instance_ = NULL;

S2SGMAddMailReq* S2SGMAddMailReq::New() const {
  return new S2SGMAddMailReq;
}

void S2SGMAddMailReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerids()) {
      if (playerids_ != NULL) playerids_->::KFMsg::PBPlayerIds::Clear();
    }
    mailtype_ = 0u;
    if (has_pbmail()) {
      if (pbmail_ != NULL) pbmail_->::KFMsg::PBMail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SGMAddMailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .KFMsg.PBPlayerIds playerids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mailtype;
        break;
      }

      // required uint32 mailtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailtype_)));
          set_has_mailtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pbmail;
        break;
      }

      // required .KFMsg.PBMail pbmail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbmail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbmail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SGMAddMailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .KFMsg.PBPlayerIds playerids = 1;
  if (has_playerids()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerids(), output);
  }

  // required uint32 mailtype = 2;
  if (has_mailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mailtype(), output);
  }

  // required .KFMsg.PBMail pbmail = 3;
  if (has_pbmail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pbmail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SGMAddMailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .KFMsg.PBPlayerIds playerids = 1;
  if (has_playerids()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerids(), target);
  }

  // required uint32 mailtype = 2;
  if (has_mailtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mailtype(), target);
  }

  // required .KFMsg.PBMail pbmail = 3;
  if (has_pbmail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pbmail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SGMAddMailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .KFMsg.PBPlayerIds playerids = 1;
    if (has_playerids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerids());
    }

    // required uint32 mailtype = 2;
    if (has_mailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailtype());
    }

    // required .KFMsg.PBMail pbmail = 3;
    if (has_pbmail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbmail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SGMAddMailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SGMAddMailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SGMAddMailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SGMAddMailReq::MergeFrom(const S2SGMAddMailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerids()) {
      mutable_playerids()->::KFMsg::PBPlayerIds::MergeFrom(from.playerids());
    }
    if (from.has_mailtype()) {
      set_mailtype(from.mailtype());
    }
    if (from.has_pbmail()) {
      mutable_pbmail()->::KFMsg::PBMail::MergeFrom(from.pbmail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SGMAddMailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SGMAddMailReq::CopyFrom(const S2SGMAddMailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SGMAddMailReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void S2SGMAddMailReq::Swap(S2SGMAddMailReq* other) {
  if (other != this) {
    std::swap(playerids_, other->playerids_);
    std::swap(mailtype_, other->mailtype_);
    std::swap(pbmail_, other->pbmail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SGMAddMailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SGMAddMailReq_descriptor_;
  metadata.reflection = S2SGMAddMailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SSendChatToServer::kChatinfoFieldNumber;
const int S2SSendChatToServer::kIsvoiceFieldNumber;
const int S2SSendChatToServer::kPlayernameFieldNumber;
const int S2SSendChatToServer::kPlayeridFieldNumber;
const int S2SSendChatToServer::kPlayericonFieldNumber;
const int S2SSendChatToServer::kPlayergradeFieldNumber;
const int S2SSendChatToServer::kPlayersexFieldNumber;
const int S2SSendChatToServer::kPlayericonboxFieldNumber;
const int S2SSendChatToServer::kPlayerserveridFieldNumber;
#endif  // !_MSC_VER

S2SSendChatToServer::S2SSendChatToServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SSendChatToServer::InitAsDefaultInstance() {
}

S2SSendChatToServer::S2SSendChatToServer(const S2SSendChatToServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SSendChatToServer::SharedCtor() {
  _cached_size_ = 0;
  chatinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isvoice_ = 0u;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = 0u;
  playericon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playergrade_ = 0u;
  playersex_ = 0u;
  playericonbox_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerserverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SSendChatToServer::~S2SSendChatToServer() {
  SharedDtor();
}

void S2SSendChatToServer::SharedDtor() {
  if (chatinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete chatinfo_;
  }
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playericon_ != &::google::protobuf::internal::kEmptyString) {
    delete playericon_;
  }
  if (playericonbox_ != &::google::protobuf::internal::kEmptyString) {
    delete playericonbox_;
  }
  if (this != default_instance_) {
  }
}

void S2SSendChatToServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SSendChatToServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SSendChatToServer_descriptor_;
}

const S2SSendChatToServer& S2SSendChatToServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFServerMessage_2eproto();
  return *default_instance_;
}

S2SSendChatToServer* S2SSendChatToServer::default_instance_ = NULL;

S2SSendChatToServer* S2SSendChatToServer::New() const {
  return new S2SSendChatToServer;
}

void S2SSendChatToServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chatinfo()) {
      if (chatinfo_ != &::google::protobuf::internal::kEmptyString) {
        chatinfo_->clear();
      }
    }
    isvoice_ = 0u;
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    playerid_ = 0u;
    if (has_playericon()) {
      if (playericon_ != &::google::protobuf::internal::kEmptyString) {
        playericon_->clear();
      }
    }
    playergrade_ = 0u;
    playersex_ = 0u;
    if (has_playericonbox()) {
      if (playericonbox_ != &::google::protobuf::internal::kEmptyString) {
        playericonbox_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    playerserverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SSendChatToServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string chatinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chatinfo().data(), this->chatinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isvoice;
        break;
      }

      // required uint32 isvoice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isvoice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isvoice_)));
          set_has_isvoice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playername;
        break;
      }

      // required string playername = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_playericon;
        break;
      }

      // required string playericon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playericon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playericon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playericon().data(), this->playericon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_playergrade;
        break;
      }

      // required uint32 playergrade = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playergrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playergrade_)));
          set_has_playergrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_playersex;
        break;
      }

      // required uint32 playersex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playersex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playersex_)));
          set_has_playersex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_playericonbox;
        break;
      }

      // required string playericonbox = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playericonbox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playericonbox()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playericonbox().data(), this->playericonbox().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_playerserverid;
        break;
      }

      // required uint32 playerserverid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerserverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerserverid_)));
          set_has_playerserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SSendChatToServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string chatinfo = 1;
  if (has_chatinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatinfo().data(), this->chatinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->chatinfo(), output);
  }

  // required uint32 isvoice = 2;
  if (has_isvoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->isvoice(), output);
  }

  // required string playername = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->playername(), output);
  }

  // required uint32 playerid = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->playerid(), output);
  }

  // required string playericon = 5;
  if (has_playericon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playericon().data(), this->playericon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->playericon(), output);
  }

  // required uint32 playergrade = 6;
  if (has_playergrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->playergrade(), output);
  }

  // required uint32 playersex = 7;
  if (has_playersex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->playersex(), output);
  }

  // required string playericonbox = 8;
  if (has_playericonbox()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playericonbox().data(), this->playericonbox().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->playericonbox(), output);
  }

  // required uint32 playerserverid = 9;
  if (has_playerserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->playerserverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SSendChatToServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string chatinfo = 1;
  if (has_chatinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatinfo().data(), this->chatinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chatinfo(), target);
  }

  // required uint32 isvoice = 2;
  if (has_isvoice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->isvoice(), target);
  }

  // required string playername = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playername(), target);
  }

  // required uint32 playerid = 4;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->playerid(), target);
  }

  // required string playericon = 5;
  if (has_playericon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playericon().data(), this->playericon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->playericon(), target);
  }

  // required uint32 playergrade = 6;
  if (has_playergrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->playergrade(), target);
  }

  // required uint32 playersex = 7;
  if (has_playersex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->playersex(), target);
  }

  // required string playericonbox = 8;
  if (has_playericonbox()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playericonbox().data(), this->playericonbox().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->playericonbox(), target);
  }

  // required uint32 playerserverid = 9;
  if (has_playerserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->playerserverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SSendChatToServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string chatinfo = 1;
    if (has_chatinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatinfo());
    }

    // required uint32 isvoice = 2;
    if (has_isvoice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isvoice());
    }

    // required string playername = 3;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // required uint32 playerid = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required string playericon = 5;
    if (has_playericon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playericon());
    }

    // required uint32 playergrade = 6;
    if (has_playergrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playergrade());
    }

    // required uint32 playersex = 7;
    if (has_playersex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playersex());
    }

    // required string playericonbox = 8;
    if (has_playericonbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playericonbox());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 playerserverid = 9;
    if (has_playerserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerserverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SSendChatToServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SSendChatToServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SSendChatToServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SSendChatToServer::MergeFrom(const S2SSendChatToServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chatinfo()) {
      set_chatinfo(from.chatinfo());
    }
    if (from.has_isvoice()) {
      set_isvoice(from.isvoice());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playericon()) {
      set_playericon(from.playericon());
    }
    if (from.has_playergrade()) {
      set_playergrade(from.playergrade());
    }
    if (from.has_playersex()) {
      set_playersex(from.playersex());
    }
    if (from.has_playericonbox()) {
      set_playericonbox(from.playericonbox());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_playerserverid()) {
      set_playerserverid(from.playerserverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SSendChatToServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SSendChatToServer::CopyFrom(const S2SSendChatToServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SSendChatToServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void S2SSendChatToServer::Swap(S2SSendChatToServer* other) {
  if (other != this) {
    std::swap(chatinfo_, other->chatinfo_);
    std::swap(isvoice_, other->isvoice_);
    std::swap(playername_, other->playername_);
    std::swap(playerid_, other->playerid_);
    std::swap(playericon_, other->playericon_);
    std::swap(playergrade_, other->playergrade_);
    std::swap(playersex_, other->playersex_);
    std::swap(playericonbox_, other->playericonbox_);
    std::swap(playerserverid_, other->playerserverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SSendChatToServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SSendChatToServer_descriptor_;
  metadata.reflection = S2SSendChatToServer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

// @@protoc_insertion_point(global_scope)
