// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFLogMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "KFLogMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KFMsg {

namespace {

const ::google::protobuf::Descriptor* S2SLogReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SLogReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LogProtocol_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_KFLogMessage_2eproto() {
  protobuf_AddDesc_KFLogMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "KFLogMessage.proto");
  GOOGLE_CHECK(file != NULL);
  S2SLogReq_descriptor_ = file->message_type(0);
  static const int S2SLogReq_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLogReq, log_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLogReq, log_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLogReq, zone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLogReq, app_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLogReq, app_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLogReq, app_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLogReq, log_info_),
  };
  S2SLogReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SLogReq_descriptor_,
      S2SLogReq::default_instance_,
      S2SLogReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLogReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLogReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SLogReq));
  LogProtocol_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_KFLogMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SLogReq_descriptor_, &S2SLogReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_KFLogMessage_2eproto() {
  delete S2SLogReq::default_instance_;
  delete S2SLogReq_reflection_;
}

void protobuf_AddDesc_KFLogMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::KFMsg::protobuf_AddDesc_KFCommonMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022KFLogMessage.proto\022\005KFMsg\032\025KFCommonMes"
    "sage.proto\"\213\001\n\tS2SLogReq\022\021\n\tlog_level\030\001 "
    "\002(\005\022\024\n\014log_category\030\002 \002(\005\022\017\n\007zone_id\030\003 \002"
    "(\005\022\020\n\010app_name\030\004 \002(\t\022\020\n\010app_type\030\005 \002(\t\022\016"
    "\n\006app_id\030\006 \002(\005\022\020\n\010log_info\030\007 \002(\t* \n\013LogP"
    "rotocol\022\021\n\013S2S_LOG_REQ\020\211\244\001", 226);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KFLogMessage.proto", &protobuf_RegisterTypes);
  S2SLogReq::default_instance_ = new S2SLogReq();
  S2SLogReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_KFLogMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_KFLogMessage_2eproto {
  StaticDescriptorInitializer_KFLogMessage_2eproto() {
    protobuf_AddDesc_KFLogMessage_2eproto();
  }
} static_descriptor_initializer_KFLogMessage_2eproto_;
const ::google::protobuf::EnumDescriptor* LogProtocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogProtocol_descriptor_;
}
bool LogProtocol_IsValid(int value) {
  switch(value) {
    case 21001:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int S2SLogReq::kLogLevelFieldNumber;
const int S2SLogReq::kLogCategoryFieldNumber;
const int S2SLogReq::kZoneIdFieldNumber;
const int S2SLogReq::kAppNameFieldNumber;
const int S2SLogReq::kAppTypeFieldNumber;
const int S2SLogReq::kAppIdFieldNumber;
const int S2SLogReq::kLogInfoFieldNumber;
#endif  // !_MSC_VER

S2SLogReq::S2SLogReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SLogReq::InitAsDefaultInstance() {
}

S2SLogReq::S2SLogReq(const S2SLogReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SLogReq::SharedCtor() {
  _cached_size_ = 0;
  log_level_ = 0;
  log_category_ = 0;
  zone_id_ = 0;
  app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  app_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  app_id_ = 0;
  log_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SLogReq::~S2SLogReq() {
  SharedDtor();
}

void S2SLogReq::SharedDtor() {
  if (app_name_ != &::google::protobuf::internal::kEmptyString) {
    delete app_name_;
  }
  if (app_type_ != &::google::protobuf::internal::kEmptyString) {
    delete app_type_;
  }
  if (log_info_ != &::google::protobuf::internal::kEmptyString) {
    delete log_info_;
  }
  if (this != default_instance_) {
  }
}

void S2SLogReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SLogReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SLogReq_descriptor_;
}

const S2SLogReq& S2SLogReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFLogMessage_2eproto();
  return *default_instance_;
}

S2SLogReq* S2SLogReq::default_instance_ = NULL;

S2SLogReq* S2SLogReq::New() const {
  return new S2SLogReq;
}

void S2SLogReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    log_level_ = 0;
    log_category_ = 0;
    zone_id_ = 0;
    if (has_app_name()) {
      if (app_name_ != &::google::protobuf::internal::kEmptyString) {
        app_name_->clear();
      }
    }
    if (has_app_type()) {
      if (app_type_ != &::google::protobuf::internal::kEmptyString) {
        app_type_->clear();
      }
    }
    app_id_ = 0;
    if (has_log_info()) {
      if (log_info_ != &::google::protobuf::internal::kEmptyString) {
        log_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SLogReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 log_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &log_level_)));
          set_has_log_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_log_category;
        break;
      }

      // required int32 log_category = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_log_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &log_category_)));
          set_has_log_category();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zone_id;
        break;
      }

      // required int32 zone_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zone_id_)));
          set_has_zone_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_app_name;
        break;
      }

      // required string app_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_name().data(), this->app_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_app_type;
        break;
      }

      // required string app_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_type().data(), this->app_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_app_id;
        break;
      }

      // required int32 app_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_app_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_id_)));
          set_has_app_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_log_info;
        break;
      }

      // required string log_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log_info().data(), this->log_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SLogReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 log_level = 1;
  if (has_log_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->log_level(), output);
  }

  // required int32 log_category = 2;
  if (has_log_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->log_category(), output);
  }

  // required int32 zone_id = 3;
  if (has_zone_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->zone_id(), output);
  }

  // required string app_name = 4;
  if (has_app_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_name().data(), this->app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->app_name(), output);
  }

  // required string app_type = 5;
  if (has_app_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_type().data(), this->app_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->app_type(), output);
  }

  // required int32 app_id = 6;
  if (has_app_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->app_id(), output);
  }

  // required string log_info = 7;
  if (has_log_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_info().data(), this->log_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->log_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SLogReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 log_level = 1;
  if (has_log_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->log_level(), target);
  }

  // required int32 log_category = 2;
  if (has_log_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->log_category(), target);
  }

  // required int32 zone_id = 3;
  if (has_zone_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->zone_id(), target);
  }

  // required string app_name = 4;
  if (has_app_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_name().data(), this->app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->app_name(), target);
  }

  // required string app_type = 5;
  if (has_app_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_type().data(), this->app_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->app_type(), target);
  }

  // required int32 app_id = 6;
  if (has_app_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->app_id(), target);
  }

  // required string log_info = 7;
  if (has_log_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_info().data(), this->log_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->log_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SLogReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 log_level = 1;
    if (has_log_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->log_level());
    }

    // required int32 log_category = 2;
    if (has_log_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->log_category());
    }

    // required int32 zone_id = 3;
    if (has_zone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zone_id());
    }

    // required string app_name = 4;
    if (has_app_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_name());
    }

    // required string app_type = 5;
    if (has_app_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_type());
    }

    // required int32 app_id = 6;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->app_id());
    }

    // required string log_info = 7;
    if (has_log_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SLogReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SLogReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SLogReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SLogReq::MergeFrom(const S2SLogReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_log_level()) {
      set_log_level(from.log_level());
    }
    if (from.has_log_category()) {
      set_log_category(from.log_category());
    }
    if (from.has_zone_id()) {
      set_zone_id(from.zone_id());
    }
    if (from.has_app_name()) {
      set_app_name(from.app_name());
    }
    if (from.has_app_type()) {
      set_app_type(from.app_type());
    }
    if (from.has_app_id()) {
      set_app_id(from.app_id());
    }
    if (from.has_log_info()) {
      set_log_info(from.log_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SLogReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SLogReq::CopyFrom(const S2SLogReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SLogReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void S2SLogReq::Swap(S2SLogReq* other) {
  if (other != this) {
    std::swap(log_level_, other->log_level_);
    std::swap(log_category_, other->log_category_);
    std::swap(zone_id_, other->zone_id_);
    std::swap(app_name_, other->app_name_);
    std::swap(app_type_, other->app_type_);
    std::swap(app_id_, other->app_id_);
    std::swap(log_info_, other->log_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SLogReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SLogReq_descriptor_;
  metadata.reflection = S2SLogReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

// @@protoc_insertion_point(global_scope)
