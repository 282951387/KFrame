// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFFrameMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "KFFrameMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KFMsg {

namespace {

const ::google::protobuf::Descriptor* ListenData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListenData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterToServerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterToServerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterToServerAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterToServerAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TellRegisterToServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TellRegisterToServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* TellUnRegisterFromServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TellUnRegisterFromServer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FrameProtocol_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_KFFrameMessage_2eproto() {
  protobuf_AddDesc_KFFrameMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "KFFrameMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ListenData_descriptor_ = file->message_type(0);
  static const int ListenData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenData, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenData, appname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenData, apptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenData, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenData, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenData, zoneid_),
  };
  ListenData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListenData_descriptor_,
      ListenData::default_instance_,
      ListenData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListenData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListenData));
  RegisterToServerReq_descriptor_ = file->message_type(1);
  static const int RegisterToServerReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterToServerReq, listen_),
  };
  RegisterToServerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterToServerReq_descriptor_,
      RegisterToServerReq::default_instance_,
      RegisterToServerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterToServerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterToServerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterToServerReq));
  RegisterToServerAck_descriptor_ = file->message_type(2);
  static const int RegisterToServerAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterToServerAck, apptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterToServerAck, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterToServerAck, appname_),
  };
  RegisterToServerAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegisterToServerAck_descriptor_,
      RegisterToServerAck::default_instance_,
      RegisterToServerAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterToServerAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterToServerAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegisterToServerAck));
  TellRegisterToServer_descriptor_ = file->message_type(3);
  static const int TellRegisterToServer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TellRegisterToServer, listen_),
  };
  TellRegisterToServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TellRegisterToServer_descriptor_,
      TellRegisterToServer::default_instance_,
      TellRegisterToServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TellRegisterToServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TellRegisterToServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TellRegisterToServer));
  TellUnRegisterFromServer_descriptor_ = file->message_type(4);
  static const int TellUnRegisterFromServer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TellUnRegisterFromServer, appid_),
  };
  TellUnRegisterFromServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TellUnRegisterFromServer_descriptor_,
      TellUnRegisterFromServer::default_instance_,
      TellUnRegisterFromServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TellUnRegisterFromServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TellUnRegisterFromServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TellUnRegisterFromServer));
  FrameProtocol_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_KFFrameMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListenData_descriptor_, &ListenData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterToServerReq_descriptor_, &RegisterToServerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegisterToServerAck_descriptor_, &RegisterToServerAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TellRegisterToServer_descriptor_, &TellRegisterToServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TellUnRegisterFromServer_descriptor_, &TellUnRegisterFromServer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_KFFrameMessage_2eproto() {
  delete ListenData::default_instance_;
  delete ListenData_reflection_;
  delete RegisterToServerReq::default_instance_;
  delete RegisterToServerReq_reflection_;
  delete RegisterToServerAck::default_instance_;
  delete RegisterToServerAck_reflection_;
  delete TellRegisterToServer::default_instance_;
  delete TellRegisterToServer_reflection_;
  delete TellUnRegisterFromServer::default_instance_;
  delete TellUnRegisterFromServer_reflection_;
}

void protobuf_AddDesc_KFFrameMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024KFFrameMessage.proto\022\005KFMsg\"g\n\nListenD"
    "ata\022\r\n\005appid\030\001 \001(\r\022\017\n\007appname\030\002 \002(\t\022\017\n\007a"
    "pptype\030\003 \002(\t\022\n\n\002ip\030\004 \002(\t\022\014\n\004port\030\005 \002(\r\022\016"
    "\n\006zoneid\030\006 \001(\r\"8\n\023RegisterToServerReq\022!\n"
    "\006listen\030\001 \002(\0132\021.KFMsg.ListenData\"F\n\023Regi"
    "sterToServerAck\022\017\n\007apptype\030\001 \002(\t\022\r\n\005appi"
    "d\030\002 \002(\r\022\017\n\007appname\030\003 \002(\t\"9\n\024TellRegister"
    "ToServer\022!\n\006listen\030\001 \002(\0132\021.KFMsg.ListenD"
    "ata\")\n\030TellUnRegisterFromServer\022\r\n\005appid"
    "\030\001 \002(\r*\231\001\n\rFrameProtocol\022\037\n\032S2S_REGISTER"
    "_TO_SERVER_REQ\020\221N\022\037\n\032S2S_REGISTER_TO_SER"
    "VER_ACK\020\222N\022 \n\033S2S_TELL_REGISTER_TO_SERVE"
    "R\020\223N\022$\n\037S2S_TELL_UNREGISTER_FROM_SERVER\020"
    "\224N", 522);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KFFrameMessage.proto", &protobuf_RegisterTypes);
  ListenData::default_instance_ = new ListenData();
  RegisterToServerReq::default_instance_ = new RegisterToServerReq();
  RegisterToServerAck::default_instance_ = new RegisterToServerAck();
  TellRegisterToServer::default_instance_ = new TellRegisterToServer();
  TellUnRegisterFromServer::default_instance_ = new TellUnRegisterFromServer();
  ListenData::default_instance_->InitAsDefaultInstance();
  RegisterToServerReq::default_instance_->InitAsDefaultInstance();
  RegisterToServerAck::default_instance_->InitAsDefaultInstance();
  TellRegisterToServer::default_instance_->InitAsDefaultInstance();
  TellUnRegisterFromServer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_KFFrameMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_KFFrameMessage_2eproto {
  StaticDescriptorInitializer_KFFrameMessage_2eproto() {
    protobuf_AddDesc_KFFrameMessage_2eproto();
  }
} static_descriptor_initializer_KFFrameMessage_2eproto_;
const ::google::protobuf::EnumDescriptor* FrameProtocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameProtocol_descriptor_;
}
bool FrameProtocol_IsValid(int value) {
  switch(value) {
    case 10001:
    case 10002:
    case 10003:
    case 10004:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ListenData::kAppidFieldNumber;
const int ListenData::kAppnameFieldNumber;
const int ListenData::kApptypeFieldNumber;
const int ListenData::kIpFieldNumber;
const int ListenData::kPortFieldNumber;
const int ListenData::kZoneidFieldNumber;
#endif  // !_MSC_VER

ListenData::ListenData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListenData::InitAsDefaultInstance() {
}

ListenData::ListenData(const ListenData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListenData::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListenData::~ListenData() {
  SharedDtor();
}

void ListenData::SharedDtor() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void ListenData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListenData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListenData_descriptor_;
}

const ListenData& ListenData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFFrameMessage_2eproto();
  return *default_instance_;
}

ListenData* ListenData::default_instance_ = NULL;

ListenData* ListenData::New() const {
  return new ListenData;
}

void ListenData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
    if (has_appname()) {
      if (appname_ != &::google::protobuf::internal::kEmptyString) {
        appname_->clear();
      }
    }
    if (has_apptype()) {
      if (apptype_ != &::google::protobuf::internal::kEmptyString) {
        apptype_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
    zoneid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListenData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appname;
        break;
      }

      // required string appname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appname().data(), this->appname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_apptype;
        break;
      }

      // required string apptype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apptype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apptype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->apptype().data(), this->apptype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // required string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }

      // required uint32 port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListenData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // required string appname = 2;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appname().data(), this->appname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->appname(), output);
  }

  // required string apptype = 3;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apptype().data(), this->apptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->apptype(), output);
  }

  // required string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }

  // required uint32 port = 5;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->port(), output);
  }

  // optional uint32 zoneid = 6;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListenData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // required string appname = 2;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appname().data(), this->appname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appname(), target);
  }

  // required string apptype = 3;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apptype().data(), this->apptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->apptype(), target);
  }

  // required string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // required uint32 port = 5;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->port(), target);
  }

  // optional uint32 zoneid = 6;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListenData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // required string appname = 2;
    if (has_appname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appname());
    }

    // required string apptype = 3;
    if (has_apptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apptype());
    }

    // required string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required uint32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional uint32 zoneid = 6;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListenData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListenData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListenData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListenData::MergeFrom(const ListenData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_appname()) {
      set_appname(from.appname());
    }
    if (from.has_apptype()) {
      set_apptype(from.apptype());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListenData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListenData::CopyFrom(const ListenData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListenData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  return true;
}

void ListenData::Swap(ListenData* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(appname_, other->appname_);
    std::swap(apptype_, other->apptype_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListenData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListenData_descriptor_;
  metadata.reflection = ListenData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterToServerReq::kListenFieldNumber;
#endif  // !_MSC_VER

RegisterToServerReq::RegisterToServerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterToServerReq::InitAsDefaultInstance() {
  listen_ = const_cast< ::KFMsg::ListenData*>(&::KFMsg::ListenData::default_instance());
}

RegisterToServerReq::RegisterToServerReq(const RegisterToServerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterToServerReq::SharedCtor() {
  _cached_size_ = 0;
  listen_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterToServerReq::~RegisterToServerReq() {
  SharedDtor();
}

void RegisterToServerReq::SharedDtor() {
  if (this != default_instance_) {
    delete listen_;
  }
}

void RegisterToServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterToServerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterToServerReq_descriptor_;
}

const RegisterToServerReq& RegisterToServerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFFrameMessage_2eproto();
  return *default_instance_;
}

RegisterToServerReq* RegisterToServerReq::default_instance_ = NULL;

RegisterToServerReq* RegisterToServerReq::New() const {
  return new RegisterToServerReq;
}

void RegisterToServerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_listen()) {
      if (listen_ != NULL) listen_->::KFMsg::ListenData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterToServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KFMsg.ListenData listen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_listen()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterToServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KFMsg.ListenData listen = 1;
  if (has_listen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->listen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterToServerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KFMsg.ListenData listen = 1;
  if (has_listen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->listen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterToServerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KFMsg.ListenData listen = 1;
    if (has_listen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->listen());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterToServerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterToServerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterToServerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterToServerReq::MergeFrom(const RegisterToServerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_listen()) {
      mutable_listen()->::KFMsg::ListenData::MergeFrom(from.listen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterToServerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterToServerReq::CopyFrom(const RegisterToServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterToServerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_listen()) {
    if (!this->listen().IsInitialized()) return false;
  }
  return true;
}

void RegisterToServerReq::Swap(RegisterToServerReq* other) {
  if (other != this) {
    std::swap(listen_, other->listen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterToServerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterToServerReq_descriptor_;
  metadata.reflection = RegisterToServerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegisterToServerAck::kApptypeFieldNumber;
const int RegisterToServerAck::kAppidFieldNumber;
const int RegisterToServerAck::kAppnameFieldNumber;
#endif  // !_MSC_VER

RegisterToServerAck::RegisterToServerAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegisterToServerAck::InitAsDefaultInstance() {
}

RegisterToServerAck::RegisterToServerAck(const RegisterToServerAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegisterToServerAck::SharedCtor() {
  _cached_size_ = 0;
  apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0u;
  appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterToServerAck::~RegisterToServerAck() {
  SharedDtor();
}

void RegisterToServerAck::SharedDtor() {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (this != default_instance_) {
  }
}

void RegisterToServerAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterToServerAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterToServerAck_descriptor_;
}

const RegisterToServerAck& RegisterToServerAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFFrameMessage_2eproto();
  return *default_instance_;
}

RegisterToServerAck* RegisterToServerAck::default_instance_ = NULL;

RegisterToServerAck* RegisterToServerAck::New() const {
  return new RegisterToServerAck;
}

void RegisterToServerAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_apptype()) {
      if (apptype_ != &::google::protobuf::internal::kEmptyString) {
        apptype_->clear();
      }
    }
    appid_ = 0u;
    if (has_appname()) {
      if (appname_ != &::google::protobuf::internal::kEmptyString) {
        appname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegisterToServerAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string apptype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apptype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->apptype().data(), this->apptype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appid;
        break;
      }

      // required uint32 appid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_appname;
        break;
      }

      // required string appname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appname().data(), this->appname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegisterToServerAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string apptype = 1;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apptype().data(), this->apptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->apptype(), output);
  }

  // required uint32 appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // required string appname = 3;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appname().data(), this->appname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->appname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegisterToServerAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string apptype = 1;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apptype().data(), this->apptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->apptype(), target);
  }

  // required uint32 appid = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // required string appname = 3;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appname().data(), this->appname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->appname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegisterToServerAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string apptype = 1;
    if (has_apptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apptype());
    }

    // required uint32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // required string appname = 3;
    if (has_appname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterToServerAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegisterToServerAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegisterToServerAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegisterToServerAck::MergeFrom(const RegisterToServerAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apptype()) {
      set_apptype(from.apptype());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_appname()) {
      set_appname(from.appname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegisterToServerAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterToServerAck::CopyFrom(const RegisterToServerAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterToServerAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RegisterToServerAck::Swap(RegisterToServerAck* other) {
  if (other != this) {
    std::swap(apptype_, other->apptype_);
    std::swap(appid_, other->appid_);
    std::swap(appname_, other->appname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegisterToServerAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterToServerAck_descriptor_;
  metadata.reflection = RegisterToServerAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TellRegisterToServer::kListenFieldNumber;
#endif  // !_MSC_VER

TellRegisterToServer::TellRegisterToServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TellRegisterToServer::InitAsDefaultInstance() {
  listen_ = const_cast< ::KFMsg::ListenData*>(&::KFMsg::ListenData::default_instance());
}

TellRegisterToServer::TellRegisterToServer(const TellRegisterToServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TellRegisterToServer::SharedCtor() {
  _cached_size_ = 0;
  listen_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TellRegisterToServer::~TellRegisterToServer() {
  SharedDtor();
}

void TellRegisterToServer::SharedDtor() {
  if (this != default_instance_) {
    delete listen_;
  }
}

void TellRegisterToServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TellRegisterToServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TellRegisterToServer_descriptor_;
}

const TellRegisterToServer& TellRegisterToServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFFrameMessage_2eproto();
  return *default_instance_;
}

TellRegisterToServer* TellRegisterToServer::default_instance_ = NULL;

TellRegisterToServer* TellRegisterToServer::New() const {
  return new TellRegisterToServer;
}

void TellRegisterToServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_listen()) {
      if (listen_ != NULL) listen_->::KFMsg::ListenData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TellRegisterToServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KFMsg.ListenData listen = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_listen()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TellRegisterToServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KFMsg.ListenData listen = 1;
  if (has_listen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->listen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TellRegisterToServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KFMsg.ListenData listen = 1;
  if (has_listen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->listen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TellRegisterToServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KFMsg.ListenData listen = 1;
    if (has_listen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->listen());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TellRegisterToServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TellRegisterToServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TellRegisterToServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TellRegisterToServer::MergeFrom(const TellRegisterToServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_listen()) {
      mutable_listen()->::KFMsg::ListenData::MergeFrom(from.listen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TellRegisterToServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TellRegisterToServer::CopyFrom(const TellRegisterToServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TellRegisterToServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_listen()) {
    if (!this->listen().IsInitialized()) return false;
  }
  return true;
}

void TellRegisterToServer::Swap(TellRegisterToServer* other) {
  if (other != this) {
    std::swap(listen_, other->listen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TellRegisterToServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TellRegisterToServer_descriptor_;
  metadata.reflection = TellRegisterToServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TellUnRegisterFromServer::kAppidFieldNumber;
#endif  // !_MSC_VER

TellUnRegisterFromServer::TellUnRegisterFromServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TellUnRegisterFromServer::InitAsDefaultInstance() {
}

TellUnRegisterFromServer::TellUnRegisterFromServer(const TellUnRegisterFromServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TellUnRegisterFromServer::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TellUnRegisterFromServer::~TellUnRegisterFromServer() {
  SharedDtor();
}

void TellUnRegisterFromServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TellUnRegisterFromServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TellUnRegisterFromServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TellUnRegisterFromServer_descriptor_;
}

const TellUnRegisterFromServer& TellUnRegisterFromServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFFrameMessage_2eproto();
  return *default_instance_;
}

TellUnRegisterFromServer* TellUnRegisterFromServer::default_instance_ = NULL;

TellUnRegisterFromServer* TellUnRegisterFromServer::New() const {
  return new TellUnRegisterFromServer;
}

void TellUnRegisterFromServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    appid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TellUnRegisterFromServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 appid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TellUnRegisterFromServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 appid = 1;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TellUnRegisterFromServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 appid = 1;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TellUnRegisterFromServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TellUnRegisterFromServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TellUnRegisterFromServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TellUnRegisterFromServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TellUnRegisterFromServer::MergeFrom(const TellUnRegisterFromServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appid()) {
      set_appid(from.appid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TellUnRegisterFromServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TellUnRegisterFromServer::CopyFrom(const TellUnRegisterFromServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TellUnRegisterFromServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TellUnRegisterFromServer::Swap(TellUnRegisterFromServer* other) {
  if (other != this) {
    std::swap(appid_, other->appid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TellUnRegisterFromServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TellUnRegisterFromServer_descriptor_;
  metadata.reflection = TellUnRegisterFromServer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

// @@protoc_insertion_point(global_scope)
