// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFDeployMessage.proto

#ifndef PROTOBUF_KFDeployMessage_2eproto__INCLUDED
#define PROTOBUF_KFDeployMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace KFMsg {

// Internal implementation detail -- do not call these.
void LIBPROTOC_EXPORT protobuf_AddDesc_KFDeployMessage_2eproto();
void protobuf_AssignDesc_KFDeployMessage_2eproto();
void protobuf_ShutdownFile_KFDeployMessage_2eproto();

class S2SRegisterAgentToServerReq;
class S2SGetAgentIpAddressReq;
class S2SGetAgentIpAddressAck;
class S2SUpdateServerStatusReq;
class S2SStartupServerToAgentReq;
class S2SShutDownServerToAgentReq;
class S2SShutDownServerToMasterReq;
class S2SShutDownServerToServerReq;
class S2SKillServerToAgentReq;
class S2SUpdateServerToAgentReq;
class S2SRestartServerToAgentReq;

enum DeployProtocol {
  S2S_REGISTER_AGENT_TO_SERVER_REQ = 10301,
  S2S_UPDATE_SERVER_STATUS_REQ = 10302,
  S2S_GET_AGENT_IP_ADDRESS_REQ = 10303,
  S2S_GET_AGENT_IP_ADDRESS_ACK = 10304,
  S2S_STARTUP_SERVER_TO_AGENT_REQ = 10305,
  S2S_SHUT_DOWN_SERVER_TO_AGENT_REQ = 10306,
  S2S_SHUT_DOWN_SERVER_TO_MASTER_REQ = 10307,
  S2S_SHUT_DOWN_SERVER_TO_SERVER_REQ = 10308,
  S2S_KILL_SERVER_TO_AGENT_REQ = 10309,
  S2S_UPDATE_SERVER_TO_AGENT_REQ = 10310,
  S2S_START_SERVER_TO_AGENT_REQ = 10311
};
LIBPROTOC_EXPORT bool DeployProtocol_IsValid(int value);
const DeployProtocol DeployProtocol_MIN = S2S_REGISTER_AGENT_TO_SERVER_REQ;
const DeployProtocol DeployProtocol_MAX = S2S_START_SERVER_TO_AGENT_REQ;
const int DeployProtocol_ARRAYSIZE = DeployProtocol_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* DeployProtocol_descriptor();
inline const ::std::string& DeployProtocol_Name(DeployProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeployProtocol_descriptor(), value);
}
inline bool DeployProtocol_Parse(
    const ::std::string& name, DeployProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeployProtocol>(
    DeployProtocol_descriptor(), name, value);
}
// ===================================================================

class LIBPROTOC_EXPORT S2SRegisterAgentToServerReq : public ::google::protobuf::Message {
 public:
  S2SRegisterAgentToServerReq();
  virtual ~S2SRegisterAgentToServerReq();

  S2SRegisterAgentToServerReq(const S2SRegisterAgentToServerReq& from);

  inline S2SRegisterAgentToServerReq& operator=(const S2SRegisterAgentToServerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRegisterAgentToServerReq& default_instance();

  void Swap(S2SRegisterAgentToServerReq* other);

  // implements Message ----------------------------------------------

  S2SRegisterAgentToServerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SRegisterAgentToServerReq& from);
  void MergeFrom(const S2SRegisterAgentToServerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 agentid = 1;
  inline bool has_agentid() const;
  inline void clear_agentid();
  static const int kAgentidFieldNumber = 1;
  inline ::google::protobuf::uint32 agentid() const;
  inline void set_agentid(::google::protobuf::uint32 value);

  // required string localip = 2;
  inline bool has_localip() const;
  inline void clear_localip();
  static const int kLocalipFieldNumber = 2;
  inline const ::std::string& localip() const;
  inline void set_localip(const ::std::string& value);
  inline void set_localip(const char* value);
  inline void set_localip(const char* value, size_t size);
  inline ::std::string* mutable_localip();
  inline ::std::string* release_localip();
  inline void set_allocated_localip(::std::string* localip);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required uint32 port = 5;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 5;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRegisterAgentToServerReq)
 private:
  inline void set_has_agentid();
  inline void clear_has_agentid();
  inline void set_has_localip();
  inline void clear_has_localip();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* localip_;
  ::std::string* name_;
  ::google::protobuf::uint32 agentid_;
  ::google::protobuf::uint32 port_;
  ::std::string* type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDeployMessage_2eproto();
  friend void protobuf_AssignDesc_KFDeployMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDeployMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SRegisterAgentToServerReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SGetAgentIpAddressReq : public ::google::protobuf::Message {
 public:
  S2SGetAgentIpAddressReq();
  virtual ~S2SGetAgentIpAddressReq();

  S2SGetAgentIpAddressReq(const S2SGetAgentIpAddressReq& from);

  inline S2SGetAgentIpAddressReq& operator=(const S2SGetAgentIpAddressReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SGetAgentIpAddressReq& default_instance();

  void Swap(S2SGetAgentIpAddressReq* other);

  // implements Message ----------------------------------------------

  S2SGetAgentIpAddressReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SGetAgentIpAddressReq& from);
  void MergeFrom(const S2SGetAgentIpAddressReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string localip = 1;
  inline bool has_localip() const;
  inline void clear_localip();
  static const int kLocalipFieldNumber = 1;
  inline const ::std::string& localip() const;
  inline void set_localip(const ::std::string& value);
  inline void set_localip(const char* value);
  inline void set_localip(const char* value, size_t size);
  inline ::std::string* mutable_localip();
  inline ::std::string* release_localip();
  inline void set_allocated_localip(::std::string* localip);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SGetAgentIpAddressReq)
 private:
  inline void set_has_localip();
  inline void clear_has_localip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* localip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDeployMessage_2eproto();
  friend void protobuf_AssignDesc_KFDeployMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDeployMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SGetAgentIpAddressReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SGetAgentIpAddressAck : public ::google::protobuf::Message {
 public:
  S2SGetAgentIpAddressAck();
  virtual ~S2SGetAgentIpAddressAck();

  S2SGetAgentIpAddressAck(const S2SGetAgentIpAddressAck& from);

  inline S2SGetAgentIpAddressAck& operator=(const S2SGetAgentIpAddressAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SGetAgentIpAddressAck& default_instance();

  void Swap(S2SGetAgentIpAddressAck* other);

  // implements Message ----------------------------------------------

  S2SGetAgentIpAddressAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SGetAgentIpAddressAck& from);
  void MergeFrom(const S2SGetAgentIpAddressAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string appname = 1;
  inline bool has_appname() const;
  inline void clear_appname();
  static const int kAppnameFieldNumber = 1;
  inline const ::std::string& appname() const;
  inline void set_appname(const ::std::string& value);
  inline void set_appname(const char* value);
  inline void set_appname(const char* value, size_t size);
  inline ::std::string* mutable_appname();
  inline ::std::string* release_appname();
  inline void set_allocated_appname(::std::string* appname);

  // required string apptype = 2;
  inline bool has_apptype() const;
  inline void clear_apptype();
  static const int kApptypeFieldNumber = 2;
  inline const ::std::string& apptype() const;
  inline void set_apptype(const ::std::string& value);
  inline void set_apptype(const char* value);
  inline void set_apptype(const char* value, size_t size);
  inline ::std::string* mutable_apptype();
  inline ::std::string* release_apptype();
  inline void set_allocated_apptype(::std::string* apptype);

  // required uint32 appid = 3;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 3;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // required string ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required uint32 port = 5;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 5;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SGetAgentIpAddressAck)
 private:
  inline void set_has_appname();
  inline void clear_has_appname();
  inline void set_has_apptype();
  inline void clear_has_apptype();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* appname_;
  ::std::string* apptype_;
  ::std::string* ip_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDeployMessage_2eproto();
  friend void protobuf_AssignDesc_KFDeployMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDeployMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SGetAgentIpAddressAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SUpdateServerStatusReq : public ::google::protobuf::Message {
 public:
  S2SUpdateServerStatusReq();
  virtual ~S2SUpdateServerStatusReq();

  S2SUpdateServerStatusReq(const S2SUpdateServerStatusReq& from);

  inline S2SUpdateServerStatusReq& operator=(const S2SUpdateServerStatusReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SUpdateServerStatusReq& default_instance();

  void Swap(S2SUpdateServerStatusReq* other);

  // implements Message ----------------------------------------------

  S2SUpdateServerStatusReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SUpdateServerStatusReq& from);
  void MergeFrom(const S2SUpdateServerStatusReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 agentid = 1;
  inline bool has_agentid() const;
  inline void clear_agentid();
  static const int kAgentidFieldNumber = 1;
  inline ::google::protobuf::uint32 agentid() const;
  inline void set_agentid(::google::protobuf::uint32 value);

  // required uint32 appid = 2;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 2;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // required string appname = 3;
  inline bool has_appname() const;
  inline void clear_appname();
  static const int kAppnameFieldNumber = 3;
  inline const ::std::string& appname() const;
  inline void set_appname(const ::std::string& value);
  inline void set_appname(const char* value);
  inline void set_appname(const char* value, size_t size);
  inline ::std::string* mutable_appname();
  inline ::std::string* release_appname();
  inline void set_allocated_appname(::std::string* appname);

  // required string apptype = 4;
  inline bool has_apptype() const;
  inline void clear_apptype();
  static const int kApptypeFieldNumber = 4;
  inline const ::std::string& apptype() const;
  inline void set_apptype(const ::std::string& value);
  inline void set_apptype(const char* value);
  inline void set_apptype(const char* value, size_t size);
  inline ::std::string* mutable_apptype();
  inline ::std::string* release_apptype();
  inline void set_allocated_apptype(::std::string* apptype);

  // required uint32 zoneid = 5;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 5;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // required uint32 process = 6;
  inline bool has_process() const;
  inline void clear_process();
  static const int kProcessFieldNumber = 6;
  inline ::google::protobuf::uint32 process() const;
  inline void set_process(::google::protobuf::uint32 value);

  // required uint64 startuptime = 7;
  inline bool has_startuptime() const;
  inline void clear_startuptime();
  static const int kStartuptimeFieldNumber = 7;
  inline ::google::protobuf::uint64 startuptime() const;
  inline void set_startuptime(::google::protobuf::uint64 value);

  // required uint32 isshutdown = 8;
  inline bool has_isshutdown() const;
  inline void clear_isshutdown();
  static const int kIsshutdownFieldNumber = 8;
  inline ::google::protobuf::uint32 isshutdown() const;
  inline void set_isshutdown(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SUpdateServerStatusReq)
 private:
  inline void set_has_agentid();
  inline void clear_has_agentid();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_appname();
  inline void clear_has_appname();
  inline void set_has_apptype();
  inline void clear_has_apptype();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_process();
  inline void clear_has_process();
  inline void set_has_startuptime();
  inline void clear_has_startuptime();
  inline void set_has_isshutdown();
  inline void clear_has_isshutdown();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 agentid_;
  ::google::protobuf::uint32 appid_;
  ::std::string* appname_;
  ::std::string* apptype_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 process_;
  ::google::protobuf::uint64 startuptime_;
  ::google::protobuf::uint32 isshutdown_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDeployMessage_2eproto();
  friend void protobuf_AssignDesc_KFDeployMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDeployMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SUpdateServerStatusReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SStartupServerToAgentReq : public ::google::protobuf::Message {
 public:
  S2SStartupServerToAgentReq();
  virtual ~S2SStartupServerToAgentReq();

  S2SStartupServerToAgentReq(const S2SStartupServerToAgentReq& from);

  inline S2SStartupServerToAgentReq& operator=(const S2SStartupServerToAgentReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SStartupServerToAgentReq& default_instance();

  void Swap(S2SStartupServerToAgentReq* other);

  // implements Message ----------------------------------------------

  S2SStartupServerToAgentReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SStartupServerToAgentReq& from);
  void MergeFrom(const S2SStartupServerToAgentReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string appname = 1;
  inline bool has_appname() const;
  inline void clear_appname();
  static const int kAppnameFieldNumber = 1;
  inline const ::std::string& appname() const;
  inline void set_appname(const ::std::string& value);
  inline void set_appname(const char* value);
  inline void set_appname(const char* value, size_t size);
  inline ::std::string* mutable_appname();
  inline ::std::string* release_appname();
  inline void set_allocated_appname(::std::string* appname);

  // required string apptype = 2;
  inline bool has_apptype() const;
  inline void clear_apptype();
  static const int kApptypeFieldNumber = 2;
  inline const ::std::string& apptype() const;
  inline void set_apptype(const ::std::string& value);
  inline void set_apptype(const char* value);
  inline void set_apptype(const char* value, size_t size);
  inline ::std::string* mutable_apptype();
  inline ::std::string* release_apptype();
  inline void set_allocated_apptype(::std::string* apptype);

  // required uint32 appid = 3;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 3;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // required uint32 zoneid = 4;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SStartupServerToAgentReq)
 private:
  inline void set_has_appname();
  inline void clear_has_appname();
  inline void set_has_apptype();
  inline void clear_has_apptype();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* appname_;
  ::std::string* apptype_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 zoneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDeployMessage_2eproto();
  friend void protobuf_AssignDesc_KFDeployMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDeployMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SStartupServerToAgentReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SShutDownServerToAgentReq : public ::google::protobuf::Message {
 public:
  S2SShutDownServerToAgentReq();
  virtual ~S2SShutDownServerToAgentReq();

  S2SShutDownServerToAgentReq(const S2SShutDownServerToAgentReq& from);

  inline S2SShutDownServerToAgentReq& operator=(const S2SShutDownServerToAgentReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SShutDownServerToAgentReq& default_instance();

  void Swap(S2SShutDownServerToAgentReq* other);

  // implements Message ----------------------------------------------

  S2SShutDownServerToAgentReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SShutDownServerToAgentReq& from);
  void MergeFrom(const S2SShutDownServerToAgentReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string appname = 1;
  inline bool has_appname() const;
  inline void clear_appname();
  static const int kAppnameFieldNumber = 1;
  inline const ::std::string& appname() const;
  inline void set_appname(const ::std::string& value);
  inline void set_appname(const char* value);
  inline void set_appname(const char* value, size_t size);
  inline ::std::string* mutable_appname();
  inline ::std::string* release_appname();
  inline void set_allocated_appname(::std::string* appname);

  // required string apptype = 2;
  inline bool has_apptype() const;
  inline void clear_apptype();
  static const int kApptypeFieldNumber = 2;
  inline const ::std::string& apptype() const;
  inline void set_apptype(const ::std::string& value);
  inline void set_apptype(const char* value);
  inline void set_apptype(const char* value, size_t size);
  inline ::std::string* mutable_apptype();
  inline ::std::string* release_apptype();
  inline void set_allocated_apptype(::std::string* apptype);

  // required uint32 appid = 3;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 3;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // required uint32 zoneid = 4;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // required uint32 delaytime = 5;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelaytimeFieldNumber = 5;
  inline ::google::protobuf::uint32 delaytime() const;
  inline void set_delaytime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SShutDownServerToAgentReq)
 private:
  inline void set_has_appname();
  inline void clear_has_appname();
  inline void set_has_apptype();
  inline void clear_has_apptype();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* appname_;
  ::std::string* apptype_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 delaytime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDeployMessage_2eproto();
  friend void protobuf_AssignDesc_KFDeployMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDeployMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SShutDownServerToAgentReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SShutDownServerToMasterReq : public ::google::protobuf::Message {
 public:
  S2SShutDownServerToMasterReq();
  virtual ~S2SShutDownServerToMasterReq();

  S2SShutDownServerToMasterReq(const S2SShutDownServerToMasterReq& from);

  inline S2SShutDownServerToMasterReq& operator=(const S2SShutDownServerToMasterReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SShutDownServerToMasterReq& default_instance();

  void Swap(S2SShutDownServerToMasterReq* other);

  // implements Message ----------------------------------------------

  S2SShutDownServerToMasterReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SShutDownServerToMasterReq& from);
  void MergeFrom(const S2SShutDownServerToMasterReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string appname = 1;
  inline bool has_appname() const;
  inline void clear_appname();
  static const int kAppnameFieldNumber = 1;
  inline const ::std::string& appname() const;
  inline void set_appname(const ::std::string& value);
  inline void set_appname(const char* value);
  inline void set_appname(const char* value, size_t size);
  inline ::std::string* mutable_appname();
  inline ::std::string* release_appname();
  inline void set_allocated_appname(::std::string* appname);

  // required string apptype = 2;
  inline bool has_apptype() const;
  inline void clear_apptype();
  static const int kApptypeFieldNumber = 2;
  inline const ::std::string& apptype() const;
  inline void set_apptype(const ::std::string& value);
  inline void set_apptype(const char* value);
  inline void set_apptype(const char* value, size_t size);
  inline ::std::string* mutable_apptype();
  inline ::std::string* release_apptype();
  inline void set_allocated_apptype(::std::string* apptype);

  // required uint32 appid = 3;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 3;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // required uint32 zoneid = 4;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // required uint32 delaytime = 5;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelaytimeFieldNumber = 5;
  inline ::google::protobuf::uint32 delaytime() const;
  inline void set_delaytime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SShutDownServerToMasterReq)
 private:
  inline void set_has_appname();
  inline void clear_has_appname();
  inline void set_has_apptype();
  inline void clear_has_apptype();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* appname_;
  ::std::string* apptype_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 delaytime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDeployMessage_2eproto();
  friend void protobuf_AssignDesc_KFDeployMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDeployMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SShutDownServerToMasterReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SShutDownServerToServerReq : public ::google::protobuf::Message {
 public:
  S2SShutDownServerToServerReq();
  virtual ~S2SShutDownServerToServerReq();

  S2SShutDownServerToServerReq(const S2SShutDownServerToServerReq& from);

  inline S2SShutDownServerToServerReq& operator=(const S2SShutDownServerToServerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SShutDownServerToServerReq& default_instance();

  void Swap(S2SShutDownServerToServerReq* other);

  // implements Message ----------------------------------------------

  S2SShutDownServerToServerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SShutDownServerToServerReq& from);
  void MergeFrom(const S2SShutDownServerToServerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string appname = 1;
  inline bool has_appname() const;
  inline void clear_appname();
  static const int kAppnameFieldNumber = 1;
  inline const ::std::string& appname() const;
  inline void set_appname(const ::std::string& value);
  inline void set_appname(const char* value);
  inline void set_appname(const char* value, size_t size);
  inline ::std::string* mutable_appname();
  inline ::std::string* release_appname();
  inline void set_allocated_appname(::std::string* appname);

  // required string apptype = 2;
  inline bool has_apptype() const;
  inline void clear_apptype();
  static const int kApptypeFieldNumber = 2;
  inline const ::std::string& apptype() const;
  inline void set_apptype(const ::std::string& value);
  inline void set_apptype(const char* value);
  inline void set_apptype(const char* value, size_t size);
  inline ::std::string* mutable_apptype();
  inline ::std::string* release_apptype();
  inline void set_allocated_apptype(::std::string* apptype);

  // required uint32 appid = 3;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 3;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // required uint32 zoneid = 4;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // required uint32 delaytime = 5;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelaytimeFieldNumber = 5;
  inline ::google::protobuf::uint32 delaytime() const;
  inline void set_delaytime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SShutDownServerToServerReq)
 private:
  inline void set_has_appname();
  inline void clear_has_appname();
  inline void set_has_apptype();
  inline void clear_has_apptype();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* appname_;
  ::std::string* apptype_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 delaytime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDeployMessage_2eproto();
  friend void protobuf_AssignDesc_KFDeployMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDeployMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SShutDownServerToServerReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SKillServerToAgentReq : public ::google::protobuf::Message {
 public:
  S2SKillServerToAgentReq();
  virtual ~S2SKillServerToAgentReq();

  S2SKillServerToAgentReq(const S2SKillServerToAgentReq& from);

  inline S2SKillServerToAgentReq& operator=(const S2SKillServerToAgentReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SKillServerToAgentReq& default_instance();

  void Swap(S2SKillServerToAgentReq* other);

  // implements Message ----------------------------------------------

  S2SKillServerToAgentReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SKillServerToAgentReq& from);
  void MergeFrom(const S2SKillServerToAgentReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string appname = 1;
  inline bool has_appname() const;
  inline void clear_appname();
  static const int kAppnameFieldNumber = 1;
  inline const ::std::string& appname() const;
  inline void set_appname(const ::std::string& value);
  inline void set_appname(const char* value);
  inline void set_appname(const char* value, size_t size);
  inline ::std::string* mutable_appname();
  inline ::std::string* release_appname();
  inline void set_allocated_appname(::std::string* appname);

  // required string apptype = 2;
  inline bool has_apptype() const;
  inline void clear_apptype();
  static const int kApptypeFieldNumber = 2;
  inline const ::std::string& apptype() const;
  inline void set_apptype(const ::std::string& value);
  inline void set_apptype(const char* value);
  inline void set_apptype(const char* value, size_t size);
  inline ::std::string* mutable_apptype();
  inline ::std::string* release_apptype();
  inline void set_allocated_apptype(::std::string* apptype);

  // required uint32 appid = 3;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 3;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // required uint32 zoneid = 4;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SKillServerToAgentReq)
 private:
  inline void set_has_appname();
  inline void clear_has_appname();
  inline void set_has_apptype();
  inline void clear_has_apptype();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* appname_;
  ::std::string* apptype_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 zoneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDeployMessage_2eproto();
  friend void protobuf_AssignDesc_KFDeployMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDeployMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SKillServerToAgentReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SUpdateServerToAgentReq : public ::google::protobuf::Message {
 public:
  S2SUpdateServerToAgentReq();
  virtual ~S2SUpdateServerToAgentReq();

  S2SUpdateServerToAgentReq(const S2SUpdateServerToAgentReq& from);

  inline S2SUpdateServerToAgentReq& operator=(const S2SUpdateServerToAgentReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SUpdateServerToAgentReq& default_instance();

  void Swap(S2SUpdateServerToAgentReq* other);

  // implements Message ----------------------------------------------

  S2SUpdateServerToAgentReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SUpdateServerToAgentReq& from);
  void MergeFrom(const S2SUpdateServerToAgentReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string appname = 1;
  inline bool has_appname() const;
  inline void clear_appname();
  static const int kAppnameFieldNumber = 1;
  inline const ::std::string& appname() const;
  inline void set_appname(const ::std::string& value);
  inline void set_appname(const char* value);
  inline void set_appname(const char* value, size_t size);
  inline ::std::string* mutable_appname();
  inline ::std::string* release_appname();
  inline void set_allocated_appname(::std::string* appname);

  // required string apptype = 2;
  inline bool has_apptype() const;
  inline void clear_apptype();
  static const int kApptypeFieldNumber = 2;
  inline const ::std::string& apptype() const;
  inline void set_apptype(const ::std::string& value);
  inline void set_apptype(const char* value);
  inline void set_apptype(const char* value, size_t size);
  inline ::std::string* mutable_apptype();
  inline ::std::string* release_apptype();
  inline void set_allocated_apptype(::std::string* apptype);

  // required uint32 appid = 3;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 3;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // required uint32 zoneid = 4;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SUpdateServerToAgentReq)
 private:
  inline void set_has_appname();
  inline void clear_has_appname();
  inline void set_has_apptype();
  inline void clear_has_apptype();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* appname_;
  ::std::string* apptype_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 zoneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDeployMessage_2eproto();
  friend void protobuf_AssignDesc_KFDeployMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDeployMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SUpdateServerToAgentReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRestartServerToAgentReq : public ::google::protobuf::Message {
 public:
  S2SRestartServerToAgentReq();
  virtual ~S2SRestartServerToAgentReq();

  S2SRestartServerToAgentReq(const S2SRestartServerToAgentReq& from);

  inline S2SRestartServerToAgentReq& operator=(const S2SRestartServerToAgentReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRestartServerToAgentReq& default_instance();

  void Swap(S2SRestartServerToAgentReq* other);

  // implements Message ----------------------------------------------

  S2SRestartServerToAgentReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SRestartServerToAgentReq& from);
  void MergeFrom(const S2SRestartServerToAgentReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string appname = 1;
  inline bool has_appname() const;
  inline void clear_appname();
  static const int kAppnameFieldNumber = 1;
  inline const ::std::string& appname() const;
  inline void set_appname(const ::std::string& value);
  inline void set_appname(const char* value);
  inline void set_appname(const char* value, size_t size);
  inline ::std::string* mutable_appname();
  inline ::std::string* release_appname();
  inline void set_allocated_appname(::std::string* appname);

  // required string apptype = 2;
  inline bool has_apptype() const;
  inline void clear_apptype();
  static const int kApptypeFieldNumber = 2;
  inline const ::std::string& apptype() const;
  inline void set_apptype(const ::std::string& value);
  inline void set_apptype(const char* value);
  inline void set_apptype(const char* value, size_t size);
  inline ::std::string* mutable_apptype();
  inline ::std::string* release_apptype();
  inline void set_allocated_apptype(::std::string* apptype);

  // required uint32 appid = 3;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 3;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // required uint32 zoneid = 4;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // required uint32 delaytime = 5;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelaytimeFieldNumber = 5;
  inline ::google::protobuf::uint32 delaytime() const;
  inline void set_delaytime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRestartServerToAgentReq)
 private:
  inline void set_has_appname();
  inline void clear_has_appname();
  inline void set_has_apptype();
  inline void clear_has_apptype();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* appname_;
  ::std::string* apptype_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 delaytime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDeployMessage_2eproto();
  friend void protobuf_AssignDesc_KFDeployMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDeployMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SRestartServerToAgentReq* default_instance_;
};
// ===================================================================


// ===================================================================

// S2SRegisterAgentToServerReq

// required uint32 agentid = 1;
inline bool S2SRegisterAgentToServerReq::has_agentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SRegisterAgentToServerReq::set_has_agentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SRegisterAgentToServerReq::clear_has_agentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SRegisterAgentToServerReq::clear_agentid() {
  agentid_ = 0u;
  clear_has_agentid();
}
inline ::google::protobuf::uint32 S2SRegisterAgentToServerReq::agentid() const {
  return agentid_;
}
inline void S2SRegisterAgentToServerReq::set_agentid(::google::protobuf::uint32 value) {
  set_has_agentid();
  agentid_ = value;
}

// required string localip = 2;
inline bool S2SRegisterAgentToServerReq::has_localip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SRegisterAgentToServerReq::set_has_localip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SRegisterAgentToServerReq::clear_has_localip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SRegisterAgentToServerReq::clear_localip() {
  if (localip_ != &::google::protobuf::internal::kEmptyString) {
    localip_->clear();
  }
  clear_has_localip();
}
inline const ::std::string& S2SRegisterAgentToServerReq::localip() const {
  return *localip_;
}
inline void S2SRegisterAgentToServerReq::set_localip(const ::std::string& value) {
  set_has_localip();
  if (localip_ == &::google::protobuf::internal::kEmptyString) {
    localip_ = new ::std::string;
  }
  localip_->assign(value);
}
inline void S2SRegisterAgentToServerReq::set_localip(const char* value) {
  set_has_localip();
  if (localip_ == &::google::protobuf::internal::kEmptyString) {
    localip_ = new ::std::string;
  }
  localip_->assign(value);
}
inline void S2SRegisterAgentToServerReq::set_localip(const char* value, size_t size) {
  set_has_localip();
  if (localip_ == &::google::protobuf::internal::kEmptyString) {
    localip_ = new ::std::string;
  }
  localip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SRegisterAgentToServerReq::mutable_localip() {
  set_has_localip();
  if (localip_ == &::google::protobuf::internal::kEmptyString) {
    localip_ = new ::std::string;
  }
  return localip_;
}
inline ::std::string* S2SRegisterAgentToServerReq::release_localip() {
  clear_has_localip();
  if (localip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = localip_;
    localip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SRegisterAgentToServerReq::set_allocated_localip(::std::string* localip) {
  if (localip_ != &::google::protobuf::internal::kEmptyString) {
    delete localip_;
  }
  if (localip) {
    set_has_localip();
    localip_ = localip;
  } else {
    clear_has_localip();
    localip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name = 3;
inline bool S2SRegisterAgentToServerReq::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SRegisterAgentToServerReq::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SRegisterAgentToServerReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SRegisterAgentToServerReq::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& S2SRegisterAgentToServerReq::name() const {
  return *name_;
}
inline void S2SRegisterAgentToServerReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void S2SRegisterAgentToServerReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void S2SRegisterAgentToServerReq::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SRegisterAgentToServerReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* S2SRegisterAgentToServerReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SRegisterAgentToServerReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string type = 4;
inline bool S2SRegisterAgentToServerReq::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SRegisterAgentToServerReq::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SRegisterAgentToServerReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SRegisterAgentToServerReq::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& S2SRegisterAgentToServerReq::type() const {
  return *type_;
}
inline void S2SRegisterAgentToServerReq::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void S2SRegisterAgentToServerReq::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void S2SRegisterAgentToServerReq::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SRegisterAgentToServerReq::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* S2SRegisterAgentToServerReq::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SRegisterAgentToServerReq::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 port = 5;
inline bool S2SRegisterAgentToServerReq::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SRegisterAgentToServerReq::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SRegisterAgentToServerReq::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SRegisterAgentToServerReq::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 S2SRegisterAgentToServerReq::port() const {
  return port_;
}
inline void S2SRegisterAgentToServerReq::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// S2SGetAgentIpAddressReq

// required string localip = 1;
inline bool S2SGetAgentIpAddressReq::has_localip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SGetAgentIpAddressReq::set_has_localip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SGetAgentIpAddressReq::clear_has_localip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SGetAgentIpAddressReq::clear_localip() {
  if (localip_ != &::google::protobuf::internal::kEmptyString) {
    localip_->clear();
  }
  clear_has_localip();
}
inline const ::std::string& S2SGetAgentIpAddressReq::localip() const {
  return *localip_;
}
inline void S2SGetAgentIpAddressReq::set_localip(const ::std::string& value) {
  set_has_localip();
  if (localip_ == &::google::protobuf::internal::kEmptyString) {
    localip_ = new ::std::string;
  }
  localip_->assign(value);
}
inline void S2SGetAgentIpAddressReq::set_localip(const char* value) {
  set_has_localip();
  if (localip_ == &::google::protobuf::internal::kEmptyString) {
    localip_ = new ::std::string;
  }
  localip_->assign(value);
}
inline void S2SGetAgentIpAddressReq::set_localip(const char* value, size_t size) {
  set_has_localip();
  if (localip_ == &::google::protobuf::internal::kEmptyString) {
    localip_ = new ::std::string;
  }
  localip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SGetAgentIpAddressReq::mutable_localip() {
  set_has_localip();
  if (localip_ == &::google::protobuf::internal::kEmptyString) {
    localip_ = new ::std::string;
  }
  return localip_;
}
inline ::std::string* S2SGetAgentIpAddressReq::release_localip() {
  clear_has_localip();
  if (localip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = localip_;
    localip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SGetAgentIpAddressReq::set_allocated_localip(::std::string* localip) {
  if (localip_ != &::google::protobuf::internal::kEmptyString) {
    delete localip_;
  }
  if (localip) {
    set_has_localip();
    localip_ = localip;
  } else {
    clear_has_localip();
    localip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2SGetAgentIpAddressAck

// required string appname = 1;
inline bool S2SGetAgentIpAddressAck::has_appname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SGetAgentIpAddressAck::set_has_appname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SGetAgentIpAddressAck::clear_has_appname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SGetAgentIpAddressAck::clear_appname() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    appname_->clear();
  }
  clear_has_appname();
}
inline const ::std::string& S2SGetAgentIpAddressAck::appname() const {
  return *appname_;
}
inline void S2SGetAgentIpAddressAck::set_appname(const ::std::string& value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void S2SGetAgentIpAddressAck::set_appname(const char* value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void S2SGetAgentIpAddressAck::set_appname(const char* value, size_t size) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SGetAgentIpAddressAck::mutable_appname() {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  return appname_;
}
inline ::std::string* S2SGetAgentIpAddressAck::release_appname() {
  clear_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appname_;
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SGetAgentIpAddressAck::set_allocated_appname(::std::string* appname) {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (appname) {
    set_has_appname();
    appname_ = appname;
  } else {
    clear_has_appname();
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string apptype = 2;
inline bool S2SGetAgentIpAddressAck::has_apptype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SGetAgentIpAddressAck::set_has_apptype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SGetAgentIpAddressAck::clear_has_apptype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SGetAgentIpAddressAck::clear_apptype() {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    apptype_->clear();
  }
  clear_has_apptype();
}
inline const ::std::string& S2SGetAgentIpAddressAck::apptype() const {
  return *apptype_;
}
inline void S2SGetAgentIpAddressAck::set_apptype(const ::std::string& value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void S2SGetAgentIpAddressAck::set_apptype(const char* value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void S2SGetAgentIpAddressAck::set_apptype(const char* value, size_t size) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SGetAgentIpAddressAck::mutable_apptype() {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  return apptype_;
}
inline ::std::string* S2SGetAgentIpAddressAck::release_apptype() {
  clear_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = apptype_;
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SGetAgentIpAddressAck::set_allocated_apptype(::std::string* apptype) {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (apptype) {
    set_has_apptype();
    apptype_ = apptype;
  } else {
    clear_has_apptype();
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 appid = 3;
inline bool S2SGetAgentIpAddressAck::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SGetAgentIpAddressAck::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SGetAgentIpAddressAck::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SGetAgentIpAddressAck::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 S2SGetAgentIpAddressAck::appid() const {
  return appid_;
}
inline void S2SGetAgentIpAddressAck::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}

// required string ip = 4;
inline bool S2SGetAgentIpAddressAck::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SGetAgentIpAddressAck::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SGetAgentIpAddressAck::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SGetAgentIpAddressAck::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& S2SGetAgentIpAddressAck::ip() const {
  return *ip_;
}
inline void S2SGetAgentIpAddressAck::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SGetAgentIpAddressAck::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SGetAgentIpAddressAck::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SGetAgentIpAddressAck::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* S2SGetAgentIpAddressAck::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SGetAgentIpAddressAck::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 port = 5;
inline bool S2SGetAgentIpAddressAck::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SGetAgentIpAddressAck::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SGetAgentIpAddressAck::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SGetAgentIpAddressAck::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 S2SGetAgentIpAddressAck::port() const {
  return port_;
}
inline void S2SGetAgentIpAddressAck::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// S2SUpdateServerStatusReq

// required uint32 agentid = 1;
inline bool S2SUpdateServerStatusReq::has_agentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SUpdateServerStatusReq::set_has_agentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SUpdateServerStatusReq::clear_has_agentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SUpdateServerStatusReq::clear_agentid() {
  agentid_ = 0u;
  clear_has_agentid();
}
inline ::google::protobuf::uint32 S2SUpdateServerStatusReq::agentid() const {
  return agentid_;
}
inline void S2SUpdateServerStatusReq::set_agentid(::google::protobuf::uint32 value) {
  set_has_agentid();
  agentid_ = value;
}

// required uint32 appid = 2;
inline bool S2SUpdateServerStatusReq::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SUpdateServerStatusReq::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SUpdateServerStatusReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SUpdateServerStatusReq::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 S2SUpdateServerStatusReq::appid() const {
  return appid_;
}
inline void S2SUpdateServerStatusReq::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}

// required string appname = 3;
inline bool S2SUpdateServerStatusReq::has_appname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SUpdateServerStatusReq::set_has_appname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SUpdateServerStatusReq::clear_has_appname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SUpdateServerStatusReq::clear_appname() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    appname_->clear();
  }
  clear_has_appname();
}
inline const ::std::string& S2SUpdateServerStatusReq::appname() const {
  return *appname_;
}
inline void S2SUpdateServerStatusReq::set_appname(const ::std::string& value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void S2SUpdateServerStatusReq::set_appname(const char* value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void S2SUpdateServerStatusReq::set_appname(const char* value, size_t size) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SUpdateServerStatusReq::mutable_appname() {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  return appname_;
}
inline ::std::string* S2SUpdateServerStatusReq::release_appname() {
  clear_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appname_;
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SUpdateServerStatusReq::set_allocated_appname(::std::string* appname) {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (appname) {
    set_has_appname();
    appname_ = appname;
  } else {
    clear_has_appname();
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string apptype = 4;
inline bool S2SUpdateServerStatusReq::has_apptype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SUpdateServerStatusReq::set_has_apptype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SUpdateServerStatusReq::clear_has_apptype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SUpdateServerStatusReq::clear_apptype() {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    apptype_->clear();
  }
  clear_has_apptype();
}
inline const ::std::string& S2SUpdateServerStatusReq::apptype() const {
  return *apptype_;
}
inline void S2SUpdateServerStatusReq::set_apptype(const ::std::string& value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void S2SUpdateServerStatusReq::set_apptype(const char* value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void S2SUpdateServerStatusReq::set_apptype(const char* value, size_t size) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SUpdateServerStatusReq::mutable_apptype() {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  return apptype_;
}
inline ::std::string* S2SUpdateServerStatusReq::release_apptype() {
  clear_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = apptype_;
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SUpdateServerStatusReq::set_allocated_apptype(::std::string* apptype) {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (apptype) {
    set_has_apptype();
    apptype_ = apptype;
  } else {
    clear_has_apptype();
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 zoneid = 5;
inline bool S2SUpdateServerStatusReq::has_zoneid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SUpdateServerStatusReq::set_has_zoneid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SUpdateServerStatusReq::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SUpdateServerStatusReq::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 S2SUpdateServerStatusReq::zoneid() const {
  return zoneid_;
}
inline void S2SUpdateServerStatusReq::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// required uint32 process = 6;
inline bool S2SUpdateServerStatusReq::has_process() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void S2SUpdateServerStatusReq::set_has_process() {
  _has_bits_[0] |= 0x00000020u;
}
inline void S2SUpdateServerStatusReq::clear_has_process() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void S2SUpdateServerStatusReq::clear_process() {
  process_ = 0u;
  clear_has_process();
}
inline ::google::protobuf::uint32 S2SUpdateServerStatusReq::process() const {
  return process_;
}
inline void S2SUpdateServerStatusReq::set_process(::google::protobuf::uint32 value) {
  set_has_process();
  process_ = value;
}

// required uint64 startuptime = 7;
inline bool S2SUpdateServerStatusReq::has_startuptime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void S2SUpdateServerStatusReq::set_has_startuptime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void S2SUpdateServerStatusReq::clear_has_startuptime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void S2SUpdateServerStatusReq::clear_startuptime() {
  startuptime_ = GOOGLE_ULONGLONG(0);
  clear_has_startuptime();
}
inline ::google::protobuf::uint64 S2SUpdateServerStatusReq::startuptime() const {
  return startuptime_;
}
inline void S2SUpdateServerStatusReq::set_startuptime(::google::protobuf::uint64 value) {
  set_has_startuptime();
  startuptime_ = value;
}

// required uint32 isshutdown = 8;
inline bool S2SUpdateServerStatusReq::has_isshutdown() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void S2SUpdateServerStatusReq::set_has_isshutdown() {
  _has_bits_[0] |= 0x00000080u;
}
inline void S2SUpdateServerStatusReq::clear_has_isshutdown() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void S2SUpdateServerStatusReq::clear_isshutdown() {
  isshutdown_ = 0u;
  clear_has_isshutdown();
}
inline ::google::protobuf::uint32 S2SUpdateServerStatusReq::isshutdown() const {
  return isshutdown_;
}
inline void S2SUpdateServerStatusReq::set_isshutdown(::google::protobuf::uint32 value) {
  set_has_isshutdown();
  isshutdown_ = value;
}

// -------------------------------------------------------------------

// S2SStartupServerToAgentReq

// required string appname = 1;
inline bool S2SStartupServerToAgentReq::has_appname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SStartupServerToAgentReq::set_has_appname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SStartupServerToAgentReq::clear_has_appname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SStartupServerToAgentReq::clear_appname() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    appname_->clear();
  }
  clear_has_appname();
}
inline const ::std::string& S2SStartupServerToAgentReq::appname() const {
  return *appname_;
}
inline void S2SStartupServerToAgentReq::set_appname(const ::std::string& value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void S2SStartupServerToAgentReq::set_appname(const char* value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void S2SStartupServerToAgentReq::set_appname(const char* value, size_t size) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SStartupServerToAgentReq::mutable_appname() {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  return appname_;
}
inline ::std::string* S2SStartupServerToAgentReq::release_appname() {
  clear_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appname_;
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SStartupServerToAgentReq::set_allocated_appname(::std::string* appname) {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (appname) {
    set_has_appname();
    appname_ = appname;
  } else {
    clear_has_appname();
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string apptype = 2;
inline bool S2SStartupServerToAgentReq::has_apptype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SStartupServerToAgentReq::set_has_apptype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SStartupServerToAgentReq::clear_has_apptype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SStartupServerToAgentReq::clear_apptype() {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    apptype_->clear();
  }
  clear_has_apptype();
}
inline const ::std::string& S2SStartupServerToAgentReq::apptype() const {
  return *apptype_;
}
inline void S2SStartupServerToAgentReq::set_apptype(const ::std::string& value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void S2SStartupServerToAgentReq::set_apptype(const char* value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void S2SStartupServerToAgentReq::set_apptype(const char* value, size_t size) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SStartupServerToAgentReq::mutable_apptype() {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  return apptype_;
}
inline ::std::string* S2SStartupServerToAgentReq::release_apptype() {
  clear_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = apptype_;
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SStartupServerToAgentReq::set_allocated_apptype(::std::string* apptype) {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (apptype) {
    set_has_apptype();
    apptype_ = apptype;
  } else {
    clear_has_apptype();
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 appid = 3;
inline bool S2SStartupServerToAgentReq::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SStartupServerToAgentReq::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SStartupServerToAgentReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SStartupServerToAgentReq::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 S2SStartupServerToAgentReq::appid() const {
  return appid_;
}
inline void S2SStartupServerToAgentReq::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}

// required uint32 zoneid = 4;
inline bool S2SStartupServerToAgentReq::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SStartupServerToAgentReq::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SStartupServerToAgentReq::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SStartupServerToAgentReq::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 S2SStartupServerToAgentReq::zoneid() const {
  return zoneid_;
}
inline void S2SStartupServerToAgentReq::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// -------------------------------------------------------------------

// S2SShutDownServerToAgentReq

// required string appname = 1;
inline bool S2SShutDownServerToAgentReq::has_appname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SShutDownServerToAgentReq::set_has_appname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SShutDownServerToAgentReq::clear_has_appname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SShutDownServerToAgentReq::clear_appname() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    appname_->clear();
  }
  clear_has_appname();
}
inline const ::std::string& S2SShutDownServerToAgentReq::appname() const {
  return *appname_;
}
inline void S2SShutDownServerToAgentReq::set_appname(const ::std::string& value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void S2SShutDownServerToAgentReq::set_appname(const char* value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void S2SShutDownServerToAgentReq::set_appname(const char* value, size_t size) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SShutDownServerToAgentReq::mutable_appname() {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  return appname_;
}
inline ::std::string* S2SShutDownServerToAgentReq::release_appname() {
  clear_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appname_;
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SShutDownServerToAgentReq::set_allocated_appname(::std::string* appname) {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (appname) {
    set_has_appname();
    appname_ = appname;
  } else {
    clear_has_appname();
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string apptype = 2;
inline bool S2SShutDownServerToAgentReq::has_apptype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SShutDownServerToAgentReq::set_has_apptype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SShutDownServerToAgentReq::clear_has_apptype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SShutDownServerToAgentReq::clear_apptype() {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    apptype_->clear();
  }
  clear_has_apptype();
}
inline const ::std::string& S2SShutDownServerToAgentReq::apptype() const {
  return *apptype_;
}
inline void S2SShutDownServerToAgentReq::set_apptype(const ::std::string& value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void S2SShutDownServerToAgentReq::set_apptype(const char* value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void S2SShutDownServerToAgentReq::set_apptype(const char* value, size_t size) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SShutDownServerToAgentReq::mutable_apptype() {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  return apptype_;
}
inline ::std::string* S2SShutDownServerToAgentReq::release_apptype() {
  clear_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = apptype_;
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SShutDownServerToAgentReq::set_allocated_apptype(::std::string* apptype) {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (apptype) {
    set_has_apptype();
    apptype_ = apptype;
  } else {
    clear_has_apptype();
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 appid = 3;
inline bool S2SShutDownServerToAgentReq::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SShutDownServerToAgentReq::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SShutDownServerToAgentReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SShutDownServerToAgentReq::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 S2SShutDownServerToAgentReq::appid() const {
  return appid_;
}
inline void S2SShutDownServerToAgentReq::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}

// required uint32 zoneid = 4;
inline bool S2SShutDownServerToAgentReq::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SShutDownServerToAgentReq::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SShutDownServerToAgentReq::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SShutDownServerToAgentReq::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 S2SShutDownServerToAgentReq::zoneid() const {
  return zoneid_;
}
inline void S2SShutDownServerToAgentReq::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// required uint32 delaytime = 5;
inline bool S2SShutDownServerToAgentReq::has_delaytime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SShutDownServerToAgentReq::set_has_delaytime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SShutDownServerToAgentReq::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SShutDownServerToAgentReq::clear_delaytime() {
  delaytime_ = 0u;
  clear_has_delaytime();
}
inline ::google::protobuf::uint32 S2SShutDownServerToAgentReq::delaytime() const {
  return delaytime_;
}
inline void S2SShutDownServerToAgentReq::set_delaytime(::google::protobuf::uint32 value) {
  set_has_delaytime();
  delaytime_ = value;
}

// -------------------------------------------------------------------

// S2SShutDownServerToMasterReq

// required string appname = 1;
inline bool S2SShutDownServerToMasterReq::has_appname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SShutDownServerToMasterReq::set_has_appname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SShutDownServerToMasterReq::clear_has_appname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SShutDownServerToMasterReq::clear_appname() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    appname_->clear();
  }
  clear_has_appname();
}
inline const ::std::string& S2SShutDownServerToMasterReq::appname() const {
  return *appname_;
}
inline void S2SShutDownServerToMasterReq::set_appname(const ::std::string& value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void S2SShutDownServerToMasterReq::set_appname(const char* value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void S2SShutDownServerToMasterReq::set_appname(const char* value, size_t size) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SShutDownServerToMasterReq::mutable_appname() {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  return appname_;
}
inline ::std::string* S2SShutDownServerToMasterReq::release_appname() {
  clear_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appname_;
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SShutDownServerToMasterReq::set_allocated_appname(::std::string* appname) {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (appname) {
    set_has_appname();
    appname_ = appname;
  } else {
    clear_has_appname();
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string apptype = 2;
inline bool S2SShutDownServerToMasterReq::has_apptype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SShutDownServerToMasterReq::set_has_apptype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SShutDownServerToMasterReq::clear_has_apptype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SShutDownServerToMasterReq::clear_apptype() {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    apptype_->clear();
  }
  clear_has_apptype();
}
inline const ::std::string& S2SShutDownServerToMasterReq::apptype() const {
  return *apptype_;
}
inline void S2SShutDownServerToMasterReq::set_apptype(const ::std::string& value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void S2SShutDownServerToMasterReq::set_apptype(const char* value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void S2SShutDownServerToMasterReq::set_apptype(const char* value, size_t size) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SShutDownServerToMasterReq::mutable_apptype() {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  return apptype_;
}
inline ::std::string* S2SShutDownServerToMasterReq::release_apptype() {
  clear_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = apptype_;
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SShutDownServerToMasterReq::set_allocated_apptype(::std::string* apptype) {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (apptype) {
    set_has_apptype();
    apptype_ = apptype;
  } else {
    clear_has_apptype();
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 appid = 3;
inline bool S2SShutDownServerToMasterReq::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SShutDownServerToMasterReq::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SShutDownServerToMasterReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SShutDownServerToMasterReq::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 S2SShutDownServerToMasterReq::appid() const {
  return appid_;
}
inline void S2SShutDownServerToMasterReq::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}

// required uint32 zoneid = 4;
inline bool S2SShutDownServerToMasterReq::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SShutDownServerToMasterReq::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SShutDownServerToMasterReq::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SShutDownServerToMasterReq::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 S2SShutDownServerToMasterReq::zoneid() const {
  return zoneid_;
}
inline void S2SShutDownServerToMasterReq::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// required uint32 delaytime = 5;
inline bool S2SShutDownServerToMasterReq::has_delaytime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SShutDownServerToMasterReq::set_has_delaytime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SShutDownServerToMasterReq::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SShutDownServerToMasterReq::clear_delaytime() {
  delaytime_ = 0u;
  clear_has_delaytime();
}
inline ::google::protobuf::uint32 S2SShutDownServerToMasterReq::delaytime() const {
  return delaytime_;
}
inline void S2SShutDownServerToMasterReq::set_delaytime(::google::protobuf::uint32 value) {
  set_has_delaytime();
  delaytime_ = value;
}

// -------------------------------------------------------------------

// S2SShutDownServerToServerReq

// required string appname = 1;
inline bool S2SShutDownServerToServerReq::has_appname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SShutDownServerToServerReq::set_has_appname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SShutDownServerToServerReq::clear_has_appname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SShutDownServerToServerReq::clear_appname() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    appname_->clear();
  }
  clear_has_appname();
}
inline const ::std::string& S2SShutDownServerToServerReq::appname() const {
  return *appname_;
}
inline void S2SShutDownServerToServerReq::set_appname(const ::std::string& value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void S2SShutDownServerToServerReq::set_appname(const char* value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void S2SShutDownServerToServerReq::set_appname(const char* value, size_t size) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SShutDownServerToServerReq::mutable_appname() {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  return appname_;
}
inline ::std::string* S2SShutDownServerToServerReq::release_appname() {
  clear_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appname_;
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SShutDownServerToServerReq::set_allocated_appname(::std::string* appname) {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (appname) {
    set_has_appname();
    appname_ = appname;
  } else {
    clear_has_appname();
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string apptype = 2;
inline bool S2SShutDownServerToServerReq::has_apptype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SShutDownServerToServerReq::set_has_apptype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SShutDownServerToServerReq::clear_has_apptype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SShutDownServerToServerReq::clear_apptype() {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    apptype_->clear();
  }
  clear_has_apptype();
}
inline const ::std::string& S2SShutDownServerToServerReq::apptype() const {
  return *apptype_;
}
inline void S2SShutDownServerToServerReq::set_apptype(const ::std::string& value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void S2SShutDownServerToServerReq::set_apptype(const char* value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void S2SShutDownServerToServerReq::set_apptype(const char* value, size_t size) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SShutDownServerToServerReq::mutable_apptype() {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  return apptype_;
}
inline ::std::string* S2SShutDownServerToServerReq::release_apptype() {
  clear_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = apptype_;
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SShutDownServerToServerReq::set_allocated_apptype(::std::string* apptype) {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (apptype) {
    set_has_apptype();
    apptype_ = apptype;
  } else {
    clear_has_apptype();
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 appid = 3;
inline bool S2SShutDownServerToServerReq::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SShutDownServerToServerReq::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SShutDownServerToServerReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SShutDownServerToServerReq::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 S2SShutDownServerToServerReq::appid() const {
  return appid_;
}
inline void S2SShutDownServerToServerReq::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}

// required uint32 zoneid = 4;
inline bool S2SShutDownServerToServerReq::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SShutDownServerToServerReq::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SShutDownServerToServerReq::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SShutDownServerToServerReq::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 S2SShutDownServerToServerReq::zoneid() const {
  return zoneid_;
}
inline void S2SShutDownServerToServerReq::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// required uint32 delaytime = 5;
inline bool S2SShutDownServerToServerReq::has_delaytime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SShutDownServerToServerReq::set_has_delaytime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SShutDownServerToServerReq::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SShutDownServerToServerReq::clear_delaytime() {
  delaytime_ = 0u;
  clear_has_delaytime();
}
inline ::google::protobuf::uint32 S2SShutDownServerToServerReq::delaytime() const {
  return delaytime_;
}
inline void S2SShutDownServerToServerReq::set_delaytime(::google::protobuf::uint32 value) {
  set_has_delaytime();
  delaytime_ = value;
}

// -------------------------------------------------------------------

// S2SKillServerToAgentReq

// required string appname = 1;
inline bool S2SKillServerToAgentReq::has_appname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SKillServerToAgentReq::set_has_appname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SKillServerToAgentReq::clear_has_appname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SKillServerToAgentReq::clear_appname() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    appname_->clear();
  }
  clear_has_appname();
}
inline const ::std::string& S2SKillServerToAgentReq::appname() const {
  return *appname_;
}
inline void S2SKillServerToAgentReq::set_appname(const ::std::string& value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void S2SKillServerToAgentReq::set_appname(const char* value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void S2SKillServerToAgentReq::set_appname(const char* value, size_t size) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SKillServerToAgentReq::mutable_appname() {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  return appname_;
}
inline ::std::string* S2SKillServerToAgentReq::release_appname() {
  clear_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appname_;
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SKillServerToAgentReq::set_allocated_appname(::std::string* appname) {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (appname) {
    set_has_appname();
    appname_ = appname;
  } else {
    clear_has_appname();
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string apptype = 2;
inline bool S2SKillServerToAgentReq::has_apptype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SKillServerToAgentReq::set_has_apptype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SKillServerToAgentReq::clear_has_apptype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SKillServerToAgentReq::clear_apptype() {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    apptype_->clear();
  }
  clear_has_apptype();
}
inline const ::std::string& S2SKillServerToAgentReq::apptype() const {
  return *apptype_;
}
inline void S2SKillServerToAgentReq::set_apptype(const ::std::string& value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void S2SKillServerToAgentReq::set_apptype(const char* value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void S2SKillServerToAgentReq::set_apptype(const char* value, size_t size) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SKillServerToAgentReq::mutable_apptype() {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  return apptype_;
}
inline ::std::string* S2SKillServerToAgentReq::release_apptype() {
  clear_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = apptype_;
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SKillServerToAgentReq::set_allocated_apptype(::std::string* apptype) {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (apptype) {
    set_has_apptype();
    apptype_ = apptype;
  } else {
    clear_has_apptype();
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 appid = 3;
inline bool S2SKillServerToAgentReq::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SKillServerToAgentReq::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SKillServerToAgentReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SKillServerToAgentReq::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 S2SKillServerToAgentReq::appid() const {
  return appid_;
}
inline void S2SKillServerToAgentReq::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}

// required uint32 zoneid = 4;
inline bool S2SKillServerToAgentReq::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SKillServerToAgentReq::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SKillServerToAgentReq::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SKillServerToAgentReq::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 S2SKillServerToAgentReq::zoneid() const {
  return zoneid_;
}
inline void S2SKillServerToAgentReq::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// -------------------------------------------------------------------

// S2SUpdateServerToAgentReq

// required string appname = 1;
inline bool S2SUpdateServerToAgentReq::has_appname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SUpdateServerToAgentReq::set_has_appname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SUpdateServerToAgentReq::clear_has_appname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SUpdateServerToAgentReq::clear_appname() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    appname_->clear();
  }
  clear_has_appname();
}
inline const ::std::string& S2SUpdateServerToAgentReq::appname() const {
  return *appname_;
}
inline void S2SUpdateServerToAgentReq::set_appname(const ::std::string& value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void S2SUpdateServerToAgentReq::set_appname(const char* value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void S2SUpdateServerToAgentReq::set_appname(const char* value, size_t size) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SUpdateServerToAgentReq::mutable_appname() {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  return appname_;
}
inline ::std::string* S2SUpdateServerToAgentReq::release_appname() {
  clear_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appname_;
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SUpdateServerToAgentReq::set_allocated_appname(::std::string* appname) {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (appname) {
    set_has_appname();
    appname_ = appname;
  } else {
    clear_has_appname();
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string apptype = 2;
inline bool S2SUpdateServerToAgentReq::has_apptype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SUpdateServerToAgentReq::set_has_apptype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SUpdateServerToAgentReq::clear_has_apptype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SUpdateServerToAgentReq::clear_apptype() {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    apptype_->clear();
  }
  clear_has_apptype();
}
inline const ::std::string& S2SUpdateServerToAgentReq::apptype() const {
  return *apptype_;
}
inline void S2SUpdateServerToAgentReq::set_apptype(const ::std::string& value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void S2SUpdateServerToAgentReq::set_apptype(const char* value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void S2SUpdateServerToAgentReq::set_apptype(const char* value, size_t size) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SUpdateServerToAgentReq::mutable_apptype() {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  return apptype_;
}
inline ::std::string* S2SUpdateServerToAgentReq::release_apptype() {
  clear_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = apptype_;
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SUpdateServerToAgentReq::set_allocated_apptype(::std::string* apptype) {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (apptype) {
    set_has_apptype();
    apptype_ = apptype;
  } else {
    clear_has_apptype();
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 appid = 3;
inline bool S2SUpdateServerToAgentReq::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SUpdateServerToAgentReq::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SUpdateServerToAgentReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SUpdateServerToAgentReq::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 S2SUpdateServerToAgentReq::appid() const {
  return appid_;
}
inline void S2SUpdateServerToAgentReq::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}

// required uint32 zoneid = 4;
inline bool S2SUpdateServerToAgentReq::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SUpdateServerToAgentReq::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SUpdateServerToAgentReq::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SUpdateServerToAgentReq::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 S2SUpdateServerToAgentReq::zoneid() const {
  return zoneid_;
}
inline void S2SUpdateServerToAgentReq::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// -------------------------------------------------------------------

// S2SRestartServerToAgentReq

// required string appname = 1;
inline bool S2SRestartServerToAgentReq::has_appname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SRestartServerToAgentReq::set_has_appname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SRestartServerToAgentReq::clear_has_appname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SRestartServerToAgentReq::clear_appname() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    appname_->clear();
  }
  clear_has_appname();
}
inline const ::std::string& S2SRestartServerToAgentReq::appname() const {
  return *appname_;
}
inline void S2SRestartServerToAgentReq::set_appname(const ::std::string& value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void S2SRestartServerToAgentReq::set_appname(const char* value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void S2SRestartServerToAgentReq::set_appname(const char* value, size_t size) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SRestartServerToAgentReq::mutable_appname() {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  return appname_;
}
inline ::std::string* S2SRestartServerToAgentReq::release_appname() {
  clear_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appname_;
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SRestartServerToAgentReq::set_allocated_appname(::std::string* appname) {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (appname) {
    set_has_appname();
    appname_ = appname;
  } else {
    clear_has_appname();
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string apptype = 2;
inline bool S2SRestartServerToAgentReq::has_apptype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SRestartServerToAgentReq::set_has_apptype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SRestartServerToAgentReq::clear_has_apptype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SRestartServerToAgentReq::clear_apptype() {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    apptype_->clear();
  }
  clear_has_apptype();
}
inline const ::std::string& S2SRestartServerToAgentReq::apptype() const {
  return *apptype_;
}
inline void S2SRestartServerToAgentReq::set_apptype(const ::std::string& value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void S2SRestartServerToAgentReq::set_apptype(const char* value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void S2SRestartServerToAgentReq::set_apptype(const char* value, size_t size) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SRestartServerToAgentReq::mutable_apptype() {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  return apptype_;
}
inline ::std::string* S2SRestartServerToAgentReq::release_apptype() {
  clear_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = apptype_;
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SRestartServerToAgentReq::set_allocated_apptype(::std::string* apptype) {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (apptype) {
    set_has_apptype();
    apptype_ = apptype;
  } else {
    clear_has_apptype();
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 appid = 3;
inline bool S2SRestartServerToAgentReq::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SRestartServerToAgentReq::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SRestartServerToAgentReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SRestartServerToAgentReq::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 S2SRestartServerToAgentReq::appid() const {
  return appid_;
}
inline void S2SRestartServerToAgentReq::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}

// required uint32 zoneid = 4;
inline bool S2SRestartServerToAgentReq::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SRestartServerToAgentReq::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SRestartServerToAgentReq::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SRestartServerToAgentReq::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 S2SRestartServerToAgentReq::zoneid() const {
  return zoneid_;
}
inline void S2SRestartServerToAgentReq::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// required uint32 delaytime = 5;
inline bool S2SRestartServerToAgentReq::has_delaytime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SRestartServerToAgentReq::set_has_delaytime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SRestartServerToAgentReq::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SRestartServerToAgentReq::clear_delaytime() {
  delaytime_ = 0u;
  clear_has_delaytime();
}
inline ::google::protobuf::uint32 S2SRestartServerToAgentReq::delaytime() const {
  return delaytime_;
}
inline void S2SRestartServerToAgentReq::set_delaytime(::google::protobuf::uint32 value) {
  set_has_delaytime();
  delaytime_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::DeployProtocol>() {
  return ::KFMsg::DeployProtocol_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_KFDeployMessage_2eproto__INCLUDED
