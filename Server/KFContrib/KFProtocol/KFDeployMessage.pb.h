// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFDeployMessage.proto

#ifndef PROTOBUF_INCLUDED_KFDeployMessage_2eproto
#define PROTOBUF_INCLUDED_KFDeployMessage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_KFDeployMessage_2eproto LIBPROTOC_EXPORT

namespace protobuf_KFDeployMessage_2eproto {
// Internal implementation detail -- do not use these members.
struct LIBPROTOC_EXPORT TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void LIBPROTOC_EXPORT AddDescriptors();
}  // namespace protobuf_KFDeployMessage_2eproto
namespace KFMsg {
class PBDeployCommand;
class PBDeployCommandDefaultTypeInternal;
LIBPROTOC_EXPORT extern PBDeployCommandDefaultTypeInternal _PBDeployCommand_default_instance_;
class S2SDeployCommandToAgentReq;
class S2SDeployCommandToAgentReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SDeployCommandToAgentReqDefaultTypeInternal _S2SDeployCommandToAgentReq_default_instance_;
class S2SDeployCommandToMasterReq;
class S2SDeployCommandToMasterReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SDeployCommandToMasterReqDefaultTypeInternal _S2SDeployCommandToMasterReq_default_instance_;
class S2SDeployCommandToServerReq;
class S2SDeployCommandToServerReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SDeployCommandToServerReqDefaultTypeInternal _S2SDeployCommandToServerReq_default_instance_;
class S2SGetAgentIpAddressAck;
class S2SGetAgentIpAddressAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SGetAgentIpAddressAckDefaultTypeInternal _S2SGetAgentIpAddressAck_default_instance_;
class S2SGetAgentIpAddressReq;
class S2SGetAgentIpAddressReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SGetAgentIpAddressReqDefaultTypeInternal _S2SGetAgentIpAddressReq_default_instance_;
class S2SRegisterAgentToServerReq;
class S2SRegisterAgentToServerReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SRegisterAgentToServerReqDefaultTypeInternal _S2SRegisterAgentToServerReq_default_instance_;
}  // namespace KFMsg
namespace google {
namespace protobuf {
template<> LIBPROTOC_EXPORT ::KFMsg::PBDeployCommand* Arena::CreateMaybeMessage<::KFMsg::PBDeployCommand>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SDeployCommandToAgentReq* Arena::CreateMaybeMessage<::KFMsg::S2SDeployCommandToAgentReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SDeployCommandToMasterReq* Arena::CreateMaybeMessage<::KFMsg::S2SDeployCommandToMasterReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SDeployCommandToServerReq* Arena::CreateMaybeMessage<::KFMsg::S2SDeployCommandToServerReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SGetAgentIpAddressAck* Arena::CreateMaybeMessage<::KFMsg::S2SGetAgentIpAddressAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SGetAgentIpAddressReq* Arena::CreateMaybeMessage<::KFMsg::S2SGetAgentIpAddressReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SRegisterAgentToServerReq* Arena::CreateMaybeMessage<::KFMsg::S2SRegisterAgentToServerReq>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace KFMsg {

enum DeployProtocol {
  S2S_DEPLOY_PROTOCOL_UNKONW = 0,
  S2S_REGISTER_AGENT_TO_SERVER_REQ = 10301,
  S2S_GET_AGENT_IP_ADDRESS_REQ = 10303,
  S2S_GET_AGENT_IP_ADDRESS_ACK = 10304,
  S2S_DEPLOY_COMMAND_TO_AGENT_REQ = 10305,
  S2S_DEPLOY_COMMAND_TO_MASTER_REQ = 10306,
  S2S_DEPLOY_COMMAND_TO_SERVER_REQ = 10307,
  DeployProtocol_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DeployProtocol_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool DeployProtocol_IsValid(int value);
const DeployProtocol DeployProtocol_MIN = S2S_DEPLOY_PROTOCOL_UNKONW;
const DeployProtocol DeployProtocol_MAX = S2S_DEPLOY_COMMAND_TO_SERVER_REQ;
const int DeployProtocol_ARRAYSIZE = DeployProtocol_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* DeployProtocol_descriptor();
inline const ::std::string& DeployProtocol_Name(DeployProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeployProtocol_descriptor(), value);
}
inline bool DeployProtocol_Parse(
    const ::std::string& name, DeployProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeployProtocol>(
    DeployProtocol_descriptor(), name, value);
}
// ===================================================================

class LIBPROTOC_EXPORT S2SRegisterAgentToServerReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SRegisterAgentToServerReq) */ {
 public:
  S2SRegisterAgentToServerReq();
  virtual ~S2SRegisterAgentToServerReq();

  S2SRegisterAgentToServerReq(const S2SRegisterAgentToServerReq& from);

  inline S2SRegisterAgentToServerReq& operator=(const S2SRegisterAgentToServerReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SRegisterAgentToServerReq(S2SRegisterAgentToServerReq&& from) noexcept
    : S2SRegisterAgentToServerReq() {
    *this = ::std::move(from);
  }

  inline S2SRegisterAgentToServerReq& operator=(S2SRegisterAgentToServerReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRegisterAgentToServerReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SRegisterAgentToServerReq* internal_default_instance() {
    return reinterpret_cast<const S2SRegisterAgentToServerReq*>(
               &_S2SRegisterAgentToServerReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(S2SRegisterAgentToServerReq* other);
  friend void swap(S2SRegisterAgentToServerReq& a, S2SRegisterAgentToServerReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SRegisterAgentToServerReq* New() const final {
    return CreateMaybeMessage<S2SRegisterAgentToServerReq>(NULL);
  }

  S2SRegisterAgentToServerReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SRegisterAgentToServerReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SRegisterAgentToServerReq& from);
  void MergeFrom(const S2SRegisterAgentToServerReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SRegisterAgentToServerReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes agentid = 1;
  void clear_agentid();
  static const int kAgentidFieldNumber = 1;
  const ::std::string& agentid() const;
  void set_agentid(const ::std::string& value);
  #if LANG_CXX11
  void set_agentid(::std::string&& value);
  #endif
  void set_agentid(const char* value);
  void set_agentid(const void* value, size_t size);
  ::std::string* mutable_agentid();
  ::std::string* release_agentid();
  void set_allocated_agentid(::std::string* agentid);

  // bytes localip = 2;
  void clear_localip();
  static const int kLocalipFieldNumber = 2;
  const ::std::string& localip() const;
  void set_localip(const ::std::string& value);
  #if LANG_CXX11
  void set_localip(::std::string&& value);
  #endif
  void set_localip(const char* value);
  void set_localip(const void* value, size_t size);
  ::std::string* mutable_localip();
  ::std::string* release_localip();
  void set_allocated_localip(::std::string* localip);

  // bytes name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const void* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // uint32 port = 5;
  void clear_port();
  static const int kPortFieldNumber = 5;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRegisterAgentToServerReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr agentid_;
  ::google::protobuf::internal::ArenaStringPtr localip_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::uint32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFDeployMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SGetAgentIpAddressReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SGetAgentIpAddressReq) */ {
 public:
  S2SGetAgentIpAddressReq();
  virtual ~S2SGetAgentIpAddressReq();

  S2SGetAgentIpAddressReq(const S2SGetAgentIpAddressReq& from);

  inline S2SGetAgentIpAddressReq& operator=(const S2SGetAgentIpAddressReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SGetAgentIpAddressReq(S2SGetAgentIpAddressReq&& from) noexcept
    : S2SGetAgentIpAddressReq() {
    *this = ::std::move(from);
  }

  inline S2SGetAgentIpAddressReq& operator=(S2SGetAgentIpAddressReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SGetAgentIpAddressReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SGetAgentIpAddressReq* internal_default_instance() {
    return reinterpret_cast<const S2SGetAgentIpAddressReq*>(
               &_S2SGetAgentIpAddressReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(S2SGetAgentIpAddressReq* other);
  friend void swap(S2SGetAgentIpAddressReq& a, S2SGetAgentIpAddressReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SGetAgentIpAddressReq* New() const final {
    return CreateMaybeMessage<S2SGetAgentIpAddressReq>(NULL);
  }

  S2SGetAgentIpAddressReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SGetAgentIpAddressReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SGetAgentIpAddressReq& from);
  void MergeFrom(const S2SGetAgentIpAddressReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SGetAgentIpAddressReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes localip = 1;
  void clear_localip();
  static const int kLocalipFieldNumber = 1;
  const ::std::string& localip() const;
  void set_localip(const ::std::string& value);
  #if LANG_CXX11
  void set_localip(::std::string&& value);
  #endif
  void set_localip(const char* value);
  void set_localip(const void* value, size_t size);
  ::std::string* mutable_localip();
  ::std::string* release_localip();
  void set_allocated_localip(::std::string* localip);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SGetAgentIpAddressReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr localip_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFDeployMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SGetAgentIpAddressAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SGetAgentIpAddressAck) */ {
 public:
  S2SGetAgentIpAddressAck();
  virtual ~S2SGetAgentIpAddressAck();

  S2SGetAgentIpAddressAck(const S2SGetAgentIpAddressAck& from);

  inline S2SGetAgentIpAddressAck& operator=(const S2SGetAgentIpAddressAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SGetAgentIpAddressAck(S2SGetAgentIpAddressAck&& from) noexcept
    : S2SGetAgentIpAddressAck() {
    *this = ::std::move(from);
  }

  inline S2SGetAgentIpAddressAck& operator=(S2SGetAgentIpAddressAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SGetAgentIpAddressAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SGetAgentIpAddressAck* internal_default_instance() {
    return reinterpret_cast<const S2SGetAgentIpAddressAck*>(
               &_S2SGetAgentIpAddressAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(S2SGetAgentIpAddressAck* other);
  friend void swap(S2SGetAgentIpAddressAck& a, S2SGetAgentIpAddressAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SGetAgentIpAddressAck* New() const final {
    return CreateMaybeMessage<S2SGetAgentIpAddressAck>(NULL);
  }

  S2SGetAgentIpAddressAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SGetAgentIpAddressAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SGetAgentIpAddressAck& from);
  void MergeFrom(const S2SGetAgentIpAddressAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SGetAgentIpAddressAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes appname = 1;
  void clear_appname();
  static const int kAppnameFieldNumber = 1;
  const ::std::string& appname() const;
  void set_appname(const ::std::string& value);
  #if LANG_CXX11
  void set_appname(::std::string&& value);
  #endif
  void set_appname(const char* value);
  void set_appname(const void* value, size_t size);
  ::std::string* mutable_appname();
  ::std::string* release_appname();
  void set_allocated_appname(::std::string* appname);

  // bytes apptype = 2;
  void clear_apptype();
  static const int kApptypeFieldNumber = 2;
  const ::std::string& apptype() const;
  void set_apptype(const ::std::string& value);
  #if LANG_CXX11
  void set_apptype(::std::string&& value);
  #endif
  void set_apptype(const char* value);
  void set_apptype(const void* value, size_t size);
  ::std::string* mutable_apptype();
  ::std::string* release_apptype();
  void set_allocated_apptype(::std::string* apptype);

  // bytes appid = 3;
  void clear_appid();
  static const int kAppidFieldNumber = 3;
  const ::std::string& appid() const;
  void set_appid(const ::std::string& value);
  #if LANG_CXX11
  void set_appid(::std::string&& value);
  #endif
  void set_appid(const char* value);
  void set_appid(const void* value, size_t size);
  ::std::string* mutable_appid();
  ::std::string* release_appid();
  void set_allocated_appid(::std::string* appid);

  // bytes ip = 4;
  void clear_ip();
  static const int kIpFieldNumber = 4;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // uint32 port = 5;
  void clear_port();
  static const int kPortFieldNumber = 5;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SGetAgentIpAddressAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appname_;
  ::google::protobuf::internal::ArenaStringPtr apptype_;
  ::google::protobuf::internal::ArenaStringPtr appid_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFDeployMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBDeployCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.PBDeployCommand) */ {
 public:
  PBDeployCommand();
  virtual ~PBDeployCommand();

  PBDeployCommand(const PBDeployCommand& from);

  inline PBDeployCommand& operator=(const PBDeployCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PBDeployCommand(PBDeployCommand&& from) noexcept
    : PBDeployCommand() {
    *this = ::std::move(from);
  }

  inline PBDeployCommand& operator=(PBDeployCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBDeployCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBDeployCommand* internal_default_instance() {
    return reinterpret_cast<const PBDeployCommand*>(
               &_PBDeployCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PBDeployCommand* other);
  friend void swap(PBDeployCommand& a, PBDeployCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PBDeployCommand* New() const final {
    return CreateMaybeMessage<PBDeployCommand>(NULL);
  }

  PBDeployCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PBDeployCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PBDeployCommand& from);
  void MergeFrom(const PBDeployCommand& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBDeployCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes command = 1;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  const ::std::string& command() const;
  void set_command(const ::std::string& value);
  #if LANG_CXX11
  void set_command(::std::string&& value);
  #endif
  void set_command(const char* value);
  void set_command(const void* value, size_t size);
  ::std::string* mutable_command();
  ::std::string* release_command();
  void set_allocated_command(::std::string* command);

  // bytes appname = 2;
  void clear_appname();
  static const int kAppnameFieldNumber = 2;
  const ::std::string& appname() const;
  void set_appname(const ::std::string& value);
  #if LANG_CXX11
  void set_appname(::std::string&& value);
  #endif
  void set_appname(const char* value);
  void set_appname(const void* value, size_t size);
  ::std::string* mutable_appname();
  ::std::string* release_appname();
  void set_allocated_appname(::std::string* appname);

  // bytes apptype = 3;
  void clear_apptype();
  static const int kApptypeFieldNumber = 3;
  const ::std::string& apptype() const;
  void set_apptype(const ::std::string& value);
  #if LANG_CXX11
  void set_apptype(::std::string&& value);
  #endif
  void set_apptype(const char* value);
  void set_apptype(const void* value, size_t size);
  ::std::string* mutable_apptype();
  ::std::string* release_apptype();
  void set_allocated_apptype(::std::string* apptype);

  // bytes appid = 4;
  void clear_appid();
  static const int kAppidFieldNumber = 4;
  const ::std::string& appid() const;
  void set_appid(const ::std::string& value);
  #if LANG_CXX11
  void set_appid(::std::string&& value);
  #endif
  void set_appid(const char* value);
  void set_appid(const void* value, size_t size);
  ::std::string* mutable_appid();
  ::std::string* release_appid();
  void set_allocated_appid(::std::string* appid);

  // bytes value = 6;
  void clear_value();
  static const int kValueFieldNumber = 6;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // bytes logurl = 7;
  void clear_logurl();
  static const int kLogurlFieldNumber = 7;
  const ::std::string& logurl() const;
  void set_logurl(const ::std::string& value);
  #if LANG_CXX11
  void set_logurl(::std::string&& value);
  #endif
  void set_logurl(const char* value);
  void set_logurl(const void* value, size_t size);
  ::std::string* mutable_logurl();
  ::std::string* release_logurl();
  void set_allocated_logurl(::std::string* logurl);

  // uint32 zoneid = 5;
  void clear_zoneid();
  static const int kZoneidFieldNumber = 5;
  ::google::protobuf::uint32 zoneid() const;
  void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.PBDeployCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr command_;
  ::google::protobuf::internal::ArenaStringPtr appname_;
  ::google::protobuf::internal::ArenaStringPtr apptype_;
  ::google::protobuf::internal::ArenaStringPtr appid_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr logurl_;
  ::google::protobuf::uint32 zoneid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFDeployMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SDeployCommandToAgentReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SDeployCommandToAgentReq) */ {
 public:
  S2SDeployCommandToAgentReq();
  virtual ~S2SDeployCommandToAgentReq();

  S2SDeployCommandToAgentReq(const S2SDeployCommandToAgentReq& from);

  inline S2SDeployCommandToAgentReq& operator=(const S2SDeployCommandToAgentReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SDeployCommandToAgentReq(S2SDeployCommandToAgentReq&& from) noexcept
    : S2SDeployCommandToAgentReq() {
    *this = ::std::move(from);
  }

  inline S2SDeployCommandToAgentReq& operator=(S2SDeployCommandToAgentReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SDeployCommandToAgentReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SDeployCommandToAgentReq* internal_default_instance() {
    return reinterpret_cast<const S2SDeployCommandToAgentReq*>(
               &_S2SDeployCommandToAgentReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(S2SDeployCommandToAgentReq* other);
  friend void swap(S2SDeployCommandToAgentReq& a, S2SDeployCommandToAgentReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SDeployCommandToAgentReq* New() const final {
    return CreateMaybeMessage<S2SDeployCommandToAgentReq>(NULL);
  }

  S2SDeployCommandToAgentReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SDeployCommandToAgentReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SDeployCommandToAgentReq& from);
  void MergeFrom(const S2SDeployCommandToAgentReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SDeployCommandToAgentReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .KFMsg.PBDeployCommand deploycommand = 1;
  bool has_deploycommand() const;
  void clear_deploycommand();
  static const int kDeploycommandFieldNumber = 1;
  private:
  const ::KFMsg::PBDeployCommand& _internal_deploycommand() const;
  public:
  const ::KFMsg::PBDeployCommand& deploycommand() const;
  ::KFMsg::PBDeployCommand* release_deploycommand();
  ::KFMsg::PBDeployCommand* mutable_deploycommand();
  void set_allocated_deploycommand(::KFMsg::PBDeployCommand* deploycommand);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SDeployCommandToAgentReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::KFMsg::PBDeployCommand* deploycommand_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFDeployMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SDeployCommandToMasterReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SDeployCommandToMasterReq) */ {
 public:
  S2SDeployCommandToMasterReq();
  virtual ~S2SDeployCommandToMasterReq();

  S2SDeployCommandToMasterReq(const S2SDeployCommandToMasterReq& from);

  inline S2SDeployCommandToMasterReq& operator=(const S2SDeployCommandToMasterReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SDeployCommandToMasterReq(S2SDeployCommandToMasterReq&& from) noexcept
    : S2SDeployCommandToMasterReq() {
    *this = ::std::move(from);
  }

  inline S2SDeployCommandToMasterReq& operator=(S2SDeployCommandToMasterReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SDeployCommandToMasterReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SDeployCommandToMasterReq* internal_default_instance() {
    return reinterpret_cast<const S2SDeployCommandToMasterReq*>(
               &_S2SDeployCommandToMasterReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(S2SDeployCommandToMasterReq* other);
  friend void swap(S2SDeployCommandToMasterReq& a, S2SDeployCommandToMasterReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SDeployCommandToMasterReq* New() const final {
    return CreateMaybeMessage<S2SDeployCommandToMasterReq>(NULL);
  }

  S2SDeployCommandToMasterReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SDeployCommandToMasterReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SDeployCommandToMasterReq& from);
  void MergeFrom(const S2SDeployCommandToMasterReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SDeployCommandToMasterReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .KFMsg.PBDeployCommand deploycommand = 1;
  bool has_deploycommand() const;
  void clear_deploycommand();
  static const int kDeploycommandFieldNumber = 1;
  private:
  const ::KFMsg::PBDeployCommand& _internal_deploycommand() const;
  public:
  const ::KFMsg::PBDeployCommand& deploycommand() const;
  ::KFMsg::PBDeployCommand* release_deploycommand();
  ::KFMsg::PBDeployCommand* mutable_deploycommand();
  void set_allocated_deploycommand(::KFMsg::PBDeployCommand* deploycommand);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SDeployCommandToMasterReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::KFMsg::PBDeployCommand* deploycommand_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFDeployMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SDeployCommandToServerReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SDeployCommandToServerReq) */ {
 public:
  S2SDeployCommandToServerReq();
  virtual ~S2SDeployCommandToServerReq();

  S2SDeployCommandToServerReq(const S2SDeployCommandToServerReq& from);

  inline S2SDeployCommandToServerReq& operator=(const S2SDeployCommandToServerReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SDeployCommandToServerReq(S2SDeployCommandToServerReq&& from) noexcept
    : S2SDeployCommandToServerReq() {
    *this = ::std::move(from);
  }

  inline S2SDeployCommandToServerReq& operator=(S2SDeployCommandToServerReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SDeployCommandToServerReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SDeployCommandToServerReq* internal_default_instance() {
    return reinterpret_cast<const S2SDeployCommandToServerReq*>(
               &_S2SDeployCommandToServerReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(S2SDeployCommandToServerReq* other);
  friend void swap(S2SDeployCommandToServerReq& a, S2SDeployCommandToServerReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SDeployCommandToServerReq* New() const final {
    return CreateMaybeMessage<S2SDeployCommandToServerReq>(NULL);
  }

  S2SDeployCommandToServerReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SDeployCommandToServerReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SDeployCommandToServerReq& from);
  void MergeFrom(const S2SDeployCommandToServerReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SDeployCommandToServerReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .KFMsg.PBDeployCommand deploycommand = 1;
  bool has_deploycommand() const;
  void clear_deploycommand();
  static const int kDeploycommandFieldNumber = 1;
  private:
  const ::KFMsg::PBDeployCommand& _internal_deploycommand() const;
  public:
  const ::KFMsg::PBDeployCommand& deploycommand() const;
  ::KFMsg::PBDeployCommand* release_deploycommand();
  ::KFMsg::PBDeployCommand* mutable_deploycommand();
  void set_allocated_deploycommand(::KFMsg::PBDeployCommand* deploycommand);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SDeployCommandToServerReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::KFMsg::PBDeployCommand* deploycommand_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFDeployMessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// S2SRegisterAgentToServerReq

// bytes agentid = 1;
inline void S2SRegisterAgentToServerReq::clear_agentid() {
  agentid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRegisterAgentToServerReq::agentid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRegisterAgentToServerReq.agentid)
  return agentid_.GetNoArena();
}
inline void S2SRegisterAgentToServerReq::set_agentid(const ::std::string& value) {
  
  agentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRegisterAgentToServerReq.agentid)
}
#if LANG_CXX11
inline void S2SRegisterAgentToServerReq::set_agentid(::std::string&& value) {
  
  agentid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRegisterAgentToServerReq.agentid)
}
#endif
inline void S2SRegisterAgentToServerReq::set_agentid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  agentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRegisterAgentToServerReq.agentid)
}
inline void S2SRegisterAgentToServerReq::set_agentid(const void* value, size_t size) {
  
  agentid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRegisterAgentToServerReq.agentid)
}
inline ::std::string* S2SRegisterAgentToServerReq::mutable_agentid() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRegisterAgentToServerReq.agentid)
  return agentid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRegisterAgentToServerReq::release_agentid() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRegisterAgentToServerReq.agentid)
  
  return agentid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRegisterAgentToServerReq::set_allocated_agentid(::std::string* agentid) {
  if (agentid != NULL) {
    
  } else {
    
  }
  agentid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), agentid);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRegisterAgentToServerReq.agentid)
}

// bytes localip = 2;
inline void S2SRegisterAgentToServerReq::clear_localip() {
  localip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRegisterAgentToServerReq::localip() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRegisterAgentToServerReq.localip)
  return localip_.GetNoArena();
}
inline void S2SRegisterAgentToServerReq::set_localip(const ::std::string& value) {
  
  localip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRegisterAgentToServerReq.localip)
}
#if LANG_CXX11
inline void S2SRegisterAgentToServerReq::set_localip(::std::string&& value) {
  
  localip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRegisterAgentToServerReq.localip)
}
#endif
inline void S2SRegisterAgentToServerReq::set_localip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  localip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRegisterAgentToServerReq.localip)
}
inline void S2SRegisterAgentToServerReq::set_localip(const void* value, size_t size) {
  
  localip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRegisterAgentToServerReq.localip)
}
inline ::std::string* S2SRegisterAgentToServerReq::mutable_localip() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRegisterAgentToServerReq.localip)
  return localip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRegisterAgentToServerReq::release_localip() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRegisterAgentToServerReq.localip)
  
  return localip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRegisterAgentToServerReq::set_allocated_localip(::std::string* localip) {
  if (localip != NULL) {
    
  } else {
    
  }
  localip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), localip);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRegisterAgentToServerReq.localip)
}

// bytes name = 3;
inline void S2SRegisterAgentToServerReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRegisterAgentToServerReq::name() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRegisterAgentToServerReq.name)
  return name_.GetNoArena();
}
inline void S2SRegisterAgentToServerReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRegisterAgentToServerReq.name)
}
#if LANG_CXX11
inline void S2SRegisterAgentToServerReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRegisterAgentToServerReq.name)
}
#endif
inline void S2SRegisterAgentToServerReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRegisterAgentToServerReq.name)
}
inline void S2SRegisterAgentToServerReq::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRegisterAgentToServerReq.name)
}
inline ::std::string* S2SRegisterAgentToServerReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRegisterAgentToServerReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRegisterAgentToServerReq::release_name() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRegisterAgentToServerReq.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRegisterAgentToServerReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRegisterAgentToServerReq.name)
}

// bytes type = 4;
inline void S2SRegisterAgentToServerReq::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SRegisterAgentToServerReq::type() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRegisterAgentToServerReq.type)
  return type_.GetNoArena();
}
inline void S2SRegisterAgentToServerReq::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRegisterAgentToServerReq.type)
}
#if LANG_CXX11
inline void S2SRegisterAgentToServerReq::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SRegisterAgentToServerReq.type)
}
#endif
inline void S2SRegisterAgentToServerReq::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SRegisterAgentToServerReq.type)
}
inline void S2SRegisterAgentToServerReq::set_type(const void* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SRegisterAgentToServerReq.type)
}
inline ::std::string* S2SRegisterAgentToServerReq::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRegisterAgentToServerReq.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SRegisterAgentToServerReq::release_type() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRegisterAgentToServerReq.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SRegisterAgentToServerReq::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRegisterAgentToServerReq.type)
}

// uint32 port = 5;
inline void S2SRegisterAgentToServerReq::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 S2SRegisterAgentToServerReq::port() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRegisterAgentToServerReq.port)
  return port_;
}
inline void S2SRegisterAgentToServerReq::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRegisterAgentToServerReq.port)
}

// -------------------------------------------------------------------

// S2SGetAgentIpAddressReq

// bytes localip = 1;
inline void S2SGetAgentIpAddressReq::clear_localip() {
  localip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SGetAgentIpAddressReq::localip() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SGetAgentIpAddressReq.localip)
  return localip_.GetNoArena();
}
inline void S2SGetAgentIpAddressReq::set_localip(const ::std::string& value) {
  
  localip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SGetAgentIpAddressReq.localip)
}
#if LANG_CXX11
inline void S2SGetAgentIpAddressReq::set_localip(::std::string&& value) {
  
  localip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SGetAgentIpAddressReq.localip)
}
#endif
inline void S2SGetAgentIpAddressReq::set_localip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  localip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SGetAgentIpAddressReq.localip)
}
inline void S2SGetAgentIpAddressReq::set_localip(const void* value, size_t size) {
  
  localip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SGetAgentIpAddressReq.localip)
}
inline ::std::string* S2SGetAgentIpAddressReq::mutable_localip() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SGetAgentIpAddressReq.localip)
  return localip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SGetAgentIpAddressReq::release_localip() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SGetAgentIpAddressReq.localip)
  
  return localip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SGetAgentIpAddressReq::set_allocated_localip(::std::string* localip) {
  if (localip != NULL) {
    
  } else {
    
  }
  localip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), localip);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SGetAgentIpAddressReq.localip)
}

// -------------------------------------------------------------------

// S2SGetAgentIpAddressAck

// bytes appname = 1;
inline void S2SGetAgentIpAddressAck::clear_appname() {
  appname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SGetAgentIpAddressAck::appname() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SGetAgentIpAddressAck.appname)
  return appname_.GetNoArena();
}
inline void S2SGetAgentIpAddressAck::set_appname(const ::std::string& value) {
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SGetAgentIpAddressAck.appname)
}
#if LANG_CXX11
inline void S2SGetAgentIpAddressAck::set_appname(::std::string&& value) {
  
  appname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SGetAgentIpAddressAck.appname)
}
#endif
inline void S2SGetAgentIpAddressAck::set_appname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SGetAgentIpAddressAck.appname)
}
inline void S2SGetAgentIpAddressAck::set_appname(const void* value, size_t size) {
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SGetAgentIpAddressAck.appname)
}
inline ::std::string* S2SGetAgentIpAddressAck::mutable_appname() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SGetAgentIpAddressAck.appname)
  return appname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SGetAgentIpAddressAck::release_appname() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SGetAgentIpAddressAck.appname)
  
  return appname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SGetAgentIpAddressAck::set_allocated_appname(::std::string* appname) {
  if (appname != NULL) {
    
  } else {
    
  }
  appname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appname);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SGetAgentIpAddressAck.appname)
}

// bytes apptype = 2;
inline void S2SGetAgentIpAddressAck::clear_apptype() {
  apptype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SGetAgentIpAddressAck::apptype() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SGetAgentIpAddressAck.apptype)
  return apptype_.GetNoArena();
}
inline void S2SGetAgentIpAddressAck::set_apptype(const ::std::string& value) {
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SGetAgentIpAddressAck.apptype)
}
#if LANG_CXX11
inline void S2SGetAgentIpAddressAck::set_apptype(::std::string&& value) {
  
  apptype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SGetAgentIpAddressAck.apptype)
}
#endif
inline void S2SGetAgentIpAddressAck::set_apptype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SGetAgentIpAddressAck.apptype)
}
inline void S2SGetAgentIpAddressAck::set_apptype(const void* value, size_t size) {
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SGetAgentIpAddressAck.apptype)
}
inline ::std::string* S2SGetAgentIpAddressAck::mutable_apptype() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SGetAgentIpAddressAck.apptype)
  return apptype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SGetAgentIpAddressAck::release_apptype() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SGetAgentIpAddressAck.apptype)
  
  return apptype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SGetAgentIpAddressAck::set_allocated_apptype(::std::string* apptype) {
  if (apptype != NULL) {
    
  } else {
    
  }
  apptype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apptype);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SGetAgentIpAddressAck.apptype)
}

// bytes appid = 3;
inline void S2SGetAgentIpAddressAck::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SGetAgentIpAddressAck::appid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SGetAgentIpAddressAck.appid)
  return appid_.GetNoArena();
}
inline void S2SGetAgentIpAddressAck::set_appid(const ::std::string& value) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SGetAgentIpAddressAck.appid)
}
#if LANG_CXX11
inline void S2SGetAgentIpAddressAck::set_appid(::std::string&& value) {
  
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SGetAgentIpAddressAck.appid)
}
#endif
inline void S2SGetAgentIpAddressAck::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SGetAgentIpAddressAck.appid)
}
inline void S2SGetAgentIpAddressAck::set_appid(const void* value, size_t size) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SGetAgentIpAddressAck.appid)
}
inline ::std::string* S2SGetAgentIpAddressAck::mutable_appid() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SGetAgentIpAddressAck.appid)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SGetAgentIpAddressAck::release_appid() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SGetAgentIpAddressAck.appid)
  
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SGetAgentIpAddressAck::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    
  } else {
    
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SGetAgentIpAddressAck.appid)
}

// bytes ip = 4;
inline void S2SGetAgentIpAddressAck::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SGetAgentIpAddressAck::ip() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SGetAgentIpAddressAck.ip)
  return ip_.GetNoArena();
}
inline void S2SGetAgentIpAddressAck::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SGetAgentIpAddressAck.ip)
}
#if LANG_CXX11
inline void S2SGetAgentIpAddressAck::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SGetAgentIpAddressAck.ip)
}
#endif
inline void S2SGetAgentIpAddressAck::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SGetAgentIpAddressAck.ip)
}
inline void S2SGetAgentIpAddressAck::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SGetAgentIpAddressAck.ip)
}
inline ::std::string* S2SGetAgentIpAddressAck::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SGetAgentIpAddressAck.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SGetAgentIpAddressAck::release_ip() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SGetAgentIpAddressAck.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SGetAgentIpAddressAck::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SGetAgentIpAddressAck.ip)
}

// uint32 port = 5;
inline void S2SGetAgentIpAddressAck::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 S2SGetAgentIpAddressAck::port() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SGetAgentIpAddressAck.port)
  return port_;
}
inline void S2SGetAgentIpAddressAck::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SGetAgentIpAddressAck.port)
}

// -------------------------------------------------------------------

// PBDeployCommand

// bytes command = 1;
inline void PBDeployCommand::clear_command() {
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBDeployCommand::command() const {
  // @@protoc_insertion_point(field_get:KFMsg.PBDeployCommand.command)
  return command_.GetNoArena();
}
inline void PBDeployCommand::set_command(const ::std::string& value) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.PBDeployCommand.command)
}
#if LANG_CXX11
inline void PBDeployCommand::set_command(::std::string&& value) {
  
  command_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.PBDeployCommand.command)
}
#endif
inline void PBDeployCommand::set_command(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.PBDeployCommand.command)
}
inline void PBDeployCommand::set_command(const void* value, size_t size) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.PBDeployCommand.command)
}
inline ::std::string* PBDeployCommand::mutable_command() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.PBDeployCommand.command)
  return command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBDeployCommand::release_command() {
  // @@protoc_insertion_point(field_release:KFMsg.PBDeployCommand.command)
  
  return command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBDeployCommand::set_allocated_command(::std::string* command) {
  if (command != NULL) {
    
  } else {
    
  }
  command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.PBDeployCommand.command)
}

// bytes appname = 2;
inline void PBDeployCommand::clear_appname() {
  appname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBDeployCommand::appname() const {
  // @@protoc_insertion_point(field_get:KFMsg.PBDeployCommand.appname)
  return appname_.GetNoArena();
}
inline void PBDeployCommand::set_appname(const ::std::string& value) {
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.PBDeployCommand.appname)
}
#if LANG_CXX11
inline void PBDeployCommand::set_appname(::std::string&& value) {
  
  appname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.PBDeployCommand.appname)
}
#endif
inline void PBDeployCommand::set_appname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.PBDeployCommand.appname)
}
inline void PBDeployCommand::set_appname(const void* value, size_t size) {
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.PBDeployCommand.appname)
}
inline ::std::string* PBDeployCommand::mutable_appname() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.PBDeployCommand.appname)
  return appname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBDeployCommand::release_appname() {
  // @@protoc_insertion_point(field_release:KFMsg.PBDeployCommand.appname)
  
  return appname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBDeployCommand::set_allocated_appname(::std::string* appname) {
  if (appname != NULL) {
    
  } else {
    
  }
  appname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appname);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.PBDeployCommand.appname)
}

// bytes apptype = 3;
inline void PBDeployCommand::clear_apptype() {
  apptype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBDeployCommand::apptype() const {
  // @@protoc_insertion_point(field_get:KFMsg.PBDeployCommand.apptype)
  return apptype_.GetNoArena();
}
inline void PBDeployCommand::set_apptype(const ::std::string& value) {
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.PBDeployCommand.apptype)
}
#if LANG_CXX11
inline void PBDeployCommand::set_apptype(::std::string&& value) {
  
  apptype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.PBDeployCommand.apptype)
}
#endif
inline void PBDeployCommand::set_apptype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.PBDeployCommand.apptype)
}
inline void PBDeployCommand::set_apptype(const void* value, size_t size) {
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.PBDeployCommand.apptype)
}
inline ::std::string* PBDeployCommand::mutable_apptype() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.PBDeployCommand.apptype)
  return apptype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBDeployCommand::release_apptype() {
  // @@protoc_insertion_point(field_release:KFMsg.PBDeployCommand.apptype)
  
  return apptype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBDeployCommand::set_allocated_apptype(::std::string* apptype) {
  if (apptype != NULL) {
    
  } else {
    
  }
  apptype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apptype);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.PBDeployCommand.apptype)
}

// bytes appid = 4;
inline void PBDeployCommand::clear_appid() {
  appid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBDeployCommand::appid() const {
  // @@protoc_insertion_point(field_get:KFMsg.PBDeployCommand.appid)
  return appid_.GetNoArena();
}
inline void PBDeployCommand::set_appid(const ::std::string& value) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.PBDeployCommand.appid)
}
#if LANG_CXX11
inline void PBDeployCommand::set_appid(::std::string&& value) {
  
  appid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.PBDeployCommand.appid)
}
#endif
inline void PBDeployCommand::set_appid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.PBDeployCommand.appid)
}
inline void PBDeployCommand::set_appid(const void* value, size_t size) {
  
  appid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.PBDeployCommand.appid)
}
inline ::std::string* PBDeployCommand::mutable_appid() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.PBDeployCommand.appid)
  return appid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBDeployCommand::release_appid() {
  // @@protoc_insertion_point(field_release:KFMsg.PBDeployCommand.appid)
  
  return appid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBDeployCommand::set_allocated_appid(::std::string* appid) {
  if (appid != NULL) {
    
  } else {
    
  }
  appid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appid);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.PBDeployCommand.appid)
}

// uint32 zoneid = 5;
inline void PBDeployCommand::clear_zoneid() {
  zoneid_ = 0u;
}
inline ::google::protobuf::uint32 PBDeployCommand::zoneid() const {
  // @@protoc_insertion_point(field_get:KFMsg.PBDeployCommand.zoneid)
  return zoneid_;
}
inline void PBDeployCommand::set_zoneid(::google::protobuf::uint32 value) {
  
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.PBDeployCommand.zoneid)
}

// bytes value = 6;
inline void PBDeployCommand::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBDeployCommand::value() const {
  // @@protoc_insertion_point(field_get:KFMsg.PBDeployCommand.value)
  return value_.GetNoArena();
}
inline void PBDeployCommand::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.PBDeployCommand.value)
}
#if LANG_CXX11
inline void PBDeployCommand::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.PBDeployCommand.value)
}
#endif
inline void PBDeployCommand::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.PBDeployCommand.value)
}
inline void PBDeployCommand::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.PBDeployCommand.value)
}
inline ::std::string* PBDeployCommand::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.PBDeployCommand.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBDeployCommand::release_value() {
  // @@protoc_insertion_point(field_release:KFMsg.PBDeployCommand.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBDeployCommand::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.PBDeployCommand.value)
}

// bytes logurl = 7;
inline void PBDeployCommand::clear_logurl() {
  logurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBDeployCommand::logurl() const {
  // @@protoc_insertion_point(field_get:KFMsg.PBDeployCommand.logurl)
  return logurl_.GetNoArena();
}
inline void PBDeployCommand::set_logurl(const ::std::string& value) {
  
  logurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.PBDeployCommand.logurl)
}
#if LANG_CXX11
inline void PBDeployCommand::set_logurl(::std::string&& value) {
  
  logurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.PBDeployCommand.logurl)
}
#endif
inline void PBDeployCommand::set_logurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  logurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.PBDeployCommand.logurl)
}
inline void PBDeployCommand::set_logurl(const void* value, size_t size) {
  
  logurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.PBDeployCommand.logurl)
}
inline ::std::string* PBDeployCommand::mutable_logurl() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.PBDeployCommand.logurl)
  return logurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBDeployCommand::release_logurl() {
  // @@protoc_insertion_point(field_release:KFMsg.PBDeployCommand.logurl)
  
  return logurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBDeployCommand::set_allocated_logurl(::std::string* logurl) {
  if (logurl != NULL) {
    
  } else {
    
  }
  logurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logurl);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.PBDeployCommand.logurl)
}

// -------------------------------------------------------------------

// S2SDeployCommandToAgentReq

// .KFMsg.PBDeployCommand deploycommand = 1;
inline bool S2SDeployCommandToAgentReq::has_deploycommand() const {
  return this != internal_default_instance() && deploycommand_ != NULL;
}
inline void S2SDeployCommandToAgentReq::clear_deploycommand() {
  if (GetArenaNoVirtual() == NULL && deploycommand_ != NULL) {
    delete deploycommand_;
  }
  deploycommand_ = NULL;
}
inline const ::KFMsg::PBDeployCommand& S2SDeployCommandToAgentReq::_internal_deploycommand() const {
  return *deploycommand_;
}
inline const ::KFMsg::PBDeployCommand& S2SDeployCommandToAgentReq::deploycommand() const {
  const ::KFMsg::PBDeployCommand* p = deploycommand_;
  // @@protoc_insertion_point(field_get:KFMsg.S2SDeployCommandToAgentReq.deploycommand)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBDeployCommand*>(
      &::KFMsg::_PBDeployCommand_default_instance_);
}
inline ::KFMsg::PBDeployCommand* S2SDeployCommandToAgentReq::release_deploycommand() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SDeployCommandToAgentReq.deploycommand)
  
  ::KFMsg::PBDeployCommand* temp = deploycommand_;
  deploycommand_ = NULL;
  return temp;
}
inline ::KFMsg::PBDeployCommand* S2SDeployCommandToAgentReq::mutable_deploycommand() {
  
  if (deploycommand_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBDeployCommand>(GetArenaNoVirtual());
    deploycommand_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SDeployCommandToAgentReq.deploycommand)
  return deploycommand_;
}
inline void S2SDeployCommandToAgentReq::set_allocated_deploycommand(::KFMsg::PBDeployCommand* deploycommand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete deploycommand_;
  }
  if (deploycommand) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deploycommand = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deploycommand, submessage_arena);
    }
    
  } else {
    
  }
  deploycommand_ = deploycommand;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SDeployCommandToAgentReq.deploycommand)
}

// -------------------------------------------------------------------

// S2SDeployCommandToMasterReq

// .KFMsg.PBDeployCommand deploycommand = 1;
inline bool S2SDeployCommandToMasterReq::has_deploycommand() const {
  return this != internal_default_instance() && deploycommand_ != NULL;
}
inline void S2SDeployCommandToMasterReq::clear_deploycommand() {
  if (GetArenaNoVirtual() == NULL && deploycommand_ != NULL) {
    delete deploycommand_;
  }
  deploycommand_ = NULL;
}
inline const ::KFMsg::PBDeployCommand& S2SDeployCommandToMasterReq::_internal_deploycommand() const {
  return *deploycommand_;
}
inline const ::KFMsg::PBDeployCommand& S2SDeployCommandToMasterReq::deploycommand() const {
  const ::KFMsg::PBDeployCommand* p = deploycommand_;
  // @@protoc_insertion_point(field_get:KFMsg.S2SDeployCommandToMasterReq.deploycommand)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBDeployCommand*>(
      &::KFMsg::_PBDeployCommand_default_instance_);
}
inline ::KFMsg::PBDeployCommand* S2SDeployCommandToMasterReq::release_deploycommand() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SDeployCommandToMasterReq.deploycommand)
  
  ::KFMsg::PBDeployCommand* temp = deploycommand_;
  deploycommand_ = NULL;
  return temp;
}
inline ::KFMsg::PBDeployCommand* S2SDeployCommandToMasterReq::mutable_deploycommand() {
  
  if (deploycommand_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBDeployCommand>(GetArenaNoVirtual());
    deploycommand_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SDeployCommandToMasterReq.deploycommand)
  return deploycommand_;
}
inline void S2SDeployCommandToMasterReq::set_allocated_deploycommand(::KFMsg::PBDeployCommand* deploycommand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete deploycommand_;
  }
  if (deploycommand) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deploycommand = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deploycommand, submessage_arena);
    }
    
  } else {
    
  }
  deploycommand_ = deploycommand;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SDeployCommandToMasterReq.deploycommand)
}

// -------------------------------------------------------------------

// S2SDeployCommandToServerReq

// .KFMsg.PBDeployCommand deploycommand = 1;
inline bool S2SDeployCommandToServerReq::has_deploycommand() const {
  return this != internal_default_instance() && deploycommand_ != NULL;
}
inline void S2SDeployCommandToServerReq::clear_deploycommand() {
  if (GetArenaNoVirtual() == NULL && deploycommand_ != NULL) {
    delete deploycommand_;
  }
  deploycommand_ = NULL;
}
inline const ::KFMsg::PBDeployCommand& S2SDeployCommandToServerReq::_internal_deploycommand() const {
  return *deploycommand_;
}
inline const ::KFMsg::PBDeployCommand& S2SDeployCommandToServerReq::deploycommand() const {
  const ::KFMsg::PBDeployCommand* p = deploycommand_;
  // @@protoc_insertion_point(field_get:KFMsg.S2SDeployCommandToServerReq.deploycommand)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBDeployCommand*>(
      &::KFMsg::_PBDeployCommand_default_instance_);
}
inline ::KFMsg::PBDeployCommand* S2SDeployCommandToServerReq::release_deploycommand() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SDeployCommandToServerReq.deploycommand)
  
  ::KFMsg::PBDeployCommand* temp = deploycommand_;
  deploycommand_ = NULL;
  return temp;
}
inline ::KFMsg::PBDeployCommand* S2SDeployCommandToServerReq::mutable_deploycommand() {
  
  if (deploycommand_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBDeployCommand>(GetArenaNoVirtual());
    deploycommand_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SDeployCommandToServerReq.deploycommand)
  return deploycommand_;
}
inline void S2SDeployCommandToServerReq::set_allocated_deploycommand(::KFMsg::PBDeployCommand* deploycommand) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete deploycommand_;
  }
  if (deploycommand) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deploycommand = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deploycommand, submessage_arena);
    }
    
  } else {
    
  }
  deploycommand_ = deploycommand;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SDeployCommandToServerReq.deploycommand)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::KFMsg::DeployProtocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::DeployProtocol>() {
  return ::KFMsg::DeployProtocol_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_KFDeployMessage_2eproto
