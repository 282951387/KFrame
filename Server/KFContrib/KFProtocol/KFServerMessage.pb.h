// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFServerMessage.proto

#ifndef PROTOBUF_KFServerMessage_2eproto__INCLUDED
#define PROTOBUF_KFServerMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "KFCommonMessage.pb.h"
// @@protoc_insertion_point(includes)

namespace KFMsg {

// Internal implementation detail -- do not call these.
void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
void protobuf_AssignDesc_KFServerMessage_2eproto();
void protobuf_ShutdownFile_KFServerMessage_2eproto();

class S2STransmitMessageReq;
class S2SBroadcastMessageReq;
class S2SUpdateZoneToProxyReq;
class S2STransmitToDataShardReq;
class S2SSavePlayerReq;
class S2SDeletePlayerReq;
class S2SUpdatePublicDataReq;
class S2SKickGamePlayerReq;
class S2SKickProxyPlayerReq;
class S2SLoginProxyUpdateReq;
class S2SLoginProxyRemoveReq;
class S2SLoginGameUpdateReq;
class S2SLoginLoginVerifyReq;
class S2SLoginLoginVerifyAck;
class S2SLoginWorldVerifyReq;
class S2SLoginWorldVerifyAck;
class S2SLoginTellTokenToGameReq;
class S2SLoginTellTokenToGameAck;
class S2SLoginTellTokenToProxyReq;
class S2SLoginTellTokenToWorldAck;
class S2SLoginQueryPlayerIdReq;
class S2SLoginQueryPlayerIdAck;
class S2SLoginGameReq;
class S2SLoginGameAck;
class S2SLoginLoadPlayerReq;
class S2SLoginLoadPlayerAck;
class S2SLoginCreatePlayerReq;
class S2SLoginOutReq;
class S2SPlayerDisconnectionReq;
class S2SSetPlayerNameReq;
class S2SSetPlayerNameAck;
class S2SCreateRoleReq;
class S2SCreateRoleAck;
class S2SPlayerEnterWorldReq;
class S2SPlayerLeaveWorldReq;
class S2SGameSyncOnlineReq;
class S2SQueryMailReq;
class PBMail;
class PBMails;
class S2SQueryMailAck;
class S2SDeleteMailReq;
class S2SAddMailReq;
class S2SNoticeNewMailReq;
class PBFriend;
class S2SQueryFriendReq;
class S2SQueryFriendInviteReq;
class S2SQueryFriendAck;
class S2SQueryFriendInviteAck;
class S2SAddFriendInviteReq;
class S2SAddFriendInviteAck;
class S2SDelFriendReq;
class S2SDelFriendAck;
class S2SDelFriendInviteReq;
class S2SAddFriendReq;
class S2SAddFriendAck;
class S2SUpdateFriendReq;
class S2SUpdateFriendLinessReq;
class S2SQueryBasicReq;
class S2SQueryBasicAck;
class S2SQueryPlayerReq;
class S2SQueryPlayerAck;
class S2SUpdateMailFlagReq;
class S2SUpdateMailFlagAck;
class S2SPlayerToastReq;
class S2SPlayerToastAck;
class S2SQueryToastCountReq;
class S2SQueryToastCountAck;
class S2SUpdateFriendLinessAck;
class S2SCreateMatchGroupReq;
class S2SUpdateGroupMatchReq;
class S2SCreateMatchGroupToShardReq;
class S2SReceiveInviteMatchGroupReq;
class S2SConsentInviteMatchGroupReq;
class S2SAddMatchGroupMemberReq;
class S2SAddMatchGroupMemberAck;
class S2STellMatchGroupDataAck;
class S2SRemoveMatchGroupMemberAck;
class S2SLeaveMatchGroupReq;
class S2SKickMatchGroupReq;
class S2SLeaveMatchGroupAck;
class S2SApplyMatchGroupReq;
class S2SApplyMatchGroupAck;
class S2SConsentApplyMatchGroupAck;
class S2SOnLineQueryMatchGroupReq;
class S2SOffLineUpdateMatchGroupReq;
class S2SUpdateGroupMemberReq;
class S2SUpdateGroupMemberAck;
class S2SUpdateGroupDataAck;
class S2SUpdateGuestListReq;
class S2SQueryGuestReq;
class S2SQueryGuestAck;
class S2SNewPlayerLoginMailReq;
class PBScoreData;
class S2SJoinRankListReq;
class S2SQueryWholeRankListReq;
class S2SQueryFriendRankListReq;
class S2SQueryRankListAck;
class S2SUpdateZoneToRankProxyReq;
class S2STransmitToRankShardReq;

enum ServerProtocol {
  S2S_TRANSMIT_MESSAGE_REQ = 21001,
  S2S_BROADCAST_MESSAGE_REQ = 21002,
  S2S_SAVE_PLAYER_REQ = 21003,
  S2S_DELETE_PLAYER_REQ = 21004,
  S2S_UPDATE_PUBLIC_DATA_REQ = 21005,
  S2S_UPDATE_ZONE_TO_PROXY_REQ = 21006,
  S2S_TRANSMIT_TO_DATA_SHARD_REQ = 21007,
  S2S_LOGIN_TELL_TOKEN_TO_WORLD_ACK = 21097,
  S2S_LOGIN_TELL_TOKEN_TO_GAME_ACK = 21098,
  S2S_LOGIN_TELL_TOKEN_TO_PROXY_REQ = 21099,
  S2S_LOGIN_PROXY_REMOVE_REQ = 21100,
  S2S_KICK_GAME_PLAYER_REQ = 21101,
  S2S_KICK_PROXY_PLAYER_REQ = 21102,
  S2S_LOGIN_PROXY_UPDATE_REQ = 21103,
  S2S_LOGIN_LOGIN_VERIFY_REQ = 21104,
  S2S_LOGIN_LOGIN_VERIFY_ACK = 21105,
  S2S_LOGIN_TELL_TOKEN_TO_GAME_REQ = 21106,
  S2S_LOGIN_GAME_UPDATE_REQ = 21107,
  S2S_LOGIN_WORLD_VERIFY_REQ = 21108,
  S2S_LOGIN_WORLD_VERIFY_ACK = 21109,
  S2S_LOGIN_QUERY_PLAYERID_REQ = 21110,
  S2S_LOGIN_QUERY_PLAYERID_ACK = 21111,
  S2S_GAME_SYNC_ONLINE_REQ = 21113,
  S2S_LOGIN_GAME_REQ = 21114,
  S2S_LOGIN_GAME_ACK = 21115,
  S2S_LOGIN_LOAD_PLAYER_REQ = 21116,
  S2S_LOGIN_LOAD_PLAYER_ACK = 21117,
  S2S_LOGIN_CREATE_PLAYER_REQ = 21118,
  S2S_LOGIN_OUT_REQ = 21119,
  S2S_PLAYER_ENTER_WORLD_REQ = 21120,
  S2S_PLAYER_LEAVE_WORLD_REQ = 21121,
  S2S_SET_PLAYER_NAME_REQ = 21124,
  S2S_SET_PLAYER_NAME_ACK = 21125,
  S2S_PLAYER_DISCONNECTION_REQ = 21126,
  S2S_QUERY_MAIL_REQ = 21127,
  S2S_QUERY_MAIL_ACK = 21128,
  S2S_DELETE_MAIL_REQ = 21129,
  S2S_QUERY_FRIEND_REQ = 21130,
  S2S_ADD_FRIEND_INVITE_REQ = 21131,
  S2S_DEL_FRIEND_REQ = 21132,
  S2S_QUERY_FRIEND_ACK = 21133,
  S2S_QUERY_FRIEND_INVITE_ACK = 21134,
  S2S_ADD_FRIEND_INVITE_ACK = 21135,
  S2S_DEL_FRIEND_INVITE_REQ = 21136,
  S2S_ADD_FRIEND_REQ = 21137,
  S2S_DEL_FRIEND_ACK = 21138,
  S2S_ADD_FRIEND_ACK = 21139,
  S2S_UPDATE_FRIEND_REQ = 21140,
  S2S_ADD_MAIL_REQ = 21141,
  S2S_NOTICE_NEW_MAIL_REQ = 21142,
  S2S_UPDATE_FRIEND_LINESS_REQ = 21143,
  S2S_QUERY_BASIC_REQ = 21144,
  S2S_QUERY_PLAYER_REQ = 21145,
  S2S_QUERY_BASIC_ACK = 21146,
  S2S_QUERY_PLAYER_ACK = 21147,
  S2S_QUERY_FRIEND_INVITE_REQ = 21148,
  S2S_CREATE_ROLE_REQ = 21150,
  S2S_CREATE_ROLE_ACK = 21151,
  S2S_UPDATE_MAIL_FLAG_REQ = 21152,
  S2S_UPDATE_MAIL_FLAG_ACK = 21153,
  S2S_PLAYER_TOAST_REQ = 21156,
  S2S_PLAYER_TOAST_ACK = 21157,
  S2S_UPDATE_FRIENDLINESS_ACK = 21158,
  S2S_CREATE_MATCH_GROUP_REQ = 21159,
  S2S_RECEIVE_INVITE_MATCH_GROUP_REQ = 21160,
  S2S_CONSENT_INVITE_MATCH_GROUP_REQ = 21161,
  S2S_ADD_MATCH_GROUP_MEMBER_REQ = 21162,
  S2S_REMOVE_MATCH_GROUP_MEMBER_ACK = 21163,
  S2S_LEAVE_MATCH_GROUP_REQ = 21164,
  S2S_KICK_MATCH_GROUP_REQ = 21165,
  S2S_APPLY_MATCH_GROUP_REQ = 21166,
  S2S_LEAVE_MATCH_GROUP_ACK = 21167,
  S2S_CONSENT_APPLY_MATCH_GROUP_ACK = 21168,
  S2S_ONLINE_QUERY_MATCH_GROUP_REQ = 21169,
  S2S_ADD_MATCH_GROUP_MEMBER_ACK = 21170,
  S2S_UPDATE_GROUP_MEMBER_ACK = 21171,
  S2S_UPDATE_GROUP_MEMBER_REQ = 21172,
  S2S_OFFLINE_UPDATE_MATCH_GROUP_REQ = 21173,
  S2S_CREATE_MATCH_GROUP_TO_SHARD_REQ = 21174,
  S2S_UPDATE_GUEST_LIST_REQ = 21175,
  S2S_QUERY_GUEST_REQ = 21176,
  S2S_QUERY_GUEST_ACK = 21177,
  S2S_UPDATE_GROUP_DATA_ACK = 21178,
  S2S_APPLY_MATCH_GROUP_ACK = 21179,
  S2S_QUERY_TOAST_COUNT_REQ = 21180,
  S2S_QUERY_TOAST_COUNT_ACK = 21181,
  S2S_UPDATE_GROUP_MATCH_REQ = 21182,
  S2S_NEW_PLAYER_LOGIN_MAIL_REQ = 21184,
  S2S_JOIN_RANK_LIST_REQ = 21186,
  S2S_QUERY_WHOLE_RANK_LIST_REQ = 21187,
  S2S_QUERY_FRIEND_RANK_LIST_REQ = 21188,
  S2S_QUERY_RANK_LIST_ACK = 21189,
  S2S_UPDATE_ZONE_TO_RANK_PROXY_REQ = 21190,
  S2S_TRANSMIT_TO_RANK_SHARD_REQ = 21191,
  S2S_TELL_MATCH_GROUP_DATA_ACK = 21192
};
LIBPROTOC_EXPORT bool ServerProtocol_IsValid(int value);
const ServerProtocol ServerProtocol_MIN = S2S_TRANSMIT_MESSAGE_REQ;
const ServerProtocol ServerProtocol_MAX = S2S_TELL_MATCH_GROUP_DATA_ACK;
const int ServerProtocol_ARRAYSIZE = ServerProtocol_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ServerProtocol_descriptor();
inline const ::std::string& ServerProtocol_Name(ServerProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerProtocol_descriptor(), value);
}
inline bool ServerProtocol_Parse(
    const ::std::string& name, ServerProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerProtocol>(
    ServerProtocol_descriptor(), name, value);
}
// ===================================================================

class LIBPROTOC_EXPORT S2STransmitMessageReq : public ::google::protobuf::Message {
 public:
  S2STransmitMessageReq();
  virtual ~S2STransmitMessageReq();

  S2STransmitMessageReq(const S2STransmitMessageReq& from);

  inline S2STransmitMessageReq& operator=(const S2STransmitMessageReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STransmitMessageReq& default_instance();

  void Swap(S2STransmitMessageReq* other);

  // implements Message ----------------------------------------------

  S2STransmitMessageReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2STransmitMessageReq& from);
  void MergeFrom(const S2STransmitMessageReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 msgid = 2;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 2;
  inline ::google::protobuf::uint32 msgid() const;
  inline void set_msgid(::google::protobuf::uint32 value);

  // required string msgdata = 3;
  inline bool has_msgdata() const;
  inline void clear_msgdata();
  static const int kMsgdataFieldNumber = 3;
  inline const ::std::string& msgdata() const;
  inline void set_msgdata(const ::std::string& value);
  inline void set_msgdata(const char* value);
  inline void set_msgdata(const char* value, size_t size);
  inline ::std::string* mutable_msgdata();
  inline ::std::string* release_msgdata();
  inline void set_allocated_msgdata(::std::string* msgdata);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STransmitMessageReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_msgdata();
  inline void clear_has_msgdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 msgid_;
  ::std::string* msgdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2STransmitMessageReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SBroadcastMessageReq : public ::google::protobuf::Message {
 public:
  S2SBroadcastMessageReq();
  virtual ~S2SBroadcastMessageReq();

  S2SBroadcastMessageReq(const S2SBroadcastMessageReq& from);

  inline S2SBroadcastMessageReq& operator=(const S2SBroadcastMessageReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SBroadcastMessageReq& default_instance();

  void Swap(S2SBroadcastMessageReq* other);

  // implements Message ----------------------------------------------

  S2SBroadcastMessageReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SBroadcastMessageReq& from);
  void MergeFrom(const S2SBroadcastMessageReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 msgid = 1;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  inline ::google::protobuf::uint32 msgid() const;
  inline void set_msgid(::google::protobuf::uint32 value);

  // required string msgdata = 2;
  inline bool has_msgdata() const;
  inline void clear_msgdata();
  static const int kMsgdataFieldNumber = 2;
  inline const ::std::string& msgdata() const;
  inline void set_msgdata(const ::std::string& value);
  inline void set_msgdata(const char* value);
  inline void set_msgdata(const char* value, size_t size);
  inline ::std::string* mutable_msgdata();
  inline ::std::string* release_msgdata();
  inline void set_allocated_msgdata(::std::string* msgdata);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SBroadcastMessageReq)
 private:
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_msgdata();
  inline void clear_has_msgdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgdata_;
  ::google::protobuf::uint32 msgid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SBroadcastMessageReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SUpdateZoneToProxyReq : public ::google::protobuf::Message {
 public:
  S2SUpdateZoneToProxyReq();
  virtual ~S2SUpdateZoneToProxyReq();

  S2SUpdateZoneToProxyReq(const S2SUpdateZoneToProxyReq& from);

  inline S2SUpdateZoneToProxyReq& operator=(const S2SUpdateZoneToProxyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SUpdateZoneToProxyReq& default_instance();

  void Swap(S2SUpdateZoneToProxyReq* other);

  // implements Message ----------------------------------------------

  S2SUpdateZoneToProxyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SUpdateZoneToProxyReq& from);
  void MergeFrom(const S2SUpdateZoneToProxyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 zoneid = 1;
  inline int zoneid_size() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 1;
  inline ::google::protobuf::uint32 zoneid(int index) const;
  inline void set_zoneid(int index, ::google::protobuf::uint32 value);
  inline void add_zoneid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      zoneid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_zoneid();

  // @@protoc_insertion_point(class_scope:KFMsg.S2SUpdateZoneToProxyReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > zoneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SUpdateZoneToProxyReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STransmitToDataShardReq : public ::google::protobuf::Message {
 public:
  S2STransmitToDataShardReq();
  virtual ~S2STransmitToDataShardReq();

  S2STransmitToDataShardReq(const S2STransmitToDataShardReq& from);

  inline S2STransmitToDataShardReq& operator=(const S2STransmitToDataShardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STransmitToDataShardReq& default_instance();

  void Swap(S2STransmitToDataShardReq* other);

  // implements Message ----------------------------------------------

  S2STransmitToDataShardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2STransmitToDataShardReq& from);
  void MergeFrom(const S2STransmitToDataShardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 zoneid = 1;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 1;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // required uint32 msgid = 2;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 2;
  inline ::google::protobuf::uint32 msgid() const;
  inline void set_msgid(::google::protobuf::uint32 value);

  // required string msgdata = 3;
  inline bool has_msgdata() const;
  inline void clear_msgdata();
  static const int kMsgdataFieldNumber = 3;
  inline const ::std::string& msgdata() const;
  inline void set_msgdata(const ::std::string& value);
  inline void set_msgdata(const char* value);
  inline void set_msgdata(const char* value, size_t size);
  inline ::std::string* mutable_msgdata();
  inline ::std::string* release_msgdata();
  inline void set_allocated_msgdata(::std::string* msgdata);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STransmitToDataShardReq)
 private:
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_msgdata();
  inline void clear_has_msgdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 msgid_;
  ::std::string* msgdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2STransmitToDataShardReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SSavePlayerReq : public ::google::protobuf::Message {
 public:
  S2SSavePlayerReq();
  virtual ~S2SSavePlayerReq();

  S2SSavePlayerReq(const S2SSavePlayerReq& from);

  inline S2SSavePlayerReq& operator=(const S2SSavePlayerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SSavePlayerReq& default_instance();

  void Swap(S2SSavePlayerReq* other);

  // implements Message ----------------------------------------------

  S2SSavePlayerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SSavePlayerReq& from);
  void MergeFrom(const S2SSavePlayerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 zoneid = 1;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 1;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // required uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required .KFMsg.PBObject data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::KFMsg::PBObject& data() const;
  inline ::KFMsg::PBObject* mutable_data();
  inline ::KFMsg::PBObject* release_data();
  inline void set_allocated_data(::KFMsg::PBObject* data);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SSavePlayerReq)
 private:
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 id_;
  ::KFMsg::PBObject* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SSavePlayerReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SDeletePlayerReq : public ::google::protobuf::Message {
 public:
  S2SDeletePlayerReq();
  virtual ~S2SDeletePlayerReq();

  S2SDeletePlayerReq(const S2SDeletePlayerReq& from);

  inline S2SDeletePlayerReq& operator=(const S2SDeletePlayerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SDeletePlayerReq& default_instance();

  void Swap(S2SDeletePlayerReq* other);

  // implements Message ----------------------------------------------

  S2SDeletePlayerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SDeletePlayerReq& from);
  void MergeFrom(const S2SDeletePlayerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 zoneid = 1;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 1;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // required uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SDeletePlayerReq)
 private:
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SDeletePlayerReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SUpdatePublicDataReq : public ::google::protobuf::Message {
 public:
  S2SUpdatePublicDataReq();
  virtual ~S2SUpdatePublicDataReq();

  S2SUpdatePublicDataReq(const S2SUpdatePublicDataReq& from);

  inline S2SUpdatePublicDataReq& operator=(const S2SUpdatePublicDataReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SUpdatePublicDataReq& default_instance();

  void Swap(S2SUpdatePublicDataReq* other);

  // implements Message ----------------------------------------------

  S2SUpdatePublicDataReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SUpdatePublicDataReq& from);
  void MergeFrom(const S2SUpdatePublicDataReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // repeated .KFMsg.PBString pbdata = 4;
  inline int pbdata_size() const;
  inline void clear_pbdata();
  static const int kPbdataFieldNumber = 4;
  inline const ::KFMsg::PBString& pbdata(int index) const;
  inline ::KFMsg::PBString* mutable_pbdata(int index);
  inline ::KFMsg::PBString* add_pbdata();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >&
      pbdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >*
      mutable_pbdata();

  // @@protoc_insertion_point(class_scope:KFMsg.S2SUpdatePublicDataReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString > pbdata_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SUpdatePublicDataReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SKickGamePlayerReq : public ::google::protobuf::Message {
 public:
  S2SKickGamePlayerReq();
  virtual ~S2SKickGamePlayerReq();

  S2SKickGamePlayerReq(const S2SKickGamePlayerReq& from);

  inline S2SKickGamePlayerReq& operator=(const S2SKickGamePlayerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SKickGamePlayerReq& default_instance();

  void Swap(S2SKickGamePlayerReq* other);

  // implements Message ----------------------------------------------

  S2SKickGamePlayerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SKickGamePlayerReq& from);
  void MergeFrom(const S2SKickGamePlayerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SKickGamePlayerReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SKickGamePlayerReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SKickProxyPlayerReq : public ::google::protobuf::Message {
 public:
  S2SKickProxyPlayerReq();
  virtual ~S2SKickProxyPlayerReq();

  S2SKickProxyPlayerReq(const S2SKickProxyPlayerReq& from);

  inline S2SKickProxyPlayerReq& operator=(const S2SKickProxyPlayerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SKickProxyPlayerReq& default_instance();

  void Swap(S2SKickProxyPlayerReq* other);

  // implements Message ----------------------------------------------

  S2SKickProxyPlayerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SKickProxyPlayerReq& from);
  void MergeFrom(const S2SKickProxyPlayerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SKickProxyPlayerReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SKickProxyPlayerReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SLoginProxyUpdateReq : public ::google::protobuf::Message {
 public:
  S2SLoginProxyUpdateReq();
  virtual ~S2SLoginProxyUpdateReq();

  S2SLoginProxyUpdateReq(const S2SLoginProxyUpdateReq& from);

  inline S2SLoginProxyUpdateReq& operator=(const S2SLoginProxyUpdateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SLoginProxyUpdateReq& default_instance();

  void Swap(S2SLoginProxyUpdateReq* other);

  // implements Message ----------------------------------------------

  S2SLoginProxyUpdateReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SLoginProxyUpdateReq& from);
  void MergeFrom(const S2SLoginProxyUpdateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 proxyid = 1;
  inline bool has_proxyid() const;
  inline void clear_proxyid();
  static const int kProxyidFieldNumber = 1;
  inline ::google::protobuf::uint32 proxyid() const;
  inline void set_proxyid(::google::protobuf::uint32 value);

  // required uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // required string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required uint32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SLoginProxyUpdateReq)
 private:
  inline void set_has_proxyid();
  inline void clear_has_proxyid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 proxyid_;
  ::google::protobuf::uint32 count_;
  ::std::string* ip_;
  ::google::protobuf::uint32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SLoginProxyUpdateReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SLoginProxyRemoveReq : public ::google::protobuf::Message {
 public:
  S2SLoginProxyRemoveReq();
  virtual ~S2SLoginProxyRemoveReq();

  S2SLoginProxyRemoveReq(const S2SLoginProxyRemoveReq& from);

  inline S2SLoginProxyRemoveReq& operator=(const S2SLoginProxyRemoveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SLoginProxyRemoveReq& default_instance();

  void Swap(S2SLoginProxyRemoveReq* other);

  // implements Message ----------------------------------------------

  S2SLoginProxyRemoveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SLoginProxyRemoveReq& from);
  void MergeFrom(const S2SLoginProxyRemoveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 proxyid = 1;
  inline bool has_proxyid() const;
  inline void clear_proxyid();
  static const int kProxyidFieldNumber = 1;
  inline ::google::protobuf::uint32 proxyid() const;
  inline void set_proxyid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SLoginProxyRemoveReq)
 private:
  inline void set_has_proxyid();
  inline void clear_has_proxyid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 proxyid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SLoginProxyRemoveReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SLoginGameUpdateReq : public ::google::protobuf::Message {
 public:
  S2SLoginGameUpdateReq();
  virtual ~S2SLoginGameUpdateReq();

  S2SLoginGameUpdateReq(const S2SLoginGameUpdateReq& from);

  inline S2SLoginGameUpdateReq& operator=(const S2SLoginGameUpdateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SLoginGameUpdateReq& default_instance();

  void Swap(S2SLoginGameUpdateReq* other);

  // implements Message ----------------------------------------------

  S2SLoginGameUpdateReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SLoginGameUpdateReq& from);
  void MergeFrom(const S2SLoginGameUpdateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gameid = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 1;
  inline ::google::protobuf::uint32 gameid() const;
  inline void set_gameid(::google::protobuf::uint32 value);

  // required uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SLoginGameUpdateReq)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 gameid_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SLoginGameUpdateReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SLoginLoginVerifyReq : public ::google::protobuf::Message {
 public:
  S2SLoginLoginVerifyReq();
  virtual ~S2SLoginLoginVerifyReq();

  S2SLoginLoginVerifyReq(const S2SLoginLoginVerifyReq& from);

  inline S2SLoginLoginVerifyReq& operator=(const S2SLoginLoginVerifyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SLoginLoginVerifyReq& default_instance();

  void Swap(S2SLoginLoginVerifyReq* other);

  // implements Message ----------------------------------------------

  S2SLoginLoginVerifyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SLoginLoginVerifyReq& from);
  void MergeFrom(const S2SLoginLoginVerifyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 accountid = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // required string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // required string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SLoginLoginVerifyReq)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_ip();
  inline void clear_has_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* token_;
  ::std::string* ip_;
  ::google::protobuf::uint32 accountid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SLoginLoginVerifyReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SLoginLoginVerifyAck : public ::google::protobuf::Message {
 public:
  S2SLoginLoginVerifyAck();
  virtual ~S2SLoginLoginVerifyAck();

  S2SLoginLoginVerifyAck(const S2SLoginLoginVerifyAck& from);

  inline S2SLoginLoginVerifyAck& operator=(const S2SLoginLoginVerifyAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SLoginLoginVerifyAck& default_instance();

  void Swap(S2SLoginLoginVerifyAck* other);

  // implements Message ----------------------------------------------

  S2SLoginLoginVerifyAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SLoginLoginVerifyAck& from);
  void MergeFrom(const S2SLoginLoginVerifyAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // required uint32 accountid = 2;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 2;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // required uint32 playerid = 3;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 3;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required string token = 4;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 4;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional string ip = 5;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 5;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 6;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 6;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SLoginLoginVerifyAck)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 accountid_;
  ::std::string* token_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 port_;
  ::std::string* ip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SLoginLoginVerifyAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SLoginWorldVerifyReq : public ::google::protobuf::Message {
 public:
  S2SLoginWorldVerifyReq();
  virtual ~S2SLoginWorldVerifyReq();

  S2SLoginWorldVerifyReq(const S2SLoginWorldVerifyReq& from);

  inline S2SLoginWorldVerifyReq& operator=(const S2SLoginWorldVerifyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SLoginWorldVerifyReq& default_instance();

  void Swap(S2SLoginWorldVerifyReq* other);

  // implements Message ----------------------------------------------

  S2SLoginWorldVerifyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SLoginWorldVerifyReq& from);
  void MergeFrom(const S2SLoginWorldVerifyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 accountid = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // required string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // required uint32 gateid = 3;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 3;
  inline ::google::protobuf::uint32 gateid() const;
  inline void set_gateid(::google::protobuf::uint32 value);

  // required uint32 playerid = 4;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 4;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SLoginWorldVerifyReq)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* token_;
  ::google::protobuf::uint32 accountid_;
  ::google::protobuf::uint32 gateid_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SLoginWorldVerifyReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SLoginWorldVerifyAck : public ::google::protobuf::Message {
 public:
  S2SLoginWorldVerifyAck();
  virtual ~S2SLoginWorldVerifyAck();

  S2SLoginWorldVerifyAck(const S2SLoginWorldVerifyAck& from);

  inline S2SLoginWorldVerifyAck& operator=(const S2SLoginWorldVerifyAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SLoginWorldVerifyAck& default_instance();

  void Swap(S2SLoginWorldVerifyAck* other);

  // implements Message ----------------------------------------------

  S2SLoginWorldVerifyAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SLoginWorldVerifyAck& from);
  void MergeFrom(const S2SLoginWorldVerifyAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gateid = 1;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 1;
  inline ::google::protobuf::uint32 gateid() const;
  inline void set_gateid(::google::protobuf::uint32 value);

  // required uint32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // required uint32 accountid = 3;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 3;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // required uint32 playerid = 4;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 4;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required string token = 5;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 5;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // required string ip = 6;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 6;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required uint32 port = 7;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 7;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SLoginWorldVerifyAck)
 private:
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 gateid_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 accountid_;
  ::google::protobuf::uint32 playerid_;
  ::std::string* token_;
  ::std::string* ip_;
  ::google::protobuf::uint32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SLoginWorldVerifyAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SLoginTellTokenToGameReq : public ::google::protobuf::Message {
 public:
  S2SLoginTellTokenToGameReq();
  virtual ~S2SLoginTellTokenToGameReq();

  S2SLoginTellTokenToGameReq(const S2SLoginTellTokenToGameReq& from);

  inline S2SLoginTellTokenToGameReq& operator=(const S2SLoginTellTokenToGameReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SLoginTellTokenToGameReq& default_instance();

  void Swap(S2SLoginTellTokenToGameReq* other);

  // implements Message ----------------------------------------------

  S2SLoginTellTokenToGameReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SLoginTellTokenToGameReq& from);
  void MergeFrom(const S2SLoginTellTokenToGameReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // required uint32 proxyid = 3;
  inline bool has_proxyid() const;
  inline void clear_proxyid();
  static const int kProxyidFieldNumber = 3;
  inline ::google::protobuf::uint32 proxyid() const;
  inline void set_proxyid(::google::protobuf::uint32 value);

  // required uint32 accountid = 4;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 4;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // required uint32 loginid = 5;
  inline bool has_loginid() const;
  inline void clear_loginid();
  static const int kLoginidFieldNumber = 5;
  inline ::google::protobuf::uint32 loginid() const;
  inline void set_loginid(::google::protobuf::uint32 value);

  // required uint32 gateid = 6;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 6;
  inline ::google::protobuf::uint32 gateid() const;
  inline void set_gateid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SLoginTellTokenToGameReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_proxyid();
  inline void clear_has_proxyid();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_loginid();
  inline void clear_has_loginid();
  inline void set_has_gateid();
  inline void clear_has_gateid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* token_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 proxyid_;
  ::google::protobuf::uint32 accountid_;
  ::google::protobuf::uint32 loginid_;
  ::google::protobuf::uint32 gateid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SLoginTellTokenToGameReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SLoginTellTokenToGameAck : public ::google::protobuf::Message {
 public:
  S2SLoginTellTokenToGameAck();
  virtual ~S2SLoginTellTokenToGameAck();

  S2SLoginTellTokenToGameAck(const S2SLoginTellTokenToGameAck& from);

  inline S2SLoginTellTokenToGameAck& operator=(const S2SLoginTellTokenToGameAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SLoginTellTokenToGameAck& default_instance();

  void Swap(S2SLoginTellTokenToGameAck* other);

  // implements Message ----------------------------------------------

  S2SLoginTellTokenToGameAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SLoginTellTokenToGameAck& from);
  void MergeFrom(const S2SLoginTellTokenToGameAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // required uint32 accountid = 3;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 3;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // required uint32 loginid = 4;
  inline bool has_loginid() const;
  inline void clear_loginid();
  static const int kLoginidFieldNumber = 4;
  inline ::google::protobuf::uint32 loginid() const;
  inline void set_loginid(::google::protobuf::uint32 value);

  // required uint32 gateid = 5;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 5;
  inline ::google::protobuf::uint32 gateid() const;
  inline void set_gateid(::google::protobuf::uint32 value);

  // required string ip = 6;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 6;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required uint32 port = 7;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 7;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SLoginTellTokenToGameAck)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_loginid();
  inline void clear_has_loginid();
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* token_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 accountid_;
  ::google::protobuf::uint32 loginid_;
  ::google::protobuf::uint32 gateid_;
  ::std::string* ip_;
  ::google::protobuf::uint32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SLoginTellTokenToGameAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SLoginTellTokenToProxyReq : public ::google::protobuf::Message {
 public:
  S2SLoginTellTokenToProxyReq();
  virtual ~S2SLoginTellTokenToProxyReq();

  S2SLoginTellTokenToProxyReq(const S2SLoginTellTokenToProxyReq& from);

  inline S2SLoginTellTokenToProxyReq& operator=(const S2SLoginTellTokenToProxyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SLoginTellTokenToProxyReq& default_instance();

  void Swap(S2SLoginTellTokenToProxyReq* other);

  // implements Message ----------------------------------------------

  S2SLoginTellTokenToProxyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SLoginTellTokenToProxyReq& from);
  void MergeFrom(const S2SLoginTellTokenToProxyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // required uint32 accountid = 3;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 3;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // required uint32 loginid = 4;
  inline bool has_loginid() const;
  inline void clear_loginid();
  static const int kLoginidFieldNumber = 4;
  inline ::google::protobuf::uint32 loginid() const;
  inline void set_loginid(::google::protobuf::uint32 value);

  // required uint32 gateid = 5;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 5;
  inline ::google::protobuf::uint32 gateid() const;
  inline void set_gateid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SLoginTellTokenToProxyReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_loginid();
  inline void clear_has_loginid();
  inline void set_has_gateid();
  inline void clear_has_gateid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* token_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 accountid_;
  ::google::protobuf::uint32 loginid_;
  ::google::protobuf::uint32 gateid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SLoginTellTokenToProxyReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SLoginTellTokenToWorldAck : public ::google::protobuf::Message {
 public:
  S2SLoginTellTokenToWorldAck();
  virtual ~S2SLoginTellTokenToWorldAck();

  S2SLoginTellTokenToWorldAck(const S2SLoginTellTokenToWorldAck& from);

  inline S2SLoginTellTokenToWorldAck& operator=(const S2SLoginTellTokenToWorldAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SLoginTellTokenToWorldAck& default_instance();

  void Swap(S2SLoginTellTokenToWorldAck* other);

  // implements Message ----------------------------------------------

  S2SLoginTellTokenToWorldAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SLoginTellTokenToWorldAck& from);
  void MergeFrom(const S2SLoginTellTokenToWorldAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // required uint32 accountid = 3;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 3;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // required uint32 loginid = 4;
  inline bool has_loginid() const;
  inline void clear_loginid();
  static const int kLoginidFieldNumber = 4;
  inline ::google::protobuf::uint32 loginid() const;
  inline void set_loginid(::google::protobuf::uint32 value);

  // required uint32 gateid = 5;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 5;
  inline ::google::protobuf::uint32 gateid() const;
  inline void set_gateid(::google::protobuf::uint32 value);

  // required string ip = 6;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 6;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required uint32 port = 7;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 7;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SLoginTellTokenToWorldAck)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_loginid();
  inline void clear_has_loginid();
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* token_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 accountid_;
  ::google::protobuf::uint32 loginid_;
  ::google::protobuf::uint32 gateid_;
  ::std::string* ip_;
  ::google::protobuf::uint32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SLoginTellTokenToWorldAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SLoginQueryPlayerIdReq : public ::google::protobuf::Message {
 public:
  S2SLoginQueryPlayerIdReq();
  virtual ~S2SLoginQueryPlayerIdReq();

  S2SLoginQueryPlayerIdReq(const S2SLoginQueryPlayerIdReq& from);

  inline S2SLoginQueryPlayerIdReq& operator=(const S2SLoginQueryPlayerIdReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SLoginQueryPlayerIdReq& default_instance();

  void Swap(S2SLoginQueryPlayerIdReq* other);

  // implements Message ----------------------------------------------

  S2SLoginQueryPlayerIdReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SLoginQueryPlayerIdReq& from);
  void MergeFrom(const S2SLoginQueryPlayerIdReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 loginserverid = 1;
  inline bool has_loginserverid() const;
  inline void clear_loginserverid();
  static const int kLoginserveridFieldNumber = 1;
  inline ::google::protobuf::uint32 loginserverid() const;
  inline void set_loginserverid(::google::protobuf::uint32 value);

  // required uint32 gateid = 2;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 2;
  inline ::google::protobuf::uint32 gateid() const;
  inline void set_gateid(::google::protobuf::uint32 value);

  // required uint32 accountid = 3;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 3;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // required uint32 channel = 4;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 4;
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);

  // required string token = 5;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 5;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // required uint32 zoneid = 6;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 6;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // required uint32 logiczoneid = 7;
  inline bool has_logiczoneid() const;
  inline void clear_logiczoneid();
  static const int kLogiczoneidFieldNumber = 7;
  inline ::google::protobuf::uint32 logiczoneid() const;
  inline void set_logiczoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SLoginQueryPlayerIdReq)
 private:
  inline void set_has_loginserverid();
  inline void clear_has_loginserverid();
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_logiczoneid();
  inline void clear_has_logiczoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 loginserverid_;
  ::google::protobuf::uint32 gateid_;
  ::google::protobuf::uint32 accountid_;
  ::google::protobuf::uint32 channel_;
  ::std::string* token_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 logiczoneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SLoginQueryPlayerIdReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SLoginQueryPlayerIdAck : public ::google::protobuf::Message {
 public:
  S2SLoginQueryPlayerIdAck();
  virtual ~S2SLoginQueryPlayerIdAck();

  S2SLoginQueryPlayerIdAck(const S2SLoginQueryPlayerIdAck& from);

  inline S2SLoginQueryPlayerIdAck& operator=(const S2SLoginQueryPlayerIdAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SLoginQueryPlayerIdAck& default_instance();

  void Swap(S2SLoginQueryPlayerIdAck* other);

  // implements Message ----------------------------------------------

  S2SLoginQueryPlayerIdAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SLoginQueryPlayerIdAck& from);
  void MergeFrom(const S2SLoginQueryPlayerIdAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 loginserverid = 1;
  inline bool has_loginserverid() const;
  inline void clear_loginserverid();
  static const int kLoginserveridFieldNumber = 1;
  inline ::google::protobuf::uint32 loginserverid() const;
  inline void set_loginserverid(::google::protobuf::uint32 value);

  // required uint32 gateid = 2;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 2;
  inline ::google::protobuf::uint32 gateid() const;
  inline void set_gateid(::google::protobuf::uint32 value);

  // required uint32 accountid = 3;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 3;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // required uint32 playerid = 4;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 4;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required string token = 5;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 5;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SLoginQueryPlayerIdAck)
 private:
  inline void set_has_loginserverid();
  inline void clear_has_loginserverid();
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 loginserverid_;
  ::google::protobuf::uint32 gateid_;
  ::google::protobuf::uint32 accountid_;
  ::google::protobuf::uint32 playerid_;
  ::std::string* token_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SLoginQueryPlayerIdAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SLoginGameReq : public ::google::protobuf::Message {
 public:
  S2SLoginGameReq();
  virtual ~S2SLoginGameReq();

  S2SLoginGameReq(const S2SLoginGameReq& from);

  inline S2SLoginGameReq& operator=(const S2SLoginGameReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SLoginGameReq& default_instance();

  void Swap(S2SLoginGameReq* other);

  // implements Message ----------------------------------------------

  S2SLoginGameReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SLoginGameReq& from);
  void MergeFrom(const S2SLoginGameReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 accountid = 2;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 2;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // required string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SLoginGameReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_ip();
  inline void clear_has_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 accountid_;
  ::std::string* ip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SLoginGameReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SLoginGameAck : public ::google::protobuf::Message {
 public:
  S2SLoginGameAck();
  virtual ~S2SLoginGameAck();

  S2SLoginGameAck(const S2SLoginGameAck& from);

  inline S2SLoginGameAck& operator=(const S2SLoginGameAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SLoginGameAck& default_instance();

  void Swap(S2SLoginGameAck* other);

  // implements Message ----------------------------------------------

  S2SLoginGameAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SLoginGameAck& from);
  void MergeFrom(const S2SLoginGameAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // required uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required .KFMsg.PBObject playerdata = 3;
  inline bool has_playerdata() const;
  inline void clear_playerdata();
  static const int kPlayerdataFieldNumber = 3;
  inline const ::KFMsg::PBObject& playerdata() const;
  inline ::KFMsg::PBObject* mutable_playerdata();
  inline ::KFMsg::PBObject* release_playerdata();
  inline void set_allocated_playerdata(::KFMsg::PBObject* playerdata);

  // required uint64 servertime = 4;
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServertimeFieldNumber = 4;
  inline ::google::protobuf::uint64 servertime() const;
  inline void set_servertime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SLoginGameAck)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_playerdata();
  inline void clear_has_playerdata();
  inline void set_has_servertime();
  inline void clear_has_servertime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 playerid_;
  ::KFMsg::PBObject* playerdata_;
  ::google::protobuf::uint64 servertime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SLoginGameAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SLoginLoadPlayerReq : public ::google::protobuf::Message {
 public:
  S2SLoginLoadPlayerReq();
  virtual ~S2SLoginLoadPlayerReq();

  S2SLoginLoadPlayerReq(const S2SLoginLoadPlayerReq& from);

  inline S2SLoginLoadPlayerReq& operator=(const S2SLoginLoadPlayerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SLoginLoadPlayerReq& default_instance();

  void Swap(S2SLoginLoadPlayerReq* other);

  // implements Message ----------------------------------------------

  S2SLoginLoadPlayerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SLoginLoadPlayerReq& from);
  void MergeFrom(const S2SLoginLoadPlayerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gateid = 1;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 1;
  inline ::google::protobuf::uint32 gateid() const;
  inline void set_gateid(::google::protobuf::uint32 value);

  // required uint32 zoneid = 2;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 2;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // required uint32 playerid = 3;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 3;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 accountid = 4;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 4;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SLoginLoadPlayerReq)
 private:
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_accountid();
  inline void clear_has_accountid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 gateid_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 accountid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SLoginLoadPlayerReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SLoginLoadPlayerAck : public ::google::protobuf::Message {
 public:
  S2SLoginLoadPlayerAck();
  virtual ~S2SLoginLoadPlayerAck();

  S2SLoginLoadPlayerAck(const S2SLoginLoadPlayerAck& from);

  inline S2SLoginLoadPlayerAck& operator=(const S2SLoginLoadPlayerAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SLoginLoadPlayerAck& default_instance();

  void Swap(S2SLoginLoadPlayerAck* other);

  // implements Message ----------------------------------------------

  S2SLoginLoadPlayerAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SLoginLoadPlayerAck& from);
  void MergeFrom(const S2SLoginLoadPlayerAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // required uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 gateid = 3;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 3;
  inline ::google::protobuf::uint32 gateid() const;
  inline void set_gateid(::google::protobuf::uint32 value);

  // required .KFMsg.PBObject playerdata = 4;
  inline bool has_playerdata() const;
  inline void clear_playerdata();
  static const int kPlayerdataFieldNumber = 4;
  inline const ::KFMsg::PBObject& playerdata() const;
  inline ::KFMsg::PBObject* mutable_playerdata();
  inline ::KFMsg::PBObject* release_playerdata();
  inline void set_allocated_playerdata(::KFMsg::PBObject* playerdata);

  // required .KFMsg.PBStrings extenddata = 5;
  inline bool has_extenddata() const;
  inline void clear_extenddata();
  static const int kExtenddataFieldNumber = 5;
  inline const ::KFMsg::PBStrings& extenddata() const;
  inline ::KFMsg::PBStrings* mutable_extenddata();
  inline ::KFMsg::PBStrings* release_extenddata();
  inline void set_allocated_extenddata(::KFMsg::PBStrings* extenddata);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SLoginLoadPlayerAck)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_playerdata();
  inline void clear_has_playerdata();
  inline void set_has_extenddata();
  inline void clear_has_extenddata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 playerid_;
  ::KFMsg::PBObject* playerdata_;
  ::KFMsg::PBStrings* extenddata_;
  ::google::protobuf::uint32 gateid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SLoginLoadPlayerAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SLoginCreatePlayerReq : public ::google::protobuf::Message {
 public:
  S2SLoginCreatePlayerReq();
  virtual ~S2SLoginCreatePlayerReq();

  S2SLoginCreatePlayerReq(const S2SLoginCreatePlayerReq& from);

  inline S2SLoginCreatePlayerReq& operator=(const S2SLoginCreatePlayerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SLoginCreatePlayerReq& default_instance();

  void Swap(S2SLoginCreatePlayerReq* other);

  // implements Message ----------------------------------------------

  S2SLoginCreatePlayerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SLoginCreatePlayerReq& from);
  void MergeFrom(const S2SLoginCreatePlayerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 accountid = 2;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 2;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // required uint32 channel = 3;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 3;
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SLoginCreatePlayerReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  inline void set_has_channel();
  inline void clear_has_channel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 accountid_;
  ::google::protobuf::uint32 channel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SLoginCreatePlayerReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SLoginOutReq : public ::google::protobuf::Message {
 public:
  S2SLoginOutReq();
  virtual ~S2SLoginOutReq();

  S2SLoginOutReq(const S2SLoginOutReq& from);

  inline S2SLoginOutReq& operator=(const S2SLoginOutReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SLoginOutReq& default_instance();

  void Swap(S2SLoginOutReq* other);

  // implements Message ----------------------------------------------

  S2SLoginOutReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SLoginOutReq& from);
  void MergeFrom(const S2SLoginOutReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SLoginOutReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SLoginOutReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SPlayerDisconnectionReq : public ::google::protobuf::Message {
 public:
  S2SPlayerDisconnectionReq();
  virtual ~S2SPlayerDisconnectionReq();

  S2SPlayerDisconnectionReq(const S2SPlayerDisconnectionReq& from);

  inline S2SPlayerDisconnectionReq& operator=(const S2SPlayerDisconnectionReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SPlayerDisconnectionReq& default_instance();

  void Swap(S2SPlayerDisconnectionReq* other);

  // implements Message ----------------------------------------------

  S2SPlayerDisconnectionReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SPlayerDisconnectionReq& from);
  void MergeFrom(const S2SPlayerDisconnectionReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SPlayerDisconnectionReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SPlayerDisconnectionReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SSetPlayerNameReq : public ::google::protobuf::Message {
 public:
  S2SSetPlayerNameReq();
  virtual ~S2SSetPlayerNameReq();

  S2SSetPlayerNameReq(const S2SSetPlayerNameReq& from);

  inline S2SSetPlayerNameReq& operator=(const S2SSetPlayerNameReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SSetPlayerNameReq& default_instance();

  void Swap(S2SSetPlayerNameReq* other);

  // implements Message ----------------------------------------------

  S2SSetPlayerNameReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SSetPlayerNameReq& from);
  void MergeFrom(const S2SSetPlayerNameReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required string oldname = 2;
  inline bool has_oldname() const;
  inline void clear_oldname();
  static const int kOldnameFieldNumber = 2;
  inline const ::std::string& oldname() const;
  inline void set_oldname(const ::std::string& value);
  inline void set_oldname(const char* value);
  inline void set_oldname(const char* value, size_t size);
  inline ::std::string* mutable_oldname();
  inline ::std::string* release_oldname();
  inline void set_allocated_oldname(::std::string* oldname);

  // required string newname = 3;
  inline bool has_newname() const;
  inline void clear_newname();
  static const int kNewnameFieldNumber = 3;
  inline const ::std::string& newname() const;
  inline void set_newname(const ::std::string& value);
  inline void set_newname(const char* value);
  inline void set_newname(const char* value, size_t size);
  inline ::std::string* mutable_newname();
  inline ::std::string* release_newname();
  inline void set_allocated_newname(::std::string* newname);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SSetPlayerNameReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_oldname();
  inline void clear_has_oldname();
  inline void set_has_newname();
  inline void clear_has_newname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* oldname_;
  ::std::string* newname_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SSetPlayerNameReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SSetPlayerNameAck : public ::google::protobuf::Message {
 public:
  S2SSetPlayerNameAck();
  virtual ~S2SSetPlayerNameAck();

  S2SSetPlayerNameAck(const S2SSetPlayerNameAck& from);

  inline S2SSetPlayerNameAck& operator=(const S2SSetPlayerNameAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SSetPlayerNameAck& default_instance();

  void Swap(S2SSetPlayerNameAck* other);

  // implements Message ----------------------------------------------

  S2SSetPlayerNameAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SSetPlayerNameAck& from);
  void MergeFrom(const S2SSetPlayerNameAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required string oldname = 2;
  inline bool has_oldname() const;
  inline void clear_oldname();
  static const int kOldnameFieldNumber = 2;
  inline const ::std::string& oldname() const;
  inline void set_oldname(const ::std::string& value);
  inline void set_oldname(const char* value);
  inline void set_oldname(const char* value, size_t size);
  inline ::std::string* mutable_oldname();
  inline ::std::string* release_oldname();
  inline void set_allocated_oldname(::std::string* oldname);

  // required string newname = 3;
  inline bool has_newname() const;
  inline void clear_newname();
  static const int kNewnameFieldNumber = 3;
  inline const ::std::string& newname() const;
  inline void set_newname(const ::std::string& value);
  inline void set_newname(const char* value);
  inline void set_newname(const char* value, size_t size);
  inline ::std::string* mutable_newname();
  inline ::std::string* release_newname();
  inline void set_allocated_newname(::std::string* newname);

  // required uint32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SSetPlayerNameAck)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_oldname();
  inline void clear_has_oldname();
  inline void set_has_newname();
  inline void clear_has_newname();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* oldname_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 result_;
  ::std::string* newname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SSetPlayerNameAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SCreateRoleReq : public ::google::protobuf::Message {
 public:
  S2SCreateRoleReq();
  virtual ~S2SCreateRoleReq();

  S2SCreateRoleReq(const S2SCreateRoleReq& from);

  inline S2SCreateRoleReq& operator=(const S2SCreateRoleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SCreateRoleReq& default_instance();

  void Swap(S2SCreateRoleReq* other);

  // implements Message ----------------------------------------------

  S2SCreateRoleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SCreateRoleReq& from);
  void MergeFrom(const S2SCreateRoleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required string newname = 2;
  inline bool has_newname() const;
  inline void clear_newname();
  static const int kNewnameFieldNumber = 2;
  inline const ::std::string& newname() const;
  inline void set_newname(const ::std::string& value);
  inline void set_newname(const char* value);
  inline void set_newname(const char* value, size_t size);
  inline ::std::string* mutable_newname();
  inline ::std::string* release_newname();
  inline void set_allocated_newname(::std::string* newname);

  // required uint32 modleid = 3;
  inline bool has_modleid() const;
  inline void clear_modleid();
  static const int kModleidFieldNumber = 3;
  inline ::google::protobuf::uint32 modleid() const;
  inline void set_modleid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SCreateRoleReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_newname();
  inline void clear_has_newname();
  inline void set_has_modleid();
  inline void clear_has_modleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* newname_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 modleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SCreateRoleReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SCreateRoleAck : public ::google::protobuf::Message {
 public:
  S2SCreateRoleAck();
  virtual ~S2SCreateRoleAck();

  S2SCreateRoleAck(const S2SCreateRoleAck& from);

  inline S2SCreateRoleAck& operator=(const S2SCreateRoleAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SCreateRoleAck& default_instance();

  void Swap(S2SCreateRoleAck* other);

  // implements Message ----------------------------------------------

  S2SCreateRoleAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SCreateRoleAck& from);
  void MergeFrom(const S2SCreateRoleAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required string newname = 2;
  inline bool has_newname() const;
  inline void clear_newname();
  static const int kNewnameFieldNumber = 2;
  inline const ::std::string& newname() const;
  inline void set_newname(const ::std::string& value);
  inline void set_newname(const char* value);
  inline void set_newname(const char* value, size_t size);
  inline ::std::string* mutable_newname();
  inline ::std::string* release_newname();
  inline void set_allocated_newname(::std::string* newname);

  // required uint32 modleid = 3;
  inline bool has_modleid() const;
  inline void clear_modleid();
  static const int kModleidFieldNumber = 3;
  inline ::google::protobuf::uint32 modleid() const;
  inline void set_modleid(::google::protobuf::uint32 value);

  // required uint32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SCreateRoleAck)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_newname();
  inline void clear_has_newname();
  inline void set_has_modleid();
  inline void clear_has_modleid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* newname_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 modleid_;
  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SCreateRoleAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SPlayerEnterWorldReq : public ::google::protobuf::Message {
 public:
  S2SPlayerEnterWorldReq();
  virtual ~S2SPlayerEnterWorldReq();

  S2SPlayerEnterWorldReq(const S2SPlayerEnterWorldReq& from);

  inline S2SPlayerEnterWorldReq& operator=(const S2SPlayerEnterWorldReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SPlayerEnterWorldReq& default_instance();

  void Swap(S2SPlayerEnterWorldReq* other);

  // implements Message ----------------------------------------------

  S2SPlayerEnterWorldReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SPlayerEnterWorldReq& from);
  void MergeFrom(const S2SPlayerEnterWorldReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 accountid = 2;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 2;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SPlayerEnterWorldReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_accountid();
  inline void clear_has_accountid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 accountid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SPlayerEnterWorldReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SPlayerLeaveWorldReq : public ::google::protobuf::Message {
 public:
  S2SPlayerLeaveWorldReq();
  virtual ~S2SPlayerLeaveWorldReq();

  S2SPlayerLeaveWorldReq(const S2SPlayerLeaveWorldReq& from);

  inline S2SPlayerLeaveWorldReq& operator=(const S2SPlayerLeaveWorldReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SPlayerLeaveWorldReq& default_instance();

  void Swap(S2SPlayerLeaveWorldReq* other);

  // implements Message ----------------------------------------------

  S2SPlayerLeaveWorldReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SPlayerLeaveWorldReq& from);
  void MergeFrom(const S2SPlayerLeaveWorldReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 accountid = 2;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 2;
  inline ::google::protobuf::uint32 accountid() const;
  inline void set_accountid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SPlayerLeaveWorldReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_accountid();
  inline void clear_has_accountid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 accountid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SPlayerLeaveWorldReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SGameSyncOnlineReq : public ::google::protobuf::Message {
 public:
  S2SGameSyncOnlineReq();
  virtual ~S2SGameSyncOnlineReq();

  S2SGameSyncOnlineReq(const S2SGameSyncOnlineReq& from);

  inline S2SGameSyncOnlineReq& operator=(const S2SGameSyncOnlineReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SGameSyncOnlineReq& default_instance();

  void Swap(S2SGameSyncOnlineReq* other);

  // implements Message ----------------------------------------------

  S2SGameSyncOnlineReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SGameSyncOnlineReq& from);
  void MergeFrom(const S2SGameSyncOnlineReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 playerid = 1;
  inline int playerid_size() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid(int index) const;
  inline void set_playerid(int index, ::google::protobuf::uint32 value);
  inline void add_playerid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      playerid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_playerid();

  // @@protoc_insertion_point(class_scope:KFMsg.S2SGameSyncOnlineReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SGameSyncOnlineReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryMailReq : public ::google::protobuf::Message {
 public:
  S2SQueryMailReq();
  virtual ~S2SQueryMailReq();

  S2SQueryMailReq(const S2SQueryMailReq& from);

  inline S2SQueryMailReq& operator=(const S2SQueryMailReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryMailReq& default_instance();

  void Swap(S2SQueryMailReq* other);

  // implements Message ----------------------------------------------

  S2SQueryMailReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SQueryMailReq& from);
  void MergeFrom(const S2SQueryMailReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 mailtype = 2;
  inline bool has_mailtype() const;
  inline void clear_mailtype();
  static const int kMailtypeFieldNumber = 2;
  inline ::google::protobuf::uint32 mailtype() const;
  inline void set_mailtype(::google::protobuf::uint32 value);

  // required uint64 maxmailid = 3;
  inline bool has_maxmailid() const;
  inline void clear_maxmailid();
  static const int kMaxmailidFieldNumber = 3;
  inline ::google::protobuf::uint64 maxmailid() const;
  inline void set_maxmailid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryMailReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_mailtype();
  inline void clear_has_mailtype();
  inline void set_has_maxmailid();
  inline void clear_has_maxmailid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 mailtype_;
  ::google::protobuf::uint64 maxmailid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SQueryMailReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBMail : public ::google::protobuf::Message {
 public:
  PBMail();
  virtual ~PBMail();

  PBMail(const PBMail& from);

  inline PBMail& operator=(const PBMail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMail& default_instance();

  void Swap(PBMail* other);

  // implements Message ----------------------------------------------

  PBMail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMail& from);
  void MergeFrom(const PBMail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .KFMsg.PBString data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::KFMsg::PBString& data(int index) const;
  inline ::KFMsg::PBString* mutable_data(int index);
  inline ::KFMsg::PBString* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:KFMsg.PBMail)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static PBMail* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBMails : public ::google::protobuf::Message {
 public:
  PBMails();
  virtual ~PBMails();

  PBMails(const PBMails& from);

  inline PBMails& operator=(const PBMails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBMails& default_instance();

  void Swap(PBMails* other);

  // implements Message ----------------------------------------------

  PBMails* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBMails& from);
  void MergeFrom(const PBMails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .KFMsg.PBMail mail = 1;
  inline int mail_size() const;
  inline void clear_mail();
  static const int kMailFieldNumber = 1;
  inline const ::KFMsg::PBMail& mail(int index) const;
  inline ::KFMsg::PBMail* mutable_mail(int index);
  inline ::KFMsg::PBMail* add_mail();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBMail >&
      mail() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBMail >*
      mutable_mail();

  // @@protoc_insertion_point(class_scope:KFMsg.PBMails)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBMail > mail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static PBMails* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryMailAck : public ::google::protobuf::Message {
 public:
  S2SQueryMailAck();
  virtual ~S2SQueryMailAck();

  S2SQueryMailAck(const S2SQueryMailAck& from);

  inline S2SQueryMailAck& operator=(const S2SQueryMailAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryMailAck& default_instance();

  void Swap(S2SQueryMailAck* other);

  // implements Message ----------------------------------------------

  S2SQueryMailAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SQueryMailAck& from);
  void MergeFrom(const S2SQueryMailAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required .KFMsg.PBMails mails = 2;
  inline bool has_mails() const;
  inline void clear_mails();
  static const int kMailsFieldNumber = 2;
  inline const ::KFMsg::PBMails& mails() const;
  inline ::KFMsg::PBMails* mutable_mails();
  inline ::KFMsg::PBMails* release_mails();
  inline void set_allocated_mails(::KFMsg::PBMails* mails);

  // required uint32 mailtype = 3;
  inline bool has_mailtype() const;
  inline void clear_mailtype();
  static const int kMailtypeFieldNumber = 3;
  inline ::google::protobuf::uint32 mailtype() const;
  inline void set_mailtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryMailAck)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_mails();
  inline void clear_has_mails();
  inline void set_has_mailtype();
  inline void clear_has_mailtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::PBMails* mails_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 mailtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SQueryMailAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SDeleteMailReq : public ::google::protobuf::Message {
 public:
  S2SDeleteMailReq();
  virtual ~S2SDeleteMailReq();

  S2SDeleteMailReq(const S2SDeleteMailReq& from);

  inline S2SDeleteMailReq& operator=(const S2SDeleteMailReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SDeleteMailReq& default_instance();

  void Swap(S2SDeleteMailReq* other);

  // implements Message ----------------------------------------------

  S2SDeleteMailReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SDeleteMailReq& from);
  void MergeFrom(const S2SDeleteMailReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint64 mailid = 2;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailidFieldNumber = 2;
  inline ::google::protobuf::uint64 mailid() const;
  inline void set_mailid(::google::protobuf::uint64 value);

  // required uint32 mailtype = 3;
  inline bool has_mailtype() const;
  inline void clear_mailtype();
  static const int kMailtypeFieldNumber = 3;
  inline ::google::protobuf::uint32 mailtype() const;
  inline void set_mailtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SDeleteMailReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_mailtype();
  inline void clear_has_mailtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 mailid_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 mailtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SDeleteMailReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SAddMailReq : public ::google::protobuf::Message {
 public:
  S2SAddMailReq();
  virtual ~S2SAddMailReq();

  S2SAddMailReq(const S2SAddMailReq& from);

  inline S2SAddMailReq& operator=(const S2SAddMailReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SAddMailReq& default_instance();

  void Swap(S2SAddMailReq* other);

  // implements Message ----------------------------------------------

  S2SAddMailReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SAddMailReq& from);
  void MergeFrom(const S2SAddMailReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 mailtype = 3;
  inline bool has_mailtype() const;
  inline void clear_mailtype();
  static const int kMailtypeFieldNumber = 3;
  inline ::google::protobuf::uint32 mailtype() const;
  inline void set_mailtype(::google::protobuf::uint32 value);

  // required .KFMsg.PBMail pbmail = 5;
  inline bool has_pbmail() const;
  inline void clear_pbmail();
  static const int kPbmailFieldNumber = 5;
  inline const ::KFMsg::PBMail& pbmail() const;
  inline ::KFMsg::PBMail* mutable_pbmail();
  inline ::KFMsg::PBMail* release_pbmail();
  inline void set_allocated_pbmail(::KFMsg::PBMail* pbmail);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SAddMailReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_mailtype();
  inline void clear_has_mailtype();
  inline void set_has_pbmail();
  inline void clear_has_pbmail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 mailtype_;
  ::KFMsg::PBMail* pbmail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SAddMailReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SNoticeNewMailReq : public ::google::protobuf::Message {
 public:
  S2SNoticeNewMailReq();
  virtual ~S2SNoticeNewMailReq();

  S2SNoticeNewMailReq(const S2SNoticeNewMailReq& from);

  inline S2SNoticeNewMailReq& operator=(const S2SNoticeNewMailReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SNoticeNewMailReq& default_instance();

  void Swap(S2SNoticeNewMailReq* other);

  // implements Message ----------------------------------------------

  S2SNoticeNewMailReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SNoticeNewMailReq& from);
  void MergeFrom(const S2SNoticeNewMailReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 mailtype = 2;
  inline bool has_mailtype() const;
  inline void clear_mailtype();
  static const int kMailtypeFieldNumber = 2;
  inline ::google::protobuf::uint32 mailtype() const;
  inline void set_mailtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SNoticeNewMailReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_mailtype();
  inline void clear_has_mailtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 mailtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SNoticeNewMailReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBFriend : public ::google::protobuf::Message {
 public:
  PBFriend();
  virtual ~PBFriend();

  PBFriend(const PBFriend& from);

  inline PBFriend& operator=(const PBFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBFriend& default_instance();

  void Swap(PBFriend* other);

  // implements Message ----------------------------------------------

  PBFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBFriend& from);
  void MergeFrom(const PBFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // repeated .KFMsg.PBString playerdata = 2;
  inline int playerdata_size() const;
  inline void clear_playerdata();
  static const int kPlayerdataFieldNumber = 2;
  inline const ::KFMsg::PBString& playerdata(int index) const;
  inline ::KFMsg::PBString* mutable_playerdata(int index);
  inline ::KFMsg::PBString* add_playerdata();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >&
      playerdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >*
      mutable_playerdata();

  // repeated .KFMsg.PBString frienddata = 3;
  inline int frienddata_size() const;
  inline void clear_frienddata();
  static const int kFrienddataFieldNumber = 3;
  inline const ::KFMsg::PBString& frienddata(int index) const;
  inline ::KFMsg::PBString* mutable_frienddata(int index);
  inline ::KFMsg::PBString* add_frienddata();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >&
      frienddata() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >*
      mutable_frienddata();

  // @@protoc_insertion_point(class_scope:KFMsg.PBFriend)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString > playerdata_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString > frienddata_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static PBFriend* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryFriendReq : public ::google::protobuf::Message {
 public:
  S2SQueryFriendReq();
  virtual ~S2SQueryFriendReq();

  S2SQueryFriendReq(const S2SQueryFriendReq& from);

  inline S2SQueryFriendReq& operator=(const S2SQueryFriendReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryFriendReq& default_instance();

  void Swap(S2SQueryFriendReq* other);

  // implements Message ----------------------------------------------

  S2SQueryFriendReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SQueryFriendReq& from);
  void MergeFrom(const S2SQueryFriendReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 serverid = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 2;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryFriendReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SQueryFriendReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryFriendInviteReq : public ::google::protobuf::Message {
 public:
  S2SQueryFriendInviteReq();
  virtual ~S2SQueryFriendInviteReq();

  S2SQueryFriendInviteReq(const S2SQueryFriendInviteReq& from);

  inline S2SQueryFriendInviteReq& operator=(const S2SQueryFriendInviteReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryFriendInviteReq& default_instance();

  void Swap(S2SQueryFriendInviteReq* other);

  // implements Message ----------------------------------------------

  S2SQueryFriendInviteReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SQueryFriendInviteReq& from);
  void MergeFrom(const S2SQueryFriendInviteReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 serverid = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 2;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryFriendInviteReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SQueryFriendInviteReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryFriendAck : public ::google::protobuf::Message {
 public:
  S2SQueryFriendAck();
  virtual ~S2SQueryFriendAck();

  S2SQueryFriendAck(const S2SQueryFriendAck& from);

  inline S2SQueryFriendAck& operator=(const S2SQueryFriendAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryFriendAck& default_instance();

  void Swap(S2SQueryFriendAck* other);

  // implements Message ----------------------------------------------

  S2SQueryFriendAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SQueryFriendAck& from);
  void MergeFrom(const S2SQueryFriendAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // repeated .KFMsg.PBFriend pbfriend = 2;
  inline int pbfriend_size() const;
  inline void clear_pbfriend();
  static const int kPbfriendFieldNumber = 2;
  inline const ::KFMsg::PBFriend& pbfriend(int index) const;
  inline ::KFMsg::PBFriend* mutable_pbfriend(int index);
  inline ::KFMsg::PBFriend* add_pbfriend();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBFriend >&
      pbfriend() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBFriend >*
      mutable_pbfriend();

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryFriendAck)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBFriend > pbfriend_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SQueryFriendAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryFriendInviteAck : public ::google::protobuf::Message {
 public:
  S2SQueryFriendInviteAck();
  virtual ~S2SQueryFriendInviteAck();

  S2SQueryFriendInviteAck(const S2SQueryFriendInviteAck& from);

  inline S2SQueryFriendInviteAck& operator=(const S2SQueryFriendInviteAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryFriendInviteAck& default_instance();

  void Swap(S2SQueryFriendInviteAck* other);

  // implements Message ----------------------------------------------

  S2SQueryFriendInviteAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SQueryFriendInviteAck& from);
  void MergeFrom(const S2SQueryFriendInviteAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // repeated .KFMsg.PBFriend pbfriend = 2;
  inline int pbfriend_size() const;
  inline void clear_pbfriend();
  static const int kPbfriendFieldNumber = 2;
  inline const ::KFMsg::PBFriend& pbfriend(int index) const;
  inline ::KFMsg::PBFriend* mutable_pbfriend(int index);
  inline ::KFMsg::PBFriend* add_pbfriend();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBFriend >&
      pbfriend() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBFriend >*
      mutable_pbfriend();

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryFriendInviteAck)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBFriend > pbfriend_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SQueryFriendInviteAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SAddFriendInviteReq : public ::google::protobuf::Message {
 public:
  S2SAddFriendInviteReq();
  virtual ~S2SAddFriendInviteReq();

  S2SAddFriendInviteReq(const S2SAddFriendInviteReq& from);

  inline S2SAddFriendInviteReq& operator=(const S2SAddFriendInviteReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SAddFriendInviteReq& default_instance();

  void Swap(S2SAddFriendInviteReq* other);

  // implements Message ----------------------------------------------

  S2SAddFriendInviteReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SAddFriendInviteReq& from);
  void MergeFrom(const S2SAddFriendInviteReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 selfplayerid = 1;
  inline bool has_selfplayerid() const;
  inline void clear_selfplayerid();
  static const int kSelfplayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 selfplayerid() const;
  inline void set_selfplayerid(::google::protobuf::uint32 value);

  // required uint32 targetplayerid = 2;
  inline bool has_targetplayerid() const;
  inline void clear_targetplayerid();
  static const int kTargetplayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 targetplayerid() const;
  inline void set_targetplayerid(::google::protobuf::uint32 value);

  // required string message = 3;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 3;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // required uint32 serverid = 4;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 4;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // required string targetname = 5;
  inline bool has_targetname() const;
  inline void clear_targetname();
  static const int kTargetnameFieldNumber = 5;
  inline const ::std::string& targetname() const;
  inline void set_targetname(const ::std::string& value);
  inline void set_targetname(const char* value);
  inline void set_targetname(const char* value, size_t size);
  inline ::std::string* mutable_targetname();
  inline ::std::string* release_targetname();
  inline void set_allocated_targetname(::std::string* targetname);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SAddFriendInviteReq)
 private:
  inline void set_has_selfplayerid();
  inline void clear_has_selfplayerid();
  inline void set_has_targetplayerid();
  inline void clear_has_targetplayerid();
  inline void set_has_message();
  inline void clear_has_message();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_targetname();
  inline void clear_has_targetname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 selfplayerid_;
  ::google::protobuf::uint32 targetplayerid_;
  ::std::string* message_;
  ::std::string* targetname_;
  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SAddFriendInviteReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SAddFriendInviteAck : public ::google::protobuf::Message {
 public:
  S2SAddFriendInviteAck();
  virtual ~S2SAddFriendInviteAck();

  S2SAddFriendInviteAck(const S2SAddFriendInviteAck& from);

  inline S2SAddFriendInviteAck& operator=(const S2SAddFriendInviteAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SAddFriendInviteAck& default_instance();

  void Swap(S2SAddFriendInviteAck* other);

  // implements Message ----------------------------------------------

  S2SAddFriendInviteAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SAddFriendInviteAck& from);
  void MergeFrom(const S2SAddFriendInviteAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required .KFMsg.PBFriend pbfriend = 2;
  inline bool has_pbfriend() const;
  inline void clear_pbfriend();
  static const int kPbfriendFieldNumber = 2;
  inline const ::KFMsg::PBFriend& pbfriend() const;
  inline ::KFMsg::PBFriend* mutable_pbfriend();
  inline ::KFMsg::PBFriend* release_pbfriend();
  inline void set_allocated_pbfriend(::KFMsg::PBFriend* pbfriend);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SAddFriendInviteAck)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_pbfriend();
  inline void clear_has_pbfriend();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::PBFriend* pbfriend_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SAddFriendInviteAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SDelFriendReq : public ::google::protobuf::Message {
 public:
  S2SDelFriendReq();
  virtual ~S2SDelFriendReq();

  S2SDelFriendReq(const S2SDelFriendReq& from);

  inline S2SDelFriendReq& operator=(const S2SDelFriendReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SDelFriendReq& default_instance();

  void Swap(S2SDelFriendReq* other);

  // implements Message ----------------------------------------------

  S2SDelFriendReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SDelFriendReq& from);
  void MergeFrom(const S2SDelFriendReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 selfplayerid = 1;
  inline bool has_selfplayerid() const;
  inline void clear_selfplayerid();
  static const int kSelfplayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 selfplayerid() const;
  inline void set_selfplayerid(::google::protobuf::uint32 value);

  // required uint32 targetplayerid = 2;
  inline bool has_targetplayerid() const;
  inline void clear_targetplayerid();
  static const int kTargetplayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 targetplayerid() const;
  inline void set_targetplayerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SDelFriendReq)
 private:
  inline void set_has_selfplayerid();
  inline void clear_has_selfplayerid();
  inline void set_has_targetplayerid();
  inline void clear_has_targetplayerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 selfplayerid_;
  ::google::protobuf::uint32 targetplayerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SDelFriendReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SDelFriendAck : public ::google::protobuf::Message {
 public:
  S2SDelFriendAck();
  virtual ~S2SDelFriendAck();

  S2SDelFriendAck(const S2SDelFriendAck& from);

  inline S2SDelFriendAck& operator=(const S2SDelFriendAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SDelFriendAck& default_instance();

  void Swap(S2SDelFriendAck* other);

  // implements Message ----------------------------------------------

  S2SDelFriendAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SDelFriendAck& from);
  void MergeFrom(const S2SDelFriendAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 targetplayerid = 2;
  inline bool has_targetplayerid() const;
  inline void clear_targetplayerid();
  static const int kTargetplayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 targetplayerid() const;
  inline void set_targetplayerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SDelFriendAck)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_targetplayerid();
  inline void clear_has_targetplayerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 targetplayerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SDelFriendAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SDelFriendInviteReq : public ::google::protobuf::Message {
 public:
  S2SDelFriendInviteReq();
  virtual ~S2SDelFriendInviteReq();

  S2SDelFriendInviteReq(const S2SDelFriendInviteReq& from);

  inline S2SDelFriendInviteReq& operator=(const S2SDelFriendInviteReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SDelFriendInviteReq& default_instance();

  void Swap(S2SDelFriendInviteReq* other);

  // implements Message ----------------------------------------------

  S2SDelFriendInviteReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SDelFriendInviteReq& from);
  void MergeFrom(const S2SDelFriendInviteReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 selfplayerid = 1;
  inline bool has_selfplayerid() const;
  inline void clear_selfplayerid();
  static const int kSelfplayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 selfplayerid() const;
  inline void set_selfplayerid(::google::protobuf::uint32 value);

  // required uint32 targetplayerid = 2;
  inline bool has_targetplayerid() const;
  inline void clear_targetplayerid();
  static const int kTargetplayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 targetplayerid() const;
  inline void set_targetplayerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SDelFriendInviteReq)
 private:
  inline void set_has_selfplayerid();
  inline void clear_has_selfplayerid();
  inline void set_has_targetplayerid();
  inline void clear_has_targetplayerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 selfplayerid_;
  ::google::protobuf::uint32 targetplayerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SDelFriendInviteReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SAddFriendReq : public ::google::protobuf::Message {
 public:
  S2SAddFriendReq();
  virtual ~S2SAddFriendReq();

  S2SAddFriendReq(const S2SAddFriendReq& from);

  inline S2SAddFriendReq& operator=(const S2SAddFriendReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SAddFriendReq& default_instance();

  void Swap(S2SAddFriendReq* other);

  // implements Message ----------------------------------------------

  S2SAddFriendReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SAddFriendReq& from);
  void MergeFrom(const S2SAddFriendReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 selfplayerid = 1;
  inline bool has_selfplayerid() const;
  inline void clear_selfplayerid();
  static const int kSelfplayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 selfplayerid() const;
  inline void set_selfplayerid(::google::protobuf::uint32 value);

  // required uint32 targetplayerid = 2;
  inline bool has_targetplayerid() const;
  inline void clear_targetplayerid();
  static const int kTargetplayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 targetplayerid() const;
  inline void set_targetplayerid(::google::protobuf::uint32 value);

  // required uint32 serverid = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 3;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // required string targetname = 4;
  inline bool has_targetname() const;
  inline void clear_targetname();
  static const int kTargetnameFieldNumber = 4;
  inline const ::std::string& targetname() const;
  inline void set_targetname(const ::std::string& value);
  inline void set_targetname(const char* value);
  inline void set_targetname(const char* value, size_t size);
  inline ::std::string* mutable_targetname();
  inline ::std::string* release_targetname();
  inline void set_allocated_targetname(::std::string* targetname);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SAddFriendReq)
 private:
  inline void set_has_selfplayerid();
  inline void clear_has_selfplayerid();
  inline void set_has_targetplayerid();
  inline void clear_has_targetplayerid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_targetname();
  inline void clear_has_targetname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 selfplayerid_;
  ::google::protobuf::uint32 targetplayerid_;
  ::std::string* targetname_;
  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SAddFriendReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SAddFriendAck : public ::google::protobuf::Message {
 public:
  S2SAddFriendAck();
  virtual ~S2SAddFriendAck();

  S2SAddFriendAck(const S2SAddFriendAck& from);

  inline S2SAddFriendAck& operator=(const S2SAddFriendAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SAddFriendAck& default_instance();

  void Swap(S2SAddFriendAck* other);

  // implements Message ----------------------------------------------

  S2SAddFriendAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SAddFriendAck& from);
  void MergeFrom(const S2SAddFriendAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required .KFMsg.PBFriend pbfriend = 2;
  inline bool has_pbfriend() const;
  inline void clear_pbfriend();
  static const int kPbfriendFieldNumber = 2;
  inline const ::KFMsg::PBFriend& pbfriend() const;
  inline ::KFMsg::PBFriend* mutable_pbfriend();
  inline ::KFMsg::PBFriend* release_pbfriend();
  inline void set_allocated_pbfriend(::KFMsg::PBFriend* pbfriend);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SAddFriendAck)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_pbfriend();
  inline void clear_has_pbfriend();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::PBFriend* pbfriend_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SAddFriendAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SUpdateFriendReq : public ::google::protobuf::Message {
 public:
  S2SUpdateFriendReq();
  virtual ~S2SUpdateFriendReq();

  S2SUpdateFriendReq(const S2SUpdateFriendReq& from);

  inline S2SUpdateFriendReq& operator=(const S2SUpdateFriendReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SUpdateFriendReq& default_instance();

  void Swap(S2SUpdateFriendReq* other);

  // implements Message ----------------------------------------------

  S2SUpdateFriendReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SUpdateFriendReq& from);
  void MergeFrom(const S2SUpdateFriendReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 friendid = 1;
  inline bool has_friendid() const;
  inline void clear_friendid();
  static const int kFriendidFieldNumber = 1;
  inline ::google::protobuf::uint32 friendid() const;
  inline void set_friendid(::google::protobuf::uint32 value);

  // repeated .KFMsg.PBString pbdata = 2;
  inline int pbdata_size() const;
  inline void clear_pbdata();
  static const int kPbdataFieldNumber = 2;
  inline const ::KFMsg::PBString& pbdata(int index) const;
  inline ::KFMsg::PBString* mutable_pbdata(int index);
  inline ::KFMsg::PBString* add_pbdata();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >&
      pbdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >*
      mutable_pbdata();

  // @@protoc_insertion_point(class_scope:KFMsg.S2SUpdateFriendReq)
 private:
  inline void set_has_friendid();
  inline void clear_has_friendid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString > pbdata_;
  ::google::protobuf::uint32 friendid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SUpdateFriendReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SUpdateFriendLinessReq : public ::google::protobuf::Message {
 public:
  S2SUpdateFriendLinessReq();
  virtual ~S2SUpdateFriendLinessReq();

  S2SUpdateFriendLinessReq(const S2SUpdateFriendLinessReq& from);

  inline S2SUpdateFriendLinessReq& operator=(const S2SUpdateFriendLinessReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SUpdateFriendLinessReq& default_instance();

  void Swap(S2SUpdateFriendLinessReq* other);

  // implements Message ----------------------------------------------

  S2SUpdateFriendLinessReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SUpdateFriendLinessReq& from);
  void MergeFrom(const S2SUpdateFriendLinessReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 selfplayerid = 1;
  inline bool has_selfplayerid() const;
  inline void clear_selfplayerid();
  static const int kSelfplayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 selfplayerid() const;
  inline void set_selfplayerid(::google::protobuf::uint32 value);

  // required uint32 targetplayerid = 2;
  inline bool has_targetplayerid() const;
  inline void clear_targetplayerid();
  static const int kTargetplayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 targetplayerid() const;
  inline void set_targetplayerid(::google::protobuf::uint32 value);

  // required uint32 friendliness = 3;
  inline bool has_friendliness() const;
  inline void clear_friendliness();
  static const int kFriendlinessFieldNumber = 3;
  inline ::google::protobuf::uint32 friendliness() const;
  inline void set_friendliness(::google::protobuf::uint32 value);

  // required uint32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SUpdateFriendLinessReq)
 private:
  inline void set_has_selfplayerid();
  inline void clear_has_selfplayerid();
  inline void set_has_targetplayerid();
  inline void clear_has_targetplayerid();
  inline void set_has_friendliness();
  inline void clear_has_friendliness();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 selfplayerid_;
  ::google::protobuf::uint32 targetplayerid_;
  ::google::protobuf::uint32 friendliness_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SUpdateFriendLinessReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryBasicReq : public ::google::protobuf::Message {
 public:
  S2SQueryBasicReq();
  virtual ~S2SQueryBasicReq();

  S2SQueryBasicReq(const S2SQueryBasicReq& from);

  inline S2SQueryBasicReq& operator=(const S2SQueryBasicReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryBasicReq& default_instance();

  void Swap(S2SQueryBasicReq* other);

  // implements Message ----------------------------------------------

  S2SQueryBasicReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SQueryBasicReq& from);
  void MergeFrom(const S2SQueryBasicReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryBasicReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SQueryBasicReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryBasicAck : public ::google::protobuf::Message {
 public:
  S2SQueryBasicAck();
  virtual ~S2SQueryBasicAck();

  S2SQueryBasicAck(const S2SQueryBasicAck& from);

  inline S2SQueryBasicAck& operator=(const S2SQueryBasicAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryBasicAck& default_instance();

  void Swap(S2SQueryBasicAck* other);

  // implements Message ----------------------------------------------

  S2SQueryBasicAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SQueryBasicAck& from);
  void MergeFrom(const S2SQueryBasicAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required .KFMsg.PBObject pbobject = 2;
  inline bool has_pbobject() const;
  inline void clear_pbobject();
  static const int kPbobjectFieldNumber = 2;
  inline const ::KFMsg::PBObject& pbobject() const;
  inline ::KFMsg::PBObject* mutable_pbobject();
  inline ::KFMsg::PBObject* release_pbobject();
  inline void set_allocated_pbobject(::KFMsg::PBObject* pbobject);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryBasicAck)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_pbobject();
  inline void clear_has_pbobject();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::PBObject* pbobject_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SQueryBasicAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryPlayerReq : public ::google::protobuf::Message {
 public:
  S2SQueryPlayerReq();
  virtual ~S2SQueryPlayerReq();

  S2SQueryPlayerReq(const S2SQueryPlayerReq& from);

  inline S2SQueryPlayerReq& operator=(const S2SQueryPlayerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryPlayerReq& default_instance();

  void Swap(S2SQueryPlayerReq* other);

  // implements Message ----------------------------------------------

  S2SQueryPlayerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SQueryPlayerReq& from);
  void MergeFrom(const S2SQueryPlayerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 zoneid = 1;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 1;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // required uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 queryid = 3;
  inline bool has_queryid() const;
  inline void clear_queryid();
  static const int kQueryidFieldNumber = 3;
  inline ::google::protobuf::uint32 queryid() const;
  inline void set_queryid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryPlayerReq)
 private:
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_queryid();
  inline void clear_has_queryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 queryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SQueryPlayerReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryPlayerAck : public ::google::protobuf::Message {
 public:
  S2SQueryPlayerAck();
  virtual ~S2SQueryPlayerAck();

  S2SQueryPlayerAck(const S2SQueryPlayerAck& from);

  inline S2SQueryPlayerAck& operator=(const S2SQueryPlayerAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryPlayerAck& default_instance();

  void Swap(S2SQueryPlayerAck* other);

  // implements Message ----------------------------------------------

  S2SQueryPlayerAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SQueryPlayerAck& from);
  void MergeFrom(const S2SQueryPlayerAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required .KFMsg.PBObject pbobject = 2;
  inline bool has_pbobject() const;
  inline void clear_pbobject();
  static const int kPbobjectFieldNumber = 2;
  inline const ::KFMsg::PBObject& pbobject() const;
  inline ::KFMsg::PBObject* mutable_pbobject();
  inline ::KFMsg::PBObject* release_pbobject();
  inline void set_allocated_pbobject(::KFMsg::PBObject* pbobject);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryPlayerAck)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_pbobject();
  inline void clear_has_pbobject();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::PBObject* pbobject_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SQueryPlayerAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SUpdateMailFlagReq : public ::google::protobuf::Message {
 public:
  S2SUpdateMailFlagReq();
  virtual ~S2SUpdateMailFlagReq();

  S2SUpdateMailFlagReq(const S2SUpdateMailFlagReq& from);

  inline S2SUpdateMailFlagReq& operator=(const S2SUpdateMailFlagReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SUpdateMailFlagReq& default_instance();

  void Swap(S2SUpdateMailFlagReq* other);

  // implements Message ----------------------------------------------

  S2SUpdateMailFlagReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SUpdateMailFlagReq& from);
  void MergeFrom(const S2SUpdateMailFlagReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint64 mailid = 2;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailidFieldNumber = 2;
  inline ::google::protobuf::uint64 mailid() const;
  inline void set_mailid(::google::protobuf::uint64 value);

  // required uint32 mailtype = 3;
  inline bool has_mailtype() const;
  inline void clear_mailtype();
  static const int kMailtypeFieldNumber = 3;
  inline ::google::protobuf::uint32 mailtype() const;
  inline void set_mailtype(::google::protobuf::uint32 value);

  // required uint32 flag = 4;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 4;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SUpdateMailFlagReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_mailtype();
  inline void clear_has_mailtype();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 mailid_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 mailtype_;
  ::google::protobuf::uint32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SUpdateMailFlagReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SUpdateMailFlagAck : public ::google::protobuf::Message {
 public:
  S2SUpdateMailFlagAck();
  virtual ~S2SUpdateMailFlagAck();

  S2SUpdateMailFlagAck(const S2SUpdateMailFlagAck& from);

  inline S2SUpdateMailFlagAck& operator=(const S2SUpdateMailFlagAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SUpdateMailFlagAck& default_instance();

  void Swap(S2SUpdateMailFlagAck* other);

  // implements Message ----------------------------------------------

  S2SUpdateMailFlagAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SUpdateMailFlagAck& from);
  void MergeFrom(const S2SUpdateMailFlagAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint64 mailid = 2;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailidFieldNumber = 2;
  inline ::google::protobuf::uint64 mailid() const;
  inline void set_mailid(::google::protobuf::uint64 value);

  // required uint32 mailtype = 3;
  inline bool has_mailtype() const;
  inline void clear_mailtype();
  static const int kMailtypeFieldNumber = 3;
  inline ::google::protobuf::uint32 mailtype() const;
  inline void set_mailtype(::google::protobuf::uint32 value);

  // required uint32 flag = 4;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 4;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SUpdateMailFlagAck)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_mailtype();
  inline void clear_has_mailtype();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 mailid_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 mailtype_;
  ::google::protobuf::uint32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SUpdateMailFlagAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SPlayerToastReq : public ::google::protobuf::Message {
 public:
  S2SPlayerToastReq();
  virtual ~S2SPlayerToastReq();

  S2SPlayerToastReq(const S2SPlayerToastReq& from);

  inline S2SPlayerToastReq& operator=(const S2SPlayerToastReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SPlayerToastReq& default_instance();

  void Swap(S2SPlayerToastReq* other);

  // implements Message ----------------------------------------------

  S2SPlayerToastReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SPlayerToastReq& from);
  void MergeFrom(const S2SPlayerToastReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 selfplayerid = 1;
  inline bool has_selfplayerid() const;
  inline void clear_selfplayerid();
  static const int kSelfplayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 selfplayerid() const;
  inline void set_selfplayerid(::google::protobuf::uint32 value);

  // required uint32 targetplayerid = 2;
  inline bool has_targetplayerid() const;
  inline void clear_targetplayerid();
  static const int kTargetplayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 targetplayerid() const;
  inline void set_targetplayerid(::google::protobuf::uint32 value);

  // required uint32 dailygetlimit = 3;
  inline bool has_dailygetlimit() const;
  inline void clear_dailygetlimit();
  static const int kDailygetlimitFieldNumber = 3;
  inline ::google::protobuf::uint32 dailygetlimit() const;
  inline void set_dailygetlimit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SPlayerToastReq)
 private:
  inline void set_has_selfplayerid();
  inline void clear_has_selfplayerid();
  inline void set_has_targetplayerid();
  inline void clear_has_targetplayerid();
  inline void set_has_dailygetlimit();
  inline void clear_has_dailygetlimit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 selfplayerid_;
  ::google::protobuf::uint32 targetplayerid_;
  ::google::protobuf::uint32 dailygetlimit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SPlayerToastReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SPlayerToastAck : public ::google::protobuf::Message {
 public:
  S2SPlayerToastAck();
  virtual ~S2SPlayerToastAck();

  S2SPlayerToastAck(const S2SPlayerToastAck& from);

  inline S2SPlayerToastAck& operator=(const S2SPlayerToastAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SPlayerToastAck& default_instance();

  void Swap(S2SPlayerToastAck* other);

  // implements Message ----------------------------------------------

  S2SPlayerToastAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SPlayerToastAck& from);
  void MergeFrom(const S2SPlayerToastAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // required uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 targetplayerid = 3;
  inline bool has_targetplayerid() const;
  inline void clear_targetplayerid();
  static const int kTargetplayeridFieldNumber = 3;
  inline ::google::protobuf::uint32 targetplayerid() const;
  inline void set_targetplayerid(::google::protobuf::uint32 value);

  // required uint32 targetserverid = 4;
  inline bool has_targetserverid() const;
  inline void clear_targetserverid();
  static const int kTargetserveridFieldNumber = 4;
  inline ::google::protobuf::uint32 targetserverid() const;
  inline void set_targetserverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SPlayerToastAck)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_targetplayerid();
  inline void clear_has_targetplayerid();
  inline void set_has_targetserverid();
  inline void clear_has_targetserverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 targetplayerid_;
  ::google::protobuf::uint32 targetserverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SPlayerToastAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryToastCountReq : public ::google::protobuf::Message {
 public:
  S2SQueryToastCountReq();
  virtual ~S2SQueryToastCountReq();

  S2SQueryToastCountReq(const S2SQueryToastCountReq& from);

  inline S2SQueryToastCountReq& operator=(const S2SQueryToastCountReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryToastCountReq& default_instance();

  void Swap(S2SQueryToastCountReq* other);

  // implements Message ----------------------------------------------

  S2SQueryToastCountReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SQueryToastCountReq& from);
  void MergeFrom(const S2SQueryToastCountReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 selfplayerid = 1;
  inline bool has_selfplayerid() const;
  inline void clear_selfplayerid();
  static const int kSelfplayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 selfplayerid() const;
  inline void set_selfplayerid(::google::protobuf::uint32 value);

  // required uint32 targetplayerid = 2;
  inline bool has_targetplayerid() const;
  inline void clear_targetplayerid();
  static const int kTargetplayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 targetplayerid() const;
  inline void set_targetplayerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryToastCountReq)
 private:
  inline void set_has_selfplayerid();
  inline void clear_has_selfplayerid();
  inline void set_has_targetplayerid();
  inline void clear_has_targetplayerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 selfplayerid_;
  ::google::protobuf::uint32 targetplayerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SQueryToastCountReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryToastCountAck : public ::google::protobuf::Message {
 public:
  S2SQueryToastCountAck();
  virtual ~S2SQueryToastCountAck();

  S2SQueryToastCountAck(const S2SQueryToastCountAck& from);

  inline S2SQueryToastCountAck& operator=(const S2SQueryToastCountAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryToastCountAck& default_instance();

  void Swap(S2SQueryToastCountAck* other);

  // implements Message ----------------------------------------------

  S2SQueryToastCountAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SQueryToastCountAck& from);
  void MergeFrom(const S2SQueryToastCountAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 targetplayerid = 2;
  inline bool has_targetplayerid() const;
  inline void clear_targetplayerid();
  static const int kTargetplayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 targetplayerid() const;
  inline void set_targetplayerid(::google::protobuf::uint32 value);

  // required uint32 toastcount = 3;
  inline bool has_toastcount() const;
  inline void clear_toastcount();
  static const int kToastcountFieldNumber = 3;
  inline ::google::protobuf::uint32 toastcount() const;
  inline void set_toastcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryToastCountAck)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_targetplayerid();
  inline void clear_has_targetplayerid();
  inline void set_has_toastcount();
  inline void clear_has_toastcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 targetplayerid_;
  ::google::protobuf::uint32 toastcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SQueryToastCountAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SUpdateFriendLinessAck : public ::google::protobuf::Message {
 public:
  S2SUpdateFriendLinessAck();
  virtual ~S2SUpdateFriendLinessAck();

  S2SUpdateFriendLinessAck(const S2SUpdateFriendLinessAck& from);

  inline S2SUpdateFriendLinessAck& operator=(const S2SUpdateFriendLinessAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SUpdateFriendLinessAck& default_instance();

  void Swap(S2SUpdateFriendLinessAck* other);

  // implements Message ----------------------------------------------

  S2SUpdateFriendLinessAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SUpdateFriendLinessAck& from);
  void MergeFrom(const S2SUpdateFriendLinessAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 targetplayerid = 2;
  inline bool has_targetplayerid() const;
  inline void clear_targetplayerid();
  static const int kTargetplayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 targetplayerid() const;
  inline void set_targetplayerid(::google::protobuf::uint32 value);

  // required uint32 friendliness = 3;
  inline bool has_friendliness() const;
  inline void clear_friendliness();
  static const int kFriendlinessFieldNumber = 3;
  inline ::google::protobuf::uint32 friendliness() const;
  inline void set_friendliness(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SUpdateFriendLinessAck)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_targetplayerid();
  inline void clear_has_targetplayerid();
  inline void set_has_friendliness();
  inline void clear_has_friendliness();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 targetplayerid_;
  ::google::protobuf::uint32 friendliness_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SUpdateFriendLinessAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SCreateMatchGroupReq : public ::google::protobuf::Message {
 public:
  S2SCreateMatchGroupReq();
  virtual ~S2SCreateMatchGroupReq();

  S2SCreateMatchGroupReq(const S2SCreateMatchGroupReq& from);

  inline S2SCreateMatchGroupReq& operator=(const S2SCreateMatchGroupReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SCreateMatchGroupReq& default_instance();

  void Swap(S2SCreateMatchGroupReq* other);

  // implements Message ----------------------------------------------

  S2SCreateMatchGroupReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SCreateMatchGroupReq& from);
  void MergeFrom(const S2SCreateMatchGroupReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .KFMsg.PBObject pbmember = 1;
  inline bool has_pbmember() const;
  inline void clear_pbmember();
  static const int kPbmemberFieldNumber = 1;
  inline const ::KFMsg::PBObject& pbmember() const;
  inline ::KFMsg::PBObject* mutable_pbmember();
  inline ::KFMsg::PBObject* release_pbmember();
  inline void set_allocated_pbmember(::KFMsg::PBObject* pbmember);

  // required uint64 groupid = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required uint32 maxcount = 3;
  inline bool has_maxcount() const;
  inline void clear_maxcount();
  static const int kMaxcountFieldNumber = 3;
  inline ::google::protobuf::uint32 maxcount() const;
  inline void set_maxcount(::google::protobuf::uint32 value);

  // required uint32 matchid = 4;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 4;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required uint32 playerid = 5;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 5;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SCreateMatchGroupReq)
 private:
  inline void set_has_pbmember();
  inline void clear_has_pbmember();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_maxcount();
  inline void clear_has_maxcount();
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::PBObject* pbmember_;
  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint32 maxcount_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SCreateMatchGroupReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SUpdateGroupMatchReq : public ::google::protobuf::Message {
 public:
  S2SUpdateGroupMatchReq();
  virtual ~S2SUpdateGroupMatchReq();

  S2SUpdateGroupMatchReq(const S2SUpdateGroupMatchReq& from);

  inline S2SUpdateGroupMatchReq& operator=(const S2SUpdateGroupMatchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SUpdateGroupMatchReq& default_instance();

  void Swap(S2SUpdateGroupMatchReq* other);

  // implements Message ----------------------------------------------

  S2SUpdateGroupMatchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SUpdateGroupMatchReq& from);
  void MergeFrom(const S2SUpdateGroupMatchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required uint32 maxcount = 2;
  inline bool has_maxcount() const;
  inline void clear_maxcount();
  static const int kMaxcountFieldNumber = 2;
  inline ::google::protobuf::uint32 maxcount() const;
  inline void set_maxcount(::google::protobuf::uint32 value);

  // required uint32 matchid = 3;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 3;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required uint32 playerid = 4;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 4;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SUpdateGroupMatchReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_maxcount();
  inline void clear_has_maxcount();
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint32 maxcount_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SUpdateGroupMatchReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SCreateMatchGroupToShardReq : public ::google::protobuf::Message {
 public:
  S2SCreateMatchGroupToShardReq();
  virtual ~S2SCreateMatchGroupToShardReq();

  S2SCreateMatchGroupToShardReq(const S2SCreateMatchGroupToShardReq& from);

  inline S2SCreateMatchGroupToShardReq& operator=(const S2SCreateMatchGroupToShardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SCreateMatchGroupToShardReq& default_instance();

  void Swap(S2SCreateMatchGroupToShardReq* other);

  // implements Message ----------------------------------------------

  S2SCreateMatchGroupToShardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SCreateMatchGroupToShardReq& from);
  void MergeFrom(const S2SCreateMatchGroupToShardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .KFMsg.PBObject pbmember = 1;
  inline bool has_pbmember() const;
  inline void clear_pbmember();
  static const int kPbmemberFieldNumber = 1;
  inline const ::KFMsg::PBObject& pbmember() const;
  inline ::KFMsg::PBObject* mutable_pbmember();
  inline ::KFMsg::PBObject* release_pbmember();
  inline void set_allocated_pbmember(::KFMsg::PBObject* pbmember);

  // required uint64 groupid = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required uint32 maxcount = 3;
  inline bool has_maxcount() const;
  inline void clear_maxcount();
  static const int kMaxcountFieldNumber = 3;
  inline ::google::protobuf::uint32 maxcount() const;
  inline void set_maxcount(::google::protobuf::uint32 value);

  // required uint32 matchid = 4;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 4;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required uint32 playerid = 5;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 5;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SCreateMatchGroupToShardReq)
 private:
  inline void set_has_pbmember();
  inline void clear_has_pbmember();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_maxcount();
  inline void clear_has_maxcount();
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::PBObject* pbmember_;
  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint32 maxcount_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SCreateMatchGroupToShardReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SReceiveInviteMatchGroupReq : public ::google::protobuf::Message {
 public:
  S2SReceiveInviteMatchGroupReq();
  virtual ~S2SReceiveInviteMatchGroupReq();

  S2SReceiveInviteMatchGroupReq(const S2SReceiveInviteMatchGroupReq& from);

  inline S2SReceiveInviteMatchGroupReq& operator=(const S2SReceiveInviteMatchGroupReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SReceiveInviteMatchGroupReq& default_instance();

  void Swap(S2SReceiveInviteMatchGroupReq* other);

  // implements Message ----------------------------------------------

  S2SReceiveInviteMatchGroupReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SReceiveInviteMatchGroupReq& from);
  void MergeFrom(const S2SReceiveInviteMatchGroupReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint64 groupid = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required .KFMsg.PBObject inviter = 3;
  inline bool has_inviter() const;
  inline void clear_inviter();
  static const int kInviterFieldNumber = 3;
  inline const ::KFMsg::PBObject& inviter() const;
  inline ::KFMsg::PBObject* mutable_inviter();
  inline ::KFMsg::PBObject* release_inviter();
  inline void set_allocated_inviter(::KFMsg::PBObject* inviter);

  // required string source = 4;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 4;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // required uint32 matchid = 5;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 5;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required uint32 inviterplayerid = 6;
  inline bool has_inviterplayerid() const;
  inline void clear_inviterplayerid();
  static const int kInviterplayeridFieldNumber = 6;
  inline ::google::protobuf::uint32 inviterplayerid() const;
  inline void set_inviterplayerid(::google::protobuf::uint32 value);

  // required uint32 inviterserverid = 7;
  inline bool has_inviterserverid() const;
  inline void clear_inviterserverid();
  static const int kInviterserveridFieldNumber = 7;
  inline ::google::protobuf::uint32 inviterserverid() const;
  inline void set_inviterserverid(::google::protobuf::uint32 value);

  // required string playername = 8;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayernameFieldNumber = 8;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SReceiveInviteMatchGroupReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_inviter();
  inline void clear_has_inviter();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_inviterplayerid();
  inline void clear_has_inviterplayerid();
  inline void set_has_inviterserverid();
  inline void clear_has_inviterserverid();
  inline void set_has_playername();
  inline void clear_has_playername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::KFMsg::PBObject* inviter_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 matchid_;
  ::std::string* source_;
  ::google::protobuf::uint32 inviterplayerid_;
  ::google::protobuf::uint32 inviterserverid_;
  ::std::string* playername_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SReceiveInviteMatchGroupReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SConsentInviteMatchGroupReq : public ::google::protobuf::Message {
 public:
  S2SConsentInviteMatchGroupReq();
  virtual ~S2SConsentInviteMatchGroupReq();

  S2SConsentInviteMatchGroupReq(const S2SConsentInviteMatchGroupReq& from);

  inline S2SConsentInviteMatchGroupReq& operator=(const S2SConsentInviteMatchGroupReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SConsentInviteMatchGroupReq& default_instance();

  void Swap(S2SConsentInviteMatchGroupReq* other);

  // implements Message ----------------------------------------------

  S2SConsentInviteMatchGroupReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SConsentInviteMatchGroupReq& from);
  void MergeFrom(const S2SConsentInviteMatchGroupReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 serverid = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 3;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // optional .KFMsg.PBObject pbmember = 4;
  inline bool has_pbmember() const;
  inline void clear_pbmember();
  static const int kPbmemberFieldNumber = 4;
  inline const ::KFMsg::PBObject& pbmember() const;
  inline ::KFMsg::PBObject* mutable_pbmember();
  inline ::KFMsg::PBObject* release_pbmember();
  inline void set_allocated_pbmember(::KFMsg::PBObject* pbmember);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SConsentInviteMatchGroupReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_pbmember();
  inline void clear_has_pbmember();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 serverid_;
  ::KFMsg::PBObject* pbmember_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SConsentInviteMatchGroupReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SAddMatchGroupMemberReq : public ::google::protobuf::Message {
 public:
  S2SAddMatchGroupMemberReq();
  virtual ~S2SAddMatchGroupMemberReq();

  S2SAddMatchGroupMemberReq(const S2SAddMatchGroupMemberReq& from);

  inline S2SAddMatchGroupMemberReq& operator=(const S2SAddMatchGroupMemberReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SAddMatchGroupMemberReq& default_instance();

  void Swap(S2SAddMatchGroupMemberReq* other);

  // implements Message ----------------------------------------------

  S2SAddMatchGroupMemberReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SAddMatchGroupMemberReq& from);
  void MergeFrom(const S2SAddMatchGroupMemberReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 serverid = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 3;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // optional .KFMsg.PBObject pbmember = 4;
  inline bool has_pbmember() const;
  inline void clear_pbmember();
  static const int kPbmemberFieldNumber = 4;
  inline const ::KFMsg::PBObject& pbmember() const;
  inline ::KFMsg::PBObject* mutable_pbmember();
  inline ::KFMsg::PBObject* release_pbmember();
  inline void set_allocated_pbmember(::KFMsg::PBObject* pbmember);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SAddMatchGroupMemberReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_pbmember();
  inline void clear_has_pbmember();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 serverid_;
  ::KFMsg::PBObject* pbmember_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SAddMatchGroupMemberReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SAddMatchGroupMemberAck : public ::google::protobuf::Message {
 public:
  S2SAddMatchGroupMemberAck();
  virtual ~S2SAddMatchGroupMemberAck();

  S2SAddMatchGroupMemberAck(const S2SAddMatchGroupMemberAck& from);

  inline S2SAddMatchGroupMemberAck& operator=(const S2SAddMatchGroupMemberAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SAddMatchGroupMemberAck& default_instance();

  void Swap(S2SAddMatchGroupMemberAck* other);

  // implements Message ----------------------------------------------

  S2SAddMatchGroupMemberAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SAddMatchGroupMemberAck& from);
  void MergeFrom(const S2SAddMatchGroupMemberAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .KFMsg.PBObject pbmember = 1;
  inline bool has_pbmember() const;
  inline void clear_pbmember();
  static const int kPbmemberFieldNumber = 1;
  inline const ::KFMsg::PBObject& pbmember() const;
  inline ::KFMsg::PBObject* mutable_pbmember();
  inline ::KFMsg::PBObject* release_pbmember();
  inline void set_allocated_pbmember(::KFMsg::PBObject* pbmember);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SAddMatchGroupMemberAck)
 private:
  inline void set_has_pbmember();
  inline void clear_has_pbmember();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::PBObject* pbmember_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SAddMatchGroupMemberAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STellMatchGroupDataAck : public ::google::protobuf::Message {
 public:
  S2STellMatchGroupDataAck();
  virtual ~S2STellMatchGroupDataAck();

  S2STellMatchGroupDataAck(const S2STellMatchGroupDataAck& from);

  inline S2STellMatchGroupDataAck& operator=(const S2STellMatchGroupDataAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STellMatchGroupDataAck& default_instance();

  void Swap(S2STellMatchGroupDataAck* other);

  // implements Message ----------------------------------------------

  S2STellMatchGroupDataAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2STellMatchGroupDataAck& from);
  void MergeFrom(const S2STellMatchGroupDataAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .KFMsg.PBObject pbmember = 1;
  inline int pbmember_size() const;
  inline void clear_pbmember();
  static const int kPbmemberFieldNumber = 1;
  inline const ::KFMsg::PBObject& pbmember(int index) const;
  inline ::KFMsg::PBObject* mutable_pbmember(int index);
  inline ::KFMsg::PBObject* add_pbmember();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBObject >&
      pbmember() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBObject >*
      mutable_pbmember();

  // optional uint64 groupid = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // optional uint32 captainid = 3;
  inline bool has_captainid() const;
  inline void clear_captainid();
  static const int kCaptainidFieldNumber = 3;
  inline ::google::protobuf::uint32 captainid() const;
  inline void set_captainid(::google::protobuf::uint32 value);

  // optional uint32 maxcount = 4;
  inline bool has_maxcount() const;
  inline void clear_maxcount();
  static const int kMaxcountFieldNumber = 4;
  inline ::google::protobuf::uint32 maxcount() const;
  inline void set_maxcount(::google::protobuf::uint32 value);

  // optional uint32 matchid = 5;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 5;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // optional bool newadd = 6;
  inline bool has_newadd() const;
  inline void clear_newadd();
  static const int kNewaddFieldNumber = 6;
  inline bool newadd() const;
  inline void set_newadd(bool value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STellMatchGroupDataAck)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_captainid();
  inline void clear_has_captainid();
  inline void set_has_maxcount();
  inline void clear_has_maxcount();
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_newadd();
  inline void clear_has_newadd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBObject > pbmember_;
  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint32 captainid_;
  ::google::protobuf::uint32 maxcount_;
  ::google::protobuf::uint32 matchid_;
  bool newadd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2STellMatchGroupDataAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRemoveMatchGroupMemberAck : public ::google::protobuf::Message {
 public:
  S2SRemoveMatchGroupMemberAck();
  virtual ~S2SRemoveMatchGroupMemberAck();

  S2SRemoveMatchGroupMemberAck(const S2SRemoveMatchGroupMemberAck& from);

  inline S2SRemoveMatchGroupMemberAck& operator=(const S2SRemoveMatchGroupMemberAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRemoveMatchGroupMemberAck& default_instance();

  void Swap(S2SRemoveMatchGroupMemberAck* other);

  // implements Message ----------------------------------------------

  S2SRemoveMatchGroupMemberAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SRemoveMatchGroupMemberAck& from);
  void MergeFrom(const S2SRemoveMatchGroupMemberAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 memberid = 1;
  inline bool has_memberid() const;
  inline void clear_memberid();
  static const int kMemberidFieldNumber = 1;
  inline ::google::protobuf::uint32 memberid() const;
  inline void set_memberid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRemoveMatchGroupMemberAck)
 private:
  inline void set_has_memberid();
  inline void clear_has_memberid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 memberid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SRemoveMatchGroupMemberAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SLeaveMatchGroupReq : public ::google::protobuf::Message {
 public:
  S2SLeaveMatchGroupReq();
  virtual ~S2SLeaveMatchGroupReq();

  S2SLeaveMatchGroupReq(const S2SLeaveMatchGroupReq& from);

  inline S2SLeaveMatchGroupReq& operator=(const S2SLeaveMatchGroupReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SLeaveMatchGroupReq& default_instance();

  void Swap(S2SLeaveMatchGroupReq* other);

  // implements Message ----------------------------------------------

  S2SLeaveMatchGroupReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SLeaveMatchGroupReq& from);
  void MergeFrom(const S2SLeaveMatchGroupReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SLeaveMatchGroupReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SLeaveMatchGroupReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SKickMatchGroupReq : public ::google::protobuf::Message {
 public:
  S2SKickMatchGroupReq();
  virtual ~S2SKickMatchGroupReq();

  S2SKickMatchGroupReq(const S2SKickMatchGroupReq& from);

  inline S2SKickMatchGroupReq& operator=(const S2SKickMatchGroupReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SKickMatchGroupReq& default_instance();

  void Swap(S2SKickMatchGroupReq* other);

  // implements Message ----------------------------------------------

  S2SKickMatchGroupReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SKickMatchGroupReq& from);
  void MergeFrom(const S2SKickMatchGroupReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required uint32 captainid = 2;
  inline bool has_captainid() const;
  inline void clear_captainid();
  static const int kCaptainidFieldNumber = 2;
  inline ::google::protobuf::uint32 captainid() const;
  inline void set_captainid(::google::protobuf::uint32 value);

  // required uint32 serverid = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 3;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // required uint32 memberid = 4;
  inline bool has_memberid() const;
  inline void clear_memberid();
  static const int kMemberidFieldNumber = 4;
  inline ::google::protobuf::uint32 memberid() const;
  inline void set_memberid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SKickMatchGroupReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_captainid();
  inline void clear_has_captainid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_memberid();
  inline void clear_has_memberid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint32 captainid_;
  ::google::protobuf::uint32 serverid_;
  ::google::protobuf::uint32 memberid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SKickMatchGroupReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SLeaveMatchGroupAck : public ::google::protobuf::Message {
 public:
  S2SLeaveMatchGroupAck();
  virtual ~S2SLeaveMatchGroupAck();

  S2SLeaveMatchGroupAck(const S2SLeaveMatchGroupAck& from);

  inline S2SLeaveMatchGroupAck& operator=(const S2SLeaveMatchGroupAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SLeaveMatchGroupAck& default_instance();

  void Swap(S2SLeaveMatchGroupAck* other);

  // implements Message ----------------------------------------------

  S2SLeaveMatchGroupAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SLeaveMatchGroupAck& from);
  void MergeFrom(const S2SLeaveMatchGroupAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SLeaveMatchGroupAck)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SLeaveMatchGroupAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SApplyMatchGroupReq : public ::google::protobuf::Message {
 public:
  S2SApplyMatchGroupReq();
  virtual ~S2SApplyMatchGroupReq();

  S2SApplyMatchGroupReq(const S2SApplyMatchGroupReq& from);

  inline S2SApplyMatchGroupReq& operator=(const S2SApplyMatchGroupReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SApplyMatchGroupReq& default_instance();

  void Swap(S2SApplyMatchGroupReq* other);

  // implements Message ----------------------------------------------

  S2SApplyMatchGroupReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SApplyMatchGroupReq& from);
  void MergeFrom(const S2SApplyMatchGroupReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 serverid = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 3;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // required .KFMsg.PBObject pbmember = 4;
  inline bool has_pbmember() const;
  inline void clear_pbmember();
  static const int kPbmemberFieldNumber = 4;
  inline const ::KFMsg::PBObject& pbmember() const;
  inline ::KFMsg::PBObject* mutable_pbmember();
  inline ::KFMsg::PBObject* release_pbmember();
  inline void set_allocated_pbmember(::KFMsg::PBObject* pbmember);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SApplyMatchGroupReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_pbmember();
  inline void clear_has_pbmember();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 serverid_;
  ::KFMsg::PBObject* pbmember_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SApplyMatchGroupReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SApplyMatchGroupAck : public ::google::protobuf::Message {
 public:
  S2SApplyMatchGroupAck();
  virtual ~S2SApplyMatchGroupAck();

  S2SApplyMatchGroupAck(const S2SApplyMatchGroupAck& from);

  inline S2SApplyMatchGroupAck& operator=(const S2SApplyMatchGroupAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SApplyMatchGroupAck& default_instance();

  void Swap(S2SApplyMatchGroupAck* other);

  // implements Message ----------------------------------------------

  S2SApplyMatchGroupAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SApplyMatchGroupAck& from);
  void MergeFrom(const S2SApplyMatchGroupAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required .KFMsg.PBObject pbmember = 2;
  inline bool has_pbmember() const;
  inline void clear_pbmember();
  static const int kPbmemberFieldNumber = 2;
  inline const ::KFMsg::PBObject& pbmember() const;
  inline ::KFMsg::PBObject* mutable_pbmember();
  inline ::KFMsg::PBObject* release_pbmember();
  inline void set_allocated_pbmember(::KFMsg::PBObject* pbmember);

  // required uint32 serverid = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 3;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SApplyMatchGroupAck)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_pbmember();
  inline void clear_has_pbmember();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::PBObject* pbmember_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SApplyMatchGroupAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SConsentApplyMatchGroupAck : public ::google::protobuf::Message {
 public:
  S2SConsentApplyMatchGroupAck();
  virtual ~S2SConsentApplyMatchGroupAck();

  S2SConsentApplyMatchGroupAck(const S2SConsentApplyMatchGroupAck& from);

  inline S2SConsentApplyMatchGroupAck& operator=(const S2SConsentApplyMatchGroupAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SConsentApplyMatchGroupAck& default_instance();

  void Swap(S2SConsentApplyMatchGroupAck* other);

  // implements Message ----------------------------------------------

  S2SConsentApplyMatchGroupAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SConsentApplyMatchGroupAck& from);
  void MergeFrom(const S2SConsentApplyMatchGroupAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 captainid = 3;
  inline bool has_captainid() const;
  inline void clear_captainid();
  static const int kCaptainidFieldNumber = 3;
  inline ::google::protobuf::uint32 captainid() const;
  inline void set_captainid(::google::protobuf::uint32 value);

  // required uint32 serverid = 4;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 4;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // required string playername = 5;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayernameFieldNumber = 5;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SConsentApplyMatchGroupAck)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_captainid();
  inline void clear_has_captainid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_playername();
  inline void clear_has_playername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 captainid_;
  ::std::string* playername_;
  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SConsentApplyMatchGroupAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SOnLineQueryMatchGroupReq : public ::google::protobuf::Message {
 public:
  S2SOnLineQueryMatchGroupReq();
  virtual ~S2SOnLineQueryMatchGroupReq();

  S2SOnLineQueryMatchGroupReq(const S2SOnLineQueryMatchGroupReq& from);

  inline S2SOnLineQueryMatchGroupReq& operator=(const S2SOnLineQueryMatchGroupReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SOnLineQueryMatchGroupReq& default_instance();

  void Swap(S2SOnLineQueryMatchGroupReq* other);

  // implements Message ----------------------------------------------

  S2SOnLineQueryMatchGroupReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SOnLineQueryMatchGroupReq& from);
  void MergeFrom(const S2SOnLineQueryMatchGroupReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 serverid = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 3;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SOnLineQueryMatchGroupReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SOnLineQueryMatchGroupReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SOffLineUpdateMatchGroupReq : public ::google::protobuf::Message {
 public:
  S2SOffLineUpdateMatchGroupReq();
  virtual ~S2SOffLineUpdateMatchGroupReq();

  S2SOffLineUpdateMatchGroupReq(const S2SOffLineUpdateMatchGroupReq& from);

  inline S2SOffLineUpdateMatchGroupReq& operator=(const S2SOffLineUpdateMatchGroupReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SOffLineUpdateMatchGroupReq& default_instance();

  void Swap(S2SOffLineUpdateMatchGroupReq* other);

  // implements Message ----------------------------------------------

  S2SOffLineUpdateMatchGroupReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SOffLineUpdateMatchGroupReq& from);
  void MergeFrom(const S2SOffLineUpdateMatchGroupReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SOffLineUpdateMatchGroupReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SOffLineUpdateMatchGroupReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SUpdateGroupMemberReq : public ::google::protobuf::Message {
 public:
  S2SUpdateGroupMemberReq();
  virtual ~S2SUpdateGroupMemberReq();

  S2SUpdateGroupMemberReq(const S2SUpdateGroupMemberReq& from);

  inline S2SUpdateGroupMemberReq& operator=(const S2SUpdateGroupMemberReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SUpdateGroupMemberReq& default_instance();

  void Swap(S2SUpdateGroupMemberReq* other);

  // implements Message ----------------------------------------------

  S2SUpdateGroupMemberReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SUpdateGroupMemberReq& from);
  void MergeFrom(const S2SUpdateGroupMemberReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required uint32 memberid = 2;
  inline bool has_memberid() const;
  inline void clear_memberid();
  static const int kMemberidFieldNumber = 2;
  inline ::google::protobuf::uint32 memberid() const;
  inline void set_memberid(::google::protobuf::uint32 value);

  // required string dataname = 3;
  inline bool has_dataname() const;
  inline void clear_dataname();
  static const int kDatanameFieldNumber = 3;
  inline const ::std::string& dataname() const;
  inline void set_dataname(const ::std::string& value);
  inline void set_dataname(const char* value);
  inline void set_dataname(const char* value, size_t size);
  inline ::std::string* mutable_dataname();
  inline ::std::string* release_dataname();
  inline void set_allocated_dataname(::std::string* dataname);

  // required .KFMsg.PBStrings pbstrings = 4;
  inline bool has_pbstrings() const;
  inline void clear_pbstrings();
  static const int kPbstringsFieldNumber = 4;
  inline const ::KFMsg::PBStrings& pbstrings() const;
  inline ::KFMsg::PBStrings* mutable_pbstrings();
  inline ::KFMsg::PBStrings* release_pbstrings();
  inline void set_allocated_pbstrings(::KFMsg::PBStrings* pbstrings);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SUpdateGroupMemberReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_memberid();
  inline void clear_has_memberid();
  inline void set_has_dataname();
  inline void clear_has_dataname();
  inline void set_has_pbstrings();
  inline void clear_has_pbstrings();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::std::string* dataname_;
  ::KFMsg::PBStrings* pbstrings_;
  ::google::protobuf::uint32 memberid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SUpdateGroupMemberReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SUpdateGroupMemberAck : public ::google::protobuf::Message {
 public:
  S2SUpdateGroupMemberAck();
  virtual ~S2SUpdateGroupMemberAck();

  S2SUpdateGroupMemberAck(const S2SUpdateGroupMemberAck& from);

  inline S2SUpdateGroupMemberAck& operator=(const S2SUpdateGroupMemberAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SUpdateGroupMemberAck& default_instance();

  void Swap(S2SUpdateGroupMemberAck* other);

  // implements Message ----------------------------------------------

  S2SUpdateGroupMemberAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SUpdateGroupMemberAck& from);
  void MergeFrom(const S2SUpdateGroupMemberAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 memberid = 1;
  inline bool has_memberid() const;
  inline void clear_memberid();
  static const int kMemberidFieldNumber = 1;
  inline ::google::protobuf::uint32 memberid() const;
  inline void set_memberid(::google::protobuf::uint32 value);

  // required string dataname = 2;
  inline bool has_dataname() const;
  inline void clear_dataname();
  static const int kDatanameFieldNumber = 2;
  inline const ::std::string& dataname() const;
  inline void set_dataname(const ::std::string& value);
  inline void set_dataname(const char* value);
  inline void set_dataname(const char* value, size_t size);
  inline ::std::string* mutable_dataname();
  inline ::std::string* release_dataname();
  inline void set_allocated_dataname(::std::string* dataname);

  // required .KFMsg.PBStrings pbstrings = 3;
  inline bool has_pbstrings() const;
  inline void clear_pbstrings();
  static const int kPbstringsFieldNumber = 3;
  inline const ::KFMsg::PBStrings& pbstrings() const;
  inline ::KFMsg::PBStrings* mutable_pbstrings();
  inline ::KFMsg::PBStrings* release_pbstrings();
  inline void set_allocated_pbstrings(::KFMsg::PBStrings* pbstrings);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SUpdateGroupMemberAck)
 private:
  inline void set_has_memberid();
  inline void clear_has_memberid();
  inline void set_has_dataname();
  inline void clear_has_dataname();
  inline void set_has_pbstrings();
  inline void clear_has_pbstrings();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* dataname_;
  ::KFMsg::PBStrings* pbstrings_;
  ::google::protobuf::uint32 memberid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SUpdateGroupMemberAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SUpdateGroupDataAck : public ::google::protobuf::Message {
 public:
  S2SUpdateGroupDataAck();
  virtual ~S2SUpdateGroupDataAck();

  S2SUpdateGroupDataAck(const S2SUpdateGroupDataAck& from);

  inline S2SUpdateGroupDataAck& operator=(const S2SUpdateGroupDataAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SUpdateGroupDataAck& default_instance();

  void Swap(S2SUpdateGroupDataAck* other);

  // implements Message ----------------------------------------------

  S2SUpdateGroupDataAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SUpdateGroupDataAck& from);
  void MergeFrom(const S2SUpdateGroupDataAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .KFMsg.PBString pbstring = 1;
  inline int pbstring_size() const;
  inline void clear_pbstring();
  static const int kPbstringFieldNumber = 1;
  inline const ::KFMsg::PBString& pbstring(int index) const;
  inline ::KFMsg::PBString* mutable_pbstring(int index);
  inline ::KFMsg::PBString* add_pbstring();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >&
      pbstring() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >*
      mutable_pbstring();

  // @@protoc_insertion_point(class_scope:KFMsg.S2SUpdateGroupDataAck)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString > pbstring_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SUpdateGroupDataAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SUpdateGuestListReq : public ::google::protobuf::Message {
 public:
  S2SUpdateGuestListReq();
  virtual ~S2SUpdateGuestListReq();

  S2SUpdateGuestListReq(const S2SUpdateGuestListReq& from);

  inline S2SUpdateGuestListReq& operator=(const S2SUpdateGuestListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SUpdateGuestListReq& default_instance();

  void Swap(S2SUpdateGuestListReq* other);

  // implements Message ----------------------------------------------

  S2SUpdateGuestListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SUpdateGuestListReq& from);
  void MergeFrom(const S2SUpdateGuestListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 guestid = 2;
  inline bool has_guestid() const;
  inline void clear_guestid();
  static const int kGuestidFieldNumber = 2;
  inline ::google::protobuf::uint32 guestid() const;
  inline void set_guestid(::google::protobuf::uint32 value);

  // required uint64 guesttime = 3;
  inline bool has_guesttime() const;
  inline void clear_guesttime();
  static const int kGuesttimeFieldNumber = 3;
  inline ::google::protobuf::uint64 guesttime() const;
  inline void set_guesttime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SUpdateGuestListReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_guestid();
  inline void clear_has_guestid();
  inline void set_has_guesttime();
  inline void clear_has_guesttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 guestid_;
  ::google::protobuf::uint64 guesttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SUpdateGuestListReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryGuestReq : public ::google::protobuf::Message {
 public:
  S2SQueryGuestReq();
  virtual ~S2SQueryGuestReq();

  S2SQueryGuestReq(const S2SQueryGuestReq& from);

  inline S2SQueryGuestReq& operator=(const S2SQueryGuestReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryGuestReq& default_instance();

  void Swap(S2SQueryGuestReq* other);

  // implements Message ----------------------------------------------

  S2SQueryGuestReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SQueryGuestReq& from);
  void MergeFrom(const S2SQueryGuestReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 queryid = 2;
  inline bool has_queryid() const;
  inline void clear_queryid();
  static const int kQueryidFieldNumber = 2;
  inline ::google::protobuf::uint32 queryid() const;
  inline void set_queryid(::google::protobuf::uint32 value);

  // required uint64 querytime = 3;
  inline bool has_querytime() const;
  inline void clear_querytime();
  static const int kQuerytimeFieldNumber = 3;
  inline ::google::protobuf::uint64 querytime() const;
  inline void set_querytime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryGuestReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_queryid();
  inline void clear_has_queryid();
  inline void set_has_querytime();
  inline void clear_has_querytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 queryid_;
  ::google::protobuf::uint64 querytime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SQueryGuestReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryGuestAck : public ::google::protobuf::Message {
 public:
  S2SQueryGuestAck();
  virtual ~S2SQueryGuestAck();

  S2SQueryGuestAck(const S2SQueryGuestAck& from);

  inline S2SQueryGuestAck& operator=(const S2SQueryGuestAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryGuestAck& default_instance();

  void Swap(S2SQueryGuestAck* other);

  // implements Message ----------------------------------------------

  S2SQueryGuestAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SQueryGuestAck& from);
  void MergeFrom(const S2SQueryGuestAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 queryid = 2;
  inline bool has_queryid() const;
  inline void clear_queryid();
  static const int kQueryidFieldNumber = 2;
  inline ::google::protobuf::uint32 queryid() const;
  inline void set_queryid(::google::protobuf::uint32 value);

  // required uint32 guestcount = 3;
  inline bool has_guestcount() const;
  inline void clear_guestcount();
  static const int kGuestcountFieldNumber = 3;
  inline ::google::protobuf::uint32 guestcount() const;
  inline void set_guestcount(::google::protobuf::uint32 value);

  // repeated .KFMsg.PBGuestData guestdata = 4;
  inline int guestdata_size() const;
  inline void clear_guestdata();
  static const int kGuestdataFieldNumber = 4;
  inline const ::KFMsg::PBGuestData& guestdata(int index) const;
  inline ::KFMsg::PBGuestData* mutable_guestdata(int index);
  inline ::KFMsg::PBGuestData* add_guestdata();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBGuestData >&
      guestdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBGuestData >*
      mutable_guestdata();

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryGuestAck)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_queryid();
  inline void clear_has_queryid();
  inline void set_has_guestcount();
  inline void clear_has_guestcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 queryid_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBGuestData > guestdata_;
  ::google::protobuf::uint32 guestcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SQueryGuestAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SNewPlayerLoginMailReq : public ::google::protobuf::Message {
 public:
  S2SNewPlayerLoginMailReq();
  virtual ~S2SNewPlayerLoginMailReq();

  S2SNewPlayerLoginMailReq(const S2SNewPlayerLoginMailReq& from);

  inline S2SNewPlayerLoginMailReq& operator=(const S2SNewPlayerLoginMailReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SNewPlayerLoginMailReq& default_instance();

  void Swap(S2SNewPlayerLoginMailReq* other);

  // implements Message ----------------------------------------------

  S2SNewPlayerLoginMailReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SNewPlayerLoginMailReq& from);
  void MergeFrom(const S2SNewPlayerLoginMailReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SNewPlayerLoginMailReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SNewPlayerLoginMailReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBScoreData : public ::google::protobuf::Message {
 public:
  PBScoreData();
  virtual ~PBScoreData();

  PBScoreData(const PBScoreData& from);

  inline PBScoreData& operator=(const PBScoreData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBScoreData& default_instance();

  void Swap(PBScoreData* other);

  // implements Message ----------------------------------------------

  PBScoreData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBScoreData& from);
  void MergeFrom(const PBScoreData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .KFMsg.PBUInt64 score = 1;
  inline int score_size() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline const ::KFMsg::PBUInt64& score(int index) const;
  inline ::KFMsg::PBUInt64* mutable_score(int index);
  inline ::KFMsg::PBUInt64* add_score();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt64 >&
      score() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt64 >*
      mutable_score();

  // @@protoc_insertion_point(class_scope:KFMsg.PBScoreData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt64 > score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static PBScoreData* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SJoinRankListReq : public ::google::protobuf::Message {
 public:
  S2SJoinRankListReq();
  virtual ~S2SJoinRankListReq();

  S2SJoinRankListReq(const S2SJoinRankListReq& from);

  inline S2SJoinRankListReq& operator=(const S2SJoinRankListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SJoinRankListReq& default_instance();

  void Swap(S2SJoinRankListReq* other);

  // implements Message ----------------------------------------------

  S2SJoinRankListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SJoinRankListReq& from);
  void MergeFrom(const S2SJoinRankListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required string scoretype = 2;
  inline bool has_scoretype() const;
  inline void clear_scoretype();
  static const int kScoretypeFieldNumber = 2;
  inline const ::std::string& scoretype() const;
  inline void set_scoretype(const ::std::string& value);
  inline void set_scoretype(const char* value);
  inline void set_scoretype(const char* value, size_t size);
  inline ::std::string* mutable_scoretype();
  inline ::std::string* release_scoretype();
  inline void set_allocated_scoretype(::std::string* scoretype);

  // required .KFMsg.PBScoreData scores = 3;
  inline bool has_scores() const;
  inline void clear_scores();
  static const int kScoresFieldNumber = 3;
  inline const ::KFMsg::PBScoreData& scores() const;
  inline ::KFMsg::PBScoreData* mutable_scores();
  inline ::KFMsg::PBScoreData* release_scores();
  inline void set_allocated_scores(::KFMsg::PBScoreData* scores);

  // required .KFMsg.PBScoreData totalscores = 4;
  inline bool has_totalscores() const;
  inline void clear_totalscores();
  static const int kTotalscoresFieldNumber = 4;
  inline const ::KFMsg::PBScoreData& totalscores() const;
  inline ::KFMsg::PBScoreData* mutable_totalscores();
  inline ::KFMsg::PBScoreData* release_totalscores();
  inline void set_allocated_totalscores(::KFMsg::PBScoreData* totalscores);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SJoinRankListReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_scoretype();
  inline void clear_has_scoretype();
  inline void set_has_scores();
  inline void clear_has_scores();
  inline void set_has_totalscores();
  inline void clear_has_totalscores();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* scoretype_;
  ::KFMsg::PBScoreData* scores_;
  ::KFMsg::PBScoreData* totalscores_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SJoinRankListReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryWholeRankListReq : public ::google::protobuf::Message {
 public:
  S2SQueryWholeRankListReq();
  virtual ~S2SQueryWholeRankListReq();

  S2SQueryWholeRankListReq(const S2SQueryWholeRankListReq& from);

  inline S2SQueryWholeRankListReq& operator=(const S2SQueryWholeRankListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryWholeRankListReq& default_instance();

  void Swap(S2SQueryWholeRankListReq* other);

  // implements Message ----------------------------------------------

  S2SQueryWholeRankListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SQueryWholeRankListReq& from);
  void MergeFrom(const S2SQueryWholeRankListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 matchid = 2;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 2;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required string ranktype = 3;
  inline bool has_ranktype() const;
  inline void clear_ranktype();
  static const int kRanktypeFieldNumber = 3;
  inline const ::std::string& ranktype() const;
  inline void set_ranktype(const ::std::string& value);
  inline void set_ranktype(const char* value);
  inline void set_ranktype(const char* value, size_t size);
  inline ::std::string* mutable_ranktype();
  inline ::std::string* release_ranktype();
  inline void set_allocated_ranktype(::std::string* ranktype);

  // required uint32 begin = 4;
  inline bool has_begin() const;
  inline void clear_begin();
  static const int kBeginFieldNumber = 4;
  inline ::google::protobuf::uint32 begin() const;
  inline void set_begin(::google::protobuf::uint32 value);

  // required uint32 end = 5;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 5;
  inline ::google::protobuf::uint32 end() const;
  inline void set_end(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryWholeRankListReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_ranktype();
  inline void clear_has_ranktype();
  inline void set_has_begin();
  inline void clear_has_begin();
  inline void set_has_end();
  inline void clear_has_end();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 matchid_;
  ::std::string* ranktype_;
  ::google::protobuf::uint32 begin_;
  ::google::protobuf::uint32 end_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SQueryWholeRankListReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryFriendRankListReq : public ::google::protobuf::Message {
 public:
  S2SQueryFriendRankListReq();
  virtual ~S2SQueryFriendRankListReq();

  S2SQueryFriendRankListReq(const S2SQueryFriendRankListReq& from);

  inline S2SQueryFriendRankListReq& operator=(const S2SQueryFriendRankListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryFriendRankListReq& default_instance();

  void Swap(S2SQueryFriendRankListReq* other);

  // implements Message ----------------------------------------------

  S2SQueryFriendRankListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SQueryFriendRankListReq& from);
  void MergeFrom(const S2SQueryFriendRankListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 matchid = 2;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 2;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required string ranktype = 3;
  inline bool has_ranktype() const;
  inline void clear_ranktype();
  static const int kRanktypeFieldNumber = 3;
  inline const ::std::string& ranktype() const;
  inline void set_ranktype(const ::std::string& value);
  inline void set_ranktype(const char* value);
  inline void set_ranktype(const char* value, size_t size);
  inline ::std::string* mutable_ranktype();
  inline ::std::string* release_ranktype();
  inline void set_allocated_ranktype(::std::string* ranktype);

  // required .KFMsg.PBPlayerIds playerids = 4;
  inline bool has_playerids() const;
  inline void clear_playerids();
  static const int kPlayeridsFieldNumber = 4;
  inline const ::KFMsg::PBPlayerIds& playerids() const;
  inline ::KFMsg::PBPlayerIds* mutable_playerids();
  inline ::KFMsg::PBPlayerIds* release_playerids();
  inline void set_allocated_playerids(::KFMsg::PBPlayerIds* playerids);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryFriendRankListReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_ranktype();
  inline void clear_has_ranktype();
  inline void set_has_playerids();
  inline void clear_has_playerids();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 matchid_;
  ::std::string* ranktype_;
  ::KFMsg::PBPlayerIds* playerids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SQueryFriendRankListReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryRankListAck : public ::google::protobuf::Message {
 public:
  S2SQueryRankListAck();
  virtual ~S2SQueryRankListAck();

  S2SQueryRankListAck(const S2SQueryRankListAck& from);

  inline S2SQueryRankListAck& operator=(const S2SQueryRankListAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryRankListAck& default_instance();

  void Swap(S2SQueryRankListAck* other);

  // implements Message ----------------------------------------------

  S2SQueryRankListAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SQueryRankListAck& from);
  void MergeFrom(const S2SQueryRankListAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 matchid = 2;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 2;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required string ranktype = 3;
  inline bool has_ranktype() const;
  inline void clear_ranktype();
  static const int kRanktypeFieldNumber = 3;
  inline const ::std::string& ranktype() const;
  inline void set_ranktype(const ::std::string& value);
  inline void set_ranktype(const char* value);
  inline void set_ranktype(const char* value, size_t size);
  inline ::std::string* mutable_ranktype();
  inline ::std::string* release_ranktype();
  inline void set_allocated_ranktype(::std::string* ranktype);

  // optional .KFMsg.PBRankData rankdatas = 4;
  inline bool has_rankdatas() const;
  inline void clear_rankdatas();
  static const int kRankdatasFieldNumber = 4;
  inline const ::KFMsg::PBRankData& rankdatas() const;
  inline ::KFMsg::PBRankData* mutable_rankdatas();
  inline ::KFMsg::PBRankData* release_rankdatas();
  inline void set_allocated_rankdatas(::KFMsg::PBRankData* rankdatas);

  // optional bool isfriendrank = 5;
  inline bool has_isfriendrank() const;
  inline void clear_isfriendrank();
  static const int kIsfriendrankFieldNumber = 5;
  inline bool isfriendrank() const;
  inline void set_isfriendrank(bool value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryRankListAck)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_ranktype();
  inline void clear_has_ranktype();
  inline void set_has_rankdatas();
  inline void clear_has_rankdatas();
  inline void set_has_isfriendrank();
  inline void clear_has_isfriendrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 matchid_;
  ::std::string* ranktype_;
  ::KFMsg::PBRankData* rankdatas_;
  bool isfriendrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SQueryRankListAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SUpdateZoneToRankProxyReq : public ::google::protobuf::Message {
 public:
  S2SUpdateZoneToRankProxyReq();
  virtual ~S2SUpdateZoneToRankProxyReq();

  S2SUpdateZoneToRankProxyReq(const S2SUpdateZoneToRankProxyReq& from);

  inline S2SUpdateZoneToRankProxyReq& operator=(const S2SUpdateZoneToRankProxyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SUpdateZoneToRankProxyReq& default_instance();

  void Swap(S2SUpdateZoneToRankProxyReq* other);

  // implements Message ----------------------------------------------

  S2SUpdateZoneToRankProxyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SUpdateZoneToRankProxyReq& from);
  void MergeFrom(const S2SUpdateZoneToRankProxyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 zoneid = 1;
  inline int zoneid_size() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 1;
  inline ::google::protobuf::uint32 zoneid(int index) const;
  inline void set_zoneid(int index, ::google::protobuf::uint32 value);
  inline void add_zoneid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      zoneid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_zoneid();

  // @@protoc_insertion_point(class_scope:KFMsg.S2SUpdateZoneToRankProxyReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > zoneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SUpdateZoneToRankProxyReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STransmitToRankShardReq : public ::google::protobuf::Message {
 public:
  S2STransmitToRankShardReq();
  virtual ~S2STransmitToRankShardReq();

  S2STransmitToRankShardReq(const S2STransmitToRankShardReq& from);

  inline S2STransmitToRankShardReq& operator=(const S2STransmitToRankShardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STransmitToRankShardReq& default_instance();

  void Swap(S2STransmitToRankShardReq* other);

  // implements Message ----------------------------------------------

  S2STransmitToRankShardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2STransmitToRankShardReq& from);
  void MergeFrom(const S2STransmitToRankShardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 zoneid = 1;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 1;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // required uint32 msgid = 2;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 2;
  inline ::google::protobuf::uint32 msgid() const;
  inline void set_msgid(::google::protobuf::uint32 value);

  // required string msgdata = 3;
  inline bool has_msgdata() const;
  inline void clear_msgdata();
  static const int kMsgdataFieldNumber = 3;
  inline const ::std::string& msgdata() const;
  inline void set_msgdata(const ::std::string& value);
  inline void set_msgdata(const char* value);
  inline void set_msgdata(const char* value, size_t size);
  inline ::std::string* mutable_msgdata();
  inline ::std::string* release_msgdata();
  inline void set_allocated_msgdata(::std::string* msgdata);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STransmitToRankShardReq)
 private:
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_msgdata();
  inline void clear_has_msgdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 msgid_;
  ::std::string* msgdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFServerMessage_2eproto();
  friend void protobuf_AssignDesc_KFServerMessage_2eproto();
  friend void protobuf_ShutdownFile_KFServerMessage_2eproto();

  void InitAsDefaultInstance();
  static S2STransmitToRankShardReq* default_instance_;
};
// ===================================================================


// ===================================================================

// S2STransmitMessageReq

// required uint32 playerid = 1;
inline bool S2STransmitMessageReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2STransmitMessageReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2STransmitMessageReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2STransmitMessageReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2STransmitMessageReq::playerid() const {
  return playerid_;
}
inline void S2STransmitMessageReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 msgid = 2;
inline bool S2STransmitMessageReq::has_msgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2STransmitMessageReq::set_has_msgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2STransmitMessageReq::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2STransmitMessageReq::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 S2STransmitMessageReq::msgid() const {
  return msgid_;
}
inline void S2STransmitMessageReq::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
}

// required string msgdata = 3;
inline bool S2STransmitMessageReq::has_msgdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2STransmitMessageReq::set_has_msgdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2STransmitMessageReq::clear_has_msgdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2STransmitMessageReq::clear_msgdata() {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    msgdata_->clear();
  }
  clear_has_msgdata();
}
inline const ::std::string& S2STransmitMessageReq::msgdata() const {
  return *msgdata_;
}
inline void S2STransmitMessageReq::set_msgdata(const ::std::string& value) {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  msgdata_->assign(value);
}
inline void S2STransmitMessageReq::set_msgdata(const char* value) {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  msgdata_->assign(value);
}
inline void S2STransmitMessageReq::set_msgdata(const char* value, size_t size) {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  msgdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2STransmitMessageReq::mutable_msgdata() {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  return msgdata_;
}
inline ::std::string* S2STransmitMessageReq::release_msgdata() {
  clear_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msgdata_;
    msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2STransmitMessageReq::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    delete msgdata_;
  }
  if (msgdata) {
    set_has_msgdata();
    msgdata_ = msgdata;
  } else {
    clear_has_msgdata();
    msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2SBroadcastMessageReq

// required uint32 msgid = 1;
inline bool S2SBroadcastMessageReq::has_msgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SBroadcastMessageReq::set_has_msgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SBroadcastMessageReq::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SBroadcastMessageReq::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 S2SBroadcastMessageReq::msgid() const {
  return msgid_;
}
inline void S2SBroadcastMessageReq::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
}

// required string msgdata = 2;
inline bool S2SBroadcastMessageReq::has_msgdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SBroadcastMessageReq::set_has_msgdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SBroadcastMessageReq::clear_has_msgdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SBroadcastMessageReq::clear_msgdata() {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    msgdata_->clear();
  }
  clear_has_msgdata();
}
inline const ::std::string& S2SBroadcastMessageReq::msgdata() const {
  return *msgdata_;
}
inline void S2SBroadcastMessageReq::set_msgdata(const ::std::string& value) {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  msgdata_->assign(value);
}
inline void S2SBroadcastMessageReq::set_msgdata(const char* value) {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  msgdata_->assign(value);
}
inline void S2SBroadcastMessageReq::set_msgdata(const char* value, size_t size) {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  msgdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SBroadcastMessageReq::mutable_msgdata() {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  return msgdata_;
}
inline ::std::string* S2SBroadcastMessageReq::release_msgdata() {
  clear_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msgdata_;
    msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SBroadcastMessageReq::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    delete msgdata_;
  }
  if (msgdata) {
    set_has_msgdata();
    msgdata_ = msgdata;
  } else {
    clear_has_msgdata();
    msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2SUpdateZoneToProxyReq

// repeated uint32 zoneid = 1;
inline int S2SUpdateZoneToProxyReq::zoneid_size() const {
  return zoneid_.size();
}
inline void S2SUpdateZoneToProxyReq::clear_zoneid() {
  zoneid_.Clear();
}
inline ::google::protobuf::uint32 S2SUpdateZoneToProxyReq::zoneid(int index) const {
  return zoneid_.Get(index);
}
inline void S2SUpdateZoneToProxyReq::set_zoneid(int index, ::google::protobuf::uint32 value) {
  zoneid_.Set(index, value);
}
inline void S2SUpdateZoneToProxyReq::add_zoneid(::google::protobuf::uint32 value) {
  zoneid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
S2SUpdateZoneToProxyReq::zoneid() const {
  return zoneid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
S2SUpdateZoneToProxyReq::mutable_zoneid() {
  return &zoneid_;
}

// -------------------------------------------------------------------

// S2STransmitToDataShardReq

// required uint32 zoneid = 1;
inline bool S2STransmitToDataShardReq::has_zoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2STransmitToDataShardReq::set_has_zoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2STransmitToDataShardReq::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2STransmitToDataShardReq::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 S2STransmitToDataShardReq::zoneid() const {
  return zoneid_;
}
inline void S2STransmitToDataShardReq::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// required uint32 msgid = 2;
inline bool S2STransmitToDataShardReq::has_msgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2STransmitToDataShardReq::set_has_msgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2STransmitToDataShardReq::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2STransmitToDataShardReq::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 S2STransmitToDataShardReq::msgid() const {
  return msgid_;
}
inline void S2STransmitToDataShardReq::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
}

// required string msgdata = 3;
inline bool S2STransmitToDataShardReq::has_msgdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2STransmitToDataShardReq::set_has_msgdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2STransmitToDataShardReq::clear_has_msgdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2STransmitToDataShardReq::clear_msgdata() {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    msgdata_->clear();
  }
  clear_has_msgdata();
}
inline const ::std::string& S2STransmitToDataShardReq::msgdata() const {
  return *msgdata_;
}
inline void S2STransmitToDataShardReq::set_msgdata(const ::std::string& value) {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  msgdata_->assign(value);
}
inline void S2STransmitToDataShardReq::set_msgdata(const char* value) {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  msgdata_->assign(value);
}
inline void S2STransmitToDataShardReq::set_msgdata(const char* value, size_t size) {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  msgdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2STransmitToDataShardReq::mutable_msgdata() {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  return msgdata_;
}
inline ::std::string* S2STransmitToDataShardReq::release_msgdata() {
  clear_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msgdata_;
    msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2STransmitToDataShardReq::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    delete msgdata_;
  }
  if (msgdata) {
    set_has_msgdata();
    msgdata_ = msgdata;
  } else {
    clear_has_msgdata();
    msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2SSavePlayerReq

// required uint32 zoneid = 1;
inline bool S2SSavePlayerReq::has_zoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SSavePlayerReq::set_has_zoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SSavePlayerReq::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SSavePlayerReq::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 S2SSavePlayerReq::zoneid() const {
  return zoneid_;
}
inline void S2SSavePlayerReq::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// required uint32 id = 2;
inline bool S2SSavePlayerReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SSavePlayerReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SSavePlayerReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SSavePlayerReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 S2SSavePlayerReq::id() const {
  return id_;
}
inline void S2SSavePlayerReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required .KFMsg.PBObject data = 3;
inline bool S2SSavePlayerReq::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SSavePlayerReq::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SSavePlayerReq::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SSavePlayerReq::clear_data() {
  if (data_ != NULL) data_->::KFMsg::PBObject::Clear();
  clear_has_data();
}
inline const ::KFMsg::PBObject& S2SSavePlayerReq::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::KFMsg::PBObject* S2SSavePlayerReq::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::KFMsg::PBObject;
  return data_;
}
inline ::KFMsg::PBObject* S2SSavePlayerReq::release_data() {
  clear_has_data();
  ::KFMsg::PBObject* temp = data_;
  data_ = NULL;
  return temp;
}
inline void S2SSavePlayerReq::set_allocated_data(::KFMsg::PBObject* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// S2SDeletePlayerReq

// required uint32 zoneid = 1;
inline bool S2SDeletePlayerReq::has_zoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SDeletePlayerReq::set_has_zoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SDeletePlayerReq::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SDeletePlayerReq::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 S2SDeletePlayerReq::zoneid() const {
  return zoneid_;
}
inline void S2SDeletePlayerReq::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// required uint32 id = 2;
inline bool S2SDeletePlayerReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SDeletePlayerReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SDeletePlayerReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SDeletePlayerReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 S2SDeletePlayerReq::id() const {
  return id_;
}
inline void S2SDeletePlayerReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// S2SUpdatePublicDataReq

// required uint32 playerid = 1;
inline bool S2SUpdatePublicDataReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SUpdatePublicDataReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SUpdatePublicDataReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SUpdatePublicDataReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SUpdatePublicDataReq::playerid() const {
  return playerid_;
}
inline void S2SUpdatePublicDataReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// repeated .KFMsg.PBString pbdata = 4;
inline int S2SUpdatePublicDataReq::pbdata_size() const {
  return pbdata_.size();
}
inline void S2SUpdatePublicDataReq::clear_pbdata() {
  pbdata_.Clear();
}
inline const ::KFMsg::PBString& S2SUpdatePublicDataReq::pbdata(int index) const {
  return pbdata_.Get(index);
}
inline ::KFMsg::PBString* S2SUpdatePublicDataReq::mutable_pbdata(int index) {
  return pbdata_.Mutable(index);
}
inline ::KFMsg::PBString* S2SUpdatePublicDataReq::add_pbdata() {
  return pbdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >&
S2SUpdatePublicDataReq::pbdata() const {
  return pbdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >*
S2SUpdatePublicDataReq::mutable_pbdata() {
  return &pbdata_;
}

// -------------------------------------------------------------------

// S2SKickGamePlayerReq

// required uint32 playerid = 1;
inline bool S2SKickGamePlayerReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SKickGamePlayerReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SKickGamePlayerReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SKickGamePlayerReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SKickGamePlayerReq::playerid() const {
  return playerid_;
}
inline void S2SKickGamePlayerReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 type = 2;
inline bool S2SKickGamePlayerReq::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SKickGamePlayerReq::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SKickGamePlayerReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SKickGamePlayerReq::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 S2SKickGamePlayerReq::type() const {
  return type_;
}
inline void S2SKickGamePlayerReq::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// S2SKickProxyPlayerReq

// required uint32 playerid = 1;
inline bool S2SKickProxyPlayerReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SKickProxyPlayerReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SKickProxyPlayerReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SKickProxyPlayerReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SKickProxyPlayerReq::playerid() const {
  return playerid_;
}
inline void S2SKickProxyPlayerReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 type = 2;
inline bool S2SKickProxyPlayerReq::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SKickProxyPlayerReq::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SKickProxyPlayerReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SKickProxyPlayerReq::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 S2SKickProxyPlayerReq::type() const {
  return type_;
}
inline void S2SKickProxyPlayerReq::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// S2SLoginProxyUpdateReq

// required uint32 proxyid = 1;
inline bool S2SLoginProxyUpdateReq::has_proxyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SLoginProxyUpdateReq::set_has_proxyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SLoginProxyUpdateReq::clear_has_proxyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SLoginProxyUpdateReq::clear_proxyid() {
  proxyid_ = 0u;
  clear_has_proxyid();
}
inline ::google::protobuf::uint32 S2SLoginProxyUpdateReq::proxyid() const {
  return proxyid_;
}
inline void S2SLoginProxyUpdateReq::set_proxyid(::google::protobuf::uint32 value) {
  set_has_proxyid();
  proxyid_ = value;
}

// required uint32 count = 2;
inline bool S2SLoginProxyUpdateReq::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SLoginProxyUpdateReq::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SLoginProxyUpdateReq::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SLoginProxyUpdateReq::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 S2SLoginProxyUpdateReq::count() const {
  return count_;
}
inline void S2SLoginProxyUpdateReq::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// required string ip = 3;
inline bool S2SLoginProxyUpdateReq::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SLoginProxyUpdateReq::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SLoginProxyUpdateReq::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SLoginProxyUpdateReq::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& S2SLoginProxyUpdateReq::ip() const {
  return *ip_;
}
inline void S2SLoginProxyUpdateReq::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SLoginProxyUpdateReq::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SLoginProxyUpdateReq::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SLoginProxyUpdateReq::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* S2SLoginProxyUpdateReq::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SLoginProxyUpdateReq::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 port = 4;
inline bool S2SLoginProxyUpdateReq::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SLoginProxyUpdateReq::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SLoginProxyUpdateReq::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SLoginProxyUpdateReq::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 S2SLoginProxyUpdateReq::port() const {
  return port_;
}
inline void S2SLoginProxyUpdateReq::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// S2SLoginProxyRemoveReq

// required uint32 proxyid = 1;
inline bool S2SLoginProxyRemoveReq::has_proxyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SLoginProxyRemoveReq::set_has_proxyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SLoginProxyRemoveReq::clear_has_proxyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SLoginProxyRemoveReq::clear_proxyid() {
  proxyid_ = 0u;
  clear_has_proxyid();
}
inline ::google::protobuf::uint32 S2SLoginProxyRemoveReq::proxyid() const {
  return proxyid_;
}
inline void S2SLoginProxyRemoveReq::set_proxyid(::google::protobuf::uint32 value) {
  set_has_proxyid();
  proxyid_ = value;
}

// -------------------------------------------------------------------

// S2SLoginGameUpdateReq

// required uint32 gameid = 1;
inline bool S2SLoginGameUpdateReq::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SLoginGameUpdateReq::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SLoginGameUpdateReq::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SLoginGameUpdateReq::clear_gameid() {
  gameid_ = 0u;
  clear_has_gameid();
}
inline ::google::protobuf::uint32 S2SLoginGameUpdateReq::gameid() const {
  return gameid_;
}
inline void S2SLoginGameUpdateReq::set_gameid(::google::protobuf::uint32 value) {
  set_has_gameid();
  gameid_ = value;
}

// required uint32 count = 2;
inline bool S2SLoginGameUpdateReq::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SLoginGameUpdateReq::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SLoginGameUpdateReq::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SLoginGameUpdateReq::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 S2SLoginGameUpdateReq::count() const {
  return count_;
}
inline void S2SLoginGameUpdateReq::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// S2SLoginLoginVerifyReq

// required uint32 accountid = 1;
inline bool S2SLoginLoginVerifyReq::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SLoginLoginVerifyReq::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SLoginLoginVerifyReq::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SLoginLoginVerifyReq::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 S2SLoginLoginVerifyReq::accountid() const {
  return accountid_;
}
inline void S2SLoginLoginVerifyReq::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// required string token = 2;
inline bool S2SLoginLoginVerifyReq::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SLoginLoginVerifyReq::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SLoginLoginVerifyReq::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SLoginLoginVerifyReq::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& S2SLoginLoginVerifyReq::token() const {
  return *token_;
}
inline void S2SLoginLoginVerifyReq::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SLoginLoginVerifyReq::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SLoginLoginVerifyReq::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SLoginLoginVerifyReq::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* S2SLoginLoginVerifyReq::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SLoginLoginVerifyReq::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ip = 3;
inline bool S2SLoginLoginVerifyReq::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SLoginLoginVerifyReq::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SLoginLoginVerifyReq::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SLoginLoginVerifyReq::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& S2SLoginLoginVerifyReq::ip() const {
  return *ip_;
}
inline void S2SLoginLoginVerifyReq::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SLoginLoginVerifyReq::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SLoginLoginVerifyReq::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SLoginLoginVerifyReq::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* S2SLoginLoginVerifyReq::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SLoginLoginVerifyReq::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2SLoginLoginVerifyAck

// required uint32 result = 1;
inline bool S2SLoginLoginVerifyAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SLoginLoginVerifyAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SLoginLoginVerifyAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SLoginLoginVerifyAck::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 S2SLoginLoginVerifyAck::result() const {
  return result_;
}
inline void S2SLoginLoginVerifyAck::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// required uint32 accountid = 2;
inline bool S2SLoginLoginVerifyAck::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SLoginLoginVerifyAck::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SLoginLoginVerifyAck::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SLoginLoginVerifyAck::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 S2SLoginLoginVerifyAck::accountid() const {
  return accountid_;
}
inline void S2SLoginLoginVerifyAck::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// required uint32 playerid = 3;
inline bool S2SLoginLoginVerifyAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SLoginLoginVerifyAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SLoginLoginVerifyAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SLoginLoginVerifyAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SLoginLoginVerifyAck::playerid() const {
  return playerid_;
}
inline void S2SLoginLoginVerifyAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string token = 4;
inline bool S2SLoginLoginVerifyAck::has_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SLoginLoginVerifyAck::set_has_token() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SLoginLoginVerifyAck::clear_has_token() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SLoginLoginVerifyAck::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& S2SLoginLoginVerifyAck::token() const {
  return *token_;
}
inline void S2SLoginLoginVerifyAck::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SLoginLoginVerifyAck::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SLoginLoginVerifyAck::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SLoginLoginVerifyAck::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* S2SLoginLoginVerifyAck::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SLoginLoginVerifyAck::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ip = 5;
inline bool S2SLoginLoginVerifyAck::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SLoginLoginVerifyAck::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SLoginLoginVerifyAck::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SLoginLoginVerifyAck::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& S2SLoginLoginVerifyAck::ip() const {
  return *ip_;
}
inline void S2SLoginLoginVerifyAck::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SLoginLoginVerifyAck::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SLoginLoginVerifyAck::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SLoginLoginVerifyAck::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* S2SLoginLoginVerifyAck::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SLoginLoginVerifyAck::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 port = 6;
inline bool S2SLoginLoginVerifyAck::has_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void S2SLoginLoginVerifyAck::set_has_port() {
  _has_bits_[0] |= 0x00000020u;
}
inline void S2SLoginLoginVerifyAck::clear_has_port() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void S2SLoginLoginVerifyAck::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 S2SLoginLoginVerifyAck::port() const {
  return port_;
}
inline void S2SLoginLoginVerifyAck::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// S2SLoginWorldVerifyReq

// required uint32 accountid = 1;
inline bool S2SLoginWorldVerifyReq::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SLoginWorldVerifyReq::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SLoginWorldVerifyReq::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SLoginWorldVerifyReq::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 S2SLoginWorldVerifyReq::accountid() const {
  return accountid_;
}
inline void S2SLoginWorldVerifyReq::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// required string token = 2;
inline bool S2SLoginWorldVerifyReq::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SLoginWorldVerifyReq::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SLoginWorldVerifyReq::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SLoginWorldVerifyReq::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& S2SLoginWorldVerifyReq::token() const {
  return *token_;
}
inline void S2SLoginWorldVerifyReq::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SLoginWorldVerifyReq::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SLoginWorldVerifyReq::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SLoginWorldVerifyReq::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* S2SLoginWorldVerifyReq::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SLoginWorldVerifyReq::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 gateid = 3;
inline bool S2SLoginWorldVerifyReq::has_gateid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SLoginWorldVerifyReq::set_has_gateid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SLoginWorldVerifyReq::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SLoginWorldVerifyReq::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 S2SLoginWorldVerifyReq::gateid() const {
  return gateid_;
}
inline void S2SLoginWorldVerifyReq::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
}

// required uint32 playerid = 4;
inline bool S2SLoginWorldVerifyReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SLoginWorldVerifyReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SLoginWorldVerifyReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SLoginWorldVerifyReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SLoginWorldVerifyReq::playerid() const {
  return playerid_;
}
inline void S2SLoginWorldVerifyReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// S2SLoginWorldVerifyAck

// required uint32 gateid = 1;
inline bool S2SLoginWorldVerifyAck::has_gateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SLoginWorldVerifyAck::set_has_gateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SLoginWorldVerifyAck::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SLoginWorldVerifyAck::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 S2SLoginWorldVerifyAck::gateid() const {
  return gateid_;
}
inline void S2SLoginWorldVerifyAck::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
}

// required uint32 result = 2;
inline bool S2SLoginWorldVerifyAck::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SLoginWorldVerifyAck::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SLoginWorldVerifyAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SLoginWorldVerifyAck::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 S2SLoginWorldVerifyAck::result() const {
  return result_;
}
inline void S2SLoginWorldVerifyAck::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// required uint32 accountid = 3;
inline bool S2SLoginWorldVerifyAck::has_accountid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SLoginWorldVerifyAck::set_has_accountid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SLoginWorldVerifyAck::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SLoginWorldVerifyAck::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 S2SLoginWorldVerifyAck::accountid() const {
  return accountid_;
}
inline void S2SLoginWorldVerifyAck::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// required uint32 playerid = 4;
inline bool S2SLoginWorldVerifyAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SLoginWorldVerifyAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SLoginWorldVerifyAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SLoginWorldVerifyAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SLoginWorldVerifyAck::playerid() const {
  return playerid_;
}
inline void S2SLoginWorldVerifyAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string token = 5;
inline bool S2SLoginWorldVerifyAck::has_token() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SLoginWorldVerifyAck::set_has_token() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SLoginWorldVerifyAck::clear_has_token() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SLoginWorldVerifyAck::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& S2SLoginWorldVerifyAck::token() const {
  return *token_;
}
inline void S2SLoginWorldVerifyAck::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SLoginWorldVerifyAck::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SLoginWorldVerifyAck::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SLoginWorldVerifyAck::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* S2SLoginWorldVerifyAck::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SLoginWorldVerifyAck::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ip = 6;
inline bool S2SLoginWorldVerifyAck::has_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void S2SLoginWorldVerifyAck::set_has_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void S2SLoginWorldVerifyAck::clear_has_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void S2SLoginWorldVerifyAck::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& S2SLoginWorldVerifyAck::ip() const {
  return *ip_;
}
inline void S2SLoginWorldVerifyAck::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SLoginWorldVerifyAck::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SLoginWorldVerifyAck::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SLoginWorldVerifyAck::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* S2SLoginWorldVerifyAck::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SLoginWorldVerifyAck::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 port = 7;
inline bool S2SLoginWorldVerifyAck::has_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void S2SLoginWorldVerifyAck::set_has_port() {
  _has_bits_[0] |= 0x00000040u;
}
inline void S2SLoginWorldVerifyAck::clear_has_port() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void S2SLoginWorldVerifyAck::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 S2SLoginWorldVerifyAck::port() const {
  return port_;
}
inline void S2SLoginWorldVerifyAck::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// S2SLoginTellTokenToGameReq

// required uint32 playerid = 1;
inline bool S2SLoginTellTokenToGameReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SLoginTellTokenToGameReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SLoginTellTokenToGameReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SLoginTellTokenToGameReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SLoginTellTokenToGameReq::playerid() const {
  return playerid_;
}
inline void S2SLoginTellTokenToGameReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string token = 2;
inline bool S2SLoginTellTokenToGameReq::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SLoginTellTokenToGameReq::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SLoginTellTokenToGameReq::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SLoginTellTokenToGameReq::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& S2SLoginTellTokenToGameReq::token() const {
  return *token_;
}
inline void S2SLoginTellTokenToGameReq::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SLoginTellTokenToGameReq::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SLoginTellTokenToGameReq::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SLoginTellTokenToGameReq::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* S2SLoginTellTokenToGameReq::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SLoginTellTokenToGameReq::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 proxyid = 3;
inline bool S2SLoginTellTokenToGameReq::has_proxyid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SLoginTellTokenToGameReq::set_has_proxyid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SLoginTellTokenToGameReq::clear_has_proxyid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SLoginTellTokenToGameReq::clear_proxyid() {
  proxyid_ = 0u;
  clear_has_proxyid();
}
inline ::google::protobuf::uint32 S2SLoginTellTokenToGameReq::proxyid() const {
  return proxyid_;
}
inline void S2SLoginTellTokenToGameReq::set_proxyid(::google::protobuf::uint32 value) {
  set_has_proxyid();
  proxyid_ = value;
}

// required uint32 accountid = 4;
inline bool S2SLoginTellTokenToGameReq::has_accountid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SLoginTellTokenToGameReq::set_has_accountid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SLoginTellTokenToGameReq::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SLoginTellTokenToGameReq::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 S2SLoginTellTokenToGameReq::accountid() const {
  return accountid_;
}
inline void S2SLoginTellTokenToGameReq::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// required uint32 loginid = 5;
inline bool S2SLoginTellTokenToGameReq::has_loginid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SLoginTellTokenToGameReq::set_has_loginid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SLoginTellTokenToGameReq::clear_has_loginid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SLoginTellTokenToGameReq::clear_loginid() {
  loginid_ = 0u;
  clear_has_loginid();
}
inline ::google::protobuf::uint32 S2SLoginTellTokenToGameReq::loginid() const {
  return loginid_;
}
inline void S2SLoginTellTokenToGameReq::set_loginid(::google::protobuf::uint32 value) {
  set_has_loginid();
  loginid_ = value;
}

// required uint32 gateid = 6;
inline bool S2SLoginTellTokenToGameReq::has_gateid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void S2SLoginTellTokenToGameReq::set_has_gateid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void S2SLoginTellTokenToGameReq::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void S2SLoginTellTokenToGameReq::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 S2SLoginTellTokenToGameReq::gateid() const {
  return gateid_;
}
inline void S2SLoginTellTokenToGameReq::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
}

// -------------------------------------------------------------------

// S2SLoginTellTokenToGameAck

// required uint32 playerid = 1;
inline bool S2SLoginTellTokenToGameAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SLoginTellTokenToGameAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SLoginTellTokenToGameAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SLoginTellTokenToGameAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SLoginTellTokenToGameAck::playerid() const {
  return playerid_;
}
inline void S2SLoginTellTokenToGameAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string token = 2;
inline bool S2SLoginTellTokenToGameAck::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SLoginTellTokenToGameAck::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SLoginTellTokenToGameAck::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SLoginTellTokenToGameAck::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& S2SLoginTellTokenToGameAck::token() const {
  return *token_;
}
inline void S2SLoginTellTokenToGameAck::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SLoginTellTokenToGameAck::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SLoginTellTokenToGameAck::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SLoginTellTokenToGameAck::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* S2SLoginTellTokenToGameAck::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SLoginTellTokenToGameAck::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 accountid = 3;
inline bool S2SLoginTellTokenToGameAck::has_accountid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SLoginTellTokenToGameAck::set_has_accountid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SLoginTellTokenToGameAck::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SLoginTellTokenToGameAck::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 S2SLoginTellTokenToGameAck::accountid() const {
  return accountid_;
}
inline void S2SLoginTellTokenToGameAck::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// required uint32 loginid = 4;
inline bool S2SLoginTellTokenToGameAck::has_loginid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SLoginTellTokenToGameAck::set_has_loginid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SLoginTellTokenToGameAck::clear_has_loginid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SLoginTellTokenToGameAck::clear_loginid() {
  loginid_ = 0u;
  clear_has_loginid();
}
inline ::google::protobuf::uint32 S2SLoginTellTokenToGameAck::loginid() const {
  return loginid_;
}
inline void S2SLoginTellTokenToGameAck::set_loginid(::google::protobuf::uint32 value) {
  set_has_loginid();
  loginid_ = value;
}

// required uint32 gateid = 5;
inline bool S2SLoginTellTokenToGameAck::has_gateid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SLoginTellTokenToGameAck::set_has_gateid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SLoginTellTokenToGameAck::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SLoginTellTokenToGameAck::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 S2SLoginTellTokenToGameAck::gateid() const {
  return gateid_;
}
inline void S2SLoginTellTokenToGameAck::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
}

// required string ip = 6;
inline bool S2SLoginTellTokenToGameAck::has_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void S2SLoginTellTokenToGameAck::set_has_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void S2SLoginTellTokenToGameAck::clear_has_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void S2SLoginTellTokenToGameAck::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& S2SLoginTellTokenToGameAck::ip() const {
  return *ip_;
}
inline void S2SLoginTellTokenToGameAck::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SLoginTellTokenToGameAck::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SLoginTellTokenToGameAck::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SLoginTellTokenToGameAck::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* S2SLoginTellTokenToGameAck::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SLoginTellTokenToGameAck::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 port = 7;
inline bool S2SLoginTellTokenToGameAck::has_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void S2SLoginTellTokenToGameAck::set_has_port() {
  _has_bits_[0] |= 0x00000040u;
}
inline void S2SLoginTellTokenToGameAck::clear_has_port() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void S2SLoginTellTokenToGameAck::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 S2SLoginTellTokenToGameAck::port() const {
  return port_;
}
inline void S2SLoginTellTokenToGameAck::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// S2SLoginTellTokenToProxyReq

// required uint32 playerid = 1;
inline bool S2SLoginTellTokenToProxyReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SLoginTellTokenToProxyReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SLoginTellTokenToProxyReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SLoginTellTokenToProxyReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SLoginTellTokenToProxyReq::playerid() const {
  return playerid_;
}
inline void S2SLoginTellTokenToProxyReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string token = 2;
inline bool S2SLoginTellTokenToProxyReq::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SLoginTellTokenToProxyReq::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SLoginTellTokenToProxyReq::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SLoginTellTokenToProxyReq::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& S2SLoginTellTokenToProxyReq::token() const {
  return *token_;
}
inline void S2SLoginTellTokenToProxyReq::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SLoginTellTokenToProxyReq::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SLoginTellTokenToProxyReq::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SLoginTellTokenToProxyReq::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* S2SLoginTellTokenToProxyReq::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SLoginTellTokenToProxyReq::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 accountid = 3;
inline bool S2SLoginTellTokenToProxyReq::has_accountid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SLoginTellTokenToProxyReq::set_has_accountid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SLoginTellTokenToProxyReq::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SLoginTellTokenToProxyReq::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 S2SLoginTellTokenToProxyReq::accountid() const {
  return accountid_;
}
inline void S2SLoginTellTokenToProxyReq::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// required uint32 loginid = 4;
inline bool S2SLoginTellTokenToProxyReq::has_loginid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SLoginTellTokenToProxyReq::set_has_loginid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SLoginTellTokenToProxyReq::clear_has_loginid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SLoginTellTokenToProxyReq::clear_loginid() {
  loginid_ = 0u;
  clear_has_loginid();
}
inline ::google::protobuf::uint32 S2SLoginTellTokenToProxyReq::loginid() const {
  return loginid_;
}
inline void S2SLoginTellTokenToProxyReq::set_loginid(::google::protobuf::uint32 value) {
  set_has_loginid();
  loginid_ = value;
}

// required uint32 gateid = 5;
inline bool S2SLoginTellTokenToProxyReq::has_gateid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SLoginTellTokenToProxyReq::set_has_gateid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SLoginTellTokenToProxyReq::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SLoginTellTokenToProxyReq::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 S2SLoginTellTokenToProxyReq::gateid() const {
  return gateid_;
}
inline void S2SLoginTellTokenToProxyReq::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
}

// -------------------------------------------------------------------

// S2SLoginTellTokenToWorldAck

// required uint32 playerid = 1;
inline bool S2SLoginTellTokenToWorldAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SLoginTellTokenToWorldAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SLoginTellTokenToWorldAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SLoginTellTokenToWorldAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SLoginTellTokenToWorldAck::playerid() const {
  return playerid_;
}
inline void S2SLoginTellTokenToWorldAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string token = 2;
inline bool S2SLoginTellTokenToWorldAck::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SLoginTellTokenToWorldAck::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SLoginTellTokenToWorldAck::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SLoginTellTokenToWorldAck::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& S2SLoginTellTokenToWorldAck::token() const {
  return *token_;
}
inline void S2SLoginTellTokenToWorldAck::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SLoginTellTokenToWorldAck::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SLoginTellTokenToWorldAck::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SLoginTellTokenToWorldAck::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* S2SLoginTellTokenToWorldAck::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SLoginTellTokenToWorldAck::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 accountid = 3;
inline bool S2SLoginTellTokenToWorldAck::has_accountid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SLoginTellTokenToWorldAck::set_has_accountid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SLoginTellTokenToWorldAck::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SLoginTellTokenToWorldAck::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 S2SLoginTellTokenToWorldAck::accountid() const {
  return accountid_;
}
inline void S2SLoginTellTokenToWorldAck::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// required uint32 loginid = 4;
inline bool S2SLoginTellTokenToWorldAck::has_loginid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SLoginTellTokenToWorldAck::set_has_loginid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SLoginTellTokenToWorldAck::clear_has_loginid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SLoginTellTokenToWorldAck::clear_loginid() {
  loginid_ = 0u;
  clear_has_loginid();
}
inline ::google::protobuf::uint32 S2SLoginTellTokenToWorldAck::loginid() const {
  return loginid_;
}
inline void S2SLoginTellTokenToWorldAck::set_loginid(::google::protobuf::uint32 value) {
  set_has_loginid();
  loginid_ = value;
}

// required uint32 gateid = 5;
inline bool S2SLoginTellTokenToWorldAck::has_gateid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SLoginTellTokenToWorldAck::set_has_gateid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SLoginTellTokenToWorldAck::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SLoginTellTokenToWorldAck::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 S2SLoginTellTokenToWorldAck::gateid() const {
  return gateid_;
}
inline void S2SLoginTellTokenToWorldAck::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
}

// required string ip = 6;
inline bool S2SLoginTellTokenToWorldAck::has_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void S2SLoginTellTokenToWorldAck::set_has_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void S2SLoginTellTokenToWorldAck::clear_has_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void S2SLoginTellTokenToWorldAck::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& S2SLoginTellTokenToWorldAck::ip() const {
  return *ip_;
}
inline void S2SLoginTellTokenToWorldAck::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SLoginTellTokenToWorldAck::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SLoginTellTokenToWorldAck::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SLoginTellTokenToWorldAck::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* S2SLoginTellTokenToWorldAck::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SLoginTellTokenToWorldAck::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 port = 7;
inline bool S2SLoginTellTokenToWorldAck::has_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void S2SLoginTellTokenToWorldAck::set_has_port() {
  _has_bits_[0] |= 0x00000040u;
}
inline void S2SLoginTellTokenToWorldAck::clear_has_port() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void S2SLoginTellTokenToWorldAck::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 S2SLoginTellTokenToWorldAck::port() const {
  return port_;
}
inline void S2SLoginTellTokenToWorldAck::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// S2SLoginQueryPlayerIdReq

// required uint32 loginserverid = 1;
inline bool S2SLoginQueryPlayerIdReq::has_loginserverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SLoginQueryPlayerIdReq::set_has_loginserverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SLoginQueryPlayerIdReq::clear_has_loginserverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SLoginQueryPlayerIdReq::clear_loginserverid() {
  loginserverid_ = 0u;
  clear_has_loginserverid();
}
inline ::google::protobuf::uint32 S2SLoginQueryPlayerIdReq::loginserverid() const {
  return loginserverid_;
}
inline void S2SLoginQueryPlayerIdReq::set_loginserverid(::google::protobuf::uint32 value) {
  set_has_loginserverid();
  loginserverid_ = value;
}

// required uint32 gateid = 2;
inline bool S2SLoginQueryPlayerIdReq::has_gateid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SLoginQueryPlayerIdReq::set_has_gateid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SLoginQueryPlayerIdReq::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SLoginQueryPlayerIdReq::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 S2SLoginQueryPlayerIdReq::gateid() const {
  return gateid_;
}
inline void S2SLoginQueryPlayerIdReq::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
}

// required uint32 accountid = 3;
inline bool S2SLoginQueryPlayerIdReq::has_accountid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SLoginQueryPlayerIdReq::set_has_accountid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SLoginQueryPlayerIdReq::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SLoginQueryPlayerIdReq::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 S2SLoginQueryPlayerIdReq::accountid() const {
  return accountid_;
}
inline void S2SLoginQueryPlayerIdReq::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// required uint32 channel = 4;
inline bool S2SLoginQueryPlayerIdReq::has_channel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SLoginQueryPlayerIdReq::set_has_channel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SLoginQueryPlayerIdReq::clear_has_channel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SLoginQueryPlayerIdReq::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 S2SLoginQueryPlayerIdReq::channel() const {
  return channel_;
}
inline void S2SLoginQueryPlayerIdReq::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
}

// required string token = 5;
inline bool S2SLoginQueryPlayerIdReq::has_token() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SLoginQueryPlayerIdReq::set_has_token() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SLoginQueryPlayerIdReq::clear_has_token() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SLoginQueryPlayerIdReq::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& S2SLoginQueryPlayerIdReq::token() const {
  return *token_;
}
inline void S2SLoginQueryPlayerIdReq::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SLoginQueryPlayerIdReq::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SLoginQueryPlayerIdReq::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SLoginQueryPlayerIdReq::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* S2SLoginQueryPlayerIdReq::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SLoginQueryPlayerIdReq::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 zoneid = 6;
inline bool S2SLoginQueryPlayerIdReq::has_zoneid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void S2SLoginQueryPlayerIdReq::set_has_zoneid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void S2SLoginQueryPlayerIdReq::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void S2SLoginQueryPlayerIdReq::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 S2SLoginQueryPlayerIdReq::zoneid() const {
  return zoneid_;
}
inline void S2SLoginQueryPlayerIdReq::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// required uint32 logiczoneid = 7;
inline bool S2SLoginQueryPlayerIdReq::has_logiczoneid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void S2SLoginQueryPlayerIdReq::set_has_logiczoneid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void S2SLoginQueryPlayerIdReq::clear_has_logiczoneid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void S2SLoginQueryPlayerIdReq::clear_logiczoneid() {
  logiczoneid_ = 0u;
  clear_has_logiczoneid();
}
inline ::google::protobuf::uint32 S2SLoginQueryPlayerIdReq::logiczoneid() const {
  return logiczoneid_;
}
inline void S2SLoginQueryPlayerIdReq::set_logiczoneid(::google::protobuf::uint32 value) {
  set_has_logiczoneid();
  logiczoneid_ = value;
}

// -------------------------------------------------------------------

// S2SLoginQueryPlayerIdAck

// required uint32 loginserverid = 1;
inline bool S2SLoginQueryPlayerIdAck::has_loginserverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SLoginQueryPlayerIdAck::set_has_loginserverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SLoginQueryPlayerIdAck::clear_has_loginserverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SLoginQueryPlayerIdAck::clear_loginserverid() {
  loginserverid_ = 0u;
  clear_has_loginserverid();
}
inline ::google::protobuf::uint32 S2SLoginQueryPlayerIdAck::loginserverid() const {
  return loginserverid_;
}
inline void S2SLoginQueryPlayerIdAck::set_loginserverid(::google::protobuf::uint32 value) {
  set_has_loginserverid();
  loginserverid_ = value;
}

// required uint32 gateid = 2;
inline bool S2SLoginQueryPlayerIdAck::has_gateid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SLoginQueryPlayerIdAck::set_has_gateid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SLoginQueryPlayerIdAck::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SLoginQueryPlayerIdAck::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 S2SLoginQueryPlayerIdAck::gateid() const {
  return gateid_;
}
inline void S2SLoginQueryPlayerIdAck::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
}

// required uint32 accountid = 3;
inline bool S2SLoginQueryPlayerIdAck::has_accountid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SLoginQueryPlayerIdAck::set_has_accountid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SLoginQueryPlayerIdAck::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SLoginQueryPlayerIdAck::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 S2SLoginQueryPlayerIdAck::accountid() const {
  return accountid_;
}
inline void S2SLoginQueryPlayerIdAck::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// required uint32 playerid = 4;
inline bool S2SLoginQueryPlayerIdAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SLoginQueryPlayerIdAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SLoginQueryPlayerIdAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SLoginQueryPlayerIdAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SLoginQueryPlayerIdAck::playerid() const {
  return playerid_;
}
inline void S2SLoginQueryPlayerIdAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string token = 5;
inline bool S2SLoginQueryPlayerIdAck::has_token() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SLoginQueryPlayerIdAck::set_has_token() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SLoginQueryPlayerIdAck::clear_has_token() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SLoginQueryPlayerIdAck::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& S2SLoginQueryPlayerIdAck::token() const {
  return *token_;
}
inline void S2SLoginQueryPlayerIdAck::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SLoginQueryPlayerIdAck::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SLoginQueryPlayerIdAck::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SLoginQueryPlayerIdAck::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* S2SLoginQueryPlayerIdAck::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SLoginQueryPlayerIdAck::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2SLoginGameReq

// required uint32 playerid = 1;
inline bool S2SLoginGameReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SLoginGameReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SLoginGameReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SLoginGameReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SLoginGameReq::playerid() const {
  return playerid_;
}
inline void S2SLoginGameReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 accountid = 2;
inline bool S2SLoginGameReq::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SLoginGameReq::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SLoginGameReq::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SLoginGameReq::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 S2SLoginGameReq::accountid() const {
  return accountid_;
}
inline void S2SLoginGameReq::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// required string ip = 3;
inline bool S2SLoginGameReq::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SLoginGameReq::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SLoginGameReq::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SLoginGameReq::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& S2SLoginGameReq::ip() const {
  return *ip_;
}
inline void S2SLoginGameReq::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SLoginGameReq::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SLoginGameReq::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SLoginGameReq::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* S2SLoginGameReq::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SLoginGameReq::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2SLoginGameAck

// required uint32 result = 1;
inline bool S2SLoginGameAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SLoginGameAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SLoginGameAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SLoginGameAck::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 S2SLoginGameAck::result() const {
  return result_;
}
inline void S2SLoginGameAck::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// required uint32 playerid = 2;
inline bool S2SLoginGameAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SLoginGameAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SLoginGameAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SLoginGameAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SLoginGameAck::playerid() const {
  return playerid_;
}
inline void S2SLoginGameAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required .KFMsg.PBObject playerdata = 3;
inline bool S2SLoginGameAck::has_playerdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SLoginGameAck::set_has_playerdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SLoginGameAck::clear_has_playerdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SLoginGameAck::clear_playerdata() {
  if (playerdata_ != NULL) playerdata_->::KFMsg::PBObject::Clear();
  clear_has_playerdata();
}
inline const ::KFMsg::PBObject& S2SLoginGameAck::playerdata() const {
  return playerdata_ != NULL ? *playerdata_ : *default_instance_->playerdata_;
}
inline ::KFMsg::PBObject* S2SLoginGameAck::mutable_playerdata() {
  set_has_playerdata();
  if (playerdata_ == NULL) playerdata_ = new ::KFMsg::PBObject;
  return playerdata_;
}
inline ::KFMsg::PBObject* S2SLoginGameAck::release_playerdata() {
  clear_has_playerdata();
  ::KFMsg::PBObject* temp = playerdata_;
  playerdata_ = NULL;
  return temp;
}
inline void S2SLoginGameAck::set_allocated_playerdata(::KFMsg::PBObject* playerdata) {
  delete playerdata_;
  playerdata_ = playerdata;
  if (playerdata) {
    set_has_playerdata();
  } else {
    clear_has_playerdata();
  }
}

// required uint64 servertime = 4;
inline bool S2SLoginGameAck::has_servertime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SLoginGameAck::set_has_servertime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SLoginGameAck::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SLoginGameAck::clear_servertime() {
  servertime_ = GOOGLE_ULONGLONG(0);
  clear_has_servertime();
}
inline ::google::protobuf::uint64 S2SLoginGameAck::servertime() const {
  return servertime_;
}
inline void S2SLoginGameAck::set_servertime(::google::protobuf::uint64 value) {
  set_has_servertime();
  servertime_ = value;
}

// -------------------------------------------------------------------

// S2SLoginLoadPlayerReq

// required uint32 gateid = 1;
inline bool S2SLoginLoadPlayerReq::has_gateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SLoginLoadPlayerReq::set_has_gateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SLoginLoadPlayerReq::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SLoginLoadPlayerReq::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 S2SLoginLoadPlayerReq::gateid() const {
  return gateid_;
}
inline void S2SLoginLoadPlayerReq::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
}

// required uint32 zoneid = 2;
inline bool S2SLoginLoadPlayerReq::has_zoneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SLoginLoadPlayerReq::set_has_zoneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SLoginLoadPlayerReq::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SLoginLoadPlayerReq::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 S2SLoginLoadPlayerReq::zoneid() const {
  return zoneid_;
}
inline void S2SLoginLoadPlayerReq::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// required uint32 playerid = 3;
inline bool S2SLoginLoadPlayerReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SLoginLoadPlayerReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SLoginLoadPlayerReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SLoginLoadPlayerReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SLoginLoadPlayerReq::playerid() const {
  return playerid_;
}
inline void S2SLoginLoadPlayerReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 accountid = 4;
inline bool S2SLoginLoadPlayerReq::has_accountid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SLoginLoadPlayerReq::set_has_accountid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SLoginLoadPlayerReq::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SLoginLoadPlayerReq::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 S2SLoginLoadPlayerReq::accountid() const {
  return accountid_;
}
inline void S2SLoginLoadPlayerReq::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// -------------------------------------------------------------------

// S2SLoginLoadPlayerAck

// required uint32 result = 1;
inline bool S2SLoginLoadPlayerAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SLoginLoadPlayerAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SLoginLoadPlayerAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SLoginLoadPlayerAck::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 S2SLoginLoadPlayerAck::result() const {
  return result_;
}
inline void S2SLoginLoadPlayerAck::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// required uint32 playerid = 2;
inline bool S2SLoginLoadPlayerAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SLoginLoadPlayerAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SLoginLoadPlayerAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SLoginLoadPlayerAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SLoginLoadPlayerAck::playerid() const {
  return playerid_;
}
inline void S2SLoginLoadPlayerAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 gateid = 3;
inline bool S2SLoginLoadPlayerAck::has_gateid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SLoginLoadPlayerAck::set_has_gateid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SLoginLoadPlayerAck::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SLoginLoadPlayerAck::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 S2SLoginLoadPlayerAck::gateid() const {
  return gateid_;
}
inline void S2SLoginLoadPlayerAck::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
}

// required .KFMsg.PBObject playerdata = 4;
inline bool S2SLoginLoadPlayerAck::has_playerdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SLoginLoadPlayerAck::set_has_playerdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SLoginLoadPlayerAck::clear_has_playerdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SLoginLoadPlayerAck::clear_playerdata() {
  if (playerdata_ != NULL) playerdata_->::KFMsg::PBObject::Clear();
  clear_has_playerdata();
}
inline const ::KFMsg::PBObject& S2SLoginLoadPlayerAck::playerdata() const {
  return playerdata_ != NULL ? *playerdata_ : *default_instance_->playerdata_;
}
inline ::KFMsg::PBObject* S2SLoginLoadPlayerAck::mutable_playerdata() {
  set_has_playerdata();
  if (playerdata_ == NULL) playerdata_ = new ::KFMsg::PBObject;
  return playerdata_;
}
inline ::KFMsg::PBObject* S2SLoginLoadPlayerAck::release_playerdata() {
  clear_has_playerdata();
  ::KFMsg::PBObject* temp = playerdata_;
  playerdata_ = NULL;
  return temp;
}
inline void S2SLoginLoadPlayerAck::set_allocated_playerdata(::KFMsg::PBObject* playerdata) {
  delete playerdata_;
  playerdata_ = playerdata;
  if (playerdata) {
    set_has_playerdata();
  } else {
    clear_has_playerdata();
  }
}

// required .KFMsg.PBStrings extenddata = 5;
inline bool S2SLoginLoadPlayerAck::has_extenddata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SLoginLoadPlayerAck::set_has_extenddata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SLoginLoadPlayerAck::clear_has_extenddata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SLoginLoadPlayerAck::clear_extenddata() {
  if (extenddata_ != NULL) extenddata_->::KFMsg::PBStrings::Clear();
  clear_has_extenddata();
}
inline const ::KFMsg::PBStrings& S2SLoginLoadPlayerAck::extenddata() const {
  return extenddata_ != NULL ? *extenddata_ : *default_instance_->extenddata_;
}
inline ::KFMsg::PBStrings* S2SLoginLoadPlayerAck::mutable_extenddata() {
  set_has_extenddata();
  if (extenddata_ == NULL) extenddata_ = new ::KFMsg::PBStrings;
  return extenddata_;
}
inline ::KFMsg::PBStrings* S2SLoginLoadPlayerAck::release_extenddata() {
  clear_has_extenddata();
  ::KFMsg::PBStrings* temp = extenddata_;
  extenddata_ = NULL;
  return temp;
}
inline void S2SLoginLoadPlayerAck::set_allocated_extenddata(::KFMsg::PBStrings* extenddata) {
  delete extenddata_;
  extenddata_ = extenddata;
  if (extenddata) {
    set_has_extenddata();
  } else {
    clear_has_extenddata();
  }
}

// -------------------------------------------------------------------

// S2SLoginCreatePlayerReq

// required uint32 playerid = 1;
inline bool S2SLoginCreatePlayerReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SLoginCreatePlayerReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SLoginCreatePlayerReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SLoginCreatePlayerReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SLoginCreatePlayerReq::playerid() const {
  return playerid_;
}
inline void S2SLoginCreatePlayerReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 accountid = 2;
inline bool S2SLoginCreatePlayerReq::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SLoginCreatePlayerReq::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SLoginCreatePlayerReq::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SLoginCreatePlayerReq::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 S2SLoginCreatePlayerReq::accountid() const {
  return accountid_;
}
inline void S2SLoginCreatePlayerReq::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// required uint32 channel = 3;
inline bool S2SLoginCreatePlayerReq::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SLoginCreatePlayerReq::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SLoginCreatePlayerReq::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SLoginCreatePlayerReq::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
inline ::google::protobuf::uint32 S2SLoginCreatePlayerReq::channel() const {
  return channel_;
}
inline void S2SLoginCreatePlayerReq::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
}

// -------------------------------------------------------------------

// S2SLoginOutReq

// required uint32 playerid = 1;
inline bool S2SLoginOutReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SLoginOutReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SLoginOutReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SLoginOutReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SLoginOutReq::playerid() const {
  return playerid_;
}
inline void S2SLoginOutReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// S2SPlayerDisconnectionReq

// required uint32 playerid = 1;
inline bool S2SPlayerDisconnectionReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SPlayerDisconnectionReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SPlayerDisconnectionReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SPlayerDisconnectionReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SPlayerDisconnectionReq::playerid() const {
  return playerid_;
}
inline void S2SPlayerDisconnectionReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// S2SSetPlayerNameReq

// required uint32 playerid = 1;
inline bool S2SSetPlayerNameReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SSetPlayerNameReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SSetPlayerNameReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SSetPlayerNameReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SSetPlayerNameReq::playerid() const {
  return playerid_;
}
inline void S2SSetPlayerNameReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string oldname = 2;
inline bool S2SSetPlayerNameReq::has_oldname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SSetPlayerNameReq::set_has_oldname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SSetPlayerNameReq::clear_has_oldname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SSetPlayerNameReq::clear_oldname() {
  if (oldname_ != &::google::protobuf::internal::kEmptyString) {
    oldname_->clear();
  }
  clear_has_oldname();
}
inline const ::std::string& S2SSetPlayerNameReq::oldname() const {
  return *oldname_;
}
inline void S2SSetPlayerNameReq::set_oldname(const ::std::string& value) {
  set_has_oldname();
  if (oldname_ == &::google::protobuf::internal::kEmptyString) {
    oldname_ = new ::std::string;
  }
  oldname_->assign(value);
}
inline void S2SSetPlayerNameReq::set_oldname(const char* value) {
  set_has_oldname();
  if (oldname_ == &::google::protobuf::internal::kEmptyString) {
    oldname_ = new ::std::string;
  }
  oldname_->assign(value);
}
inline void S2SSetPlayerNameReq::set_oldname(const char* value, size_t size) {
  set_has_oldname();
  if (oldname_ == &::google::protobuf::internal::kEmptyString) {
    oldname_ = new ::std::string;
  }
  oldname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SSetPlayerNameReq::mutable_oldname() {
  set_has_oldname();
  if (oldname_ == &::google::protobuf::internal::kEmptyString) {
    oldname_ = new ::std::string;
  }
  return oldname_;
}
inline ::std::string* S2SSetPlayerNameReq::release_oldname() {
  clear_has_oldname();
  if (oldname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = oldname_;
    oldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SSetPlayerNameReq::set_allocated_oldname(::std::string* oldname) {
  if (oldname_ != &::google::protobuf::internal::kEmptyString) {
    delete oldname_;
  }
  if (oldname) {
    set_has_oldname();
    oldname_ = oldname;
  } else {
    clear_has_oldname();
    oldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string newname = 3;
inline bool S2SSetPlayerNameReq::has_newname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SSetPlayerNameReq::set_has_newname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SSetPlayerNameReq::clear_has_newname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SSetPlayerNameReq::clear_newname() {
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    newname_->clear();
  }
  clear_has_newname();
}
inline const ::std::string& S2SSetPlayerNameReq::newname() const {
  return *newname_;
}
inline void S2SSetPlayerNameReq::set_newname(const ::std::string& value) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  newname_->assign(value);
}
inline void S2SSetPlayerNameReq::set_newname(const char* value) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  newname_->assign(value);
}
inline void S2SSetPlayerNameReq::set_newname(const char* value, size_t size) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  newname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SSetPlayerNameReq::mutable_newname() {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  return newname_;
}
inline ::std::string* S2SSetPlayerNameReq::release_newname() {
  clear_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = newname_;
    newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SSetPlayerNameReq::set_allocated_newname(::std::string* newname) {
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    delete newname_;
  }
  if (newname) {
    set_has_newname();
    newname_ = newname;
  } else {
    clear_has_newname();
    newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2SSetPlayerNameAck

// required uint32 playerid = 1;
inline bool S2SSetPlayerNameAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SSetPlayerNameAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SSetPlayerNameAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SSetPlayerNameAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SSetPlayerNameAck::playerid() const {
  return playerid_;
}
inline void S2SSetPlayerNameAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string oldname = 2;
inline bool S2SSetPlayerNameAck::has_oldname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SSetPlayerNameAck::set_has_oldname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SSetPlayerNameAck::clear_has_oldname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SSetPlayerNameAck::clear_oldname() {
  if (oldname_ != &::google::protobuf::internal::kEmptyString) {
    oldname_->clear();
  }
  clear_has_oldname();
}
inline const ::std::string& S2SSetPlayerNameAck::oldname() const {
  return *oldname_;
}
inline void S2SSetPlayerNameAck::set_oldname(const ::std::string& value) {
  set_has_oldname();
  if (oldname_ == &::google::protobuf::internal::kEmptyString) {
    oldname_ = new ::std::string;
  }
  oldname_->assign(value);
}
inline void S2SSetPlayerNameAck::set_oldname(const char* value) {
  set_has_oldname();
  if (oldname_ == &::google::protobuf::internal::kEmptyString) {
    oldname_ = new ::std::string;
  }
  oldname_->assign(value);
}
inline void S2SSetPlayerNameAck::set_oldname(const char* value, size_t size) {
  set_has_oldname();
  if (oldname_ == &::google::protobuf::internal::kEmptyString) {
    oldname_ = new ::std::string;
  }
  oldname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SSetPlayerNameAck::mutable_oldname() {
  set_has_oldname();
  if (oldname_ == &::google::protobuf::internal::kEmptyString) {
    oldname_ = new ::std::string;
  }
  return oldname_;
}
inline ::std::string* S2SSetPlayerNameAck::release_oldname() {
  clear_has_oldname();
  if (oldname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = oldname_;
    oldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SSetPlayerNameAck::set_allocated_oldname(::std::string* oldname) {
  if (oldname_ != &::google::protobuf::internal::kEmptyString) {
    delete oldname_;
  }
  if (oldname) {
    set_has_oldname();
    oldname_ = oldname;
  } else {
    clear_has_oldname();
    oldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string newname = 3;
inline bool S2SSetPlayerNameAck::has_newname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SSetPlayerNameAck::set_has_newname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SSetPlayerNameAck::clear_has_newname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SSetPlayerNameAck::clear_newname() {
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    newname_->clear();
  }
  clear_has_newname();
}
inline const ::std::string& S2SSetPlayerNameAck::newname() const {
  return *newname_;
}
inline void S2SSetPlayerNameAck::set_newname(const ::std::string& value) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  newname_->assign(value);
}
inline void S2SSetPlayerNameAck::set_newname(const char* value) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  newname_->assign(value);
}
inline void S2SSetPlayerNameAck::set_newname(const char* value, size_t size) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  newname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SSetPlayerNameAck::mutable_newname() {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  return newname_;
}
inline ::std::string* S2SSetPlayerNameAck::release_newname() {
  clear_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = newname_;
    newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SSetPlayerNameAck::set_allocated_newname(::std::string* newname) {
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    delete newname_;
  }
  if (newname) {
    set_has_newname();
    newname_ = newname;
  } else {
    clear_has_newname();
    newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 result = 4;
inline bool S2SSetPlayerNameAck::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SSetPlayerNameAck::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SSetPlayerNameAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SSetPlayerNameAck::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 S2SSetPlayerNameAck::result() const {
  return result_;
}
inline void S2SSetPlayerNameAck::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// S2SCreateRoleReq

// required uint32 playerid = 1;
inline bool S2SCreateRoleReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SCreateRoleReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SCreateRoleReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SCreateRoleReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SCreateRoleReq::playerid() const {
  return playerid_;
}
inline void S2SCreateRoleReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string newname = 2;
inline bool S2SCreateRoleReq::has_newname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SCreateRoleReq::set_has_newname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SCreateRoleReq::clear_has_newname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SCreateRoleReq::clear_newname() {
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    newname_->clear();
  }
  clear_has_newname();
}
inline const ::std::string& S2SCreateRoleReq::newname() const {
  return *newname_;
}
inline void S2SCreateRoleReq::set_newname(const ::std::string& value) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  newname_->assign(value);
}
inline void S2SCreateRoleReq::set_newname(const char* value) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  newname_->assign(value);
}
inline void S2SCreateRoleReq::set_newname(const char* value, size_t size) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  newname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SCreateRoleReq::mutable_newname() {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  return newname_;
}
inline ::std::string* S2SCreateRoleReq::release_newname() {
  clear_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = newname_;
    newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SCreateRoleReq::set_allocated_newname(::std::string* newname) {
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    delete newname_;
  }
  if (newname) {
    set_has_newname();
    newname_ = newname;
  } else {
    clear_has_newname();
    newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 modleid = 3;
inline bool S2SCreateRoleReq::has_modleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SCreateRoleReq::set_has_modleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SCreateRoleReq::clear_has_modleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SCreateRoleReq::clear_modleid() {
  modleid_ = 0u;
  clear_has_modleid();
}
inline ::google::protobuf::uint32 S2SCreateRoleReq::modleid() const {
  return modleid_;
}
inline void S2SCreateRoleReq::set_modleid(::google::protobuf::uint32 value) {
  set_has_modleid();
  modleid_ = value;
}

// -------------------------------------------------------------------

// S2SCreateRoleAck

// required uint32 playerid = 1;
inline bool S2SCreateRoleAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SCreateRoleAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SCreateRoleAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SCreateRoleAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SCreateRoleAck::playerid() const {
  return playerid_;
}
inline void S2SCreateRoleAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string newname = 2;
inline bool S2SCreateRoleAck::has_newname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SCreateRoleAck::set_has_newname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SCreateRoleAck::clear_has_newname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SCreateRoleAck::clear_newname() {
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    newname_->clear();
  }
  clear_has_newname();
}
inline const ::std::string& S2SCreateRoleAck::newname() const {
  return *newname_;
}
inline void S2SCreateRoleAck::set_newname(const ::std::string& value) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  newname_->assign(value);
}
inline void S2SCreateRoleAck::set_newname(const char* value) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  newname_->assign(value);
}
inline void S2SCreateRoleAck::set_newname(const char* value, size_t size) {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  newname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SCreateRoleAck::mutable_newname() {
  set_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    newname_ = new ::std::string;
  }
  return newname_;
}
inline ::std::string* S2SCreateRoleAck::release_newname() {
  clear_has_newname();
  if (newname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = newname_;
    newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SCreateRoleAck::set_allocated_newname(::std::string* newname) {
  if (newname_ != &::google::protobuf::internal::kEmptyString) {
    delete newname_;
  }
  if (newname) {
    set_has_newname();
    newname_ = newname;
  } else {
    clear_has_newname();
    newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 modleid = 3;
inline bool S2SCreateRoleAck::has_modleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SCreateRoleAck::set_has_modleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SCreateRoleAck::clear_has_modleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SCreateRoleAck::clear_modleid() {
  modleid_ = 0u;
  clear_has_modleid();
}
inline ::google::protobuf::uint32 S2SCreateRoleAck::modleid() const {
  return modleid_;
}
inline void S2SCreateRoleAck::set_modleid(::google::protobuf::uint32 value) {
  set_has_modleid();
  modleid_ = value;
}

// required uint32 result = 4;
inline bool S2SCreateRoleAck::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SCreateRoleAck::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SCreateRoleAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SCreateRoleAck::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 S2SCreateRoleAck::result() const {
  return result_;
}
inline void S2SCreateRoleAck::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// S2SPlayerEnterWorldReq

// required uint32 playerid = 1;
inline bool S2SPlayerEnterWorldReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SPlayerEnterWorldReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SPlayerEnterWorldReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SPlayerEnterWorldReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SPlayerEnterWorldReq::playerid() const {
  return playerid_;
}
inline void S2SPlayerEnterWorldReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 accountid = 2;
inline bool S2SPlayerEnterWorldReq::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SPlayerEnterWorldReq::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SPlayerEnterWorldReq::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SPlayerEnterWorldReq::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 S2SPlayerEnterWorldReq::accountid() const {
  return accountid_;
}
inline void S2SPlayerEnterWorldReq::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// -------------------------------------------------------------------

// S2SPlayerLeaveWorldReq

// required uint32 playerid = 1;
inline bool S2SPlayerLeaveWorldReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SPlayerLeaveWorldReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SPlayerLeaveWorldReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SPlayerLeaveWorldReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SPlayerLeaveWorldReq::playerid() const {
  return playerid_;
}
inline void S2SPlayerLeaveWorldReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 accountid = 2;
inline bool S2SPlayerLeaveWorldReq::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SPlayerLeaveWorldReq::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SPlayerLeaveWorldReq::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SPlayerLeaveWorldReq::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 S2SPlayerLeaveWorldReq::accountid() const {
  return accountid_;
}
inline void S2SPlayerLeaveWorldReq::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
}

// -------------------------------------------------------------------

// S2SGameSyncOnlineReq

// repeated uint32 playerid = 1;
inline int S2SGameSyncOnlineReq::playerid_size() const {
  return playerid_.size();
}
inline void S2SGameSyncOnlineReq::clear_playerid() {
  playerid_.Clear();
}
inline ::google::protobuf::uint32 S2SGameSyncOnlineReq::playerid(int index) const {
  return playerid_.Get(index);
}
inline void S2SGameSyncOnlineReq::set_playerid(int index, ::google::protobuf::uint32 value) {
  playerid_.Set(index, value);
}
inline void S2SGameSyncOnlineReq::add_playerid(::google::protobuf::uint32 value) {
  playerid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
S2SGameSyncOnlineReq::playerid() const {
  return playerid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
S2SGameSyncOnlineReq::mutable_playerid() {
  return &playerid_;
}

// -------------------------------------------------------------------

// S2SQueryMailReq

// required uint32 playerid = 1;
inline bool S2SQueryMailReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SQueryMailReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SQueryMailReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SQueryMailReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SQueryMailReq::playerid() const {
  return playerid_;
}
inline void S2SQueryMailReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 mailtype = 2;
inline bool S2SQueryMailReq::has_mailtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SQueryMailReq::set_has_mailtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SQueryMailReq::clear_has_mailtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SQueryMailReq::clear_mailtype() {
  mailtype_ = 0u;
  clear_has_mailtype();
}
inline ::google::protobuf::uint32 S2SQueryMailReq::mailtype() const {
  return mailtype_;
}
inline void S2SQueryMailReq::set_mailtype(::google::protobuf::uint32 value) {
  set_has_mailtype();
  mailtype_ = value;
}

// required uint64 maxmailid = 3;
inline bool S2SQueryMailReq::has_maxmailid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SQueryMailReq::set_has_maxmailid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SQueryMailReq::clear_has_maxmailid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SQueryMailReq::clear_maxmailid() {
  maxmailid_ = GOOGLE_ULONGLONG(0);
  clear_has_maxmailid();
}
inline ::google::protobuf::uint64 S2SQueryMailReq::maxmailid() const {
  return maxmailid_;
}
inline void S2SQueryMailReq::set_maxmailid(::google::protobuf::uint64 value) {
  set_has_maxmailid();
  maxmailid_ = value;
}

// -------------------------------------------------------------------

// PBMail

// repeated .KFMsg.PBString data = 1;
inline int PBMail::data_size() const {
  return data_.size();
}
inline void PBMail::clear_data() {
  data_.Clear();
}
inline const ::KFMsg::PBString& PBMail::data(int index) const {
  return data_.Get(index);
}
inline ::KFMsg::PBString* PBMail::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::KFMsg::PBString* PBMail::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >&
PBMail::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >*
PBMail::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// PBMails

// repeated .KFMsg.PBMail mail = 1;
inline int PBMails::mail_size() const {
  return mail_.size();
}
inline void PBMails::clear_mail() {
  mail_.Clear();
}
inline const ::KFMsg::PBMail& PBMails::mail(int index) const {
  return mail_.Get(index);
}
inline ::KFMsg::PBMail* PBMails::mutable_mail(int index) {
  return mail_.Mutable(index);
}
inline ::KFMsg::PBMail* PBMails::add_mail() {
  return mail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBMail >&
PBMails::mail() const {
  return mail_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBMail >*
PBMails::mutable_mail() {
  return &mail_;
}

// -------------------------------------------------------------------

// S2SQueryMailAck

// required uint32 playerid = 1;
inline bool S2SQueryMailAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SQueryMailAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SQueryMailAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SQueryMailAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SQueryMailAck::playerid() const {
  return playerid_;
}
inline void S2SQueryMailAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required .KFMsg.PBMails mails = 2;
inline bool S2SQueryMailAck::has_mails() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SQueryMailAck::set_has_mails() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SQueryMailAck::clear_has_mails() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SQueryMailAck::clear_mails() {
  if (mails_ != NULL) mails_->::KFMsg::PBMails::Clear();
  clear_has_mails();
}
inline const ::KFMsg::PBMails& S2SQueryMailAck::mails() const {
  return mails_ != NULL ? *mails_ : *default_instance_->mails_;
}
inline ::KFMsg::PBMails* S2SQueryMailAck::mutable_mails() {
  set_has_mails();
  if (mails_ == NULL) mails_ = new ::KFMsg::PBMails;
  return mails_;
}
inline ::KFMsg::PBMails* S2SQueryMailAck::release_mails() {
  clear_has_mails();
  ::KFMsg::PBMails* temp = mails_;
  mails_ = NULL;
  return temp;
}
inline void S2SQueryMailAck::set_allocated_mails(::KFMsg::PBMails* mails) {
  delete mails_;
  mails_ = mails;
  if (mails) {
    set_has_mails();
  } else {
    clear_has_mails();
  }
}

// required uint32 mailtype = 3;
inline bool S2SQueryMailAck::has_mailtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SQueryMailAck::set_has_mailtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SQueryMailAck::clear_has_mailtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SQueryMailAck::clear_mailtype() {
  mailtype_ = 0u;
  clear_has_mailtype();
}
inline ::google::protobuf::uint32 S2SQueryMailAck::mailtype() const {
  return mailtype_;
}
inline void S2SQueryMailAck::set_mailtype(::google::protobuf::uint32 value) {
  set_has_mailtype();
  mailtype_ = value;
}

// -------------------------------------------------------------------

// S2SDeleteMailReq

// required uint32 playerid = 1;
inline bool S2SDeleteMailReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SDeleteMailReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SDeleteMailReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SDeleteMailReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SDeleteMailReq::playerid() const {
  return playerid_;
}
inline void S2SDeleteMailReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint64 mailid = 2;
inline bool S2SDeleteMailReq::has_mailid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SDeleteMailReq::set_has_mailid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SDeleteMailReq::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SDeleteMailReq::clear_mailid() {
  mailid_ = GOOGLE_ULONGLONG(0);
  clear_has_mailid();
}
inline ::google::protobuf::uint64 S2SDeleteMailReq::mailid() const {
  return mailid_;
}
inline void S2SDeleteMailReq::set_mailid(::google::protobuf::uint64 value) {
  set_has_mailid();
  mailid_ = value;
}

// required uint32 mailtype = 3;
inline bool S2SDeleteMailReq::has_mailtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SDeleteMailReq::set_has_mailtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SDeleteMailReq::clear_has_mailtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SDeleteMailReq::clear_mailtype() {
  mailtype_ = 0u;
  clear_has_mailtype();
}
inline ::google::protobuf::uint32 S2SDeleteMailReq::mailtype() const {
  return mailtype_;
}
inline void S2SDeleteMailReq::set_mailtype(::google::protobuf::uint32 value) {
  set_has_mailtype();
  mailtype_ = value;
}

// -------------------------------------------------------------------

// S2SAddMailReq

// required uint32 playerid = 1;
inline bool S2SAddMailReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SAddMailReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SAddMailReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SAddMailReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SAddMailReq::playerid() const {
  return playerid_;
}
inline void S2SAddMailReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 mailtype = 3;
inline bool S2SAddMailReq::has_mailtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SAddMailReq::set_has_mailtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SAddMailReq::clear_has_mailtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SAddMailReq::clear_mailtype() {
  mailtype_ = 0u;
  clear_has_mailtype();
}
inline ::google::protobuf::uint32 S2SAddMailReq::mailtype() const {
  return mailtype_;
}
inline void S2SAddMailReq::set_mailtype(::google::protobuf::uint32 value) {
  set_has_mailtype();
  mailtype_ = value;
}

// required .KFMsg.PBMail pbmail = 5;
inline bool S2SAddMailReq::has_pbmail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SAddMailReq::set_has_pbmail() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SAddMailReq::clear_has_pbmail() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SAddMailReq::clear_pbmail() {
  if (pbmail_ != NULL) pbmail_->::KFMsg::PBMail::Clear();
  clear_has_pbmail();
}
inline const ::KFMsg::PBMail& S2SAddMailReq::pbmail() const {
  return pbmail_ != NULL ? *pbmail_ : *default_instance_->pbmail_;
}
inline ::KFMsg::PBMail* S2SAddMailReq::mutable_pbmail() {
  set_has_pbmail();
  if (pbmail_ == NULL) pbmail_ = new ::KFMsg::PBMail;
  return pbmail_;
}
inline ::KFMsg::PBMail* S2SAddMailReq::release_pbmail() {
  clear_has_pbmail();
  ::KFMsg::PBMail* temp = pbmail_;
  pbmail_ = NULL;
  return temp;
}
inline void S2SAddMailReq::set_allocated_pbmail(::KFMsg::PBMail* pbmail) {
  delete pbmail_;
  pbmail_ = pbmail;
  if (pbmail) {
    set_has_pbmail();
  } else {
    clear_has_pbmail();
  }
}

// -------------------------------------------------------------------

// S2SNoticeNewMailReq

// required uint32 playerid = 1;
inline bool S2SNoticeNewMailReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SNoticeNewMailReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SNoticeNewMailReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SNoticeNewMailReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SNoticeNewMailReq::playerid() const {
  return playerid_;
}
inline void S2SNoticeNewMailReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 mailtype = 2;
inline bool S2SNoticeNewMailReq::has_mailtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SNoticeNewMailReq::set_has_mailtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SNoticeNewMailReq::clear_has_mailtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SNoticeNewMailReq::clear_mailtype() {
  mailtype_ = 0u;
  clear_has_mailtype();
}
inline ::google::protobuf::uint32 S2SNoticeNewMailReq::mailtype() const {
  return mailtype_;
}
inline void S2SNoticeNewMailReq::set_mailtype(::google::protobuf::uint32 value) {
  set_has_mailtype();
  mailtype_ = value;
}

// -------------------------------------------------------------------

// PBFriend

// required uint32 playerid = 1;
inline bool PBFriend::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBFriend::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBFriend::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBFriend::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 PBFriend::playerid() const {
  return playerid_;
}
inline void PBFriend::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// repeated .KFMsg.PBString playerdata = 2;
inline int PBFriend::playerdata_size() const {
  return playerdata_.size();
}
inline void PBFriend::clear_playerdata() {
  playerdata_.Clear();
}
inline const ::KFMsg::PBString& PBFriend::playerdata(int index) const {
  return playerdata_.Get(index);
}
inline ::KFMsg::PBString* PBFriend::mutable_playerdata(int index) {
  return playerdata_.Mutable(index);
}
inline ::KFMsg::PBString* PBFriend::add_playerdata() {
  return playerdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >&
PBFriend::playerdata() const {
  return playerdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >*
PBFriend::mutable_playerdata() {
  return &playerdata_;
}

// repeated .KFMsg.PBString frienddata = 3;
inline int PBFriend::frienddata_size() const {
  return frienddata_.size();
}
inline void PBFriend::clear_frienddata() {
  frienddata_.Clear();
}
inline const ::KFMsg::PBString& PBFriend::frienddata(int index) const {
  return frienddata_.Get(index);
}
inline ::KFMsg::PBString* PBFriend::mutable_frienddata(int index) {
  return frienddata_.Mutable(index);
}
inline ::KFMsg::PBString* PBFriend::add_frienddata() {
  return frienddata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >&
PBFriend::frienddata() const {
  return frienddata_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >*
PBFriend::mutable_frienddata() {
  return &frienddata_;
}

// -------------------------------------------------------------------

// S2SQueryFriendReq

// required uint32 playerid = 1;
inline bool S2SQueryFriendReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SQueryFriendReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SQueryFriendReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SQueryFriendReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SQueryFriendReq::playerid() const {
  return playerid_;
}
inline void S2SQueryFriendReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 serverid = 2;
inline bool S2SQueryFriendReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SQueryFriendReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SQueryFriendReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SQueryFriendReq::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2SQueryFriendReq::serverid() const {
  return serverid_;
}
inline void S2SQueryFriendReq::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// S2SQueryFriendInviteReq

// required uint32 playerid = 1;
inline bool S2SQueryFriendInviteReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SQueryFriendInviteReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SQueryFriendInviteReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SQueryFriendInviteReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SQueryFriendInviteReq::playerid() const {
  return playerid_;
}
inline void S2SQueryFriendInviteReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 serverid = 2;
inline bool S2SQueryFriendInviteReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SQueryFriendInviteReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SQueryFriendInviteReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SQueryFriendInviteReq::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2SQueryFriendInviteReq::serverid() const {
  return serverid_;
}
inline void S2SQueryFriendInviteReq::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// S2SQueryFriendAck

// required uint32 playerid = 1;
inline bool S2SQueryFriendAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SQueryFriendAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SQueryFriendAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SQueryFriendAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SQueryFriendAck::playerid() const {
  return playerid_;
}
inline void S2SQueryFriendAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// repeated .KFMsg.PBFriend pbfriend = 2;
inline int S2SQueryFriendAck::pbfriend_size() const {
  return pbfriend_.size();
}
inline void S2SQueryFriendAck::clear_pbfriend() {
  pbfriend_.Clear();
}
inline const ::KFMsg::PBFriend& S2SQueryFriendAck::pbfriend(int index) const {
  return pbfriend_.Get(index);
}
inline ::KFMsg::PBFriend* S2SQueryFriendAck::mutable_pbfriend(int index) {
  return pbfriend_.Mutable(index);
}
inline ::KFMsg::PBFriend* S2SQueryFriendAck::add_pbfriend() {
  return pbfriend_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBFriend >&
S2SQueryFriendAck::pbfriend() const {
  return pbfriend_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBFriend >*
S2SQueryFriendAck::mutable_pbfriend() {
  return &pbfriend_;
}

// -------------------------------------------------------------------

// S2SQueryFriendInviteAck

// required uint32 playerid = 1;
inline bool S2SQueryFriendInviteAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SQueryFriendInviteAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SQueryFriendInviteAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SQueryFriendInviteAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SQueryFriendInviteAck::playerid() const {
  return playerid_;
}
inline void S2SQueryFriendInviteAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// repeated .KFMsg.PBFriend pbfriend = 2;
inline int S2SQueryFriendInviteAck::pbfriend_size() const {
  return pbfriend_.size();
}
inline void S2SQueryFriendInviteAck::clear_pbfriend() {
  pbfriend_.Clear();
}
inline const ::KFMsg::PBFriend& S2SQueryFriendInviteAck::pbfriend(int index) const {
  return pbfriend_.Get(index);
}
inline ::KFMsg::PBFriend* S2SQueryFriendInviteAck::mutable_pbfriend(int index) {
  return pbfriend_.Mutable(index);
}
inline ::KFMsg::PBFriend* S2SQueryFriendInviteAck::add_pbfriend() {
  return pbfriend_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBFriend >&
S2SQueryFriendInviteAck::pbfriend() const {
  return pbfriend_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBFriend >*
S2SQueryFriendInviteAck::mutable_pbfriend() {
  return &pbfriend_;
}

// -------------------------------------------------------------------

// S2SAddFriendInviteReq

// required uint32 selfplayerid = 1;
inline bool S2SAddFriendInviteReq::has_selfplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SAddFriendInviteReq::set_has_selfplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SAddFriendInviteReq::clear_has_selfplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SAddFriendInviteReq::clear_selfplayerid() {
  selfplayerid_ = 0u;
  clear_has_selfplayerid();
}
inline ::google::protobuf::uint32 S2SAddFriendInviteReq::selfplayerid() const {
  return selfplayerid_;
}
inline void S2SAddFriendInviteReq::set_selfplayerid(::google::protobuf::uint32 value) {
  set_has_selfplayerid();
  selfplayerid_ = value;
}

// required uint32 targetplayerid = 2;
inline bool S2SAddFriendInviteReq::has_targetplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SAddFriendInviteReq::set_has_targetplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SAddFriendInviteReq::clear_has_targetplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SAddFriendInviteReq::clear_targetplayerid() {
  targetplayerid_ = 0u;
  clear_has_targetplayerid();
}
inline ::google::protobuf::uint32 S2SAddFriendInviteReq::targetplayerid() const {
  return targetplayerid_;
}
inline void S2SAddFriendInviteReq::set_targetplayerid(::google::protobuf::uint32 value) {
  set_has_targetplayerid();
  targetplayerid_ = value;
}

// required string message = 3;
inline bool S2SAddFriendInviteReq::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SAddFriendInviteReq::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SAddFriendInviteReq::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SAddFriendInviteReq::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& S2SAddFriendInviteReq::message() const {
  return *message_;
}
inline void S2SAddFriendInviteReq::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void S2SAddFriendInviteReq::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void S2SAddFriendInviteReq::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SAddFriendInviteReq::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* S2SAddFriendInviteReq::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SAddFriendInviteReq::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 serverid = 4;
inline bool S2SAddFriendInviteReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SAddFriendInviteReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SAddFriendInviteReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SAddFriendInviteReq::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2SAddFriendInviteReq::serverid() const {
  return serverid_;
}
inline void S2SAddFriendInviteReq::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required string targetname = 5;
inline bool S2SAddFriendInviteReq::has_targetname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SAddFriendInviteReq::set_has_targetname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SAddFriendInviteReq::clear_has_targetname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SAddFriendInviteReq::clear_targetname() {
  if (targetname_ != &::google::protobuf::internal::kEmptyString) {
    targetname_->clear();
  }
  clear_has_targetname();
}
inline const ::std::string& S2SAddFriendInviteReq::targetname() const {
  return *targetname_;
}
inline void S2SAddFriendInviteReq::set_targetname(const ::std::string& value) {
  set_has_targetname();
  if (targetname_ == &::google::protobuf::internal::kEmptyString) {
    targetname_ = new ::std::string;
  }
  targetname_->assign(value);
}
inline void S2SAddFriendInviteReq::set_targetname(const char* value) {
  set_has_targetname();
  if (targetname_ == &::google::protobuf::internal::kEmptyString) {
    targetname_ = new ::std::string;
  }
  targetname_->assign(value);
}
inline void S2SAddFriendInviteReq::set_targetname(const char* value, size_t size) {
  set_has_targetname();
  if (targetname_ == &::google::protobuf::internal::kEmptyString) {
    targetname_ = new ::std::string;
  }
  targetname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SAddFriendInviteReq::mutable_targetname() {
  set_has_targetname();
  if (targetname_ == &::google::protobuf::internal::kEmptyString) {
    targetname_ = new ::std::string;
  }
  return targetname_;
}
inline ::std::string* S2SAddFriendInviteReq::release_targetname() {
  clear_has_targetname();
  if (targetname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = targetname_;
    targetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SAddFriendInviteReq::set_allocated_targetname(::std::string* targetname) {
  if (targetname_ != &::google::protobuf::internal::kEmptyString) {
    delete targetname_;
  }
  if (targetname) {
    set_has_targetname();
    targetname_ = targetname;
  } else {
    clear_has_targetname();
    targetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2SAddFriendInviteAck

// required uint32 playerid = 1;
inline bool S2SAddFriendInviteAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SAddFriendInviteAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SAddFriendInviteAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SAddFriendInviteAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SAddFriendInviteAck::playerid() const {
  return playerid_;
}
inline void S2SAddFriendInviteAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required .KFMsg.PBFriend pbfriend = 2;
inline bool S2SAddFriendInviteAck::has_pbfriend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SAddFriendInviteAck::set_has_pbfriend() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SAddFriendInviteAck::clear_has_pbfriend() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SAddFriendInviteAck::clear_pbfriend() {
  if (pbfriend_ != NULL) pbfriend_->::KFMsg::PBFriend::Clear();
  clear_has_pbfriend();
}
inline const ::KFMsg::PBFriend& S2SAddFriendInviteAck::pbfriend() const {
  return pbfriend_ != NULL ? *pbfriend_ : *default_instance_->pbfriend_;
}
inline ::KFMsg::PBFriend* S2SAddFriendInviteAck::mutable_pbfriend() {
  set_has_pbfriend();
  if (pbfriend_ == NULL) pbfriend_ = new ::KFMsg::PBFriend;
  return pbfriend_;
}
inline ::KFMsg::PBFriend* S2SAddFriendInviteAck::release_pbfriend() {
  clear_has_pbfriend();
  ::KFMsg::PBFriend* temp = pbfriend_;
  pbfriend_ = NULL;
  return temp;
}
inline void S2SAddFriendInviteAck::set_allocated_pbfriend(::KFMsg::PBFriend* pbfriend) {
  delete pbfriend_;
  pbfriend_ = pbfriend;
  if (pbfriend) {
    set_has_pbfriend();
  } else {
    clear_has_pbfriend();
  }
}

// -------------------------------------------------------------------

// S2SDelFriendReq

// required uint32 selfplayerid = 1;
inline bool S2SDelFriendReq::has_selfplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SDelFriendReq::set_has_selfplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SDelFriendReq::clear_has_selfplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SDelFriendReq::clear_selfplayerid() {
  selfplayerid_ = 0u;
  clear_has_selfplayerid();
}
inline ::google::protobuf::uint32 S2SDelFriendReq::selfplayerid() const {
  return selfplayerid_;
}
inline void S2SDelFriendReq::set_selfplayerid(::google::protobuf::uint32 value) {
  set_has_selfplayerid();
  selfplayerid_ = value;
}

// required uint32 targetplayerid = 2;
inline bool S2SDelFriendReq::has_targetplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SDelFriendReq::set_has_targetplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SDelFriendReq::clear_has_targetplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SDelFriendReq::clear_targetplayerid() {
  targetplayerid_ = 0u;
  clear_has_targetplayerid();
}
inline ::google::protobuf::uint32 S2SDelFriendReq::targetplayerid() const {
  return targetplayerid_;
}
inline void S2SDelFriendReq::set_targetplayerid(::google::protobuf::uint32 value) {
  set_has_targetplayerid();
  targetplayerid_ = value;
}

// -------------------------------------------------------------------

// S2SDelFriendAck

// required uint32 playerid = 1;
inline bool S2SDelFriendAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SDelFriendAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SDelFriendAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SDelFriendAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SDelFriendAck::playerid() const {
  return playerid_;
}
inline void S2SDelFriendAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 targetplayerid = 2;
inline bool S2SDelFriendAck::has_targetplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SDelFriendAck::set_has_targetplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SDelFriendAck::clear_has_targetplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SDelFriendAck::clear_targetplayerid() {
  targetplayerid_ = 0u;
  clear_has_targetplayerid();
}
inline ::google::protobuf::uint32 S2SDelFriendAck::targetplayerid() const {
  return targetplayerid_;
}
inline void S2SDelFriendAck::set_targetplayerid(::google::protobuf::uint32 value) {
  set_has_targetplayerid();
  targetplayerid_ = value;
}

// -------------------------------------------------------------------

// S2SDelFriendInviteReq

// required uint32 selfplayerid = 1;
inline bool S2SDelFriendInviteReq::has_selfplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SDelFriendInviteReq::set_has_selfplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SDelFriendInviteReq::clear_has_selfplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SDelFriendInviteReq::clear_selfplayerid() {
  selfplayerid_ = 0u;
  clear_has_selfplayerid();
}
inline ::google::protobuf::uint32 S2SDelFriendInviteReq::selfplayerid() const {
  return selfplayerid_;
}
inline void S2SDelFriendInviteReq::set_selfplayerid(::google::protobuf::uint32 value) {
  set_has_selfplayerid();
  selfplayerid_ = value;
}

// required uint32 targetplayerid = 2;
inline bool S2SDelFriendInviteReq::has_targetplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SDelFriendInviteReq::set_has_targetplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SDelFriendInviteReq::clear_has_targetplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SDelFriendInviteReq::clear_targetplayerid() {
  targetplayerid_ = 0u;
  clear_has_targetplayerid();
}
inline ::google::protobuf::uint32 S2SDelFriendInviteReq::targetplayerid() const {
  return targetplayerid_;
}
inline void S2SDelFriendInviteReq::set_targetplayerid(::google::protobuf::uint32 value) {
  set_has_targetplayerid();
  targetplayerid_ = value;
}

// -------------------------------------------------------------------

// S2SAddFriendReq

// required uint32 selfplayerid = 1;
inline bool S2SAddFriendReq::has_selfplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SAddFriendReq::set_has_selfplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SAddFriendReq::clear_has_selfplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SAddFriendReq::clear_selfplayerid() {
  selfplayerid_ = 0u;
  clear_has_selfplayerid();
}
inline ::google::protobuf::uint32 S2SAddFriendReq::selfplayerid() const {
  return selfplayerid_;
}
inline void S2SAddFriendReq::set_selfplayerid(::google::protobuf::uint32 value) {
  set_has_selfplayerid();
  selfplayerid_ = value;
}

// required uint32 targetplayerid = 2;
inline bool S2SAddFriendReq::has_targetplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SAddFriendReq::set_has_targetplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SAddFriendReq::clear_has_targetplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SAddFriendReq::clear_targetplayerid() {
  targetplayerid_ = 0u;
  clear_has_targetplayerid();
}
inline ::google::protobuf::uint32 S2SAddFriendReq::targetplayerid() const {
  return targetplayerid_;
}
inline void S2SAddFriendReq::set_targetplayerid(::google::protobuf::uint32 value) {
  set_has_targetplayerid();
  targetplayerid_ = value;
}

// required uint32 serverid = 3;
inline bool S2SAddFriendReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SAddFriendReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SAddFriendReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SAddFriendReq::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2SAddFriendReq::serverid() const {
  return serverid_;
}
inline void S2SAddFriendReq::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required string targetname = 4;
inline bool S2SAddFriendReq::has_targetname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SAddFriendReq::set_has_targetname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SAddFriendReq::clear_has_targetname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SAddFriendReq::clear_targetname() {
  if (targetname_ != &::google::protobuf::internal::kEmptyString) {
    targetname_->clear();
  }
  clear_has_targetname();
}
inline const ::std::string& S2SAddFriendReq::targetname() const {
  return *targetname_;
}
inline void S2SAddFriendReq::set_targetname(const ::std::string& value) {
  set_has_targetname();
  if (targetname_ == &::google::protobuf::internal::kEmptyString) {
    targetname_ = new ::std::string;
  }
  targetname_->assign(value);
}
inline void S2SAddFriendReq::set_targetname(const char* value) {
  set_has_targetname();
  if (targetname_ == &::google::protobuf::internal::kEmptyString) {
    targetname_ = new ::std::string;
  }
  targetname_->assign(value);
}
inline void S2SAddFriendReq::set_targetname(const char* value, size_t size) {
  set_has_targetname();
  if (targetname_ == &::google::protobuf::internal::kEmptyString) {
    targetname_ = new ::std::string;
  }
  targetname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SAddFriendReq::mutable_targetname() {
  set_has_targetname();
  if (targetname_ == &::google::protobuf::internal::kEmptyString) {
    targetname_ = new ::std::string;
  }
  return targetname_;
}
inline ::std::string* S2SAddFriendReq::release_targetname() {
  clear_has_targetname();
  if (targetname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = targetname_;
    targetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SAddFriendReq::set_allocated_targetname(::std::string* targetname) {
  if (targetname_ != &::google::protobuf::internal::kEmptyString) {
    delete targetname_;
  }
  if (targetname) {
    set_has_targetname();
    targetname_ = targetname;
  } else {
    clear_has_targetname();
    targetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2SAddFriendAck

// required uint32 playerid = 1;
inline bool S2SAddFriendAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SAddFriendAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SAddFriendAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SAddFriendAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SAddFriendAck::playerid() const {
  return playerid_;
}
inline void S2SAddFriendAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required .KFMsg.PBFriend pbfriend = 2;
inline bool S2SAddFriendAck::has_pbfriend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SAddFriendAck::set_has_pbfriend() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SAddFriendAck::clear_has_pbfriend() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SAddFriendAck::clear_pbfriend() {
  if (pbfriend_ != NULL) pbfriend_->::KFMsg::PBFriend::Clear();
  clear_has_pbfriend();
}
inline const ::KFMsg::PBFriend& S2SAddFriendAck::pbfriend() const {
  return pbfriend_ != NULL ? *pbfriend_ : *default_instance_->pbfriend_;
}
inline ::KFMsg::PBFriend* S2SAddFriendAck::mutable_pbfriend() {
  set_has_pbfriend();
  if (pbfriend_ == NULL) pbfriend_ = new ::KFMsg::PBFriend;
  return pbfriend_;
}
inline ::KFMsg::PBFriend* S2SAddFriendAck::release_pbfriend() {
  clear_has_pbfriend();
  ::KFMsg::PBFriend* temp = pbfriend_;
  pbfriend_ = NULL;
  return temp;
}
inline void S2SAddFriendAck::set_allocated_pbfriend(::KFMsg::PBFriend* pbfriend) {
  delete pbfriend_;
  pbfriend_ = pbfriend;
  if (pbfriend) {
    set_has_pbfriend();
  } else {
    clear_has_pbfriend();
  }
}

// -------------------------------------------------------------------

// S2SUpdateFriendReq

// required uint32 friendid = 1;
inline bool S2SUpdateFriendReq::has_friendid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SUpdateFriendReq::set_has_friendid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SUpdateFriendReq::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SUpdateFriendReq::clear_friendid() {
  friendid_ = 0u;
  clear_has_friendid();
}
inline ::google::protobuf::uint32 S2SUpdateFriendReq::friendid() const {
  return friendid_;
}
inline void S2SUpdateFriendReq::set_friendid(::google::protobuf::uint32 value) {
  set_has_friendid();
  friendid_ = value;
}

// repeated .KFMsg.PBString pbdata = 2;
inline int S2SUpdateFriendReq::pbdata_size() const {
  return pbdata_.size();
}
inline void S2SUpdateFriendReq::clear_pbdata() {
  pbdata_.Clear();
}
inline const ::KFMsg::PBString& S2SUpdateFriendReq::pbdata(int index) const {
  return pbdata_.Get(index);
}
inline ::KFMsg::PBString* S2SUpdateFriendReq::mutable_pbdata(int index) {
  return pbdata_.Mutable(index);
}
inline ::KFMsg::PBString* S2SUpdateFriendReq::add_pbdata() {
  return pbdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >&
S2SUpdateFriendReq::pbdata() const {
  return pbdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >*
S2SUpdateFriendReq::mutable_pbdata() {
  return &pbdata_;
}

// -------------------------------------------------------------------

// S2SUpdateFriendLinessReq

// required uint32 selfplayerid = 1;
inline bool S2SUpdateFriendLinessReq::has_selfplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SUpdateFriendLinessReq::set_has_selfplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SUpdateFriendLinessReq::clear_has_selfplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SUpdateFriendLinessReq::clear_selfplayerid() {
  selfplayerid_ = 0u;
  clear_has_selfplayerid();
}
inline ::google::protobuf::uint32 S2SUpdateFriendLinessReq::selfplayerid() const {
  return selfplayerid_;
}
inline void S2SUpdateFriendLinessReq::set_selfplayerid(::google::protobuf::uint32 value) {
  set_has_selfplayerid();
  selfplayerid_ = value;
}

// required uint32 targetplayerid = 2;
inline bool S2SUpdateFriendLinessReq::has_targetplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SUpdateFriendLinessReq::set_has_targetplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SUpdateFriendLinessReq::clear_has_targetplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SUpdateFriendLinessReq::clear_targetplayerid() {
  targetplayerid_ = 0u;
  clear_has_targetplayerid();
}
inline ::google::protobuf::uint32 S2SUpdateFriendLinessReq::targetplayerid() const {
  return targetplayerid_;
}
inline void S2SUpdateFriendLinessReq::set_targetplayerid(::google::protobuf::uint32 value) {
  set_has_targetplayerid();
  targetplayerid_ = value;
}

// required uint32 friendliness = 3;
inline bool S2SUpdateFriendLinessReq::has_friendliness() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SUpdateFriendLinessReq::set_has_friendliness() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SUpdateFriendLinessReq::clear_has_friendliness() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SUpdateFriendLinessReq::clear_friendliness() {
  friendliness_ = 0u;
  clear_has_friendliness();
}
inline ::google::protobuf::uint32 S2SUpdateFriendLinessReq::friendliness() const {
  return friendliness_;
}
inline void S2SUpdateFriendLinessReq::set_friendliness(::google::protobuf::uint32 value) {
  set_has_friendliness();
  friendliness_ = value;
}

// required uint32 type = 4;
inline bool S2SUpdateFriendLinessReq::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SUpdateFriendLinessReq::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SUpdateFriendLinessReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SUpdateFriendLinessReq::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 S2SUpdateFriendLinessReq::type() const {
  return type_;
}
inline void S2SUpdateFriendLinessReq::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// S2SQueryBasicReq

// required uint32 playerid = 1;
inline bool S2SQueryBasicReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SQueryBasicReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SQueryBasicReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SQueryBasicReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SQueryBasicReq::playerid() const {
  return playerid_;
}
inline void S2SQueryBasicReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string name = 2;
inline bool S2SQueryBasicReq::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SQueryBasicReq::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SQueryBasicReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SQueryBasicReq::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& S2SQueryBasicReq::name() const {
  return *name_;
}
inline void S2SQueryBasicReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void S2SQueryBasicReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void S2SQueryBasicReq::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SQueryBasicReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* S2SQueryBasicReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SQueryBasicReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2SQueryBasicAck

// required uint32 playerid = 1;
inline bool S2SQueryBasicAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SQueryBasicAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SQueryBasicAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SQueryBasicAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SQueryBasicAck::playerid() const {
  return playerid_;
}
inline void S2SQueryBasicAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required .KFMsg.PBObject pbobject = 2;
inline bool S2SQueryBasicAck::has_pbobject() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SQueryBasicAck::set_has_pbobject() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SQueryBasicAck::clear_has_pbobject() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SQueryBasicAck::clear_pbobject() {
  if (pbobject_ != NULL) pbobject_->::KFMsg::PBObject::Clear();
  clear_has_pbobject();
}
inline const ::KFMsg::PBObject& S2SQueryBasicAck::pbobject() const {
  return pbobject_ != NULL ? *pbobject_ : *default_instance_->pbobject_;
}
inline ::KFMsg::PBObject* S2SQueryBasicAck::mutable_pbobject() {
  set_has_pbobject();
  if (pbobject_ == NULL) pbobject_ = new ::KFMsg::PBObject;
  return pbobject_;
}
inline ::KFMsg::PBObject* S2SQueryBasicAck::release_pbobject() {
  clear_has_pbobject();
  ::KFMsg::PBObject* temp = pbobject_;
  pbobject_ = NULL;
  return temp;
}
inline void S2SQueryBasicAck::set_allocated_pbobject(::KFMsg::PBObject* pbobject) {
  delete pbobject_;
  pbobject_ = pbobject;
  if (pbobject) {
    set_has_pbobject();
  } else {
    clear_has_pbobject();
  }
}

// -------------------------------------------------------------------

// S2SQueryPlayerReq

// required uint32 zoneid = 1;
inline bool S2SQueryPlayerReq::has_zoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SQueryPlayerReq::set_has_zoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SQueryPlayerReq::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SQueryPlayerReq::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 S2SQueryPlayerReq::zoneid() const {
  return zoneid_;
}
inline void S2SQueryPlayerReq::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// required uint32 playerid = 2;
inline bool S2SQueryPlayerReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SQueryPlayerReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SQueryPlayerReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SQueryPlayerReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SQueryPlayerReq::playerid() const {
  return playerid_;
}
inline void S2SQueryPlayerReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 queryid = 3;
inline bool S2SQueryPlayerReq::has_queryid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SQueryPlayerReq::set_has_queryid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SQueryPlayerReq::clear_has_queryid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SQueryPlayerReq::clear_queryid() {
  queryid_ = 0u;
  clear_has_queryid();
}
inline ::google::protobuf::uint32 S2SQueryPlayerReq::queryid() const {
  return queryid_;
}
inline void S2SQueryPlayerReq::set_queryid(::google::protobuf::uint32 value) {
  set_has_queryid();
  queryid_ = value;
}

// -------------------------------------------------------------------

// S2SQueryPlayerAck

// required uint32 playerid = 1;
inline bool S2SQueryPlayerAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SQueryPlayerAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SQueryPlayerAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SQueryPlayerAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SQueryPlayerAck::playerid() const {
  return playerid_;
}
inline void S2SQueryPlayerAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required .KFMsg.PBObject pbobject = 2;
inline bool S2SQueryPlayerAck::has_pbobject() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SQueryPlayerAck::set_has_pbobject() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SQueryPlayerAck::clear_has_pbobject() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SQueryPlayerAck::clear_pbobject() {
  if (pbobject_ != NULL) pbobject_->::KFMsg::PBObject::Clear();
  clear_has_pbobject();
}
inline const ::KFMsg::PBObject& S2SQueryPlayerAck::pbobject() const {
  return pbobject_ != NULL ? *pbobject_ : *default_instance_->pbobject_;
}
inline ::KFMsg::PBObject* S2SQueryPlayerAck::mutable_pbobject() {
  set_has_pbobject();
  if (pbobject_ == NULL) pbobject_ = new ::KFMsg::PBObject;
  return pbobject_;
}
inline ::KFMsg::PBObject* S2SQueryPlayerAck::release_pbobject() {
  clear_has_pbobject();
  ::KFMsg::PBObject* temp = pbobject_;
  pbobject_ = NULL;
  return temp;
}
inline void S2SQueryPlayerAck::set_allocated_pbobject(::KFMsg::PBObject* pbobject) {
  delete pbobject_;
  pbobject_ = pbobject;
  if (pbobject) {
    set_has_pbobject();
  } else {
    clear_has_pbobject();
  }
}

// -------------------------------------------------------------------

// S2SUpdateMailFlagReq

// required uint32 playerid = 1;
inline bool S2SUpdateMailFlagReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SUpdateMailFlagReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SUpdateMailFlagReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SUpdateMailFlagReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SUpdateMailFlagReq::playerid() const {
  return playerid_;
}
inline void S2SUpdateMailFlagReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint64 mailid = 2;
inline bool S2SUpdateMailFlagReq::has_mailid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SUpdateMailFlagReq::set_has_mailid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SUpdateMailFlagReq::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SUpdateMailFlagReq::clear_mailid() {
  mailid_ = GOOGLE_ULONGLONG(0);
  clear_has_mailid();
}
inline ::google::protobuf::uint64 S2SUpdateMailFlagReq::mailid() const {
  return mailid_;
}
inline void S2SUpdateMailFlagReq::set_mailid(::google::protobuf::uint64 value) {
  set_has_mailid();
  mailid_ = value;
}

// required uint32 mailtype = 3;
inline bool S2SUpdateMailFlagReq::has_mailtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SUpdateMailFlagReq::set_has_mailtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SUpdateMailFlagReq::clear_has_mailtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SUpdateMailFlagReq::clear_mailtype() {
  mailtype_ = 0u;
  clear_has_mailtype();
}
inline ::google::protobuf::uint32 S2SUpdateMailFlagReq::mailtype() const {
  return mailtype_;
}
inline void S2SUpdateMailFlagReq::set_mailtype(::google::protobuf::uint32 value) {
  set_has_mailtype();
  mailtype_ = value;
}

// required uint32 flag = 4;
inline bool S2SUpdateMailFlagReq::has_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SUpdateMailFlagReq::set_has_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SUpdateMailFlagReq::clear_has_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SUpdateMailFlagReq::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 S2SUpdateMailFlagReq::flag() const {
  return flag_;
}
inline void S2SUpdateMailFlagReq::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// S2SUpdateMailFlagAck

// required uint32 playerid = 1;
inline bool S2SUpdateMailFlagAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SUpdateMailFlagAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SUpdateMailFlagAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SUpdateMailFlagAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SUpdateMailFlagAck::playerid() const {
  return playerid_;
}
inline void S2SUpdateMailFlagAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint64 mailid = 2;
inline bool S2SUpdateMailFlagAck::has_mailid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SUpdateMailFlagAck::set_has_mailid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SUpdateMailFlagAck::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SUpdateMailFlagAck::clear_mailid() {
  mailid_ = GOOGLE_ULONGLONG(0);
  clear_has_mailid();
}
inline ::google::protobuf::uint64 S2SUpdateMailFlagAck::mailid() const {
  return mailid_;
}
inline void S2SUpdateMailFlagAck::set_mailid(::google::protobuf::uint64 value) {
  set_has_mailid();
  mailid_ = value;
}

// required uint32 mailtype = 3;
inline bool S2SUpdateMailFlagAck::has_mailtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SUpdateMailFlagAck::set_has_mailtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SUpdateMailFlagAck::clear_has_mailtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SUpdateMailFlagAck::clear_mailtype() {
  mailtype_ = 0u;
  clear_has_mailtype();
}
inline ::google::protobuf::uint32 S2SUpdateMailFlagAck::mailtype() const {
  return mailtype_;
}
inline void S2SUpdateMailFlagAck::set_mailtype(::google::protobuf::uint32 value) {
  set_has_mailtype();
  mailtype_ = value;
}

// required uint32 flag = 4;
inline bool S2SUpdateMailFlagAck::has_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SUpdateMailFlagAck::set_has_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SUpdateMailFlagAck::clear_has_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SUpdateMailFlagAck::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 S2SUpdateMailFlagAck::flag() const {
  return flag_;
}
inline void S2SUpdateMailFlagAck::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// S2SPlayerToastReq

// required uint32 selfplayerid = 1;
inline bool S2SPlayerToastReq::has_selfplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SPlayerToastReq::set_has_selfplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SPlayerToastReq::clear_has_selfplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SPlayerToastReq::clear_selfplayerid() {
  selfplayerid_ = 0u;
  clear_has_selfplayerid();
}
inline ::google::protobuf::uint32 S2SPlayerToastReq::selfplayerid() const {
  return selfplayerid_;
}
inline void S2SPlayerToastReq::set_selfplayerid(::google::protobuf::uint32 value) {
  set_has_selfplayerid();
  selfplayerid_ = value;
}

// required uint32 targetplayerid = 2;
inline bool S2SPlayerToastReq::has_targetplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SPlayerToastReq::set_has_targetplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SPlayerToastReq::clear_has_targetplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SPlayerToastReq::clear_targetplayerid() {
  targetplayerid_ = 0u;
  clear_has_targetplayerid();
}
inline ::google::protobuf::uint32 S2SPlayerToastReq::targetplayerid() const {
  return targetplayerid_;
}
inline void S2SPlayerToastReq::set_targetplayerid(::google::protobuf::uint32 value) {
  set_has_targetplayerid();
  targetplayerid_ = value;
}

// required uint32 dailygetlimit = 3;
inline bool S2SPlayerToastReq::has_dailygetlimit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SPlayerToastReq::set_has_dailygetlimit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SPlayerToastReq::clear_has_dailygetlimit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SPlayerToastReq::clear_dailygetlimit() {
  dailygetlimit_ = 0u;
  clear_has_dailygetlimit();
}
inline ::google::protobuf::uint32 S2SPlayerToastReq::dailygetlimit() const {
  return dailygetlimit_;
}
inline void S2SPlayerToastReq::set_dailygetlimit(::google::protobuf::uint32 value) {
  set_has_dailygetlimit();
  dailygetlimit_ = value;
}

// -------------------------------------------------------------------

// S2SPlayerToastAck

// required uint32 result = 1;
inline bool S2SPlayerToastAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SPlayerToastAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SPlayerToastAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SPlayerToastAck::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 S2SPlayerToastAck::result() const {
  return result_;
}
inline void S2SPlayerToastAck::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// required uint32 playerid = 2;
inline bool S2SPlayerToastAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SPlayerToastAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SPlayerToastAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SPlayerToastAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SPlayerToastAck::playerid() const {
  return playerid_;
}
inline void S2SPlayerToastAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 targetplayerid = 3;
inline bool S2SPlayerToastAck::has_targetplayerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SPlayerToastAck::set_has_targetplayerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SPlayerToastAck::clear_has_targetplayerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SPlayerToastAck::clear_targetplayerid() {
  targetplayerid_ = 0u;
  clear_has_targetplayerid();
}
inline ::google::protobuf::uint32 S2SPlayerToastAck::targetplayerid() const {
  return targetplayerid_;
}
inline void S2SPlayerToastAck::set_targetplayerid(::google::protobuf::uint32 value) {
  set_has_targetplayerid();
  targetplayerid_ = value;
}

// required uint32 targetserverid = 4;
inline bool S2SPlayerToastAck::has_targetserverid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SPlayerToastAck::set_has_targetserverid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SPlayerToastAck::clear_has_targetserverid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SPlayerToastAck::clear_targetserverid() {
  targetserverid_ = 0u;
  clear_has_targetserverid();
}
inline ::google::protobuf::uint32 S2SPlayerToastAck::targetserverid() const {
  return targetserverid_;
}
inline void S2SPlayerToastAck::set_targetserverid(::google::protobuf::uint32 value) {
  set_has_targetserverid();
  targetserverid_ = value;
}

// -------------------------------------------------------------------

// S2SQueryToastCountReq

// required uint32 selfplayerid = 1;
inline bool S2SQueryToastCountReq::has_selfplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SQueryToastCountReq::set_has_selfplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SQueryToastCountReq::clear_has_selfplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SQueryToastCountReq::clear_selfplayerid() {
  selfplayerid_ = 0u;
  clear_has_selfplayerid();
}
inline ::google::protobuf::uint32 S2SQueryToastCountReq::selfplayerid() const {
  return selfplayerid_;
}
inline void S2SQueryToastCountReq::set_selfplayerid(::google::protobuf::uint32 value) {
  set_has_selfplayerid();
  selfplayerid_ = value;
}

// required uint32 targetplayerid = 2;
inline bool S2SQueryToastCountReq::has_targetplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SQueryToastCountReq::set_has_targetplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SQueryToastCountReq::clear_has_targetplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SQueryToastCountReq::clear_targetplayerid() {
  targetplayerid_ = 0u;
  clear_has_targetplayerid();
}
inline ::google::protobuf::uint32 S2SQueryToastCountReq::targetplayerid() const {
  return targetplayerid_;
}
inline void S2SQueryToastCountReq::set_targetplayerid(::google::protobuf::uint32 value) {
  set_has_targetplayerid();
  targetplayerid_ = value;
}

// -------------------------------------------------------------------

// S2SQueryToastCountAck

// required uint32 playerid = 1;
inline bool S2SQueryToastCountAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SQueryToastCountAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SQueryToastCountAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SQueryToastCountAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SQueryToastCountAck::playerid() const {
  return playerid_;
}
inline void S2SQueryToastCountAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 targetplayerid = 2;
inline bool S2SQueryToastCountAck::has_targetplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SQueryToastCountAck::set_has_targetplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SQueryToastCountAck::clear_has_targetplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SQueryToastCountAck::clear_targetplayerid() {
  targetplayerid_ = 0u;
  clear_has_targetplayerid();
}
inline ::google::protobuf::uint32 S2SQueryToastCountAck::targetplayerid() const {
  return targetplayerid_;
}
inline void S2SQueryToastCountAck::set_targetplayerid(::google::protobuf::uint32 value) {
  set_has_targetplayerid();
  targetplayerid_ = value;
}

// required uint32 toastcount = 3;
inline bool S2SQueryToastCountAck::has_toastcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SQueryToastCountAck::set_has_toastcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SQueryToastCountAck::clear_has_toastcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SQueryToastCountAck::clear_toastcount() {
  toastcount_ = 0u;
  clear_has_toastcount();
}
inline ::google::protobuf::uint32 S2SQueryToastCountAck::toastcount() const {
  return toastcount_;
}
inline void S2SQueryToastCountAck::set_toastcount(::google::protobuf::uint32 value) {
  set_has_toastcount();
  toastcount_ = value;
}

// -------------------------------------------------------------------

// S2SUpdateFriendLinessAck

// required uint32 playerid = 1;
inline bool S2SUpdateFriendLinessAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SUpdateFriendLinessAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SUpdateFriendLinessAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SUpdateFriendLinessAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SUpdateFriendLinessAck::playerid() const {
  return playerid_;
}
inline void S2SUpdateFriendLinessAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 targetplayerid = 2;
inline bool S2SUpdateFriendLinessAck::has_targetplayerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SUpdateFriendLinessAck::set_has_targetplayerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SUpdateFriendLinessAck::clear_has_targetplayerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SUpdateFriendLinessAck::clear_targetplayerid() {
  targetplayerid_ = 0u;
  clear_has_targetplayerid();
}
inline ::google::protobuf::uint32 S2SUpdateFriendLinessAck::targetplayerid() const {
  return targetplayerid_;
}
inline void S2SUpdateFriendLinessAck::set_targetplayerid(::google::protobuf::uint32 value) {
  set_has_targetplayerid();
  targetplayerid_ = value;
}

// required uint32 friendliness = 3;
inline bool S2SUpdateFriendLinessAck::has_friendliness() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SUpdateFriendLinessAck::set_has_friendliness() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SUpdateFriendLinessAck::clear_has_friendliness() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SUpdateFriendLinessAck::clear_friendliness() {
  friendliness_ = 0u;
  clear_has_friendliness();
}
inline ::google::protobuf::uint32 S2SUpdateFriendLinessAck::friendliness() const {
  return friendliness_;
}
inline void S2SUpdateFriendLinessAck::set_friendliness(::google::protobuf::uint32 value) {
  set_has_friendliness();
  friendliness_ = value;
}

// -------------------------------------------------------------------

// S2SCreateMatchGroupReq

// required .KFMsg.PBObject pbmember = 1;
inline bool S2SCreateMatchGroupReq::has_pbmember() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SCreateMatchGroupReq::set_has_pbmember() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SCreateMatchGroupReq::clear_has_pbmember() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SCreateMatchGroupReq::clear_pbmember() {
  if (pbmember_ != NULL) pbmember_->::KFMsg::PBObject::Clear();
  clear_has_pbmember();
}
inline const ::KFMsg::PBObject& S2SCreateMatchGroupReq::pbmember() const {
  return pbmember_ != NULL ? *pbmember_ : *default_instance_->pbmember_;
}
inline ::KFMsg::PBObject* S2SCreateMatchGroupReq::mutable_pbmember() {
  set_has_pbmember();
  if (pbmember_ == NULL) pbmember_ = new ::KFMsg::PBObject;
  return pbmember_;
}
inline ::KFMsg::PBObject* S2SCreateMatchGroupReq::release_pbmember() {
  clear_has_pbmember();
  ::KFMsg::PBObject* temp = pbmember_;
  pbmember_ = NULL;
  return temp;
}
inline void S2SCreateMatchGroupReq::set_allocated_pbmember(::KFMsg::PBObject* pbmember) {
  delete pbmember_;
  pbmember_ = pbmember;
  if (pbmember) {
    set_has_pbmember();
  } else {
    clear_has_pbmember();
  }
}

// required uint64 groupid = 2;
inline bool S2SCreateMatchGroupReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SCreateMatchGroupReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SCreateMatchGroupReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SCreateMatchGroupReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 S2SCreateMatchGroupReq::groupid() const {
  return groupid_;
}
inline void S2SCreateMatchGroupReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required uint32 maxcount = 3;
inline bool S2SCreateMatchGroupReq::has_maxcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SCreateMatchGroupReq::set_has_maxcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SCreateMatchGroupReq::clear_has_maxcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SCreateMatchGroupReq::clear_maxcount() {
  maxcount_ = 0u;
  clear_has_maxcount();
}
inline ::google::protobuf::uint32 S2SCreateMatchGroupReq::maxcount() const {
  return maxcount_;
}
inline void S2SCreateMatchGroupReq::set_maxcount(::google::protobuf::uint32 value) {
  set_has_maxcount();
  maxcount_ = value;
}

// required uint32 matchid = 4;
inline bool S2SCreateMatchGroupReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SCreateMatchGroupReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SCreateMatchGroupReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SCreateMatchGroupReq::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SCreateMatchGroupReq::matchid() const {
  return matchid_;
}
inline void S2SCreateMatchGroupReq::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required uint32 playerid = 5;
inline bool S2SCreateMatchGroupReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SCreateMatchGroupReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SCreateMatchGroupReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SCreateMatchGroupReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SCreateMatchGroupReq::playerid() const {
  return playerid_;
}
inline void S2SCreateMatchGroupReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// S2SUpdateGroupMatchReq

// required uint64 groupid = 1;
inline bool S2SUpdateGroupMatchReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SUpdateGroupMatchReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SUpdateGroupMatchReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SUpdateGroupMatchReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 S2SUpdateGroupMatchReq::groupid() const {
  return groupid_;
}
inline void S2SUpdateGroupMatchReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required uint32 maxcount = 2;
inline bool S2SUpdateGroupMatchReq::has_maxcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SUpdateGroupMatchReq::set_has_maxcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SUpdateGroupMatchReq::clear_has_maxcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SUpdateGroupMatchReq::clear_maxcount() {
  maxcount_ = 0u;
  clear_has_maxcount();
}
inline ::google::protobuf::uint32 S2SUpdateGroupMatchReq::maxcount() const {
  return maxcount_;
}
inline void S2SUpdateGroupMatchReq::set_maxcount(::google::protobuf::uint32 value) {
  set_has_maxcount();
  maxcount_ = value;
}

// required uint32 matchid = 3;
inline bool S2SUpdateGroupMatchReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SUpdateGroupMatchReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SUpdateGroupMatchReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SUpdateGroupMatchReq::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SUpdateGroupMatchReq::matchid() const {
  return matchid_;
}
inline void S2SUpdateGroupMatchReq::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required uint32 playerid = 4;
inline bool S2SUpdateGroupMatchReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SUpdateGroupMatchReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SUpdateGroupMatchReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SUpdateGroupMatchReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SUpdateGroupMatchReq::playerid() const {
  return playerid_;
}
inline void S2SUpdateGroupMatchReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// S2SCreateMatchGroupToShardReq

// required .KFMsg.PBObject pbmember = 1;
inline bool S2SCreateMatchGroupToShardReq::has_pbmember() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SCreateMatchGroupToShardReq::set_has_pbmember() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SCreateMatchGroupToShardReq::clear_has_pbmember() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SCreateMatchGroupToShardReq::clear_pbmember() {
  if (pbmember_ != NULL) pbmember_->::KFMsg::PBObject::Clear();
  clear_has_pbmember();
}
inline const ::KFMsg::PBObject& S2SCreateMatchGroupToShardReq::pbmember() const {
  return pbmember_ != NULL ? *pbmember_ : *default_instance_->pbmember_;
}
inline ::KFMsg::PBObject* S2SCreateMatchGroupToShardReq::mutable_pbmember() {
  set_has_pbmember();
  if (pbmember_ == NULL) pbmember_ = new ::KFMsg::PBObject;
  return pbmember_;
}
inline ::KFMsg::PBObject* S2SCreateMatchGroupToShardReq::release_pbmember() {
  clear_has_pbmember();
  ::KFMsg::PBObject* temp = pbmember_;
  pbmember_ = NULL;
  return temp;
}
inline void S2SCreateMatchGroupToShardReq::set_allocated_pbmember(::KFMsg::PBObject* pbmember) {
  delete pbmember_;
  pbmember_ = pbmember;
  if (pbmember) {
    set_has_pbmember();
  } else {
    clear_has_pbmember();
  }
}

// required uint64 groupid = 2;
inline bool S2SCreateMatchGroupToShardReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SCreateMatchGroupToShardReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SCreateMatchGroupToShardReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SCreateMatchGroupToShardReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 S2SCreateMatchGroupToShardReq::groupid() const {
  return groupid_;
}
inline void S2SCreateMatchGroupToShardReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required uint32 maxcount = 3;
inline bool S2SCreateMatchGroupToShardReq::has_maxcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SCreateMatchGroupToShardReq::set_has_maxcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SCreateMatchGroupToShardReq::clear_has_maxcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SCreateMatchGroupToShardReq::clear_maxcount() {
  maxcount_ = 0u;
  clear_has_maxcount();
}
inline ::google::protobuf::uint32 S2SCreateMatchGroupToShardReq::maxcount() const {
  return maxcount_;
}
inline void S2SCreateMatchGroupToShardReq::set_maxcount(::google::protobuf::uint32 value) {
  set_has_maxcount();
  maxcount_ = value;
}

// required uint32 matchid = 4;
inline bool S2SCreateMatchGroupToShardReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SCreateMatchGroupToShardReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SCreateMatchGroupToShardReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SCreateMatchGroupToShardReq::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SCreateMatchGroupToShardReq::matchid() const {
  return matchid_;
}
inline void S2SCreateMatchGroupToShardReq::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required uint32 playerid = 5;
inline bool S2SCreateMatchGroupToShardReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SCreateMatchGroupToShardReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SCreateMatchGroupToShardReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SCreateMatchGroupToShardReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SCreateMatchGroupToShardReq::playerid() const {
  return playerid_;
}
inline void S2SCreateMatchGroupToShardReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// S2SReceiveInviteMatchGroupReq

// required uint32 playerid = 1;
inline bool S2SReceiveInviteMatchGroupReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SReceiveInviteMatchGroupReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SReceiveInviteMatchGroupReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SReceiveInviteMatchGroupReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SReceiveInviteMatchGroupReq::playerid() const {
  return playerid_;
}
inline void S2SReceiveInviteMatchGroupReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint64 groupid = 2;
inline bool S2SReceiveInviteMatchGroupReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SReceiveInviteMatchGroupReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SReceiveInviteMatchGroupReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SReceiveInviteMatchGroupReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 S2SReceiveInviteMatchGroupReq::groupid() const {
  return groupid_;
}
inline void S2SReceiveInviteMatchGroupReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required .KFMsg.PBObject inviter = 3;
inline bool S2SReceiveInviteMatchGroupReq::has_inviter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SReceiveInviteMatchGroupReq::set_has_inviter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SReceiveInviteMatchGroupReq::clear_has_inviter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SReceiveInviteMatchGroupReq::clear_inviter() {
  if (inviter_ != NULL) inviter_->::KFMsg::PBObject::Clear();
  clear_has_inviter();
}
inline const ::KFMsg::PBObject& S2SReceiveInviteMatchGroupReq::inviter() const {
  return inviter_ != NULL ? *inviter_ : *default_instance_->inviter_;
}
inline ::KFMsg::PBObject* S2SReceiveInviteMatchGroupReq::mutable_inviter() {
  set_has_inviter();
  if (inviter_ == NULL) inviter_ = new ::KFMsg::PBObject;
  return inviter_;
}
inline ::KFMsg::PBObject* S2SReceiveInviteMatchGroupReq::release_inviter() {
  clear_has_inviter();
  ::KFMsg::PBObject* temp = inviter_;
  inviter_ = NULL;
  return temp;
}
inline void S2SReceiveInviteMatchGroupReq::set_allocated_inviter(::KFMsg::PBObject* inviter) {
  delete inviter_;
  inviter_ = inviter;
  if (inviter) {
    set_has_inviter();
  } else {
    clear_has_inviter();
  }
}

// required string source = 4;
inline bool S2SReceiveInviteMatchGroupReq::has_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SReceiveInviteMatchGroupReq::set_has_source() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SReceiveInviteMatchGroupReq::clear_has_source() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SReceiveInviteMatchGroupReq::clear_source() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& S2SReceiveInviteMatchGroupReq::source() const {
  return *source_;
}
inline void S2SReceiveInviteMatchGroupReq::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void S2SReceiveInviteMatchGroupReq::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void S2SReceiveInviteMatchGroupReq::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SReceiveInviteMatchGroupReq::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  return source_;
}
inline ::std::string* S2SReceiveInviteMatchGroupReq::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SReceiveInviteMatchGroupReq::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 matchid = 5;
inline bool S2SReceiveInviteMatchGroupReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SReceiveInviteMatchGroupReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SReceiveInviteMatchGroupReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SReceiveInviteMatchGroupReq::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SReceiveInviteMatchGroupReq::matchid() const {
  return matchid_;
}
inline void S2SReceiveInviteMatchGroupReq::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required uint32 inviterplayerid = 6;
inline bool S2SReceiveInviteMatchGroupReq::has_inviterplayerid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void S2SReceiveInviteMatchGroupReq::set_has_inviterplayerid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void S2SReceiveInviteMatchGroupReq::clear_has_inviterplayerid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void S2SReceiveInviteMatchGroupReq::clear_inviterplayerid() {
  inviterplayerid_ = 0u;
  clear_has_inviterplayerid();
}
inline ::google::protobuf::uint32 S2SReceiveInviteMatchGroupReq::inviterplayerid() const {
  return inviterplayerid_;
}
inline void S2SReceiveInviteMatchGroupReq::set_inviterplayerid(::google::protobuf::uint32 value) {
  set_has_inviterplayerid();
  inviterplayerid_ = value;
}

// required uint32 inviterserverid = 7;
inline bool S2SReceiveInviteMatchGroupReq::has_inviterserverid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void S2SReceiveInviteMatchGroupReq::set_has_inviterserverid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void S2SReceiveInviteMatchGroupReq::clear_has_inviterserverid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void S2SReceiveInviteMatchGroupReq::clear_inviterserverid() {
  inviterserverid_ = 0u;
  clear_has_inviterserverid();
}
inline ::google::protobuf::uint32 S2SReceiveInviteMatchGroupReq::inviterserverid() const {
  return inviterserverid_;
}
inline void S2SReceiveInviteMatchGroupReq::set_inviterserverid(::google::protobuf::uint32 value) {
  set_has_inviterserverid();
  inviterserverid_ = value;
}

// required string playername = 8;
inline bool S2SReceiveInviteMatchGroupReq::has_playername() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void S2SReceiveInviteMatchGroupReq::set_has_playername() {
  _has_bits_[0] |= 0x00000080u;
}
inline void S2SReceiveInviteMatchGroupReq::clear_has_playername() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void S2SReceiveInviteMatchGroupReq::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& S2SReceiveInviteMatchGroupReq::playername() const {
  return *playername_;
}
inline void S2SReceiveInviteMatchGroupReq::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void S2SReceiveInviteMatchGroupReq::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void S2SReceiveInviteMatchGroupReq::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SReceiveInviteMatchGroupReq::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* S2SReceiveInviteMatchGroupReq::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SReceiveInviteMatchGroupReq::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2SConsentInviteMatchGroupReq

// required uint64 groupid = 1;
inline bool S2SConsentInviteMatchGroupReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SConsentInviteMatchGroupReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SConsentInviteMatchGroupReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SConsentInviteMatchGroupReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 S2SConsentInviteMatchGroupReq::groupid() const {
  return groupid_;
}
inline void S2SConsentInviteMatchGroupReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required uint32 playerid = 2;
inline bool S2SConsentInviteMatchGroupReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SConsentInviteMatchGroupReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SConsentInviteMatchGroupReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SConsentInviteMatchGroupReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SConsentInviteMatchGroupReq::playerid() const {
  return playerid_;
}
inline void S2SConsentInviteMatchGroupReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 serverid = 3;
inline bool S2SConsentInviteMatchGroupReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SConsentInviteMatchGroupReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SConsentInviteMatchGroupReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SConsentInviteMatchGroupReq::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2SConsentInviteMatchGroupReq::serverid() const {
  return serverid_;
}
inline void S2SConsentInviteMatchGroupReq::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional .KFMsg.PBObject pbmember = 4;
inline bool S2SConsentInviteMatchGroupReq::has_pbmember() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SConsentInviteMatchGroupReq::set_has_pbmember() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SConsentInviteMatchGroupReq::clear_has_pbmember() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SConsentInviteMatchGroupReq::clear_pbmember() {
  if (pbmember_ != NULL) pbmember_->::KFMsg::PBObject::Clear();
  clear_has_pbmember();
}
inline const ::KFMsg::PBObject& S2SConsentInviteMatchGroupReq::pbmember() const {
  return pbmember_ != NULL ? *pbmember_ : *default_instance_->pbmember_;
}
inline ::KFMsg::PBObject* S2SConsentInviteMatchGroupReq::mutable_pbmember() {
  set_has_pbmember();
  if (pbmember_ == NULL) pbmember_ = new ::KFMsg::PBObject;
  return pbmember_;
}
inline ::KFMsg::PBObject* S2SConsentInviteMatchGroupReq::release_pbmember() {
  clear_has_pbmember();
  ::KFMsg::PBObject* temp = pbmember_;
  pbmember_ = NULL;
  return temp;
}
inline void S2SConsentInviteMatchGroupReq::set_allocated_pbmember(::KFMsg::PBObject* pbmember) {
  delete pbmember_;
  pbmember_ = pbmember;
  if (pbmember) {
    set_has_pbmember();
  } else {
    clear_has_pbmember();
  }
}

// -------------------------------------------------------------------

// S2SAddMatchGroupMemberReq

// required uint64 groupid = 1;
inline bool S2SAddMatchGroupMemberReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SAddMatchGroupMemberReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SAddMatchGroupMemberReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SAddMatchGroupMemberReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 S2SAddMatchGroupMemberReq::groupid() const {
  return groupid_;
}
inline void S2SAddMatchGroupMemberReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required uint32 playerid = 2;
inline bool S2SAddMatchGroupMemberReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SAddMatchGroupMemberReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SAddMatchGroupMemberReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SAddMatchGroupMemberReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SAddMatchGroupMemberReq::playerid() const {
  return playerid_;
}
inline void S2SAddMatchGroupMemberReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 serverid = 3;
inline bool S2SAddMatchGroupMemberReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SAddMatchGroupMemberReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SAddMatchGroupMemberReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SAddMatchGroupMemberReq::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2SAddMatchGroupMemberReq::serverid() const {
  return serverid_;
}
inline void S2SAddMatchGroupMemberReq::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional .KFMsg.PBObject pbmember = 4;
inline bool S2SAddMatchGroupMemberReq::has_pbmember() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SAddMatchGroupMemberReq::set_has_pbmember() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SAddMatchGroupMemberReq::clear_has_pbmember() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SAddMatchGroupMemberReq::clear_pbmember() {
  if (pbmember_ != NULL) pbmember_->::KFMsg::PBObject::Clear();
  clear_has_pbmember();
}
inline const ::KFMsg::PBObject& S2SAddMatchGroupMemberReq::pbmember() const {
  return pbmember_ != NULL ? *pbmember_ : *default_instance_->pbmember_;
}
inline ::KFMsg::PBObject* S2SAddMatchGroupMemberReq::mutable_pbmember() {
  set_has_pbmember();
  if (pbmember_ == NULL) pbmember_ = new ::KFMsg::PBObject;
  return pbmember_;
}
inline ::KFMsg::PBObject* S2SAddMatchGroupMemberReq::release_pbmember() {
  clear_has_pbmember();
  ::KFMsg::PBObject* temp = pbmember_;
  pbmember_ = NULL;
  return temp;
}
inline void S2SAddMatchGroupMemberReq::set_allocated_pbmember(::KFMsg::PBObject* pbmember) {
  delete pbmember_;
  pbmember_ = pbmember;
  if (pbmember) {
    set_has_pbmember();
  } else {
    clear_has_pbmember();
  }
}

// -------------------------------------------------------------------

// S2SAddMatchGroupMemberAck

// required .KFMsg.PBObject pbmember = 1;
inline bool S2SAddMatchGroupMemberAck::has_pbmember() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SAddMatchGroupMemberAck::set_has_pbmember() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SAddMatchGroupMemberAck::clear_has_pbmember() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SAddMatchGroupMemberAck::clear_pbmember() {
  if (pbmember_ != NULL) pbmember_->::KFMsg::PBObject::Clear();
  clear_has_pbmember();
}
inline const ::KFMsg::PBObject& S2SAddMatchGroupMemberAck::pbmember() const {
  return pbmember_ != NULL ? *pbmember_ : *default_instance_->pbmember_;
}
inline ::KFMsg::PBObject* S2SAddMatchGroupMemberAck::mutable_pbmember() {
  set_has_pbmember();
  if (pbmember_ == NULL) pbmember_ = new ::KFMsg::PBObject;
  return pbmember_;
}
inline ::KFMsg::PBObject* S2SAddMatchGroupMemberAck::release_pbmember() {
  clear_has_pbmember();
  ::KFMsg::PBObject* temp = pbmember_;
  pbmember_ = NULL;
  return temp;
}
inline void S2SAddMatchGroupMemberAck::set_allocated_pbmember(::KFMsg::PBObject* pbmember) {
  delete pbmember_;
  pbmember_ = pbmember;
  if (pbmember) {
    set_has_pbmember();
  } else {
    clear_has_pbmember();
  }
}

// -------------------------------------------------------------------

// S2STellMatchGroupDataAck

// repeated .KFMsg.PBObject pbmember = 1;
inline int S2STellMatchGroupDataAck::pbmember_size() const {
  return pbmember_.size();
}
inline void S2STellMatchGroupDataAck::clear_pbmember() {
  pbmember_.Clear();
}
inline const ::KFMsg::PBObject& S2STellMatchGroupDataAck::pbmember(int index) const {
  return pbmember_.Get(index);
}
inline ::KFMsg::PBObject* S2STellMatchGroupDataAck::mutable_pbmember(int index) {
  return pbmember_.Mutable(index);
}
inline ::KFMsg::PBObject* S2STellMatchGroupDataAck::add_pbmember() {
  return pbmember_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBObject >&
S2STellMatchGroupDataAck::pbmember() const {
  return pbmember_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBObject >*
S2STellMatchGroupDataAck::mutable_pbmember() {
  return &pbmember_;
}

// optional uint64 groupid = 2;
inline bool S2STellMatchGroupDataAck::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2STellMatchGroupDataAck::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2STellMatchGroupDataAck::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2STellMatchGroupDataAck::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 S2STellMatchGroupDataAck::groupid() const {
  return groupid_;
}
inline void S2STellMatchGroupDataAck::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// optional uint32 captainid = 3;
inline bool S2STellMatchGroupDataAck::has_captainid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2STellMatchGroupDataAck::set_has_captainid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2STellMatchGroupDataAck::clear_has_captainid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2STellMatchGroupDataAck::clear_captainid() {
  captainid_ = 0u;
  clear_has_captainid();
}
inline ::google::protobuf::uint32 S2STellMatchGroupDataAck::captainid() const {
  return captainid_;
}
inline void S2STellMatchGroupDataAck::set_captainid(::google::protobuf::uint32 value) {
  set_has_captainid();
  captainid_ = value;
}

// optional uint32 maxcount = 4;
inline bool S2STellMatchGroupDataAck::has_maxcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2STellMatchGroupDataAck::set_has_maxcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2STellMatchGroupDataAck::clear_has_maxcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2STellMatchGroupDataAck::clear_maxcount() {
  maxcount_ = 0u;
  clear_has_maxcount();
}
inline ::google::protobuf::uint32 S2STellMatchGroupDataAck::maxcount() const {
  return maxcount_;
}
inline void S2STellMatchGroupDataAck::set_maxcount(::google::protobuf::uint32 value) {
  set_has_maxcount();
  maxcount_ = value;
}

// optional uint32 matchid = 5;
inline bool S2STellMatchGroupDataAck::has_matchid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2STellMatchGroupDataAck::set_has_matchid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2STellMatchGroupDataAck::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2STellMatchGroupDataAck::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2STellMatchGroupDataAck::matchid() const {
  return matchid_;
}
inline void S2STellMatchGroupDataAck::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// optional bool newadd = 6;
inline bool S2STellMatchGroupDataAck::has_newadd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void S2STellMatchGroupDataAck::set_has_newadd() {
  _has_bits_[0] |= 0x00000020u;
}
inline void S2STellMatchGroupDataAck::clear_has_newadd() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void S2STellMatchGroupDataAck::clear_newadd() {
  newadd_ = false;
  clear_has_newadd();
}
inline bool S2STellMatchGroupDataAck::newadd() const {
  return newadd_;
}
inline void S2STellMatchGroupDataAck::set_newadd(bool value) {
  set_has_newadd();
  newadd_ = value;
}

// -------------------------------------------------------------------

// S2SRemoveMatchGroupMemberAck

// required uint32 memberid = 1;
inline bool S2SRemoveMatchGroupMemberAck::has_memberid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SRemoveMatchGroupMemberAck::set_has_memberid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SRemoveMatchGroupMemberAck::clear_has_memberid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SRemoveMatchGroupMemberAck::clear_memberid() {
  memberid_ = 0u;
  clear_has_memberid();
}
inline ::google::protobuf::uint32 S2SRemoveMatchGroupMemberAck::memberid() const {
  return memberid_;
}
inline void S2SRemoveMatchGroupMemberAck::set_memberid(::google::protobuf::uint32 value) {
  set_has_memberid();
  memberid_ = value;
}

// -------------------------------------------------------------------

// S2SLeaveMatchGroupReq

// required uint64 groupid = 1;
inline bool S2SLeaveMatchGroupReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SLeaveMatchGroupReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SLeaveMatchGroupReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SLeaveMatchGroupReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 S2SLeaveMatchGroupReq::groupid() const {
  return groupid_;
}
inline void S2SLeaveMatchGroupReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required uint32 playerid = 2;
inline bool S2SLeaveMatchGroupReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SLeaveMatchGroupReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SLeaveMatchGroupReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SLeaveMatchGroupReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SLeaveMatchGroupReq::playerid() const {
  return playerid_;
}
inline void S2SLeaveMatchGroupReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// S2SKickMatchGroupReq

// required uint64 groupid = 1;
inline bool S2SKickMatchGroupReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SKickMatchGroupReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SKickMatchGroupReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SKickMatchGroupReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 S2SKickMatchGroupReq::groupid() const {
  return groupid_;
}
inline void S2SKickMatchGroupReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required uint32 captainid = 2;
inline bool S2SKickMatchGroupReq::has_captainid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SKickMatchGroupReq::set_has_captainid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SKickMatchGroupReq::clear_has_captainid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SKickMatchGroupReq::clear_captainid() {
  captainid_ = 0u;
  clear_has_captainid();
}
inline ::google::protobuf::uint32 S2SKickMatchGroupReq::captainid() const {
  return captainid_;
}
inline void S2SKickMatchGroupReq::set_captainid(::google::protobuf::uint32 value) {
  set_has_captainid();
  captainid_ = value;
}

// required uint32 serverid = 3;
inline bool S2SKickMatchGroupReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SKickMatchGroupReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SKickMatchGroupReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SKickMatchGroupReq::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2SKickMatchGroupReq::serverid() const {
  return serverid_;
}
inline void S2SKickMatchGroupReq::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required uint32 memberid = 4;
inline bool S2SKickMatchGroupReq::has_memberid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SKickMatchGroupReq::set_has_memberid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SKickMatchGroupReq::clear_has_memberid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SKickMatchGroupReq::clear_memberid() {
  memberid_ = 0u;
  clear_has_memberid();
}
inline ::google::protobuf::uint32 S2SKickMatchGroupReq::memberid() const {
  return memberid_;
}
inline void S2SKickMatchGroupReq::set_memberid(::google::protobuf::uint32 value) {
  set_has_memberid();
  memberid_ = value;
}

// -------------------------------------------------------------------

// S2SLeaveMatchGroupAck

// required uint32 playerid = 1;
inline bool S2SLeaveMatchGroupAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SLeaveMatchGroupAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SLeaveMatchGroupAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SLeaveMatchGroupAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SLeaveMatchGroupAck::playerid() const {
  return playerid_;
}
inline void S2SLeaveMatchGroupAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// S2SApplyMatchGroupReq

// required uint64 groupid = 1;
inline bool S2SApplyMatchGroupReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SApplyMatchGroupReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SApplyMatchGroupReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SApplyMatchGroupReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 S2SApplyMatchGroupReq::groupid() const {
  return groupid_;
}
inline void S2SApplyMatchGroupReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required uint32 playerid = 2;
inline bool S2SApplyMatchGroupReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SApplyMatchGroupReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SApplyMatchGroupReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SApplyMatchGroupReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SApplyMatchGroupReq::playerid() const {
  return playerid_;
}
inline void S2SApplyMatchGroupReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 serverid = 3;
inline bool S2SApplyMatchGroupReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SApplyMatchGroupReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SApplyMatchGroupReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SApplyMatchGroupReq::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2SApplyMatchGroupReq::serverid() const {
  return serverid_;
}
inline void S2SApplyMatchGroupReq::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required .KFMsg.PBObject pbmember = 4;
inline bool S2SApplyMatchGroupReq::has_pbmember() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SApplyMatchGroupReq::set_has_pbmember() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SApplyMatchGroupReq::clear_has_pbmember() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SApplyMatchGroupReq::clear_pbmember() {
  if (pbmember_ != NULL) pbmember_->::KFMsg::PBObject::Clear();
  clear_has_pbmember();
}
inline const ::KFMsg::PBObject& S2SApplyMatchGroupReq::pbmember() const {
  return pbmember_ != NULL ? *pbmember_ : *default_instance_->pbmember_;
}
inline ::KFMsg::PBObject* S2SApplyMatchGroupReq::mutable_pbmember() {
  set_has_pbmember();
  if (pbmember_ == NULL) pbmember_ = new ::KFMsg::PBObject;
  return pbmember_;
}
inline ::KFMsg::PBObject* S2SApplyMatchGroupReq::release_pbmember() {
  clear_has_pbmember();
  ::KFMsg::PBObject* temp = pbmember_;
  pbmember_ = NULL;
  return temp;
}
inline void S2SApplyMatchGroupReq::set_allocated_pbmember(::KFMsg::PBObject* pbmember) {
  delete pbmember_;
  pbmember_ = pbmember;
  if (pbmember) {
    set_has_pbmember();
  } else {
    clear_has_pbmember();
  }
}

// -------------------------------------------------------------------

// S2SApplyMatchGroupAck

// required uint32 playerid = 1;
inline bool S2SApplyMatchGroupAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SApplyMatchGroupAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SApplyMatchGroupAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SApplyMatchGroupAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SApplyMatchGroupAck::playerid() const {
  return playerid_;
}
inline void S2SApplyMatchGroupAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required .KFMsg.PBObject pbmember = 2;
inline bool S2SApplyMatchGroupAck::has_pbmember() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SApplyMatchGroupAck::set_has_pbmember() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SApplyMatchGroupAck::clear_has_pbmember() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SApplyMatchGroupAck::clear_pbmember() {
  if (pbmember_ != NULL) pbmember_->::KFMsg::PBObject::Clear();
  clear_has_pbmember();
}
inline const ::KFMsg::PBObject& S2SApplyMatchGroupAck::pbmember() const {
  return pbmember_ != NULL ? *pbmember_ : *default_instance_->pbmember_;
}
inline ::KFMsg::PBObject* S2SApplyMatchGroupAck::mutable_pbmember() {
  set_has_pbmember();
  if (pbmember_ == NULL) pbmember_ = new ::KFMsg::PBObject;
  return pbmember_;
}
inline ::KFMsg::PBObject* S2SApplyMatchGroupAck::release_pbmember() {
  clear_has_pbmember();
  ::KFMsg::PBObject* temp = pbmember_;
  pbmember_ = NULL;
  return temp;
}
inline void S2SApplyMatchGroupAck::set_allocated_pbmember(::KFMsg::PBObject* pbmember) {
  delete pbmember_;
  pbmember_ = pbmember;
  if (pbmember) {
    set_has_pbmember();
  } else {
    clear_has_pbmember();
  }
}

// required uint32 serverid = 3;
inline bool S2SApplyMatchGroupAck::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SApplyMatchGroupAck::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SApplyMatchGroupAck::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SApplyMatchGroupAck::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2SApplyMatchGroupAck::serverid() const {
  return serverid_;
}
inline void S2SApplyMatchGroupAck::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// S2SConsentApplyMatchGroupAck

// required uint64 groupid = 1;
inline bool S2SConsentApplyMatchGroupAck::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SConsentApplyMatchGroupAck::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SConsentApplyMatchGroupAck::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SConsentApplyMatchGroupAck::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 S2SConsentApplyMatchGroupAck::groupid() const {
  return groupid_;
}
inline void S2SConsentApplyMatchGroupAck::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required uint32 playerid = 2;
inline bool S2SConsentApplyMatchGroupAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SConsentApplyMatchGroupAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SConsentApplyMatchGroupAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SConsentApplyMatchGroupAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SConsentApplyMatchGroupAck::playerid() const {
  return playerid_;
}
inline void S2SConsentApplyMatchGroupAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 captainid = 3;
inline bool S2SConsentApplyMatchGroupAck::has_captainid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SConsentApplyMatchGroupAck::set_has_captainid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SConsentApplyMatchGroupAck::clear_has_captainid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SConsentApplyMatchGroupAck::clear_captainid() {
  captainid_ = 0u;
  clear_has_captainid();
}
inline ::google::protobuf::uint32 S2SConsentApplyMatchGroupAck::captainid() const {
  return captainid_;
}
inline void S2SConsentApplyMatchGroupAck::set_captainid(::google::protobuf::uint32 value) {
  set_has_captainid();
  captainid_ = value;
}

// required uint32 serverid = 4;
inline bool S2SConsentApplyMatchGroupAck::has_serverid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SConsentApplyMatchGroupAck::set_has_serverid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SConsentApplyMatchGroupAck::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SConsentApplyMatchGroupAck::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2SConsentApplyMatchGroupAck::serverid() const {
  return serverid_;
}
inline void S2SConsentApplyMatchGroupAck::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required string playername = 5;
inline bool S2SConsentApplyMatchGroupAck::has_playername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SConsentApplyMatchGroupAck::set_has_playername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SConsentApplyMatchGroupAck::clear_has_playername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SConsentApplyMatchGroupAck::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& S2SConsentApplyMatchGroupAck::playername() const {
  return *playername_;
}
inline void S2SConsentApplyMatchGroupAck::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void S2SConsentApplyMatchGroupAck::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void S2SConsentApplyMatchGroupAck::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SConsentApplyMatchGroupAck::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* S2SConsentApplyMatchGroupAck::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SConsentApplyMatchGroupAck::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2SOnLineQueryMatchGroupReq

// required uint64 groupid = 1;
inline bool S2SOnLineQueryMatchGroupReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SOnLineQueryMatchGroupReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SOnLineQueryMatchGroupReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SOnLineQueryMatchGroupReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 S2SOnLineQueryMatchGroupReq::groupid() const {
  return groupid_;
}
inline void S2SOnLineQueryMatchGroupReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required uint32 playerid = 2;
inline bool S2SOnLineQueryMatchGroupReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SOnLineQueryMatchGroupReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SOnLineQueryMatchGroupReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SOnLineQueryMatchGroupReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SOnLineQueryMatchGroupReq::playerid() const {
  return playerid_;
}
inline void S2SOnLineQueryMatchGroupReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 serverid = 3;
inline bool S2SOnLineQueryMatchGroupReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SOnLineQueryMatchGroupReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SOnLineQueryMatchGroupReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SOnLineQueryMatchGroupReq::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2SOnLineQueryMatchGroupReq::serverid() const {
  return serverid_;
}
inline void S2SOnLineQueryMatchGroupReq::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// S2SOffLineUpdateMatchGroupReq

// required uint64 groupid = 1;
inline bool S2SOffLineUpdateMatchGroupReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SOffLineUpdateMatchGroupReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SOffLineUpdateMatchGroupReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SOffLineUpdateMatchGroupReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 S2SOffLineUpdateMatchGroupReq::groupid() const {
  return groupid_;
}
inline void S2SOffLineUpdateMatchGroupReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required uint32 playerid = 2;
inline bool S2SOffLineUpdateMatchGroupReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SOffLineUpdateMatchGroupReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SOffLineUpdateMatchGroupReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SOffLineUpdateMatchGroupReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SOffLineUpdateMatchGroupReq::playerid() const {
  return playerid_;
}
inline void S2SOffLineUpdateMatchGroupReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// S2SUpdateGroupMemberReq

// required uint64 groupid = 1;
inline bool S2SUpdateGroupMemberReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SUpdateGroupMemberReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SUpdateGroupMemberReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SUpdateGroupMemberReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 S2SUpdateGroupMemberReq::groupid() const {
  return groupid_;
}
inline void S2SUpdateGroupMemberReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required uint32 memberid = 2;
inline bool S2SUpdateGroupMemberReq::has_memberid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SUpdateGroupMemberReq::set_has_memberid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SUpdateGroupMemberReq::clear_has_memberid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SUpdateGroupMemberReq::clear_memberid() {
  memberid_ = 0u;
  clear_has_memberid();
}
inline ::google::protobuf::uint32 S2SUpdateGroupMemberReq::memberid() const {
  return memberid_;
}
inline void S2SUpdateGroupMemberReq::set_memberid(::google::protobuf::uint32 value) {
  set_has_memberid();
  memberid_ = value;
}

// required string dataname = 3;
inline bool S2SUpdateGroupMemberReq::has_dataname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SUpdateGroupMemberReq::set_has_dataname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SUpdateGroupMemberReq::clear_has_dataname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SUpdateGroupMemberReq::clear_dataname() {
  if (dataname_ != &::google::protobuf::internal::kEmptyString) {
    dataname_->clear();
  }
  clear_has_dataname();
}
inline const ::std::string& S2SUpdateGroupMemberReq::dataname() const {
  return *dataname_;
}
inline void S2SUpdateGroupMemberReq::set_dataname(const ::std::string& value) {
  set_has_dataname();
  if (dataname_ == &::google::protobuf::internal::kEmptyString) {
    dataname_ = new ::std::string;
  }
  dataname_->assign(value);
}
inline void S2SUpdateGroupMemberReq::set_dataname(const char* value) {
  set_has_dataname();
  if (dataname_ == &::google::protobuf::internal::kEmptyString) {
    dataname_ = new ::std::string;
  }
  dataname_->assign(value);
}
inline void S2SUpdateGroupMemberReq::set_dataname(const char* value, size_t size) {
  set_has_dataname();
  if (dataname_ == &::google::protobuf::internal::kEmptyString) {
    dataname_ = new ::std::string;
  }
  dataname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SUpdateGroupMemberReq::mutable_dataname() {
  set_has_dataname();
  if (dataname_ == &::google::protobuf::internal::kEmptyString) {
    dataname_ = new ::std::string;
  }
  return dataname_;
}
inline ::std::string* S2SUpdateGroupMemberReq::release_dataname() {
  clear_has_dataname();
  if (dataname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dataname_;
    dataname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SUpdateGroupMemberReq::set_allocated_dataname(::std::string* dataname) {
  if (dataname_ != &::google::protobuf::internal::kEmptyString) {
    delete dataname_;
  }
  if (dataname) {
    set_has_dataname();
    dataname_ = dataname;
  } else {
    clear_has_dataname();
    dataname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .KFMsg.PBStrings pbstrings = 4;
inline bool S2SUpdateGroupMemberReq::has_pbstrings() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SUpdateGroupMemberReq::set_has_pbstrings() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SUpdateGroupMemberReq::clear_has_pbstrings() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SUpdateGroupMemberReq::clear_pbstrings() {
  if (pbstrings_ != NULL) pbstrings_->::KFMsg::PBStrings::Clear();
  clear_has_pbstrings();
}
inline const ::KFMsg::PBStrings& S2SUpdateGroupMemberReq::pbstrings() const {
  return pbstrings_ != NULL ? *pbstrings_ : *default_instance_->pbstrings_;
}
inline ::KFMsg::PBStrings* S2SUpdateGroupMemberReq::mutable_pbstrings() {
  set_has_pbstrings();
  if (pbstrings_ == NULL) pbstrings_ = new ::KFMsg::PBStrings;
  return pbstrings_;
}
inline ::KFMsg::PBStrings* S2SUpdateGroupMemberReq::release_pbstrings() {
  clear_has_pbstrings();
  ::KFMsg::PBStrings* temp = pbstrings_;
  pbstrings_ = NULL;
  return temp;
}
inline void S2SUpdateGroupMemberReq::set_allocated_pbstrings(::KFMsg::PBStrings* pbstrings) {
  delete pbstrings_;
  pbstrings_ = pbstrings;
  if (pbstrings) {
    set_has_pbstrings();
  } else {
    clear_has_pbstrings();
  }
}

// -------------------------------------------------------------------

// S2SUpdateGroupMemberAck

// required uint32 memberid = 1;
inline bool S2SUpdateGroupMemberAck::has_memberid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SUpdateGroupMemberAck::set_has_memberid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SUpdateGroupMemberAck::clear_has_memberid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SUpdateGroupMemberAck::clear_memberid() {
  memberid_ = 0u;
  clear_has_memberid();
}
inline ::google::protobuf::uint32 S2SUpdateGroupMemberAck::memberid() const {
  return memberid_;
}
inline void S2SUpdateGroupMemberAck::set_memberid(::google::protobuf::uint32 value) {
  set_has_memberid();
  memberid_ = value;
}

// required string dataname = 2;
inline bool S2SUpdateGroupMemberAck::has_dataname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SUpdateGroupMemberAck::set_has_dataname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SUpdateGroupMemberAck::clear_has_dataname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SUpdateGroupMemberAck::clear_dataname() {
  if (dataname_ != &::google::protobuf::internal::kEmptyString) {
    dataname_->clear();
  }
  clear_has_dataname();
}
inline const ::std::string& S2SUpdateGroupMemberAck::dataname() const {
  return *dataname_;
}
inline void S2SUpdateGroupMemberAck::set_dataname(const ::std::string& value) {
  set_has_dataname();
  if (dataname_ == &::google::protobuf::internal::kEmptyString) {
    dataname_ = new ::std::string;
  }
  dataname_->assign(value);
}
inline void S2SUpdateGroupMemberAck::set_dataname(const char* value) {
  set_has_dataname();
  if (dataname_ == &::google::protobuf::internal::kEmptyString) {
    dataname_ = new ::std::string;
  }
  dataname_->assign(value);
}
inline void S2SUpdateGroupMemberAck::set_dataname(const char* value, size_t size) {
  set_has_dataname();
  if (dataname_ == &::google::protobuf::internal::kEmptyString) {
    dataname_ = new ::std::string;
  }
  dataname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SUpdateGroupMemberAck::mutable_dataname() {
  set_has_dataname();
  if (dataname_ == &::google::protobuf::internal::kEmptyString) {
    dataname_ = new ::std::string;
  }
  return dataname_;
}
inline ::std::string* S2SUpdateGroupMemberAck::release_dataname() {
  clear_has_dataname();
  if (dataname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dataname_;
    dataname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SUpdateGroupMemberAck::set_allocated_dataname(::std::string* dataname) {
  if (dataname_ != &::google::protobuf::internal::kEmptyString) {
    delete dataname_;
  }
  if (dataname) {
    set_has_dataname();
    dataname_ = dataname;
  } else {
    clear_has_dataname();
    dataname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .KFMsg.PBStrings pbstrings = 3;
inline bool S2SUpdateGroupMemberAck::has_pbstrings() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SUpdateGroupMemberAck::set_has_pbstrings() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SUpdateGroupMemberAck::clear_has_pbstrings() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SUpdateGroupMemberAck::clear_pbstrings() {
  if (pbstrings_ != NULL) pbstrings_->::KFMsg::PBStrings::Clear();
  clear_has_pbstrings();
}
inline const ::KFMsg::PBStrings& S2SUpdateGroupMemberAck::pbstrings() const {
  return pbstrings_ != NULL ? *pbstrings_ : *default_instance_->pbstrings_;
}
inline ::KFMsg::PBStrings* S2SUpdateGroupMemberAck::mutable_pbstrings() {
  set_has_pbstrings();
  if (pbstrings_ == NULL) pbstrings_ = new ::KFMsg::PBStrings;
  return pbstrings_;
}
inline ::KFMsg::PBStrings* S2SUpdateGroupMemberAck::release_pbstrings() {
  clear_has_pbstrings();
  ::KFMsg::PBStrings* temp = pbstrings_;
  pbstrings_ = NULL;
  return temp;
}
inline void S2SUpdateGroupMemberAck::set_allocated_pbstrings(::KFMsg::PBStrings* pbstrings) {
  delete pbstrings_;
  pbstrings_ = pbstrings;
  if (pbstrings) {
    set_has_pbstrings();
  } else {
    clear_has_pbstrings();
  }
}

// -------------------------------------------------------------------

// S2SUpdateGroupDataAck

// repeated .KFMsg.PBString pbstring = 1;
inline int S2SUpdateGroupDataAck::pbstring_size() const {
  return pbstring_.size();
}
inline void S2SUpdateGroupDataAck::clear_pbstring() {
  pbstring_.Clear();
}
inline const ::KFMsg::PBString& S2SUpdateGroupDataAck::pbstring(int index) const {
  return pbstring_.Get(index);
}
inline ::KFMsg::PBString* S2SUpdateGroupDataAck::mutable_pbstring(int index) {
  return pbstring_.Mutable(index);
}
inline ::KFMsg::PBString* S2SUpdateGroupDataAck::add_pbstring() {
  return pbstring_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >&
S2SUpdateGroupDataAck::pbstring() const {
  return pbstring_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >*
S2SUpdateGroupDataAck::mutable_pbstring() {
  return &pbstring_;
}

// -------------------------------------------------------------------

// S2SUpdateGuestListReq

// required uint32 playerid = 1;
inline bool S2SUpdateGuestListReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SUpdateGuestListReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SUpdateGuestListReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SUpdateGuestListReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SUpdateGuestListReq::playerid() const {
  return playerid_;
}
inline void S2SUpdateGuestListReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 guestid = 2;
inline bool S2SUpdateGuestListReq::has_guestid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SUpdateGuestListReq::set_has_guestid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SUpdateGuestListReq::clear_has_guestid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SUpdateGuestListReq::clear_guestid() {
  guestid_ = 0u;
  clear_has_guestid();
}
inline ::google::protobuf::uint32 S2SUpdateGuestListReq::guestid() const {
  return guestid_;
}
inline void S2SUpdateGuestListReq::set_guestid(::google::protobuf::uint32 value) {
  set_has_guestid();
  guestid_ = value;
}

// required uint64 guesttime = 3;
inline bool S2SUpdateGuestListReq::has_guesttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SUpdateGuestListReq::set_has_guesttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SUpdateGuestListReq::clear_has_guesttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SUpdateGuestListReq::clear_guesttime() {
  guesttime_ = GOOGLE_ULONGLONG(0);
  clear_has_guesttime();
}
inline ::google::protobuf::uint64 S2SUpdateGuestListReq::guesttime() const {
  return guesttime_;
}
inline void S2SUpdateGuestListReq::set_guesttime(::google::protobuf::uint64 value) {
  set_has_guesttime();
  guesttime_ = value;
}

// -------------------------------------------------------------------

// S2SQueryGuestReq

// required uint32 playerid = 1;
inline bool S2SQueryGuestReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SQueryGuestReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SQueryGuestReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SQueryGuestReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SQueryGuestReq::playerid() const {
  return playerid_;
}
inline void S2SQueryGuestReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 queryid = 2;
inline bool S2SQueryGuestReq::has_queryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SQueryGuestReq::set_has_queryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SQueryGuestReq::clear_has_queryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SQueryGuestReq::clear_queryid() {
  queryid_ = 0u;
  clear_has_queryid();
}
inline ::google::protobuf::uint32 S2SQueryGuestReq::queryid() const {
  return queryid_;
}
inline void S2SQueryGuestReq::set_queryid(::google::protobuf::uint32 value) {
  set_has_queryid();
  queryid_ = value;
}

// required uint64 querytime = 3;
inline bool S2SQueryGuestReq::has_querytime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SQueryGuestReq::set_has_querytime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SQueryGuestReq::clear_has_querytime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SQueryGuestReq::clear_querytime() {
  querytime_ = GOOGLE_ULONGLONG(0);
  clear_has_querytime();
}
inline ::google::protobuf::uint64 S2SQueryGuestReq::querytime() const {
  return querytime_;
}
inline void S2SQueryGuestReq::set_querytime(::google::protobuf::uint64 value) {
  set_has_querytime();
  querytime_ = value;
}

// -------------------------------------------------------------------

// S2SQueryGuestAck

// required uint32 playerid = 1;
inline bool S2SQueryGuestAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SQueryGuestAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SQueryGuestAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SQueryGuestAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SQueryGuestAck::playerid() const {
  return playerid_;
}
inline void S2SQueryGuestAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 queryid = 2;
inline bool S2SQueryGuestAck::has_queryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SQueryGuestAck::set_has_queryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SQueryGuestAck::clear_has_queryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SQueryGuestAck::clear_queryid() {
  queryid_ = 0u;
  clear_has_queryid();
}
inline ::google::protobuf::uint32 S2SQueryGuestAck::queryid() const {
  return queryid_;
}
inline void S2SQueryGuestAck::set_queryid(::google::protobuf::uint32 value) {
  set_has_queryid();
  queryid_ = value;
}

// required uint32 guestcount = 3;
inline bool S2SQueryGuestAck::has_guestcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SQueryGuestAck::set_has_guestcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SQueryGuestAck::clear_has_guestcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SQueryGuestAck::clear_guestcount() {
  guestcount_ = 0u;
  clear_has_guestcount();
}
inline ::google::protobuf::uint32 S2SQueryGuestAck::guestcount() const {
  return guestcount_;
}
inline void S2SQueryGuestAck::set_guestcount(::google::protobuf::uint32 value) {
  set_has_guestcount();
  guestcount_ = value;
}

// repeated .KFMsg.PBGuestData guestdata = 4;
inline int S2SQueryGuestAck::guestdata_size() const {
  return guestdata_.size();
}
inline void S2SQueryGuestAck::clear_guestdata() {
  guestdata_.Clear();
}
inline const ::KFMsg::PBGuestData& S2SQueryGuestAck::guestdata(int index) const {
  return guestdata_.Get(index);
}
inline ::KFMsg::PBGuestData* S2SQueryGuestAck::mutable_guestdata(int index) {
  return guestdata_.Mutable(index);
}
inline ::KFMsg::PBGuestData* S2SQueryGuestAck::add_guestdata() {
  return guestdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBGuestData >&
S2SQueryGuestAck::guestdata() const {
  return guestdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBGuestData >*
S2SQueryGuestAck::mutable_guestdata() {
  return &guestdata_;
}

// -------------------------------------------------------------------

// S2SNewPlayerLoginMailReq

// required uint32 playerid = 1;
inline bool S2SNewPlayerLoginMailReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SNewPlayerLoginMailReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SNewPlayerLoginMailReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SNewPlayerLoginMailReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SNewPlayerLoginMailReq::playerid() const {
  return playerid_;
}
inline void S2SNewPlayerLoginMailReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// PBScoreData

// repeated .KFMsg.PBUInt64 score = 1;
inline int PBScoreData::score_size() const {
  return score_.size();
}
inline void PBScoreData::clear_score() {
  score_.Clear();
}
inline const ::KFMsg::PBUInt64& PBScoreData::score(int index) const {
  return score_.Get(index);
}
inline ::KFMsg::PBUInt64* PBScoreData::mutable_score(int index) {
  return score_.Mutable(index);
}
inline ::KFMsg::PBUInt64* PBScoreData::add_score() {
  return score_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt64 >&
PBScoreData::score() const {
  return score_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt64 >*
PBScoreData::mutable_score() {
  return &score_;
}

// -------------------------------------------------------------------

// S2SJoinRankListReq

// required uint32 playerid = 1;
inline bool S2SJoinRankListReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SJoinRankListReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SJoinRankListReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SJoinRankListReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SJoinRankListReq::playerid() const {
  return playerid_;
}
inline void S2SJoinRankListReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string scoretype = 2;
inline bool S2SJoinRankListReq::has_scoretype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SJoinRankListReq::set_has_scoretype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SJoinRankListReq::clear_has_scoretype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SJoinRankListReq::clear_scoretype() {
  if (scoretype_ != &::google::protobuf::internal::kEmptyString) {
    scoretype_->clear();
  }
  clear_has_scoretype();
}
inline const ::std::string& S2SJoinRankListReq::scoretype() const {
  return *scoretype_;
}
inline void S2SJoinRankListReq::set_scoretype(const ::std::string& value) {
  set_has_scoretype();
  if (scoretype_ == &::google::protobuf::internal::kEmptyString) {
    scoretype_ = new ::std::string;
  }
  scoretype_->assign(value);
}
inline void S2SJoinRankListReq::set_scoretype(const char* value) {
  set_has_scoretype();
  if (scoretype_ == &::google::protobuf::internal::kEmptyString) {
    scoretype_ = new ::std::string;
  }
  scoretype_->assign(value);
}
inline void S2SJoinRankListReq::set_scoretype(const char* value, size_t size) {
  set_has_scoretype();
  if (scoretype_ == &::google::protobuf::internal::kEmptyString) {
    scoretype_ = new ::std::string;
  }
  scoretype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SJoinRankListReq::mutable_scoretype() {
  set_has_scoretype();
  if (scoretype_ == &::google::protobuf::internal::kEmptyString) {
    scoretype_ = new ::std::string;
  }
  return scoretype_;
}
inline ::std::string* S2SJoinRankListReq::release_scoretype() {
  clear_has_scoretype();
  if (scoretype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = scoretype_;
    scoretype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SJoinRankListReq::set_allocated_scoretype(::std::string* scoretype) {
  if (scoretype_ != &::google::protobuf::internal::kEmptyString) {
    delete scoretype_;
  }
  if (scoretype) {
    set_has_scoretype();
    scoretype_ = scoretype;
  } else {
    clear_has_scoretype();
    scoretype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .KFMsg.PBScoreData scores = 3;
inline bool S2SJoinRankListReq::has_scores() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SJoinRankListReq::set_has_scores() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SJoinRankListReq::clear_has_scores() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SJoinRankListReq::clear_scores() {
  if (scores_ != NULL) scores_->::KFMsg::PBScoreData::Clear();
  clear_has_scores();
}
inline const ::KFMsg::PBScoreData& S2SJoinRankListReq::scores() const {
  return scores_ != NULL ? *scores_ : *default_instance_->scores_;
}
inline ::KFMsg::PBScoreData* S2SJoinRankListReq::mutable_scores() {
  set_has_scores();
  if (scores_ == NULL) scores_ = new ::KFMsg::PBScoreData;
  return scores_;
}
inline ::KFMsg::PBScoreData* S2SJoinRankListReq::release_scores() {
  clear_has_scores();
  ::KFMsg::PBScoreData* temp = scores_;
  scores_ = NULL;
  return temp;
}
inline void S2SJoinRankListReq::set_allocated_scores(::KFMsg::PBScoreData* scores) {
  delete scores_;
  scores_ = scores;
  if (scores) {
    set_has_scores();
  } else {
    clear_has_scores();
  }
}

// required .KFMsg.PBScoreData totalscores = 4;
inline bool S2SJoinRankListReq::has_totalscores() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SJoinRankListReq::set_has_totalscores() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SJoinRankListReq::clear_has_totalscores() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SJoinRankListReq::clear_totalscores() {
  if (totalscores_ != NULL) totalscores_->::KFMsg::PBScoreData::Clear();
  clear_has_totalscores();
}
inline const ::KFMsg::PBScoreData& S2SJoinRankListReq::totalscores() const {
  return totalscores_ != NULL ? *totalscores_ : *default_instance_->totalscores_;
}
inline ::KFMsg::PBScoreData* S2SJoinRankListReq::mutable_totalscores() {
  set_has_totalscores();
  if (totalscores_ == NULL) totalscores_ = new ::KFMsg::PBScoreData;
  return totalscores_;
}
inline ::KFMsg::PBScoreData* S2SJoinRankListReq::release_totalscores() {
  clear_has_totalscores();
  ::KFMsg::PBScoreData* temp = totalscores_;
  totalscores_ = NULL;
  return temp;
}
inline void S2SJoinRankListReq::set_allocated_totalscores(::KFMsg::PBScoreData* totalscores) {
  delete totalscores_;
  totalscores_ = totalscores;
  if (totalscores) {
    set_has_totalscores();
  } else {
    clear_has_totalscores();
  }
}

// -------------------------------------------------------------------

// S2SQueryWholeRankListReq

// required uint32 playerid = 1;
inline bool S2SQueryWholeRankListReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SQueryWholeRankListReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SQueryWholeRankListReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SQueryWholeRankListReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SQueryWholeRankListReq::playerid() const {
  return playerid_;
}
inline void S2SQueryWholeRankListReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 matchid = 2;
inline bool S2SQueryWholeRankListReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SQueryWholeRankListReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SQueryWholeRankListReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SQueryWholeRankListReq::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SQueryWholeRankListReq::matchid() const {
  return matchid_;
}
inline void S2SQueryWholeRankListReq::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required string ranktype = 3;
inline bool S2SQueryWholeRankListReq::has_ranktype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SQueryWholeRankListReq::set_has_ranktype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SQueryWholeRankListReq::clear_has_ranktype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SQueryWholeRankListReq::clear_ranktype() {
  if (ranktype_ != &::google::protobuf::internal::kEmptyString) {
    ranktype_->clear();
  }
  clear_has_ranktype();
}
inline const ::std::string& S2SQueryWholeRankListReq::ranktype() const {
  return *ranktype_;
}
inline void S2SQueryWholeRankListReq::set_ranktype(const ::std::string& value) {
  set_has_ranktype();
  if (ranktype_ == &::google::protobuf::internal::kEmptyString) {
    ranktype_ = new ::std::string;
  }
  ranktype_->assign(value);
}
inline void S2SQueryWholeRankListReq::set_ranktype(const char* value) {
  set_has_ranktype();
  if (ranktype_ == &::google::protobuf::internal::kEmptyString) {
    ranktype_ = new ::std::string;
  }
  ranktype_->assign(value);
}
inline void S2SQueryWholeRankListReq::set_ranktype(const char* value, size_t size) {
  set_has_ranktype();
  if (ranktype_ == &::google::protobuf::internal::kEmptyString) {
    ranktype_ = new ::std::string;
  }
  ranktype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SQueryWholeRankListReq::mutable_ranktype() {
  set_has_ranktype();
  if (ranktype_ == &::google::protobuf::internal::kEmptyString) {
    ranktype_ = new ::std::string;
  }
  return ranktype_;
}
inline ::std::string* S2SQueryWholeRankListReq::release_ranktype() {
  clear_has_ranktype();
  if (ranktype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ranktype_;
    ranktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SQueryWholeRankListReq::set_allocated_ranktype(::std::string* ranktype) {
  if (ranktype_ != &::google::protobuf::internal::kEmptyString) {
    delete ranktype_;
  }
  if (ranktype) {
    set_has_ranktype();
    ranktype_ = ranktype;
  } else {
    clear_has_ranktype();
    ranktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 begin = 4;
inline bool S2SQueryWholeRankListReq::has_begin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SQueryWholeRankListReq::set_has_begin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SQueryWholeRankListReq::clear_has_begin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SQueryWholeRankListReq::clear_begin() {
  begin_ = 0u;
  clear_has_begin();
}
inline ::google::protobuf::uint32 S2SQueryWholeRankListReq::begin() const {
  return begin_;
}
inline void S2SQueryWholeRankListReq::set_begin(::google::protobuf::uint32 value) {
  set_has_begin();
  begin_ = value;
}

// required uint32 end = 5;
inline bool S2SQueryWholeRankListReq::has_end() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SQueryWholeRankListReq::set_has_end() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SQueryWholeRankListReq::clear_has_end() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SQueryWholeRankListReq::clear_end() {
  end_ = 0u;
  clear_has_end();
}
inline ::google::protobuf::uint32 S2SQueryWholeRankListReq::end() const {
  return end_;
}
inline void S2SQueryWholeRankListReq::set_end(::google::protobuf::uint32 value) {
  set_has_end();
  end_ = value;
}

// -------------------------------------------------------------------

// S2SQueryFriendRankListReq

// required uint32 playerid = 1;
inline bool S2SQueryFriendRankListReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SQueryFriendRankListReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SQueryFriendRankListReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SQueryFriendRankListReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SQueryFriendRankListReq::playerid() const {
  return playerid_;
}
inline void S2SQueryFriendRankListReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 matchid = 2;
inline bool S2SQueryFriendRankListReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SQueryFriendRankListReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SQueryFriendRankListReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SQueryFriendRankListReq::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SQueryFriendRankListReq::matchid() const {
  return matchid_;
}
inline void S2SQueryFriendRankListReq::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required string ranktype = 3;
inline bool S2SQueryFriendRankListReq::has_ranktype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SQueryFriendRankListReq::set_has_ranktype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SQueryFriendRankListReq::clear_has_ranktype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SQueryFriendRankListReq::clear_ranktype() {
  if (ranktype_ != &::google::protobuf::internal::kEmptyString) {
    ranktype_->clear();
  }
  clear_has_ranktype();
}
inline const ::std::string& S2SQueryFriendRankListReq::ranktype() const {
  return *ranktype_;
}
inline void S2SQueryFriendRankListReq::set_ranktype(const ::std::string& value) {
  set_has_ranktype();
  if (ranktype_ == &::google::protobuf::internal::kEmptyString) {
    ranktype_ = new ::std::string;
  }
  ranktype_->assign(value);
}
inline void S2SQueryFriendRankListReq::set_ranktype(const char* value) {
  set_has_ranktype();
  if (ranktype_ == &::google::protobuf::internal::kEmptyString) {
    ranktype_ = new ::std::string;
  }
  ranktype_->assign(value);
}
inline void S2SQueryFriendRankListReq::set_ranktype(const char* value, size_t size) {
  set_has_ranktype();
  if (ranktype_ == &::google::protobuf::internal::kEmptyString) {
    ranktype_ = new ::std::string;
  }
  ranktype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SQueryFriendRankListReq::mutable_ranktype() {
  set_has_ranktype();
  if (ranktype_ == &::google::protobuf::internal::kEmptyString) {
    ranktype_ = new ::std::string;
  }
  return ranktype_;
}
inline ::std::string* S2SQueryFriendRankListReq::release_ranktype() {
  clear_has_ranktype();
  if (ranktype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ranktype_;
    ranktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SQueryFriendRankListReq::set_allocated_ranktype(::std::string* ranktype) {
  if (ranktype_ != &::google::protobuf::internal::kEmptyString) {
    delete ranktype_;
  }
  if (ranktype) {
    set_has_ranktype();
    ranktype_ = ranktype;
  } else {
    clear_has_ranktype();
    ranktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .KFMsg.PBPlayerIds playerids = 4;
inline bool S2SQueryFriendRankListReq::has_playerids() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SQueryFriendRankListReq::set_has_playerids() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SQueryFriendRankListReq::clear_has_playerids() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SQueryFriendRankListReq::clear_playerids() {
  if (playerids_ != NULL) playerids_->::KFMsg::PBPlayerIds::Clear();
  clear_has_playerids();
}
inline const ::KFMsg::PBPlayerIds& S2SQueryFriendRankListReq::playerids() const {
  return playerids_ != NULL ? *playerids_ : *default_instance_->playerids_;
}
inline ::KFMsg::PBPlayerIds* S2SQueryFriendRankListReq::mutable_playerids() {
  set_has_playerids();
  if (playerids_ == NULL) playerids_ = new ::KFMsg::PBPlayerIds;
  return playerids_;
}
inline ::KFMsg::PBPlayerIds* S2SQueryFriendRankListReq::release_playerids() {
  clear_has_playerids();
  ::KFMsg::PBPlayerIds* temp = playerids_;
  playerids_ = NULL;
  return temp;
}
inline void S2SQueryFriendRankListReq::set_allocated_playerids(::KFMsg::PBPlayerIds* playerids) {
  delete playerids_;
  playerids_ = playerids;
  if (playerids) {
    set_has_playerids();
  } else {
    clear_has_playerids();
  }
}

// -------------------------------------------------------------------

// S2SQueryRankListAck

// required uint32 playerid = 1;
inline bool S2SQueryRankListAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SQueryRankListAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SQueryRankListAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SQueryRankListAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SQueryRankListAck::playerid() const {
  return playerid_;
}
inline void S2SQueryRankListAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 matchid = 2;
inline bool S2SQueryRankListAck::has_matchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SQueryRankListAck::set_has_matchid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SQueryRankListAck::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SQueryRankListAck::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SQueryRankListAck::matchid() const {
  return matchid_;
}
inline void S2SQueryRankListAck::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required string ranktype = 3;
inline bool S2SQueryRankListAck::has_ranktype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SQueryRankListAck::set_has_ranktype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SQueryRankListAck::clear_has_ranktype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SQueryRankListAck::clear_ranktype() {
  if (ranktype_ != &::google::protobuf::internal::kEmptyString) {
    ranktype_->clear();
  }
  clear_has_ranktype();
}
inline const ::std::string& S2SQueryRankListAck::ranktype() const {
  return *ranktype_;
}
inline void S2SQueryRankListAck::set_ranktype(const ::std::string& value) {
  set_has_ranktype();
  if (ranktype_ == &::google::protobuf::internal::kEmptyString) {
    ranktype_ = new ::std::string;
  }
  ranktype_->assign(value);
}
inline void S2SQueryRankListAck::set_ranktype(const char* value) {
  set_has_ranktype();
  if (ranktype_ == &::google::protobuf::internal::kEmptyString) {
    ranktype_ = new ::std::string;
  }
  ranktype_->assign(value);
}
inline void S2SQueryRankListAck::set_ranktype(const char* value, size_t size) {
  set_has_ranktype();
  if (ranktype_ == &::google::protobuf::internal::kEmptyString) {
    ranktype_ = new ::std::string;
  }
  ranktype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SQueryRankListAck::mutable_ranktype() {
  set_has_ranktype();
  if (ranktype_ == &::google::protobuf::internal::kEmptyString) {
    ranktype_ = new ::std::string;
  }
  return ranktype_;
}
inline ::std::string* S2SQueryRankListAck::release_ranktype() {
  clear_has_ranktype();
  if (ranktype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ranktype_;
    ranktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SQueryRankListAck::set_allocated_ranktype(::std::string* ranktype) {
  if (ranktype_ != &::google::protobuf::internal::kEmptyString) {
    delete ranktype_;
  }
  if (ranktype) {
    set_has_ranktype();
    ranktype_ = ranktype;
  } else {
    clear_has_ranktype();
    ranktype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .KFMsg.PBRankData rankdatas = 4;
inline bool S2SQueryRankListAck::has_rankdatas() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SQueryRankListAck::set_has_rankdatas() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SQueryRankListAck::clear_has_rankdatas() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SQueryRankListAck::clear_rankdatas() {
  if (rankdatas_ != NULL) rankdatas_->::KFMsg::PBRankData::Clear();
  clear_has_rankdatas();
}
inline const ::KFMsg::PBRankData& S2SQueryRankListAck::rankdatas() const {
  return rankdatas_ != NULL ? *rankdatas_ : *default_instance_->rankdatas_;
}
inline ::KFMsg::PBRankData* S2SQueryRankListAck::mutable_rankdatas() {
  set_has_rankdatas();
  if (rankdatas_ == NULL) rankdatas_ = new ::KFMsg::PBRankData;
  return rankdatas_;
}
inline ::KFMsg::PBRankData* S2SQueryRankListAck::release_rankdatas() {
  clear_has_rankdatas();
  ::KFMsg::PBRankData* temp = rankdatas_;
  rankdatas_ = NULL;
  return temp;
}
inline void S2SQueryRankListAck::set_allocated_rankdatas(::KFMsg::PBRankData* rankdatas) {
  delete rankdatas_;
  rankdatas_ = rankdatas;
  if (rankdatas) {
    set_has_rankdatas();
  } else {
    clear_has_rankdatas();
  }
}

// optional bool isfriendrank = 5;
inline bool S2SQueryRankListAck::has_isfriendrank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SQueryRankListAck::set_has_isfriendrank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SQueryRankListAck::clear_has_isfriendrank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SQueryRankListAck::clear_isfriendrank() {
  isfriendrank_ = false;
  clear_has_isfriendrank();
}
inline bool S2SQueryRankListAck::isfriendrank() const {
  return isfriendrank_;
}
inline void S2SQueryRankListAck::set_isfriendrank(bool value) {
  set_has_isfriendrank();
  isfriendrank_ = value;
}

// -------------------------------------------------------------------

// S2SUpdateZoneToRankProxyReq

// repeated uint32 zoneid = 1;
inline int S2SUpdateZoneToRankProxyReq::zoneid_size() const {
  return zoneid_.size();
}
inline void S2SUpdateZoneToRankProxyReq::clear_zoneid() {
  zoneid_.Clear();
}
inline ::google::protobuf::uint32 S2SUpdateZoneToRankProxyReq::zoneid(int index) const {
  return zoneid_.Get(index);
}
inline void S2SUpdateZoneToRankProxyReq::set_zoneid(int index, ::google::protobuf::uint32 value) {
  zoneid_.Set(index, value);
}
inline void S2SUpdateZoneToRankProxyReq::add_zoneid(::google::protobuf::uint32 value) {
  zoneid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
S2SUpdateZoneToRankProxyReq::zoneid() const {
  return zoneid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
S2SUpdateZoneToRankProxyReq::mutable_zoneid() {
  return &zoneid_;
}

// -------------------------------------------------------------------

// S2STransmitToRankShardReq

// required uint32 zoneid = 1;
inline bool S2STransmitToRankShardReq::has_zoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2STransmitToRankShardReq::set_has_zoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2STransmitToRankShardReq::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2STransmitToRankShardReq::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 S2STransmitToRankShardReq::zoneid() const {
  return zoneid_;
}
inline void S2STransmitToRankShardReq::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// required uint32 msgid = 2;
inline bool S2STransmitToRankShardReq::has_msgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2STransmitToRankShardReq::set_has_msgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2STransmitToRankShardReq::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2STransmitToRankShardReq::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 S2STransmitToRankShardReq::msgid() const {
  return msgid_;
}
inline void S2STransmitToRankShardReq::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
}

// required string msgdata = 3;
inline bool S2STransmitToRankShardReq::has_msgdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2STransmitToRankShardReq::set_has_msgdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2STransmitToRankShardReq::clear_has_msgdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2STransmitToRankShardReq::clear_msgdata() {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    msgdata_->clear();
  }
  clear_has_msgdata();
}
inline const ::std::string& S2STransmitToRankShardReq::msgdata() const {
  return *msgdata_;
}
inline void S2STransmitToRankShardReq::set_msgdata(const ::std::string& value) {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  msgdata_->assign(value);
}
inline void S2STransmitToRankShardReq::set_msgdata(const char* value) {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  msgdata_->assign(value);
}
inline void S2STransmitToRankShardReq::set_msgdata(const char* value, size_t size) {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  msgdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2STransmitToRankShardReq::mutable_msgdata() {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  return msgdata_;
}
inline ::std::string* S2STransmitToRankShardReq::release_msgdata() {
  clear_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msgdata_;
    msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2STransmitToRankShardReq::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    delete msgdata_;
  }
  if (msgdata) {
    set_has_msgdata();
    msgdata_ = msgdata;
  } else {
    clear_has_msgdata();
    msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::ServerProtocol>() {
  return ::KFMsg::ServerProtocol_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_KFServerMessage_2eproto__INCLUDED
