// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFRouteMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "KFRouteMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KFMsg {

namespace {

const ::google::protobuf::Descriptor* PBRouteZone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRouteZone_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SRegisterRouteZoneReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SRegisterRouteZoneReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SRegisterRouteProxyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SRegisterRouteProxyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTransmitRouteMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTransmitRouteMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2STransmitRouteZoneMessageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2STransmitRouteZoneMessageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2STransmitRouteZoneMessageAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2STransmitRouteZoneMessageAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2STransmitRouteProxyMessageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2STransmitRouteProxyMessageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2STransmitRouteProxyMessageAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2STransmitRouteProxyMessageAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RouteProtocol_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_KFRouteMessage_2eproto() {
  protobuf_AddDesc_KFRouteMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "KFRouteMessage.proto");
  GOOGLE_CHECK(file != NULL);
  PBRouteZone_descriptor_ = file->message_type(0);
  static const int PBRouteZone_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRouteZone, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRouteZone, serverid_),
  };
  PBRouteZone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRouteZone_descriptor_,
      PBRouteZone::default_instance_,
      PBRouteZone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRouteZone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRouteZone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRouteZone));
  S2SRegisterRouteZoneReq_descriptor_ = file->message_type(1);
  static const int S2SRegisterRouteZoneReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterRouteZoneReq, zonedata_),
  };
  S2SRegisterRouteZoneReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SRegisterRouteZoneReq_descriptor_,
      S2SRegisterRouteZoneReq::default_instance_,
      S2SRegisterRouteZoneReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterRouteZoneReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterRouteZoneReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SRegisterRouteZoneReq));
  S2SRegisterRouteProxyReq_descriptor_ = file->message_type(2);
  static const int S2SRegisterRouteProxyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterRouteProxyReq, zonedata_),
  };
  S2SRegisterRouteProxyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SRegisterRouteProxyReq_descriptor_,
      S2SRegisterRouteProxyReq::default_instance_,
      S2SRegisterRouteProxyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterRouteProxyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterRouteProxyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SRegisterRouteProxyReq));
  PBTransmitRouteMessage_descriptor_ = file->message_type(3);
  static const int PBTransmitRouteMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTransmitRouteMessage, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTransmitRouteMessage, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTransmitRouteMessage, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTransmitRouteMessage, msgdata_),
  };
  PBTransmitRouteMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTransmitRouteMessage_descriptor_,
      PBTransmitRouteMessage::default_instance_,
      PBTransmitRouteMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTransmitRouteMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTransmitRouteMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTransmitRouteMessage));
  S2STransmitRouteZoneMessageReq_descriptor_ = file->message_type(4);
  static const int S2STransmitRouteZoneMessageReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitRouteZoneMessageReq, transmitdata_),
  };
  S2STransmitRouteZoneMessageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2STransmitRouteZoneMessageReq_descriptor_,
      S2STransmitRouteZoneMessageReq::default_instance_,
      S2STransmitRouteZoneMessageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitRouteZoneMessageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitRouteZoneMessageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2STransmitRouteZoneMessageReq));
  S2STransmitRouteZoneMessageAck_descriptor_ = file->message_type(5);
  static const int S2STransmitRouteZoneMessageAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitRouteZoneMessageAck, transmitdata_),
  };
  S2STransmitRouteZoneMessageAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2STransmitRouteZoneMessageAck_descriptor_,
      S2STransmitRouteZoneMessageAck::default_instance_,
      S2STransmitRouteZoneMessageAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitRouteZoneMessageAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitRouteZoneMessageAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2STransmitRouteZoneMessageAck));
  S2STransmitRouteProxyMessageReq_descriptor_ = file->message_type(6);
  static const int S2STransmitRouteProxyMessageReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitRouteProxyMessageReq, transmitdata_),
  };
  S2STransmitRouteProxyMessageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2STransmitRouteProxyMessageReq_descriptor_,
      S2STransmitRouteProxyMessageReq::default_instance_,
      S2STransmitRouteProxyMessageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitRouteProxyMessageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitRouteProxyMessageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2STransmitRouteProxyMessageReq));
  S2STransmitRouteProxyMessageAck_descriptor_ = file->message_type(7);
  static const int S2STransmitRouteProxyMessageAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitRouteProxyMessageAck, transmitdata_),
  };
  S2STransmitRouteProxyMessageAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2STransmitRouteProxyMessageAck_descriptor_,
      S2STransmitRouteProxyMessageAck::default_instance_,
      S2STransmitRouteProxyMessageAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitRouteProxyMessageAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STransmitRouteProxyMessageAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2STransmitRouteProxyMessageAck));
  RouteProtocol_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_KFRouteMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRouteZone_descriptor_, &PBRouteZone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SRegisterRouteZoneReq_descriptor_, &S2SRegisterRouteZoneReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SRegisterRouteProxyReq_descriptor_, &S2SRegisterRouteProxyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTransmitRouteMessage_descriptor_, &PBTransmitRouteMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2STransmitRouteZoneMessageReq_descriptor_, &S2STransmitRouteZoneMessageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2STransmitRouteZoneMessageAck_descriptor_, &S2STransmitRouteZoneMessageAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2STransmitRouteProxyMessageReq_descriptor_, &S2STransmitRouteProxyMessageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2STransmitRouteProxyMessageAck_descriptor_, &S2STransmitRouteProxyMessageAck::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_KFRouteMessage_2eproto() {
  delete PBRouteZone::default_instance_;
  delete PBRouteZone_reflection_;
  delete S2SRegisterRouteZoneReq::default_instance_;
  delete S2SRegisterRouteZoneReq_reflection_;
  delete S2SRegisterRouteProxyReq::default_instance_;
  delete S2SRegisterRouteProxyReq_reflection_;
  delete PBTransmitRouteMessage::default_instance_;
  delete PBTransmitRouteMessage_reflection_;
  delete S2STransmitRouteZoneMessageReq::default_instance_;
  delete S2STransmitRouteZoneMessageReq_reflection_;
  delete S2STransmitRouteZoneMessageAck::default_instance_;
  delete S2STransmitRouteZoneMessageAck_reflection_;
  delete S2STransmitRouteProxyMessageReq::default_instance_;
  delete S2STransmitRouteProxyMessageReq_reflection_;
  delete S2STransmitRouteProxyMessageAck::default_instance_;
  delete S2STransmitRouteProxyMessageAck_reflection_;
}

void protobuf_AddDesc_KFRouteMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024KFRouteMessage.proto\022\005KFMsg\"/\n\013PBRoute"
    "Zone\022\016\n\006zoneid\030\001 \002(\r\022\020\n\010serverid\030\002 \002(\r\"\?"
    "\n\027S2SRegisterRouteZoneReq\022$\n\010zonedata\030\001 "
    "\002(\0132\022.KFMsg.PBRouteZone\"@\n\030S2SRegisterRo"
    "uteProxyReq\022$\n\010zonedata\030\001 \003(\0132\022.KFMsg.PB"
    "RouteZone\"\\\n\026PBTransmitRouteMessage\022\020\n\010s"
    "erverid\030\002 \002(\r\022\020\n\010playerid\030\003 \002(\r\022\r\n\005msgid"
    "\030\004 \002(\r\022\017\n\007msgdata\030\005 \002(\t\"U\n\036S2STransmitRo"
    "uteZoneMessageReq\0223\n\014transmitdata\030\001 \002(\0132"
    "\035.KFMsg.PBTransmitRouteMessage\"U\n\036S2STra"
    "nsmitRouteZoneMessageAck\0223\n\014transmitdata"
    "\030\001 \002(\0132\035.KFMsg.PBTransmitRouteMessage\"V\n"
    "\037S2STransmitRouteProxyMessageReq\0223\n\014tran"
    "smitdata\030\001 \002(\0132\035.KFMsg.PBTransmitRouteMe"
    "ssage\"V\n\037S2STransmitRouteProxyMessageAck"
    "\0223\n\014transmitdata\030\001 \002(\0132\035.KFMsg.PBTransmi"
    "tRouteMessage*\376\001\n\rRouteProtocol\022 \n\033S2S_R"
    "EGISTER_ROUTE_ZONE_REQ\020\233N\022!\n\034S2S_REGISTE"
    "R_ROUTE_PROXY_REQ\020\234N\022(\n#S2S_TRANSMIT_ROU"
    "TE_ZONE_MESSAGE_REQ\020\235N\022(\n#S2S_TRANSMIT_R"
    "OUTE_ZONE_MESSAGE_ACK\020\236N\022)\n$S2S_TRANSMIT"
    "_ROUTE_PROXY_MESSAGE_REQ\020\237N\022)\n$S2S_TRANS"
    "MIT_ROUTE_PROXY_MESSAGE_ACK\020\240N", 910);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KFRouteMessage.proto", &protobuf_RegisterTypes);
  PBRouteZone::default_instance_ = new PBRouteZone();
  S2SRegisterRouteZoneReq::default_instance_ = new S2SRegisterRouteZoneReq();
  S2SRegisterRouteProxyReq::default_instance_ = new S2SRegisterRouteProxyReq();
  PBTransmitRouteMessage::default_instance_ = new PBTransmitRouteMessage();
  S2STransmitRouteZoneMessageReq::default_instance_ = new S2STransmitRouteZoneMessageReq();
  S2STransmitRouteZoneMessageAck::default_instance_ = new S2STransmitRouteZoneMessageAck();
  S2STransmitRouteProxyMessageReq::default_instance_ = new S2STransmitRouteProxyMessageReq();
  S2STransmitRouteProxyMessageAck::default_instance_ = new S2STransmitRouteProxyMessageAck();
  PBRouteZone::default_instance_->InitAsDefaultInstance();
  S2SRegisterRouteZoneReq::default_instance_->InitAsDefaultInstance();
  S2SRegisterRouteProxyReq::default_instance_->InitAsDefaultInstance();
  PBTransmitRouteMessage::default_instance_->InitAsDefaultInstance();
  S2STransmitRouteZoneMessageReq::default_instance_->InitAsDefaultInstance();
  S2STransmitRouteZoneMessageAck::default_instance_->InitAsDefaultInstance();
  S2STransmitRouteProxyMessageReq::default_instance_->InitAsDefaultInstance();
  S2STransmitRouteProxyMessageAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_KFRouteMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_KFRouteMessage_2eproto {
  StaticDescriptorInitializer_KFRouteMessage_2eproto() {
    protobuf_AddDesc_KFRouteMessage_2eproto();
  }
} static_descriptor_initializer_KFRouteMessage_2eproto_;
const ::google::protobuf::EnumDescriptor* RouteProtocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouteProtocol_descriptor_;
}
bool RouteProtocol_IsValid(int value) {
  switch(value) {
    case 10011:
    case 10012:
    case 10013:
    case 10014:
    case 10015:
    case 10016:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PBRouteZone::kZoneidFieldNumber;
const int PBRouteZone::kServeridFieldNumber;
#endif  // !_MSC_VER

PBRouteZone::PBRouteZone()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRouteZone::InitAsDefaultInstance() {
}

PBRouteZone::PBRouteZone(const PBRouteZone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRouteZone::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRouteZone::~PBRouteZone() {
  SharedDtor();
}

void PBRouteZone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBRouteZone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRouteZone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRouteZone_descriptor_;
}

const PBRouteZone& PBRouteZone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFRouteMessage_2eproto();
  return *default_instance_;
}

PBRouteZone* PBRouteZone::default_instance_ = NULL;

PBRouteZone* PBRouteZone::New() const {
  return new PBRouteZone;
}

void PBRouteZone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zoneid_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRouteZone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zoneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRouteZone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRouteZone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRouteZone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // required uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRouteZone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRouteZone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRouteZone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRouteZone::MergeFrom(const PBRouteZone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRouteZone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRouteZone::CopyFrom(const PBRouteZone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRouteZone::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PBRouteZone::Swap(PBRouteZone* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRouteZone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRouteZone_descriptor_;
  metadata.reflection = PBRouteZone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SRegisterRouteZoneReq::kZonedataFieldNumber;
#endif  // !_MSC_VER

S2SRegisterRouteZoneReq::S2SRegisterRouteZoneReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SRegisterRouteZoneReq::InitAsDefaultInstance() {
  zonedata_ = const_cast< ::KFMsg::PBRouteZone*>(&::KFMsg::PBRouteZone::default_instance());
}

S2SRegisterRouteZoneReq::S2SRegisterRouteZoneReq(const S2SRegisterRouteZoneReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SRegisterRouteZoneReq::SharedCtor() {
  _cached_size_ = 0;
  zonedata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SRegisterRouteZoneReq::~S2SRegisterRouteZoneReq() {
  SharedDtor();
}

void S2SRegisterRouteZoneReq::SharedDtor() {
  if (this != default_instance_) {
    delete zonedata_;
  }
}

void S2SRegisterRouteZoneReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SRegisterRouteZoneReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SRegisterRouteZoneReq_descriptor_;
}

const S2SRegisterRouteZoneReq& S2SRegisterRouteZoneReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFRouteMessage_2eproto();
  return *default_instance_;
}

S2SRegisterRouteZoneReq* S2SRegisterRouteZoneReq::default_instance_ = NULL;

S2SRegisterRouteZoneReq* S2SRegisterRouteZoneReq::New() const {
  return new S2SRegisterRouteZoneReq;
}

void S2SRegisterRouteZoneReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_zonedata()) {
      if (zonedata_ != NULL) zonedata_->::KFMsg::PBRouteZone::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SRegisterRouteZoneReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KFMsg.PBRouteZone zonedata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_zonedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SRegisterRouteZoneReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KFMsg.PBRouteZone zonedata = 1;
  if (has_zonedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->zonedata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SRegisterRouteZoneReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KFMsg.PBRouteZone zonedata = 1;
  if (has_zonedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->zonedata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SRegisterRouteZoneReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KFMsg.PBRouteZone zonedata = 1;
    if (has_zonedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->zonedata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SRegisterRouteZoneReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SRegisterRouteZoneReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SRegisterRouteZoneReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SRegisterRouteZoneReq::MergeFrom(const S2SRegisterRouteZoneReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zonedata()) {
      mutable_zonedata()->::KFMsg::PBRouteZone::MergeFrom(from.zonedata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SRegisterRouteZoneReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SRegisterRouteZoneReq::CopyFrom(const S2SRegisterRouteZoneReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SRegisterRouteZoneReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_zonedata()) {
    if (!this->zonedata().IsInitialized()) return false;
  }
  return true;
}

void S2SRegisterRouteZoneReq::Swap(S2SRegisterRouteZoneReq* other) {
  if (other != this) {
    std::swap(zonedata_, other->zonedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SRegisterRouteZoneReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SRegisterRouteZoneReq_descriptor_;
  metadata.reflection = S2SRegisterRouteZoneReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SRegisterRouteProxyReq::kZonedataFieldNumber;
#endif  // !_MSC_VER

S2SRegisterRouteProxyReq::S2SRegisterRouteProxyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SRegisterRouteProxyReq::InitAsDefaultInstance() {
}

S2SRegisterRouteProxyReq::S2SRegisterRouteProxyReq(const S2SRegisterRouteProxyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SRegisterRouteProxyReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SRegisterRouteProxyReq::~S2SRegisterRouteProxyReq() {
  SharedDtor();
}

void S2SRegisterRouteProxyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SRegisterRouteProxyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SRegisterRouteProxyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SRegisterRouteProxyReq_descriptor_;
}

const S2SRegisterRouteProxyReq& S2SRegisterRouteProxyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFRouteMessage_2eproto();
  return *default_instance_;
}

S2SRegisterRouteProxyReq* S2SRegisterRouteProxyReq::default_instance_ = NULL;

S2SRegisterRouteProxyReq* S2SRegisterRouteProxyReq::New() const {
  return new S2SRegisterRouteProxyReq;
}

void S2SRegisterRouteProxyReq::Clear() {
  zonedata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SRegisterRouteProxyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .KFMsg.PBRouteZone zonedata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zonedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_zonedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_zonedata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SRegisterRouteProxyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .KFMsg.PBRouteZone zonedata = 1;
  for (int i = 0; i < this->zonedata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->zonedata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SRegisterRouteProxyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .KFMsg.PBRouteZone zonedata = 1;
  for (int i = 0; i < this->zonedata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->zonedata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SRegisterRouteProxyReq::ByteSize() const {
  int total_size = 0;

  // repeated .KFMsg.PBRouteZone zonedata = 1;
  total_size += 1 * this->zonedata_size();
  for (int i = 0; i < this->zonedata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->zonedata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SRegisterRouteProxyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SRegisterRouteProxyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SRegisterRouteProxyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SRegisterRouteProxyReq::MergeFrom(const S2SRegisterRouteProxyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  zonedata_.MergeFrom(from.zonedata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SRegisterRouteProxyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SRegisterRouteProxyReq::CopyFrom(const S2SRegisterRouteProxyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SRegisterRouteProxyReq::IsInitialized() const {

  for (int i = 0; i < zonedata_size(); i++) {
    if (!this->zonedata(i).IsInitialized()) return false;
  }
  return true;
}

void S2SRegisterRouteProxyReq::Swap(S2SRegisterRouteProxyReq* other) {
  if (other != this) {
    zonedata_.Swap(&other->zonedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SRegisterRouteProxyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SRegisterRouteProxyReq_descriptor_;
  metadata.reflection = S2SRegisterRouteProxyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTransmitRouteMessage::kServeridFieldNumber;
const int PBTransmitRouteMessage::kPlayeridFieldNumber;
const int PBTransmitRouteMessage::kMsgidFieldNumber;
const int PBTransmitRouteMessage::kMsgdataFieldNumber;
#endif  // !_MSC_VER

PBTransmitRouteMessage::PBTransmitRouteMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTransmitRouteMessage::InitAsDefaultInstance() {
}

PBTransmitRouteMessage::PBTransmitRouteMessage(const PBTransmitRouteMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTransmitRouteMessage::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0u;
  playerid_ = 0u;
  msgid_ = 0u;
  msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTransmitRouteMessage::~PBTransmitRouteMessage() {
  SharedDtor();
}

void PBTransmitRouteMessage::SharedDtor() {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    delete msgdata_;
  }
  if (this != default_instance_) {
  }
}

void PBTransmitRouteMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTransmitRouteMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTransmitRouteMessage_descriptor_;
}

const PBTransmitRouteMessage& PBTransmitRouteMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFRouteMessage_2eproto();
  return *default_instance_;
}

PBTransmitRouteMessage* PBTransmitRouteMessage::default_instance_ = NULL;

PBTransmitRouteMessage* PBTransmitRouteMessage::New() const {
  return new PBTransmitRouteMessage;
}

void PBTransmitRouteMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = 0u;
    playerid_ = 0u;
    msgid_ = 0u;
    if (has_msgdata()) {
      if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
        msgdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTransmitRouteMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_msgid;
        break;
      }

      // required uint32 msgid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_msgdata;
        break;
      }

      // required string msgdata = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msgdata().data(), this->msgdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTransmitRouteMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  // required uint32 playerid = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerid(), output);
  }

  // required uint32 msgid = 4;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msgid(), output);
  }

  // required string msgdata = 5;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgdata().data(), this->msgdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->msgdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTransmitRouteMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  // required uint32 playerid = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerid(), target);
  }

  // required uint32 msgid = 4;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->msgid(), target);
  }

  // required string msgdata = 5;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msgdata().data(), this->msgdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->msgdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTransmitRouteMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required uint32 playerid = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 msgid = 4;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // required string msgdata = 5;
    if (has_msgdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTransmitRouteMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTransmitRouteMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTransmitRouteMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTransmitRouteMessage::MergeFrom(const PBTransmitRouteMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_msgdata()) {
      set_msgdata(from.msgdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTransmitRouteMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTransmitRouteMessage::CopyFrom(const PBTransmitRouteMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTransmitRouteMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PBTransmitRouteMessage::Swap(PBTransmitRouteMessage* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(playerid_, other->playerid_);
    std::swap(msgid_, other->msgid_);
    std::swap(msgdata_, other->msgdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTransmitRouteMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTransmitRouteMessage_descriptor_;
  metadata.reflection = PBTransmitRouteMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2STransmitRouteZoneMessageReq::kTransmitdataFieldNumber;
#endif  // !_MSC_VER

S2STransmitRouteZoneMessageReq::S2STransmitRouteZoneMessageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2STransmitRouteZoneMessageReq::InitAsDefaultInstance() {
  transmitdata_ = const_cast< ::KFMsg::PBTransmitRouteMessage*>(&::KFMsg::PBTransmitRouteMessage::default_instance());
}

S2STransmitRouteZoneMessageReq::S2STransmitRouteZoneMessageReq(const S2STransmitRouteZoneMessageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2STransmitRouteZoneMessageReq::SharedCtor() {
  _cached_size_ = 0;
  transmitdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2STransmitRouteZoneMessageReq::~S2STransmitRouteZoneMessageReq() {
  SharedDtor();
}

void S2STransmitRouteZoneMessageReq::SharedDtor() {
  if (this != default_instance_) {
    delete transmitdata_;
  }
}

void S2STransmitRouteZoneMessageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2STransmitRouteZoneMessageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2STransmitRouteZoneMessageReq_descriptor_;
}

const S2STransmitRouteZoneMessageReq& S2STransmitRouteZoneMessageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFRouteMessage_2eproto();
  return *default_instance_;
}

S2STransmitRouteZoneMessageReq* S2STransmitRouteZoneMessageReq::default_instance_ = NULL;

S2STransmitRouteZoneMessageReq* S2STransmitRouteZoneMessageReq::New() const {
  return new S2STransmitRouteZoneMessageReq;
}

void S2STransmitRouteZoneMessageReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_transmitdata()) {
      if (transmitdata_ != NULL) transmitdata_->::KFMsg::PBTransmitRouteMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2STransmitRouteZoneMessageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transmitdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2STransmitRouteZoneMessageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
  if (has_transmitdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->transmitdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2STransmitRouteZoneMessageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
  if (has_transmitdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->transmitdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2STransmitRouteZoneMessageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
    if (has_transmitdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transmitdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2STransmitRouteZoneMessageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2STransmitRouteZoneMessageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2STransmitRouteZoneMessageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2STransmitRouteZoneMessageReq::MergeFrom(const S2STransmitRouteZoneMessageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transmitdata()) {
      mutable_transmitdata()->::KFMsg::PBTransmitRouteMessage::MergeFrom(from.transmitdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2STransmitRouteZoneMessageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2STransmitRouteZoneMessageReq::CopyFrom(const S2STransmitRouteZoneMessageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2STransmitRouteZoneMessageReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_transmitdata()) {
    if (!this->transmitdata().IsInitialized()) return false;
  }
  return true;
}

void S2STransmitRouteZoneMessageReq::Swap(S2STransmitRouteZoneMessageReq* other) {
  if (other != this) {
    std::swap(transmitdata_, other->transmitdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2STransmitRouteZoneMessageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2STransmitRouteZoneMessageReq_descriptor_;
  metadata.reflection = S2STransmitRouteZoneMessageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2STransmitRouteZoneMessageAck::kTransmitdataFieldNumber;
#endif  // !_MSC_VER

S2STransmitRouteZoneMessageAck::S2STransmitRouteZoneMessageAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2STransmitRouteZoneMessageAck::InitAsDefaultInstance() {
  transmitdata_ = const_cast< ::KFMsg::PBTransmitRouteMessage*>(&::KFMsg::PBTransmitRouteMessage::default_instance());
}

S2STransmitRouteZoneMessageAck::S2STransmitRouteZoneMessageAck(const S2STransmitRouteZoneMessageAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2STransmitRouteZoneMessageAck::SharedCtor() {
  _cached_size_ = 0;
  transmitdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2STransmitRouteZoneMessageAck::~S2STransmitRouteZoneMessageAck() {
  SharedDtor();
}

void S2STransmitRouteZoneMessageAck::SharedDtor() {
  if (this != default_instance_) {
    delete transmitdata_;
  }
}

void S2STransmitRouteZoneMessageAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2STransmitRouteZoneMessageAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2STransmitRouteZoneMessageAck_descriptor_;
}

const S2STransmitRouteZoneMessageAck& S2STransmitRouteZoneMessageAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFRouteMessage_2eproto();
  return *default_instance_;
}

S2STransmitRouteZoneMessageAck* S2STransmitRouteZoneMessageAck::default_instance_ = NULL;

S2STransmitRouteZoneMessageAck* S2STransmitRouteZoneMessageAck::New() const {
  return new S2STransmitRouteZoneMessageAck;
}

void S2STransmitRouteZoneMessageAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_transmitdata()) {
      if (transmitdata_ != NULL) transmitdata_->::KFMsg::PBTransmitRouteMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2STransmitRouteZoneMessageAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transmitdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2STransmitRouteZoneMessageAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
  if (has_transmitdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->transmitdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2STransmitRouteZoneMessageAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
  if (has_transmitdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->transmitdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2STransmitRouteZoneMessageAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
    if (has_transmitdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transmitdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2STransmitRouteZoneMessageAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2STransmitRouteZoneMessageAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2STransmitRouteZoneMessageAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2STransmitRouteZoneMessageAck::MergeFrom(const S2STransmitRouteZoneMessageAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transmitdata()) {
      mutable_transmitdata()->::KFMsg::PBTransmitRouteMessage::MergeFrom(from.transmitdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2STransmitRouteZoneMessageAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2STransmitRouteZoneMessageAck::CopyFrom(const S2STransmitRouteZoneMessageAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2STransmitRouteZoneMessageAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_transmitdata()) {
    if (!this->transmitdata().IsInitialized()) return false;
  }
  return true;
}

void S2STransmitRouteZoneMessageAck::Swap(S2STransmitRouteZoneMessageAck* other) {
  if (other != this) {
    std::swap(transmitdata_, other->transmitdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2STransmitRouteZoneMessageAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2STransmitRouteZoneMessageAck_descriptor_;
  metadata.reflection = S2STransmitRouteZoneMessageAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2STransmitRouteProxyMessageReq::kTransmitdataFieldNumber;
#endif  // !_MSC_VER

S2STransmitRouteProxyMessageReq::S2STransmitRouteProxyMessageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2STransmitRouteProxyMessageReq::InitAsDefaultInstance() {
  transmitdata_ = const_cast< ::KFMsg::PBTransmitRouteMessage*>(&::KFMsg::PBTransmitRouteMessage::default_instance());
}

S2STransmitRouteProxyMessageReq::S2STransmitRouteProxyMessageReq(const S2STransmitRouteProxyMessageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2STransmitRouteProxyMessageReq::SharedCtor() {
  _cached_size_ = 0;
  transmitdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2STransmitRouteProxyMessageReq::~S2STransmitRouteProxyMessageReq() {
  SharedDtor();
}

void S2STransmitRouteProxyMessageReq::SharedDtor() {
  if (this != default_instance_) {
    delete transmitdata_;
  }
}

void S2STransmitRouteProxyMessageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2STransmitRouteProxyMessageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2STransmitRouteProxyMessageReq_descriptor_;
}

const S2STransmitRouteProxyMessageReq& S2STransmitRouteProxyMessageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFRouteMessage_2eproto();
  return *default_instance_;
}

S2STransmitRouteProxyMessageReq* S2STransmitRouteProxyMessageReq::default_instance_ = NULL;

S2STransmitRouteProxyMessageReq* S2STransmitRouteProxyMessageReq::New() const {
  return new S2STransmitRouteProxyMessageReq;
}

void S2STransmitRouteProxyMessageReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_transmitdata()) {
      if (transmitdata_ != NULL) transmitdata_->::KFMsg::PBTransmitRouteMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2STransmitRouteProxyMessageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transmitdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2STransmitRouteProxyMessageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
  if (has_transmitdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->transmitdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2STransmitRouteProxyMessageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
  if (has_transmitdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->transmitdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2STransmitRouteProxyMessageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
    if (has_transmitdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transmitdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2STransmitRouteProxyMessageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2STransmitRouteProxyMessageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2STransmitRouteProxyMessageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2STransmitRouteProxyMessageReq::MergeFrom(const S2STransmitRouteProxyMessageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transmitdata()) {
      mutable_transmitdata()->::KFMsg::PBTransmitRouteMessage::MergeFrom(from.transmitdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2STransmitRouteProxyMessageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2STransmitRouteProxyMessageReq::CopyFrom(const S2STransmitRouteProxyMessageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2STransmitRouteProxyMessageReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_transmitdata()) {
    if (!this->transmitdata().IsInitialized()) return false;
  }
  return true;
}

void S2STransmitRouteProxyMessageReq::Swap(S2STransmitRouteProxyMessageReq* other) {
  if (other != this) {
    std::swap(transmitdata_, other->transmitdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2STransmitRouteProxyMessageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2STransmitRouteProxyMessageReq_descriptor_;
  metadata.reflection = S2STransmitRouteProxyMessageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2STransmitRouteProxyMessageAck::kTransmitdataFieldNumber;
#endif  // !_MSC_VER

S2STransmitRouteProxyMessageAck::S2STransmitRouteProxyMessageAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2STransmitRouteProxyMessageAck::InitAsDefaultInstance() {
  transmitdata_ = const_cast< ::KFMsg::PBTransmitRouteMessage*>(&::KFMsg::PBTransmitRouteMessage::default_instance());
}

S2STransmitRouteProxyMessageAck::S2STransmitRouteProxyMessageAck(const S2STransmitRouteProxyMessageAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2STransmitRouteProxyMessageAck::SharedCtor() {
  _cached_size_ = 0;
  transmitdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2STransmitRouteProxyMessageAck::~S2STransmitRouteProxyMessageAck() {
  SharedDtor();
}

void S2STransmitRouteProxyMessageAck::SharedDtor() {
  if (this != default_instance_) {
    delete transmitdata_;
  }
}

void S2STransmitRouteProxyMessageAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2STransmitRouteProxyMessageAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2STransmitRouteProxyMessageAck_descriptor_;
}

const S2STransmitRouteProxyMessageAck& S2STransmitRouteProxyMessageAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFRouteMessage_2eproto();
  return *default_instance_;
}

S2STransmitRouteProxyMessageAck* S2STransmitRouteProxyMessageAck::default_instance_ = NULL;

S2STransmitRouteProxyMessageAck* S2STransmitRouteProxyMessageAck::New() const {
  return new S2STransmitRouteProxyMessageAck;
}

void S2STransmitRouteProxyMessageAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_transmitdata()) {
      if (transmitdata_ != NULL) transmitdata_->::KFMsg::PBTransmitRouteMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2STransmitRouteProxyMessageAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transmitdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2STransmitRouteProxyMessageAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
  if (has_transmitdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->transmitdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2STransmitRouteProxyMessageAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
  if (has_transmitdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->transmitdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2STransmitRouteProxyMessageAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
    if (has_transmitdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transmitdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2STransmitRouteProxyMessageAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2STransmitRouteProxyMessageAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2STransmitRouteProxyMessageAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2STransmitRouteProxyMessageAck::MergeFrom(const S2STransmitRouteProxyMessageAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transmitdata()) {
      mutable_transmitdata()->::KFMsg::PBTransmitRouteMessage::MergeFrom(from.transmitdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2STransmitRouteProxyMessageAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2STransmitRouteProxyMessageAck::CopyFrom(const S2STransmitRouteProxyMessageAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2STransmitRouteProxyMessageAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_transmitdata()) {
    if (!this->transmitdata().IsInitialized()) return false;
  }
  return true;
}

void S2STransmitRouteProxyMessageAck::Swap(S2STransmitRouteProxyMessageAck* other) {
  if (other != this) {
    std::swap(transmitdata_, other->transmitdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2STransmitRouteProxyMessageAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2STransmitRouteProxyMessageAck_descriptor_;
  metadata.reflection = S2STransmitRouteProxyMessageAck_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

// @@protoc_insertion_point(global_scope)
