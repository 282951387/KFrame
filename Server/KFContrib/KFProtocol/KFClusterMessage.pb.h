// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFClusterMessage.proto

#ifndef PROTOBUF_KFClusterMessage_2eproto__INCLUDED
#define PROTOBUF_KFClusterMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace KFMsg {

// Internal implementation detail -- do not call these.
void LIBPROTOC_EXPORT protobuf_AddDesc_KFClusterMessage_2eproto();
void protobuf_AssignDesc_KFClusterMessage_2eproto();
void protobuf_ShutdownFile_KFClusterMessage_2eproto();

class S2SClusterRegisterReq;
class S2SClusterUpdateReq;
class S2SClusterAuthReq;
class S2SClusterAuthAck;
class S2SClusterTokenReq;
class S2SClusterVerifyReq;
class S2SClusterVerifyAck;
class S2SClusterClientListReq;
class S2SAddObjectToProxyReq;
class S2SRemoveObjectToProxyReq;
class S2SSendToClusterObjectReq;
class S2SAllocObjectToMasterReq;
class S2SAllocObjectToProxyAck;
class S2SAllocObjectToShardAck;

enum ClusterProtocol {
  S2S_CLUSTER_REGISTER_REQ = 10101,
  S2S_CLUSTER_UPDATE_REQ = 10102,
  S2S_CLUSTER_AUTH_REQ = 10103,
  S2S_CLUSTER_AUTH_ACK = 10104,
  S2S_CLUSTER_TOKEN_REQ = 10105,
  S2S_CLUSTER_VERIFY_REQ = 10106,
  S2S_CLUSTER_VERIFY_ACK = 10107,
  S2S_CLUSTER_CLIENT_LIST_REQ = 10108,
  S2S_ADD_OBJECT_TO_PROXY_REQ = 10109,
  S2S_REMOVE_OBJECT_TO_PROXY_REQ = 10110,
  S2S_SEND_TO_CLUSTER_OBJECT_REQ = 10111,
  S2S_ALLOC_OBJECT_TO_MASTER_REQ = 10112,
  S2S_ALLOC_OBJECT_TO_PROXY_ACK = 10113,
  S2S_ALLOC_OBJECT_TO_SHARD_ACK = 10114
};
LIBPROTOC_EXPORT bool ClusterProtocol_IsValid(int value);
const ClusterProtocol ClusterProtocol_MIN = S2S_CLUSTER_REGISTER_REQ;
const ClusterProtocol ClusterProtocol_MAX = S2S_ALLOC_OBJECT_TO_SHARD_ACK;
const int ClusterProtocol_ARRAYSIZE = ClusterProtocol_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ClusterProtocol_descriptor();
inline const ::std::string& ClusterProtocol_Name(ClusterProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClusterProtocol_descriptor(), value);
}
inline bool ClusterProtocol_Parse(
    const ::std::string& name, ClusterProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClusterProtocol>(
    ClusterProtocol_descriptor(), name, value);
}
// ===================================================================

class LIBPROTOC_EXPORT S2SClusterRegisterReq : public ::google::protobuf::Message {
 public:
  S2SClusterRegisterReq();
  virtual ~S2SClusterRegisterReq();

  S2SClusterRegisterReq(const S2SClusterRegisterReq& from);

  inline S2SClusterRegisterReq& operator=(const S2SClusterRegisterReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SClusterRegisterReq& default_instance();

  void Swap(S2SClusterRegisterReq* other);

  // implements Message ----------------------------------------------

  S2SClusterRegisterReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SClusterRegisterReq& from);
  void MergeFrom(const S2SClusterRegisterReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required uint32 port = 5;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 5;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SClusterRegisterReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* type_;
  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 port_;
  ::std::string* ip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFClusterMessage_2eproto();
  friend void protobuf_AssignDesc_KFClusterMessage_2eproto();
  friend void protobuf_ShutdownFile_KFClusterMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SClusterRegisterReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SClusterUpdateReq : public ::google::protobuf::Message {
 public:
  S2SClusterUpdateReq();
  virtual ~S2SClusterUpdateReq();

  S2SClusterUpdateReq(const S2SClusterUpdateReq& from);

  inline S2SClusterUpdateReq& operator=(const S2SClusterUpdateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SClusterUpdateReq& default_instance();

  void Swap(S2SClusterUpdateReq* other);

  // implements Message ----------------------------------------------

  S2SClusterUpdateReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SClusterUpdateReq& from);
  void MergeFrom(const S2SClusterUpdateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gateid = 1;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 1;
  inline ::google::protobuf::uint32 gateid() const;
  inline void set_gateid(::google::protobuf::uint32 value);

  // required uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SClusterUpdateReq)
 private:
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 gateid_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFClusterMessage_2eproto();
  friend void protobuf_AssignDesc_KFClusterMessage_2eproto();
  friend void protobuf_ShutdownFile_KFClusterMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SClusterUpdateReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SClusterAuthReq : public ::google::protobuf::Message {
 public:
  S2SClusterAuthReq();
  virtual ~S2SClusterAuthReq();

  S2SClusterAuthReq(const S2SClusterAuthReq& from);

  inline S2SClusterAuthReq& operator=(const S2SClusterAuthReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SClusterAuthReq& default_instance();

  void Swap(S2SClusterAuthReq* other);

  // implements Message ----------------------------------------------

  S2SClusterAuthReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SClusterAuthReq& from);
  void MergeFrom(const S2SClusterAuthReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string clustertype = 1;
  inline bool has_clustertype() const;
  inline void clear_clustertype();
  static const int kClustertypeFieldNumber = 1;
  inline const ::std::string& clustertype() const;
  inline void set_clustertype(const ::std::string& value);
  inline void set_clustertype(const char* value);
  inline void set_clustertype(const char* value, size_t size);
  inline ::std::string* mutable_clustertype();
  inline ::std::string* release_clustertype();
  inline void set_allocated_clustertype(::std::string* clustertype);

  // required string clusterkey = 2;
  inline bool has_clusterkey() const;
  inline void clear_clusterkey();
  static const int kClusterkeyFieldNumber = 2;
  inline const ::std::string& clusterkey() const;
  inline void set_clusterkey(const ::std::string& value);
  inline void set_clusterkey(const char* value);
  inline void set_clusterkey(const char* value, size_t size);
  inline ::std::string* mutable_clusterkey();
  inline ::std::string* release_clusterkey();
  inline void set_allocated_clusterkey(::std::string* clusterkey);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SClusterAuthReq)
 private:
  inline void set_has_clustertype();
  inline void clear_has_clustertype();
  inline void set_has_clusterkey();
  inline void clear_has_clusterkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* clustertype_;
  ::std::string* clusterkey_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFClusterMessage_2eproto();
  friend void protobuf_AssignDesc_KFClusterMessage_2eproto();
  friend void protobuf_ShutdownFile_KFClusterMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SClusterAuthReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SClusterAuthAck : public ::google::protobuf::Message {
 public:
  S2SClusterAuthAck();
  virtual ~S2SClusterAuthAck();

  S2SClusterAuthAck(const S2SClusterAuthAck& from);

  inline S2SClusterAuthAck& operator=(const S2SClusterAuthAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SClusterAuthAck& default_instance();

  void Swap(S2SClusterAuthAck* other);

  // implements Message ----------------------------------------------

  S2SClusterAuthAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SClusterAuthAck& from);
  void MergeFrom(const S2SClusterAuthAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string clustertype = 1;
  inline bool has_clustertype() const;
  inline void clear_clustertype();
  static const int kClustertypeFieldNumber = 1;
  inline const ::std::string& clustertype() const;
  inline void set_clustertype(const ::std::string& value);
  inline void set_clustertype(const char* value);
  inline void set_clustertype(const char* value, size_t size);
  inline ::std::string* mutable_clustertype();
  inline ::std::string* release_clustertype();
  inline void set_allocated_clustertype(::std::string* clustertype);

  // required string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // required string type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required uint32 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string ip = 6;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 6;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required uint32 port = 7;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 7;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SClusterAuthAck)
 private:
  inline void set_has_clustertype();
  inline void clear_has_clustertype();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* clustertype_;
  ::std::string* token_;
  ::std::string* type_;
  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 port_;
  ::std::string* ip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFClusterMessage_2eproto();
  friend void protobuf_AssignDesc_KFClusterMessage_2eproto();
  friend void protobuf_ShutdownFile_KFClusterMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SClusterAuthAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SClusterTokenReq : public ::google::protobuf::Message {
 public:
  S2SClusterTokenReq();
  virtual ~S2SClusterTokenReq();

  S2SClusterTokenReq(const S2SClusterTokenReq& from);

  inline S2SClusterTokenReq& operator=(const S2SClusterTokenReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SClusterTokenReq& default_instance();

  void Swap(S2SClusterTokenReq* other);

  // implements Message ----------------------------------------------

  S2SClusterTokenReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SClusterTokenReq& from);
  void MergeFrom(const S2SClusterTokenReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // required uint32 gateid = 2;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 2;
  inline ::google::protobuf::uint32 gateid() const;
  inline void set_gateid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SClusterTokenReq)
 private:
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_gateid();
  inline void clear_has_gateid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* token_;
  ::google::protobuf::uint32 gateid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFClusterMessage_2eproto();
  friend void protobuf_AssignDesc_KFClusterMessage_2eproto();
  friend void protobuf_ShutdownFile_KFClusterMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SClusterTokenReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SClusterVerifyReq : public ::google::protobuf::Message {
 public:
  S2SClusterVerifyReq();
  virtual ~S2SClusterVerifyReq();

  S2SClusterVerifyReq(const S2SClusterVerifyReq& from);

  inline S2SClusterVerifyReq& operator=(const S2SClusterVerifyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SClusterVerifyReq& default_instance();

  void Swap(S2SClusterVerifyReq* other);

  // implements Message ----------------------------------------------

  S2SClusterVerifyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SClusterVerifyReq& from);
  void MergeFrom(const S2SClusterVerifyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string clustertype = 1;
  inline bool has_clustertype() const;
  inline void clear_clustertype();
  static const int kClustertypeFieldNumber = 1;
  inline const ::std::string& clustertype() const;
  inline void set_clustertype(const ::std::string& value);
  inline void set_clustertype(const char* value);
  inline void set_clustertype(const char* value, size_t size);
  inline ::std::string* mutable_clustertype();
  inline ::std::string* release_clustertype();
  inline void set_allocated_clustertype(::std::string* clustertype);

  // required string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // required uint32 serverid = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 3;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SClusterVerifyReq)
 private:
  inline void set_has_clustertype();
  inline void clear_has_clustertype();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* clustertype_;
  ::std::string* token_;
  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFClusterMessage_2eproto();
  friend void protobuf_AssignDesc_KFClusterMessage_2eproto();
  friend void protobuf_ShutdownFile_KFClusterMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SClusterVerifyReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SClusterVerifyAck : public ::google::protobuf::Message {
 public:
  S2SClusterVerifyAck();
  virtual ~S2SClusterVerifyAck();

  S2SClusterVerifyAck(const S2SClusterVerifyAck& from);

  inline S2SClusterVerifyAck& operator=(const S2SClusterVerifyAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SClusterVerifyAck& default_instance();

  void Swap(S2SClusterVerifyAck* other);

  // implements Message ----------------------------------------------

  S2SClusterVerifyAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SClusterVerifyAck& from);
  void MergeFrom(const S2SClusterVerifyAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string clustertype = 1;
  inline bool has_clustertype() const;
  inline void clear_clustertype();
  static const int kClustertypeFieldNumber = 1;
  inline const ::std::string& clustertype() const;
  inline void set_clustertype(const ::std::string& value);
  inline void set_clustertype(const char* value);
  inline void set_clustertype(const char* value, size_t size);
  inline ::std::string* mutable_clustertype();
  inline ::std::string* release_clustertype();
  inline void set_allocated_clustertype(::std::string* clustertype);

  // required uint32 serverid = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 2;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SClusterVerifyAck)
 private:
  inline void set_has_clustertype();
  inline void clear_has_clustertype();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* clustertype_;
  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFClusterMessage_2eproto();
  friend void protobuf_AssignDesc_KFClusterMessage_2eproto();
  friend void protobuf_ShutdownFile_KFClusterMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SClusterVerifyAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SClusterClientListReq : public ::google::protobuf::Message {
 public:
  S2SClusterClientListReq();
  virtual ~S2SClusterClientListReq();

  S2SClusterClientListReq(const S2SClusterClientListReq& from);

  inline S2SClusterClientListReq& operator=(const S2SClusterClientListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SClusterClientListReq& default_instance();

  void Swap(S2SClusterClientListReq* other);

  // implements Message ----------------------------------------------

  S2SClusterClientListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SClusterClientListReq& from);
  void MergeFrom(const S2SClusterClientListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 clientid = 1;
  inline int clientid_size() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 1;
  inline ::google::protobuf::uint32 clientid(int index) const;
  inline void set_clientid(int index, ::google::protobuf::uint32 value);
  inline void add_clientid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      clientid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_clientid();

  // @@protoc_insertion_point(class_scope:KFMsg.S2SClusterClientListReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > clientid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFClusterMessage_2eproto();
  friend void protobuf_AssignDesc_KFClusterMessage_2eproto();
  friend void protobuf_ShutdownFile_KFClusterMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SClusterClientListReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SAddObjectToProxyReq : public ::google::protobuf::Message {
 public:
  S2SAddObjectToProxyReq();
  virtual ~S2SAddObjectToProxyReq();

  S2SAddObjectToProxyReq(const S2SAddObjectToProxyReq& from);

  inline S2SAddObjectToProxyReq& operator=(const S2SAddObjectToProxyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SAddObjectToProxyReq& default_instance();

  void Swap(S2SAddObjectToProxyReq* other);

  // implements Message ----------------------------------------------

  S2SAddObjectToProxyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SAddObjectToProxyReq& from);
  void MergeFrom(const S2SAddObjectToProxyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 objectid = 1;
  inline int objectid_size() const;
  inline void clear_objectid();
  static const int kObjectidFieldNumber = 1;
  inline ::google::protobuf::uint64 objectid(int index) const;
  inline void set_objectid(int index, ::google::protobuf::uint64 value);
  inline void add_objectid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      objectid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_objectid();

  // @@protoc_insertion_point(class_scope:KFMsg.S2SAddObjectToProxyReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > objectid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFClusterMessage_2eproto();
  friend void protobuf_AssignDesc_KFClusterMessage_2eproto();
  friend void protobuf_ShutdownFile_KFClusterMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SAddObjectToProxyReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRemoveObjectToProxyReq : public ::google::protobuf::Message {
 public:
  S2SRemoveObjectToProxyReq();
  virtual ~S2SRemoveObjectToProxyReq();

  S2SRemoveObjectToProxyReq(const S2SRemoveObjectToProxyReq& from);

  inline S2SRemoveObjectToProxyReq& operator=(const S2SRemoveObjectToProxyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRemoveObjectToProxyReq& default_instance();

  void Swap(S2SRemoveObjectToProxyReq* other);

  // implements Message ----------------------------------------------

  S2SRemoveObjectToProxyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SRemoveObjectToProxyReq& from);
  void MergeFrom(const S2SRemoveObjectToProxyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 objectid = 2;
  inline int objectid_size() const;
  inline void clear_objectid();
  static const int kObjectidFieldNumber = 2;
  inline ::google::protobuf::uint64 objectid(int index) const;
  inline void set_objectid(int index, ::google::protobuf::uint64 value);
  inline void add_objectid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      objectid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_objectid();

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRemoveObjectToProxyReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > objectid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFClusterMessage_2eproto();
  friend void protobuf_AssignDesc_KFClusterMessage_2eproto();
  friend void protobuf_ShutdownFile_KFClusterMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SRemoveObjectToProxyReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SSendToClusterObjectReq : public ::google::protobuf::Message {
 public:
  S2SSendToClusterObjectReq();
  virtual ~S2SSendToClusterObjectReq();

  S2SSendToClusterObjectReq(const S2SSendToClusterObjectReq& from);

  inline S2SSendToClusterObjectReq& operator=(const S2SSendToClusterObjectReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SSendToClusterObjectReq& default_instance();

  void Swap(S2SSendToClusterObjectReq* other);

  // implements Message ----------------------------------------------

  S2SSendToClusterObjectReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SSendToClusterObjectReq& from);
  void MergeFrom(const S2SSendToClusterObjectReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 objectid = 1;
  inline bool has_objectid() const;
  inline void clear_objectid();
  static const int kObjectidFieldNumber = 1;
  inline ::google::protobuf::uint64 objectid() const;
  inline void set_objectid(::google::protobuf::uint64 value);

  // required uint32 msgid = 2;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 2;
  inline ::google::protobuf::uint32 msgid() const;
  inline void set_msgid(::google::protobuf::uint32 value);

  // required string msgdata = 3;
  inline bool has_msgdata() const;
  inline void clear_msgdata();
  static const int kMsgdataFieldNumber = 3;
  inline const ::std::string& msgdata() const;
  inline void set_msgdata(const ::std::string& value);
  inline void set_msgdata(const char* value);
  inline void set_msgdata(const char* value, size_t size);
  inline ::std::string* mutable_msgdata();
  inline ::std::string* release_msgdata();
  inline void set_allocated_msgdata(::std::string* msgdata);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SSendToClusterObjectReq)
 private:
  inline void set_has_objectid();
  inline void clear_has_objectid();
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_msgdata();
  inline void clear_has_msgdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 objectid_;
  ::std::string* msgdata_;
  ::google::protobuf::uint32 msgid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFClusterMessage_2eproto();
  friend void protobuf_AssignDesc_KFClusterMessage_2eproto();
  friend void protobuf_ShutdownFile_KFClusterMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SSendToClusterObjectReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SAllocObjectToMasterReq : public ::google::protobuf::Message {
 public:
  S2SAllocObjectToMasterReq();
  virtual ~S2SAllocObjectToMasterReq();

  S2SAllocObjectToMasterReq(const S2SAllocObjectToMasterReq& from);

  inline S2SAllocObjectToMasterReq& operator=(const S2SAllocObjectToMasterReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SAllocObjectToMasterReq& default_instance();

  void Swap(S2SAllocObjectToMasterReq* other);

  // implements Message ----------------------------------------------

  S2SAllocObjectToMasterReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SAllocObjectToMasterReq& from);
  void MergeFrom(const S2SAllocObjectToMasterReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 objectid = 1;
  inline int objectid_size() const;
  inline void clear_objectid();
  static const int kObjectidFieldNumber = 1;
  inline ::google::protobuf::uint64 objectid(int index) const;
  inline void set_objectid(int index, ::google::protobuf::uint64 value);
  inline void add_objectid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      objectid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_objectid();

  // @@protoc_insertion_point(class_scope:KFMsg.S2SAllocObjectToMasterReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > objectid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFClusterMessage_2eproto();
  friend void protobuf_AssignDesc_KFClusterMessage_2eproto();
  friend void protobuf_ShutdownFile_KFClusterMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SAllocObjectToMasterReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SAllocObjectToProxyAck : public ::google::protobuf::Message {
 public:
  S2SAllocObjectToProxyAck();
  virtual ~S2SAllocObjectToProxyAck();

  S2SAllocObjectToProxyAck(const S2SAllocObjectToProxyAck& from);

  inline S2SAllocObjectToProxyAck& operator=(const S2SAllocObjectToProxyAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SAllocObjectToProxyAck& default_instance();

  void Swap(S2SAllocObjectToProxyAck* other);

  // implements Message ----------------------------------------------

  S2SAllocObjectToProxyAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SAllocObjectToProxyAck& from);
  void MergeFrom(const S2SAllocObjectToProxyAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 objectid = 1;
  inline int objectid_size() const;
  inline void clear_objectid();
  static const int kObjectidFieldNumber = 1;
  inline ::google::protobuf::uint64 objectid(int index) const;
  inline void set_objectid(int index, ::google::protobuf::uint64 value);
  inline void add_objectid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      objectid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_objectid();

  // repeated uint32 shardid = 2;
  inline int shardid_size() const;
  inline void clear_shardid();
  static const int kShardidFieldNumber = 2;
  inline ::google::protobuf::uint32 shardid(int index) const;
  inline void set_shardid(int index, ::google::protobuf::uint32 value);
  inline void add_shardid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      shardid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_shardid();

  // @@protoc_insertion_point(class_scope:KFMsg.S2SAllocObjectToProxyAck)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > objectid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > shardid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFClusterMessage_2eproto();
  friend void protobuf_AssignDesc_KFClusterMessage_2eproto();
  friend void protobuf_ShutdownFile_KFClusterMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SAllocObjectToProxyAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SAllocObjectToShardAck : public ::google::protobuf::Message {
 public:
  S2SAllocObjectToShardAck();
  virtual ~S2SAllocObjectToShardAck();

  S2SAllocObjectToShardAck(const S2SAllocObjectToShardAck& from);

  inline S2SAllocObjectToShardAck& operator=(const S2SAllocObjectToShardAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SAllocObjectToShardAck& default_instance();

  void Swap(S2SAllocObjectToShardAck* other);

  // implements Message ----------------------------------------------

  S2SAllocObjectToShardAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SAllocObjectToShardAck& from);
  void MergeFrom(const S2SAllocObjectToShardAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 objectid = 1;
  inline int objectid_size() const;
  inline void clear_objectid();
  static const int kObjectidFieldNumber = 1;
  inline ::google::protobuf::uint64 objectid(int index) const;
  inline void set_objectid(int index, ::google::protobuf::uint64 value);
  inline void add_objectid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      objectid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_objectid();

  // @@protoc_insertion_point(class_scope:KFMsg.S2SAllocObjectToShardAck)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > objectid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFClusterMessage_2eproto();
  friend void protobuf_AssignDesc_KFClusterMessage_2eproto();
  friend void protobuf_ShutdownFile_KFClusterMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SAllocObjectToShardAck* default_instance_;
};
// ===================================================================


// ===================================================================

// S2SClusterRegisterReq

// required string type = 1;
inline bool S2SClusterRegisterReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SClusterRegisterReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SClusterRegisterReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SClusterRegisterReq::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& S2SClusterRegisterReq::type() const {
  return *type_;
}
inline void S2SClusterRegisterReq::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void S2SClusterRegisterReq::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void S2SClusterRegisterReq::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SClusterRegisterReq::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* S2SClusterRegisterReq::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SClusterRegisterReq::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 id = 2;
inline bool S2SClusterRegisterReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SClusterRegisterReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SClusterRegisterReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SClusterRegisterReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 S2SClusterRegisterReq::id() const {
  return id_;
}
inline void S2SClusterRegisterReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 3;
inline bool S2SClusterRegisterReq::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SClusterRegisterReq::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SClusterRegisterReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SClusterRegisterReq::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& S2SClusterRegisterReq::name() const {
  return *name_;
}
inline void S2SClusterRegisterReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void S2SClusterRegisterReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void S2SClusterRegisterReq::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SClusterRegisterReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* S2SClusterRegisterReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SClusterRegisterReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ip = 4;
inline bool S2SClusterRegisterReq::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SClusterRegisterReq::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SClusterRegisterReq::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SClusterRegisterReq::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& S2SClusterRegisterReq::ip() const {
  return *ip_;
}
inline void S2SClusterRegisterReq::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SClusterRegisterReq::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SClusterRegisterReq::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SClusterRegisterReq::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* S2SClusterRegisterReq::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SClusterRegisterReq::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 port = 5;
inline bool S2SClusterRegisterReq::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SClusterRegisterReq::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SClusterRegisterReq::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SClusterRegisterReq::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 S2SClusterRegisterReq::port() const {
  return port_;
}
inline void S2SClusterRegisterReq::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// S2SClusterUpdateReq

// required uint32 gateid = 1;
inline bool S2SClusterUpdateReq::has_gateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SClusterUpdateReq::set_has_gateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SClusterUpdateReq::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SClusterUpdateReq::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 S2SClusterUpdateReq::gateid() const {
  return gateid_;
}
inline void S2SClusterUpdateReq::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
}

// required uint32 count = 2;
inline bool S2SClusterUpdateReq::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SClusterUpdateReq::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SClusterUpdateReq::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SClusterUpdateReq::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 S2SClusterUpdateReq::count() const {
  return count_;
}
inline void S2SClusterUpdateReq::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// S2SClusterAuthReq

// required string clustertype = 1;
inline bool S2SClusterAuthReq::has_clustertype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SClusterAuthReq::set_has_clustertype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SClusterAuthReq::clear_has_clustertype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SClusterAuthReq::clear_clustertype() {
  if (clustertype_ != &::google::protobuf::internal::kEmptyString) {
    clustertype_->clear();
  }
  clear_has_clustertype();
}
inline const ::std::string& S2SClusterAuthReq::clustertype() const {
  return *clustertype_;
}
inline void S2SClusterAuthReq::set_clustertype(const ::std::string& value) {
  set_has_clustertype();
  if (clustertype_ == &::google::protobuf::internal::kEmptyString) {
    clustertype_ = new ::std::string;
  }
  clustertype_->assign(value);
}
inline void S2SClusterAuthReq::set_clustertype(const char* value) {
  set_has_clustertype();
  if (clustertype_ == &::google::protobuf::internal::kEmptyString) {
    clustertype_ = new ::std::string;
  }
  clustertype_->assign(value);
}
inline void S2SClusterAuthReq::set_clustertype(const char* value, size_t size) {
  set_has_clustertype();
  if (clustertype_ == &::google::protobuf::internal::kEmptyString) {
    clustertype_ = new ::std::string;
  }
  clustertype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SClusterAuthReq::mutable_clustertype() {
  set_has_clustertype();
  if (clustertype_ == &::google::protobuf::internal::kEmptyString) {
    clustertype_ = new ::std::string;
  }
  return clustertype_;
}
inline ::std::string* S2SClusterAuthReq::release_clustertype() {
  clear_has_clustertype();
  if (clustertype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clustertype_;
    clustertype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SClusterAuthReq::set_allocated_clustertype(::std::string* clustertype) {
  if (clustertype_ != &::google::protobuf::internal::kEmptyString) {
    delete clustertype_;
  }
  if (clustertype) {
    set_has_clustertype();
    clustertype_ = clustertype;
  } else {
    clear_has_clustertype();
    clustertype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string clusterkey = 2;
inline bool S2SClusterAuthReq::has_clusterkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SClusterAuthReq::set_has_clusterkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SClusterAuthReq::clear_has_clusterkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SClusterAuthReq::clear_clusterkey() {
  if (clusterkey_ != &::google::protobuf::internal::kEmptyString) {
    clusterkey_->clear();
  }
  clear_has_clusterkey();
}
inline const ::std::string& S2SClusterAuthReq::clusterkey() const {
  return *clusterkey_;
}
inline void S2SClusterAuthReq::set_clusterkey(const ::std::string& value) {
  set_has_clusterkey();
  if (clusterkey_ == &::google::protobuf::internal::kEmptyString) {
    clusterkey_ = new ::std::string;
  }
  clusterkey_->assign(value);
}
inline void S2SClusterAuthReq::set_clusterkey(const char* value) {
  set_has_clusterkey();
  if (clusterkey_ == &::google::protobuf::internal::kEmptyString) {
    clusterkey_ = new ::std::string;
  }
  clusterkey_->assign(value);
}
inline void S2SClusterAuthReq::set_clusterkey(const char* value, size_t size) {
  set_has_clusterkey();
  if (clusterkey_ == &::google::protobuf::internal::kEmptyString) {
    clusterkey_ = new ::std::string;
  }
  clusterkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SClusterAuthReq::mutable_clusterkey() {
  set_has_clusterkey();
  if (clusterkey_ == &::google::protobuf::internal::kEmptyString) {
    clusterkey_ = new ::std::string;
  }
  return clusterkey_;
}
inline ::std::string* S2SClusterAuthReq::release_clusterkey() {
  clear_has_clusterkey();
  if (clusterkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clusterkey_;
    clusterkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SClusterAuthReq::set_allocated_clusterkey(::std::string* clusterkey) {
  if (clusterkey_ != &::google::protobuf::internal::kEmptyString) {
    delete clusterkey_;
  }
  if (clusterkey) {
    set_has_clusterkey();
    clusterkey_ = clusterkey;
  } else {
    clear_has_clusterkey();
    clusterkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2SClusterAuthAck

// required string clustertype = 1;
inline bool S2SClusterAuthAck::has_clustertype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SClusterAuthAck::set_has_clustertype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SClusterAuthAck::clear_has_clustertype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SClusterAuthAck::clear_clustertype() {
  if (clustertype_ != &::google::protobuf::internal::kEmptyString) {
    clustertype_->clear();
  }
  clear_has_clustertype();
}
inline const ::std::string& S2SClusterAuthAck::clustertype() const {
  return *clustertype_;
}
inline void S2SClusterAuthAck::set_clustertype(const ::std::string& value) {
  set_has_clustertype();
  if (clustertype_ == &::google::protobuf::internal::kEmptyString) {
    clustertype_ = new ::std::string;
  }
  clustertype_->assign(value);
}
inline void S2SClusterAuthAck::set_clustertype(const char* value) {
  set_has_clustertype();
  if (clustertype_ == &::google::protobuf::internal::kEmptyString) {
    clustertype_ = new ::std::string;
  }
  clustertype_->assign(value);
}
inline void S2SClusterAuthAck::set_clustertype(const char* value, size_t size) {
  set_has_clustertype();
  if (clustertype_ == &::google::protobuf::internal::kEmptyString) {
    clustertype_ = new ::std::string;
  }
  clustertype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SClusterAuthAck::mutable_clustertype() {
  set_has_clustertype();
  if (clustertype_ == &::google::protobuf::internal::kEmptyString) {
    clustertype_ = new ::std::string;
  }
  return clustertype_;
}
inline ::std::string* S2SClusterAuthAck::release_clustertype() {
  clear_has_clustertype();
  if (clustertype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clustertype_;
    clustertype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SClusterAuthAck::set_allocated_clustertype(::std::string* clustertype) {
  if (clustertype_ != &::google::protobuf::internal::kEmptyString) {
    delete clustertype_;
  }
  if (clustertype) {
    set_has_clustertype();
    clustertype_ = clustertype;
  } else {
    clear_has_clustertype();
    clustertype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string token = 2;
inline bool S2SClusterAuthAck::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SClusterAuthAck::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SClusterAuthAck::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SClusterAuthAck::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& S2SClusterAuthAck::token() const {
  return *token_;
}
inline void S2SClusterAuthAck::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SClusterAuthAck::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SClusterAuthAck::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SClusterAuthAck::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* S2SClusterAuthAck::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SClusterAuthAck::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string type = 3;
inline bool S2SClusterAuthAck::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SClusterAuthAck::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SClusterAuthAck::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SClusterAuthAck::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& S2SClusterAuthAck::type() const {
  return *type_;
}
inline void S2SClusterAuthAck::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void S2SClusterAuthAck::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void S2SClusterAuthAck::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SClusterAuthAck::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* S2SClusterAuthAck::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SClusterAuthAck::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 id = 4;
inline bool S2SClusterAuthAck::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SClusterAuthAck::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SClusterAuthAck::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SClusterAuthAck::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 S2SClusterAuthAck::id() const {
  return id_;
}
inline void S2SClusterAuthAck::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 5;
inline bool S2SClusterAuthAck::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SClusterAuthAck::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SClusterAuthAck::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SClusterAuthAck::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& S2SClusterAuthAck::name() const {
  return *name_;
}
inline void S2SClusterAuthAck::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void S2SClusterAuthAck::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void S2SClusterAuthAck::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SClusterAuthAck::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* S2SClusterAuthAck::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SClusterAuthAck::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ip = 6;
inline bool S2SClusterAuthAck::has_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void S2SClusterAuthAck::set_has_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void S2SClusterAuthAck::clear_has_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void S2SClusterAuthAck::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& S2SClusterAuthAck::ip() const {
  return *ip_;
}
inline void S2SClusterAuthAck::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SClusterAuthAck::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SClusterAuthAck::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SClusterAuthAck::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* S2SClusterAuthAck::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SClusterAuthAck::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 port = 7;
inline bool S2SClusterAuthAck::has_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void S2SClusterAuthAck::set_has_port() {
  _has_bits_[0] |= 0x00000040u;
}
inline void S2SClusterAuthAck::clear_has_port() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void S2SClusterAuthAck::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 S2SClusterAuthAck::port() const {
  return port_;
}
inline void S2SClusterAuthAck::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// S2SClusterTokenReq

// required string token = 1;
inline bool S2SClusterTokenReq::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SClusterTokenReq::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SClusterTokenReq::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SClusterTokenReq::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& S2SClusterTokenReq::token() const {
  return *token_;
}
inline void S2SClusterTokenReq::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SClusterTokenReq::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SClusterTokenReq::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SClusterTokenReq::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* S2SClusterTokenReq::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SClusterTokenReq::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 gateid = 2;
inline bool S2SClusterTokenReq::has_gateid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SClusterTokenReq::set_has_gateid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SClusterTokenReq::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SClusterTokenReq::clear_gateid() {
  gateid_ = 0u;
  clear_has_gateid();
}
inline ::google::protobuf::uint32 S2SClusterTokenReq::gateid() const {
  return gateid_;
}
inline void S2SClusterTokenReq::set_gateid(::google::protobuf::uint32 value) {
  set_has_gateid();
  gateid_ = value;
}

// -------------------------------------------------------------------

// S2SClusterVerifyReq

// required string clustertype = 1;
inline bool S2SClusterVerifyReq::has_clustertype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SClusterVerifyReq::set_has_clustertype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SClusterVerifyReq::clear_has_clustertype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SClusterVerifyReq::clear_clustertype() {
  if (clustertype_ != &::google::protobuf::internal::kEmptyString) {
    clustertype_->clear();
  }
  clear_has_clustertype();
}
inline const ::std::string& S2SClusterVerifyReq::clustertype() const {
  return *clustertype_;
}
inline void S2SClusterVerifyReq::set_clustertype(const ::std::string& value) {
  set_has_clustertype();
  if (clustertype_ == &::google::protobuf::internal::kEmptyString) {
    clustertype_ = new ::std::string;
  }
  clustertype_->assign(value);
}
inline void S2SClusterVerifyReq::set_clustertype(const char* value) {
  set_has_clustertype();
  if (clustertype_ == &::google::protobuf::internal::kEmptyString) {
    clustertype_ = new ::std::string;
  }
  clustertype_->assign(value);
}
inline void S2SClusterVerifyReq::set_clustertype(const char* value, size_t size) {
  set_has_clustertype();
  if (clustertype_ == &::google::protobuf::internal::kEmptyString) {
    clustertype_ = new ::std::string;
  }
  clustertype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SClusterVerifyReq::mutable_clustertype() {
  set_has_clustertype();
  if (clustertype_ == &::google::protobuf::internal::kEmptyString) {
    clustertype_ = new ::std::string;
  }
  return clustertype_;
}
inline ::std::string* S2SClusterVerifyReq::release_clustertype() {
  clear_has_clustertype();
  if (clustertype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clustertype_;
    clustertype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SClusterVerifyReq::set_allocated_clustertype(::std::string* clustertype) {
  if (clustertype_ != &::google::protobuf::internal::kEmptyString) {
    delete clustertype_;
  }
  if (clustertype) {
    set_has_clustertype();
    clustertype_ = clustertype;
  } else {
    clear_has_clustertype();
    clustertype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string token = 2;
inline bool S2SClusterVerifyReq::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SClusterVerifyReq::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SClusterVerifyReq::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SClusterVerifyReq::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& S2SClusterVerifyReq::token() const {
  return *token_;
}
inline void S2SClusterVerifyReq::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SClusterVerifyReq::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SClusterVerifyReq::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SClusterVerifyReq::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* S2SClusterVerifyReq::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SClusterVerifyReq::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 serverid = 3;
inline bool S2SClusterVerifyReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SClusterVerifyReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SClusterVerifyReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SClusterVerifyReq::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2SClusterVerifyReq::serverid() const {
  return serverid_;
}
inline void S2SClusterVerifyReq::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// S2SClusterVerifyAck

// required string clustertype = 1;
inline bool S2SClusterVerifyAck::has_clustertype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SClusterVerifyAck::set_has_clustertype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SClusterVerifyAck::clear_has_clustertype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SClusterVerifyAck::clear_clustertype() {
  if (clustertype_ != &::google::protobuf::internal::kEmptyString) {
    clustertype_->clear();
  }
  clear_has_clustertype();
}
inline const ::std::string& S2SClusterVerifyAck::clustertype() const {
  return *clustertype_;
}
inline void S2SClusterVerifyAck::set_clustertype(const ::std::string& value) {
  set_has_clustertype();
  if (clustertype_ == &::google::protobuf::internal::kEmptyString) {
    clustertype_ = new ::std::string;
  }
  clustertype_->assign(value);
}
inline void S2SClusterVerifyAck::set_clustertype(const char* value) {
  set_has_clustertype();
  if (clustertype_ == &::google::protobuf::internal::kEmptyString) {
    clustertype_ = new ::std::string;
  }
  clustertype_->assign(value);
}
inline void S2SClusterVerifyAck::set_clustertype(const char* value, size_t size) {
  set_has_clustertype();
  if (clustertype_ == &::google::protobuf::internal::kEmptyString) {
    clustertype_ = new ::std::string;
  }
  clustertype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SClusterVerifyAck::mutable_clustertype() {
  set_has_clustertype();
  if (clustertype_ == &::google::protobuf::internal::kEmptyString) {
    clustertype_ = new ::std::string;
  }
  return clustertype_;
}
inline ::std::string* S2SClusterVerifyAck::release_clustertype() {
  clear_has_clustertype();
  if (clustertype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clustertype_;
    clustertype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SClusterVerifyAck::set_allocated_clustertype(::std::string* clustertype) {
  if (clustertype_ != &::google::protobuf::internal::kEmptyString) {
    delete clustertype_;
  }
  if (clustertype) {
    set_has_clustertype();
    clustertype_ = clustertype;
  } else {
    clear_has_clustertype();
    clustertype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 serverid = 2;
inline bool S2SClusterVerifyAck::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SClusterVerifyAck::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SClusterVerifyAck::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SClusterVerifyAck::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2SClusterVerifyAck::serverid() const {
  return serverid_;
}
inline void S2SClusterVerifyAck::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// S2SClusterClientListReq

// repeated uint32 clientid = 1;
inline int S2SClusterClientListReq::clientid_size() const {
  return clientid_.size();
}
inline void S2SClusterClientListReq::clear_clientid() {
  clientid_.Clear();
}
inline ::google::protobuf::uint32 S2SClusterClientListReq::clientid(int index) const {
  return clientid_.Get(index);
}
inline void S2SClusterClientListReq::set_clientid(int index, ::google::protobuf::uint32 value) {
  clientid_.Set(index, value);
}
inline void S2SClusterClientListReq::add_clientid(::google::protobuf::uint32 value) {
  clientid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
S2SClusterClientListReq::clientid() const {
  return clientid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
S2SClusterClientListReq::mutable_clientid() {
  return &clientid_;
}

// -------------------------------------------------------------------

// S2SAddObjectToProxyReq

// repeated uint64 objectid = 1;
inline int S2SAddObjectToProxyReq::objectid_size() const {
  return objectid_.size();
}
inline void S2SAddObjectToProxyReq::clear_objectid() {
  objectid_.Clear();
}
inline ::google::protobuf::uint64 S2SAddObjectToProxyReq::objectid(int index) const {
  return objectid_.Get(index);
}
inline void S2SAddObjectToProxyReq::set_objectid(int index, ::google::protobuf::uint64 value) {
  objectid_.Set(index, value);
}
inline void S2SAddObjectToProxyReq::add_objectid(::google::protobuf::uint64 value) {
  objectid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
S2SAddObjectToProxyReq::objectid() const {
  return objectid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
S2SAddObjectToProxyReq::mutable_objectid() {
  return &objectid_;
}

// -------------------------------------------------------------------

// S2SRemoveObjectToProxyReq

// repeated uint64 objectid = 2;
inline int S2SRemoveObjectToProxyReq::objectid_size() const {
  return objectid_.size();
}
inline void S2SRemoveObjectToProxyReq::clear_objectid() {
  objectid_.Clear();
}
inline ::google::protobuf::uint64 S2SRemoveObjectToProxyReq::objectid(int index) const {
  return objectid_.Get(index);
}
inline void S2SRemoveObjectToProxyReq::set_objectid(int index, ::google::protobuf::uint64 value) {
  objectid_.Set(index, value);
}
inline void S2SRemoveObjectToProxyReq::add_objectid(::google::protobuf::uint64 value) {
  objectid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
S2SRemoveObjectToProxyReq::objectid() const {
  return objectid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
S2SRemoveObjectToProxyReq::mutable_objectid() {
  return &objectid_;
}

// -------------------------------------------------------------------

// S2SSendToClusterObjectReq

// required uint64 objectid = 1;
inline bool S2SSendToClusterObjectReq::has_objectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SSendToClusterObjectReq::set_has_objectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SSendToClusterObjectReq::clear_has_objectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SSendToClusterObjectReq::clear_objectid() {
  objectid_ = GOOGLE_ULONGLONG(0);
  clear_has_objectid();
}
inline ::google::protobuf::uint64 S2SSendToClusterObjectReq::objectid() const {
  return objectid_;
}
inline void S2SSendToClusterObjectReq::set_objectid(::google::protobuf::uint64 value) {
  set_has_objectid();
  objectid_ = value;
}

// required uint32 msgid = 2;
inline bool S2SSendToClusterObjectReq::has_msgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SSendToClusterObjectReq::set_has_msgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SSendToClusterObjectReq::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SSendToClusterObjectReq::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 S2SSendToClusterObjectReq::msgid() const {
  return msgid_;
}
inline void S2SSendToClusterObjectReq::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
}

// required string msgdata = 3;
inline bool S2SSendToClusterObjectReq::has_msgdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SSendToClusterObjectReq::set_has_msgdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SSendToClusterObjectReq::clear_has_msgdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SSendToClusterObjectReq::clear_msgdata() {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    msgdata_->clear();
  }
  clear_has_msgdata();
}
inline const ::std::string& S2SSendToClusterObjectReq::msgdata() const {
  return *msgdata_;
}
inline void S2SSendToClusterObjectReq::set_msgdata(const ::std::string& value) {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  msgdata_->assign(value);
}
inline void S2SSendToClusterObjectReq::set_msgdata(const char* value) {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  msgdata_->assign(value);
}
inline void S2SSendToClusterObjectReq::set_msgdata(const char* value, size_t size) {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  msgdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SSendToClusterObjectReq::mutable_msgdata() {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  return msgdata_;
}
inline ::std::string* S2SSendToClusterObjectReq::release_msgdata() {
  clear_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msgdata_;
    msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SSendToClusterObjectReq::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    delete msgdata_;
  }
  if (msgdata) {
    set_has_msgdata();
    msgdata_ = msgdata;
  } else {
    clear_has_msgdata();
    msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2SAllocObjectToMasterReq

// repeated uint64 objectid = 1;
inline int S2SAllocObjectToMasterReq::objectid_size() const {
  return objectid_.size();
}
inline void S2SAllocObjectToMasterReq::clear_objectid() {
  objectid_.Clear();
}
inline ::google::protobuf::uint64 S2SAllocObjectToMasterReq::objectid(int index) const {
  return objectid_.Get(index);
}
inline void S2SAllocObjectToMasterReq::set_objectid(int index, ::google::protobuf::uint64 value) {
  objectid_.Set(index, value);
}
inline void S2SAllocObjectToMasterReq::add_objectid(::google::protobuf::uint64 value) {
  objectid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
S2SAllocObjectToMasterReq::objectid() const {
  return objectid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
S2SAllocObjectToMasterReq::mutable_objectid() {
  return &objectid_;
}

// -------------------------------------------------------------------

// S2SAllocObjectToProxyAck

// repeated uint64 objectid = 1;
inline int S2SAllocObjectToProxyAck::objectid_size() const {
  return objectid_.size();
}
inline void S2SAllocObjectToProxyAck::clear_objectid() {
  objectid_.Clear();
}
inline ::google::protobuf::uint64 S2SAllocObjectToProxyAck::objectid(int index) const {
  return objectid_.Get(index);
}
inline void S2SAllocObjectToProxyAck::set_objectid(int index, ::google::protobuf::uint64 value) {
  objectid_.Set(index, value);
}
inline void S2SAllocObjectToProxyAck::add_objectid(::google::protobuf::uint64 value) {
  objectid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
S2SAllocObjectToProxyAck::objectid() const {
  return objectid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
S2SAllocObjectToProxyAck::mutable_objectid() {
  return &objectid_;
}

// repeated uint32 shardid = 2;
inline int S2SAllocObjectToProxyAck::shardid_size() const {
  return shardid_.size();
}
inline void S2SAllocObjectToProxyAck::clear_shardid() {
  shardid_.Clear();
}
inline ::google::protobuf::uint32 S2SAllocObjectToProxyAck::shardid(int index) const {
  return shardid_.Get(index);
}
inline void S2SAllocObjectToProxyAck::set_shardid(int index, ::google::protobuf::uint32 value) {
  shardid_.Set(index, value);
}
inline void S2SAllocObjectToProxyAck::add_shardid(::google::protobuf::uint32 value) {
  shardid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
S2SAllocObjectToProxyAck::shardid() const {
  return shardid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
S2SAllocObjectToProxyAck::mutable_shardid() {
  return &shardid_;
}

// -------------------------------------------------------------------

// S2SAllocObjectToShardAck

// repeated uint64 objectid = 1;
inline int S2SAllocObjectToShardAck::objectid_size() const {
  return objectid_.size();
}
inline void S2SAllocObjectToShardAck::clear_objectid() {
  objectid_.Clear();
}
inline ::google::protobuf::uint64 S2SAllocObjectToShardAck::objectid(int index) const {
  return objectid_.Get(index);
}
inline void S2SAllocObjectToShardAck::set_objectid(int index, ::google::protobuf::uint64 value) {
  objectid_.Set(index, value);
}
inline void S2SAllocObjectToShardAck::add_objectid(::google::protobuf::uint64 value) {
  objectid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
S2SAllocObjectToShardAck::objectid() const {
  return objectid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
S2SAllocObjectToShardAck::mutable_objectid() {
  return &objectid_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::ClusterProtocol>() {
  return ::KFMsg::ClusterProtocol_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_KFClusterMessage_2eproto__INCLUDED
