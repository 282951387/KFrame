// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFDeployMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "KFDeployMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KFMsg {

namespace {

const ::google::protobuf::Descriptor* S2SRegisterAgentToServerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SRegisterAgentToServerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SGetAgentIpAddressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SGetAgentIpAddressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SGetAgentIpAddressAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SGetAgentIpAddressAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SUpdateServerStatusReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SUpdateServerStatusReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SStartupServerToAgentReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SStartupServerToAgentReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SShutDownServerToAgentReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SShutDownServerToAgentReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SShutDownServerToMasterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SShutDownServerToMasterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SShutDownServerToServerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SShutDownServerToServerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SKillServerToAgentReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SKillServerToAgentReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SUpdateServerToAgentReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SUpdateServerToAgentReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SRestartServerToAgentReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SRestartServerToAgentReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DeployProtocol_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_KFDeployMessage_2eproto() {
  protobuf_AddDesc_KFDeployMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "KFDeployMessage.proto");
  GOOGLE_CHECK(file != NULL);
  S2SRegisterAgentToServerReq_descriptor_ = file->message_type(0);
  static const int S2SRegisterAgentToServerReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterAgentToServerReq, agentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterAgentToServerReq, localip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterAgentToServerReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterAgentToServerReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterAgentToServerReq, port_),
  };
  S2SRegisterAgentToServerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SRegisterAgentToServerReq_descriptor_,
      S2SRegisterAgentToServerReq::default_instance_,
      S2SRegisterAgentToServerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterAgentToServerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterAgentToServerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SRegisterAgentToServerReq));
  S2SGetAgentIpAddressReq_descriptor_ = file->message_type(1);
  static const int S2SGetAgentIpAddressReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGetAgentIpAddressReq, localip_),
  };
  S2SGetAgentIpAddressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SGetAgentIpAddressReq_descriptor_,
      S2SGetAgentIpAddressReq::default_instance_,
      S2SGetAgentIpAddressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGetAgentIpAddressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGetAgentIpAddressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SGetAgentIpAddressReq));
  S2SGetAgentIpAddressAck_descriptor_ = file->message_type(2);
  static const int S2SGetAgentIpAddressAck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGetAgentIpAddressAck, appname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGetAgentIpAddressAck, apptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGetAgentIpAddressAck, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGetAgentIpAddressAck, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGetAgentIpAddressAck, port_),
  };
  S2SGetAgentIpAddressAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SGetAgentIpAddressAck_descriptor_,
      S2SGetAgentIpAddressAck::default_instance_,
      S2SGetAgentIpAddressAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGetAgentIpAddressAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGetAgentIpAddressAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SGetAgentIpAddressAck));
  S2SUpdateServerStatusReq_descriptor_ = file->message_type(3);
  static const int S2SUpdateServerStatusReq_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateServerStatusReq, agentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateServerStatusReq, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateServerStatusReq, appname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateServerStatusReq, apptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateServerStatusReq, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateServerStatusReq, process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateServerStatusReq, startuptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateServerStatusReq, isshutdown_),
  };
  S2SUpdateServerStatusReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SUpdateServerStatusReq_descriptor_,
      S2SUpdateServerStatusReq::default_instance_,
      S2SUpdateServerStatusReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateServerStatusReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateServerStatusReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SUpdateServerStatusReq));
  S2SStartupServerToAgentReq_descriptor_ = file->message_type(4);
  static const int S2SStartupServerToAgentReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SStartupServerToAgentReq, appname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SStartupServerToAgentReq, apptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SStartupServerToAgentReq, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SStartupServerToAgentReq, zoneid_),
  };
  S2SStartupServerToAgentReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SStartupServerToAgentReq_descriptor_,
      S2SStartupServerToAgentReq::default_instance_,
      S2SStartupServerToAgentReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SStartupServerToAgentReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SStartupServerToAgentReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SStartupServerToAgentReq));
  S2SShutDownServerToAgentReq_descriptor_ = file->message_type(5);
  static const int S2SShutDownServerToAgentReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SShutDownServerToAgentReq, appname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SShutDownServerToAgentReq, apptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SShutDownServerToAgentReq, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SShutDownServerToAgentReq, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SShutDownServerToAgentReq, delaytime_),
  };
  S2SShutDownServerToAgentReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SShutDownServerToAgentReq_descriptor_,
      S2SShutDownServerToAgentReq::default_instance_,
      S2SShutDownServerToAgentReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SShutDownServerToAgentReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SShutDownServerToAgentReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SShutDownServerToAgentReq));
  S2SShutDownServerToMasterReq_descriptor_ = file->message_type(6);
  static const int S2SShutDownServerToMasterReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SShutDownServerToMasterReq, appname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SShutDownServerToMasterReq, apptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SShutDownServerToMasterReq, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SShutDownServerToMasterReq, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SShutDownServerToMasterReq, delaytime_),
  };
  S2SShutDownServerToMasterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SShutDownServerToMasterReq_descriptor_,
      S2SShutDownServerToMasterReq::default_instance_,
      S2SShutDownServerToMasterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SShutDownServerToMasterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SShutDownServerToMasterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SShutDownServerToMasterReq));
  S2SShutDownServerToServerReq_descriptor_ = file->message_type(7);
  static const int S2SShutDownServerToServerReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SShutDownServerToServerReq, appname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SShutDownServerToServerReq, apptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SShutDownServerToServerReq, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SShutDownServerToServerReq, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SShutDownServerToServerReq, delaytime_),
  };
  S2SShutDownServerToServerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SShutDownServerToServerReq_descriptor_,
      S2SShutDownServerToServerReq::default_instance_,
      S2SShutDownServerToServerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SShutDownServerToServerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SShutDownServerToServerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SShutDownServerToServerReq));
  S2SKillServerToAgentReq_descriptor_ = file->message_type(8);
  static const int S2SKillServerToAgentReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SKillServerToAgentReq, appname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SKillServerToAgentReq, apptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SKillServerToAgentReq, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SKillServerToAgentReq, zoneid_),
  };
  S2SKillServerToAgentReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SKillServerToAgentReq_descriptor_,
      S2SKillServerToAgentReq::default_instance_,
      S2SKillServerToAgentReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SKillServerToAgentReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SKillServerToAgentReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SKillServerToAgentReq));
  S2SUpdateServerToAgentReq_descriptor_ = file->message_type(9);
  static const int S2SUpdateServerToAgentReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateServerToAgentReq, appname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateServerToAgentReq, apptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateServerToAgentReq, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateServerToAgentReq, zoneid_),
  };
  S2SUpdateServerToAgentReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SUpdateServerToAgentReq_descriptor_,
      S2SUpdateServerToAgentReq::default_instance_,
      S2SUpdateServerToAgentReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateServerToAgentReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SUpdateServerToAgentReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SUpdateServerToAgentReq));
  S2SRestartServerToAgentReq_descriptor_ = file->message_type(10);
  static const int S2SRestartServerToAgentReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRestartServerToAgentReq, appname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRestartServerToAgentReq, apptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRestartServerToAgentReq, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRestartServerToAgentReq, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRestartServerToAgentReq, delaytime_),
  };
  S2SRestartServerToAgentReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SRestartServerToAgentReq_descriptor_,
      S2SRestartServerToAgentReq::default_instance_,
      S2SRestartServerToAgentReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRestartServerToAgentReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRestartServerToAgentReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SRestartServerToAgentReq));
  DeployProtocol_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_KFDeployMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SRegisterAgentToServerReq_descriptor_, &S2SRegisterAgentToServerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SGetAgentIpAddressReq_descriptor_, &S2SGetAgentIpAddressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SGetAgentIpAddressAck_descriptor_, &S2SGetAgentIpAddressAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SUpdateServerStatusReq_descriptor_, &S2SUpdateServerStatusReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SStartupServerToAgentReq_descriptor_, &S2SStartupServerToAgentReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SShutDownServerToAgentReq_descriptor_, &S2SShutDownServerToAgentReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SShutDownServerToMasterReq_descriptor_, &S2SShutDownServerToMasterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SShutDownServerToServerReq_descriptor_, &S2SShutDownServerToServerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SKillServerToAgentReq_descriptor_, &S2SKillServerToAgentReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SUpdateServerToAgentReq_descriptor_, &S2SUpdateServerToAgentReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SRestartServerToAgentReq_descriptor_, &S2SRestartServerToAgentReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_KFDeployMessage_2eproto() {
  delete S2SRegisterAgentToServerReq::default_instance_;
  delete S2SRegisterAgentToServerReq_reflection_;
  delete S2SGetAgentIpAddressReq::default_instance_;
  delete S2SGetAgentIpAddressReq_reflection_;
  delete S2SGetAgentIpAddressAck::default_instance_;
  delete S2SGetAgentIpAddressAck_reflection_;
  delete S2SUpdateServerStatusReq::default_instance_;
  delete S2SUpdateServerStatusReq_reflection_;
  delete S2SStartupServerToAgentReq::default_instance_;
  delete S2SStartupServerToAgentReq_reflection_;
  delete S2SShutDownServerToAgentReq::default_instance_;
  delete S2SShutDownServerToAgentReq_reflection_;
  delete S2SShutDownServerToMasterReq::default_instance_;
  delete S2SShutDownServerToMasterReq_reflection_;
  delete S2SShutDownServerToServerReq::default_instance_;
  delete S2SShutDownServerToServerReq_reflection_;
  delete S2SKillServerToAgentReq::default_instance_;
  delete S2SKillServerToAgentReq_reflection_;
  delete S2SUpdateServerToAgentReq::default_instance_;
  delete S2SUpdateServerToAgentReq_reflection_;
  delete S2SRestartServerToAgentReq::default_instance_;
  delete S2SRestartServerToAgentReq_reflection_;
}

void protobuf_AddDesc_KFDeployMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025KFDeployMessage.proto\022\005KFMsg\"i\n\033S2SReg"
    "isterAgentToServerReq\022\017\n\007agentid\030\001 \002(\r\022\017"
    "\n\007localip\030\002 \002(\t\022\014\n\004name\030\003 \002(\t\022\014\n\004type\030\004 "
    "\002(\t\022\014\n\004port\030\005 \002(\r\"*\n\027S2SGetAgentIpAddres"
    "sReq\022\017\n\007localip\030\001 \002(\t\"d\n\027S2SGetAgentIpAd"
    "dressAck\022\017\n\007appname\030\001 \002(\t\022\017\n\007apptype\030\002 \002"
    "(\t\022\r\n\005appid\030\003 \002(\r\022\n\n\002ip\030\004 \002(\t\022\014\n\004port\030\005 "
    "\002(\r\"\246\001\n\030S2SUpdateServerStatusReq\022\017\n\007agen"
    "tid\030\001 \002(\r\022\r\n\005appid\030\002 \002(\r\022\017\n\007appname\030\003 \002("
    "\t\022\017\n\007apptype\030\004 \002(\t\022\016\n\006zoneid\030\005 \002(\r\022\017\n\007pr"
    "ocess\030\006 \002(\r\022\023\n\013startuptime\030\007 \002(\004\022\022\n\nissh"
    "utdown\030\010 \002(\r\"]\n\032S2SStartupServerToAgentR"
    "eq\022\017\n\007appname\030\001 \002(\t\022\017\n\007apptype\030\002 \002(\t\022\r\n\005"
    "appid\030\003 \002(\r\022\016\n\006zoneid\030\004 \002(\r\"q\n\033S2SShutDo"
    "wnServerToAgentReq\022\017\n\007appname\030\001 \002(\t\022\017\n\007a"
    "pptype\030\002 \002(\t\022\r\n\005appid\030\003 \002(\r\022\016\n\006zoneid\030\004 "
    "\002(\r\022\021\n\tdelaytime\030\005 \002(\r\"r\n\034S2SShutDownSer"
    "verToMasterReq\022\017\n\007appname\030\001 \002(\t\022\017\n\007appty"
    "pe\030\002 \002(\t\022\r\n\005appid\030\003 \002(\r\022\016\n\006zoneid\030\004 \002(\r\022"
    "\021\n\tdelaytime\030\005 \002(\r\"r\n\034S2SShutDownServerT"
    "oServerReq\022\017\n\007appname\030\001 \002(\t\022\017\n\007apptype\030\002"
    " \002(\t\022\r\n\005appid\030\003 \002(\r\022\016\n\006zoneid\030\004 \002(\r\022\021\n\td"
    "elaytime\030\005 \002(\r\"Z\n\027S2SKillServerToAgentRe"
    "q\022\017\n\007appname\030\001 \002(\t\022\017\n\007apptype\030\002 \002(\t\022\r\n\005a"
    "ppid\030\003 \002(\r\022\016\n\006zoneid\030\004 \002(\r\"\\\n\031S2SUpdateS"
    "erverToAgentReq\022\017\n\007appname\030\001 \002(\t\022\017\n\007appt"
    "ype\030\002 \002(\t\022\r\n\005appid\030\003 \002(\r\022\016\n\006zoneid\030\004 \002(\r"
    "\"p\n\032S2SRestartServerToAgentReq\022\017\n\007appnam"
    "e\030\001 \002(\t\022\017\n\007apptype\030\002 \002(\t\022\r\n\005appid\030\003 \002(\r\022"
    "\016\n\006zoneid\030\004 \002(\r\022\021\n\tdelaytime\030\005 \002(\r*\256\003\n\016D"
    "eployProtocol\022%\n S2S_REGISTER_AGENT_TO_S"
    "ERVER_REQ\020\275P\022!\n\034S2S_UPDATE_SERVER_STATUS"
    "_REQ\020\276P\022!\n\034S2S_GET_AGENT_IP_ADDRESS_REQ\020"
    "\277P\022!\n\034S2S_GET_AGENT_IP_ADDRESS_ACK\020\300P\022$\n"
    "\037S2S_STARTUP_SERVER_TO_AGENT_REQ\020\301P\022&\n!S"
    "2S_SHUT_DOWN_SERVER_TO_AGENT_REQ\020\302P\022\'\n\"S"
    "2S_SHUT_DOWN_SERVER_TO_MASTER_REQ\020\303P\022\'\n\""
    "S2S_SHUT_DOWN_SERVER_TO_SERVER_REQ\020\304P\022!\n"
    "\034S2S_KILL_SERVER_TO_AGENT_REQ\020\305P\022#\n\036S2S_"
    "UPDATE_SERVER_TO_AGENT_REQ\020\306P\022$\n\037S2S_RES"
    "TART_SERVER_TO_AGENT_REQ\020\307P", 1627);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KFDeployMessage.proto", &protobuf_RegisterTypes);
  S2SRegisterAgentToServerReq::default_instance_ = new S2SRegisterAgentToServerReq();
  S2SGetAgentIpAddressReq::default_instance_ = new S2SGetAgentIpAddressReq();
  S2SGetAgentIpAddressAck::default_instance_ = new S2SGetAgentIpAddressAck();
  S2SUpdateServerStatusReq::default_instance_ = new S2SUpdateServerStatusReq();
  S2SStartupServerToAgentReq::default_instance_ = new S2SStartupServerToAgentReq();
  S2SShutDownServerToAgentReq::default_instance_ = new S2SShutDownServerToAgentReq();
  S2SShutDownServerToMasterReq::default_instance_ = new S2SShutDownServerToMasterReq();
  S2SShutDownServerToServerReq::default_instance_ = new S2SShutDownServerToServerReq();
  S2SKillServerToAgentReq::default_instance_ = new S2SKillServerToAgentReq();
  S2SUpdateServerToAgentReq::default_instance_ = new S2SUpdateServerToAgentReq();
  S2SRestartServerToAgentReq::default_instance_ = new S2SRestartServerToAgentReq();
  S2SRegisterAgentToServerReq::default_instance_->InitAsDefaultInstance();
  S2SGetAgentIpAddressReq::default_instance_->InitAsDefaultInstance();
  S2SGetAgentIpAddressAck::default_instance_->InitAsDefaultInstance();
  S2SUpdateServerStatusReq::default_instance_->InitAsDefaultInstance();
  S2SStartupServerToAgentReq::default_instance_->InitAsDefaultInstance();
  S2SShutDownServerToAgentReq::default_instance_->InitAsDefaultInstance();
  S2SShutDownServerToMasterReq::default_instance_->InitAsDefaultInstance();
  S2SShutDownServerToServerReq::default_instance_->InitAsDefaultInstance();
  S2SKillServerToAgentReq::default_instance_->InitAsDefaultInstance();
  S2SUpdateServerToAgentReq::default_instance_->InitAsDefaultInstance();
  S2SRestartServerToAgentReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_KFDeployMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_KFDeployMessage_2eproto {
  StaticDescriptorInitializer_KFDeployMessage_2eproto() {
    protobuf_AddDesc_KFDeployMessage_2eproto();
  }
} static_descriptor_initializer_KFDeployMessage_2eproto_;
const ::google::protobuf::EnumDescriptor* DeployProtocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeployProtocol_descriptor_;
}
bool DeployProtocol_IsValid(int value) {
  switch(value) {
    case 10301:
    case 10302:
    case 10303:
    case 10304:
    case 10305:
    case 10306:
    case 10307:
    case 10308:
    case 10309:
    case 10310:
    case 10311:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int S2SRegisterAgentToServerReq::kAgentidFieldNumber;
const int S2SRegisterAgentToServerReq::kLocalipFieldNumber;
const int S2SRegisterAgentToServerReq::kNameFieldNumber;
const int S2SRegisterAgentToServerReq::kTypeFieldNumber;
const int S2SRegisterAgentToServerReq::kPortFieldNumber;
#endif  // !_MSC_VER

S2SRegisterAgentToServerReq::S2SRegisterAgentToServerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SRegisterAgentToServerReq::InitAsDefaultInstance() {
}

S2SRegisterAgentToServerReq::S2SRegisterAgentToServerReq(const S2SRegisterAgentToServerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SRegisterAgentToServerReq::SharedCtor() {
  _cached_size_ = 0;
  agentid_ = 0u;
  localip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SRegisterAgentToServerReq::~S2SRegisterAgentToServerReq() {
  SharedDtor();
}

void S2SRegisterAgentToServerReq::SharedDtor() {
  if (localip_ != &::google::protobuf::internal::kEmptyString) {
    delete localip_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void S2SRegisterAgentToServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SRegisterAgentToServerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SRegisterAgentToServerReq_descriptor_;
}

const S2SRegisterAgentToServerReq& S2SRegisterAgentToServerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFDeployMessage_2eproto();
  return *default_instance_;
}

S2SRegisterAgentToServerReq* S2SRegisterAgentToServerReq::default_instance_ = NULL;

S2SRegisterAgentToServerReq* S2SRegisterAgentToServerReq::New() const {
  return new S2SRegisterAgentToServerReq;
}

void S2SRegisterAgentToServerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    agentid_ = 0u;
    if (has_localip()) {
      if (localip_ != &::google::protobuf::internal::kEmptyString) {
        localip_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SRegisterAgentToServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 agentid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agentid_)));
          set_has_agentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_localip;
        break;
      }

      // required string localip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_localip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->localip().data(), this->localip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_type;
        break;
      }

      // required string type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }

      // required uint32 port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SRegisterAgentToServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 agentid = 1;
  if (has_agentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->agentid(), output);
  }

  // required string localip = 2;
  if (has_localip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->localip().data(), this->localip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->localip(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required string type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->type(), output);
  }

  // required uint32 port = 5;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SRegisterAgentToServerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 agentid = 1;
  if (has_agentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->agentid(), target);
  }

  // required string localip = 2;
  if (has_localip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->localip().data(), this->localip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->localip(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required string type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->type(), target);
  }

  // required uint32 port = 5;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SRegisterAgentToServerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 agentid = 1;
    if (has_agentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->agentid());
    }

    // required string localip = 2;
    if (has_localip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->localip());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required uint32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SRegisterAgentToServerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SRegisterAgentToServerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SRegisterAgentToServerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SRegisterAgentToServerReq::MergeFrom(const S2SRegisterAgentToServerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agentid()) {
      set_agentid(from.agentid());
    }
    if (from.has_localip()) {
      set_localip(from.localip());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SRegisterAgentToServerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SRegisterAgentToServerReq::CopyFrom(const S2SRegisterAgentToServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SRegisterAgentToServerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2SRegisterAgentToServerReq::Swap(S2SRegisterAgentToServerReq* other) {
  if (other != this) {
    std::swap(agentid_, other->agentid_);
    std::swap(localip_, other->localip_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SRegisterAgentToServerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SRegisterAgentToServerReq_descriptor_;
  metadata.reflection = S2SRegisterAgentToServerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SGetAgentIpAddressReq::kLocalipFieldNumber;
#endif  // !_MSC_VER

S2SGetAgentIpAddressReq::S2SGetAgentIpAddressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SGetAgentIpAddressReq::InitAsDefaultInstance() {
}

S2SGetAgentIpAddressReq::S2SGetAgentIpAddressReq(const S2SGetAgentIpAddressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SGetAgentIpAddressReq::SharedCtor() {
  _cached_size_ = 0;
  localip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SGetAgentIpAddressReq::~S2SGetAgentIpAddressReq() {
  SharedDtor();
}

void S2SGetAgentIpAddressReq::SharedDtor() {
  if (localip_ != &::google::protobuf::internal::kEmptyString) {
    delete localip_;
  }
  if (this != default_instance_) {
  }
}

void S2SGetAgentIpAddressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SGetAgentIpAddressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SGetAgentIpAddressReq_descriptor_;
}

const S2SGetAgentIpAddressReq& S2SGetAgentIpAddressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFDeployMessage_2eproto();
  return *default_instance_;
}

S2SGetAgentIpAddressReq* S2SGetAgentIpAddressReq::default_instance_ = NULL;

S2SGetAgentIpAddressReq* S2SGetAgentIpAddressReq::New() const {
  return new S2SGetAgentIpAddressReq;
}

void S2SGetAgentIpAddressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_localip()) {
      if (localip_ != &::google::protobuf::internal::kEmptyString) {
        localip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SGetAgentIpAddressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string localip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->localip().data(), this->localip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SGetAgentIpAddressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string localip = 1;
  if (has_localip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->localip().data(), this->localip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->localip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SGetAgentIpAddressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string localip = 1;
  if (has_localip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->localip().data(), this->localip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->localip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SGetAgentIpAddressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string localip = 1;
    if (has_localip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->localip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SGetAgentIpAddressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SGetAgentIpAddressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SGetAgentIpAddressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SGetAgentIpAddressReq::MergeFrom(const S2SGetAgentIpAddressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_localip()) {
      set_localip(from.localip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SGetAgentIpAddressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SGetAgentIpAddressReq::CopyFrom(const S2SGetAgentIpAddressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SGetAgentIpAddressReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2SGetAgentIpAddressReq::Swap(S2SGetAgentIpAddressReq* other) {
  if (other != this) {
    std::swap(localip_, other->localip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SGetAgentIpAddressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SGetAgentIpAddressReq_descriptor_;
  metadata.reflection = S2SGetAgentIpAddressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SGetAgentIpAddressAck::kAppnameFieldNumber;
const int S2SGetAgentIpAddressAck::kApptypeFieldNumber;
const int S2SGetAgentIpAddressAck::kAppidFieldNumber;
const int S2SGetAgentIpAddressAck::kIpFieldNumber;
const int S2SGetAgentIpAddressAck::kPortFieldNumber;
#endif  // !_MSC_VER

S2SGetAgentIpAddressAck::S2SGetAgentIpAddressAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SGetAgentIpAddressAck::InitAsDefaultInstance() {
}

S2SGetAgentIpAddressAck::S2SGetAgentIpAddressAck(const S2SGetAgentIpAddressAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SGetAgentIpAddressAck::SharedCtor() {
  _cached_size_ = 0;
  appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SGetAgentIpAddressAck::~S2SGetAgentIpAddressAck() {
  SharedDtor();
}

void S2SGetAgentIpAddressAck::SharedDtor() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void S2SGetAgentIpAddressAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SGetAgentIpAddressAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SGetAgentIpAddressAck_descriptor_;
}

const S2SGetAgentIpAddressAck& S2SGetAgentIpAddressAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFDeployMessage_2eproto();
  return *default_instance_;
}

S2SGetAgentIpAddressAck* S2SGetAgentIpAddressAck::default_instance_ = NULL;

S2SGetAgentIpAddressAck* S2SGetAgentIpAddressAck::New() const {
  return new S2SGetAgentIpAddressAck;
}

void S2SGetAgentIpAddressAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_appname()) {
      if (appname_ != &::google::protobuf::internal::kEmptyString) {
        appname_->clear();
      }
    }
    if (has_apptype()) {
      if (apptype_ != &::google::protobuf::internal::kEmptyString) {
        apptype_->clear();
      }
    }
    appid_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SGetAgentIpAddressAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string appname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appname().data(), this->appname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_apptype;
        break;
      }

      // required string apptype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apptype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apptype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->apptype().data(), this->apptype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appid;
        break;
      }

      // required uint32 appid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // required string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }

      // required uint32 port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SGetAgentIpAddressAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string appname = 1;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appname().data(), this->appname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->appname(), output);
  }

  // required string apptype = 2;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apptype().data(), this->apptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->apptype(), output);
  }

  // required uint32 appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->appid(), output);
  }

  // required string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }

  // required uint32 port = 5;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SGetAgentIpAddressAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string appname = 1;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appname().data(), this->appname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->appname(), target);
  }

  // required string apptype = 2;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apptype().data(), this->apptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->apptype(), target);
  }

  // required uint32 appid = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->appid(), target);
  }

  // required string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // required uint32 port = 5;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SGetAgentIpAddressAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string appname = 1;
    if (has_appname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appname());
    }

    // required string apptype = 2;
    if (has_apptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apptype());
    }

    // required uint32 appid = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // required string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required uint32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SGetAgentIpAddressAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SGetAgentIpAddressAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SGetAgentIpAddressAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SGetAgentIpAddressAck::MergeFrom(const S2SGetAgentIpAddressAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appname()) {
      set_appname(from.appname());
    }
    if (from.has_apptype()) {
      set_apptype(from.apptype());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SGetAgentIpAddressAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SGetAgentIpAddressAck::CopyFrom(const S2SGetAgentIpAddressAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SGetAgentIpAddressAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2SGetAgentIpAddressAck::Swap(S2SGetAgentIpAddressAck* other) {
  if (other != this) {
    std::swap(appname_, other->appname_);
    std::swap(apptype_, other->apptype_);
    std::swap(appid_, other->appid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SGetAgentIpAddressAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SGetAgentIpAddressAck_descriptor_;
  metadata.reflection = S2SGetAgentIpAddressAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SUpdateServerStatusReq::kAgentidFieldNumber;
const int S2SUpdateServerStatusReq::kAppidFieldNumber;
const int S2SUpdateServerStatusReq::kAppnameFieldNumber;
const int S2SUpdateServerStatusReq::kApptypeFieldNumber;
const int S2SUpdateServerStatusReq::kZoneidFieldNumber;
const int S2SUpdateServerStatusReq::kProcessFieldNumber;
const int S2SUpdateServerStatusReq::kStartuptimeFieldNumber;
const int S2SUpdateServerStatusReq::kIsshutdownFieldNumber;
#endif  // !_MSC_VER

S2SUpdateServerStatusReq::S2SUpdateServerStatusReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SUpdateServerStatusReq::InitAsDefaultInstance() {
}

S2SUpdateServerStatusReq::S2SUpdateServerStatusReq(const S2SUpdateServerStatusReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SUpdateServerStatusReq::SharedCtor() {
  _cached_size_ = 0;
  agentid_ = 0u;
  appid_ = 0u;
  appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zoneid_ = 0u;
  process_ = 0u;
  startuptime_ = GOOGLE_ULONGLONG(0);
  isshutdown_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SUpdateServerStatusReq::~S2SUpdateServerStatusReq() {
  SharedDtor();
}

void S2SUpdateServerStatusReq::SharedDtor() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (this != default_instance_) {
  }
}

void S2SUpdateServerStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SUpdateServerStatusReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SUpdateServerStatusReq_descriptor_;
}

const S2SUpdateServerStatusReq& S2SUpdateServerStatusReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFDeployMessage_2eproto();
  return *default_instance_;
}

S2SUpdateServerStatusReq* S2SUpdateServerStatusReq::default_instance_ = NULL;

S2SUpdateServerStatusReq* S2SUpdateServerStatusReq::New() const {
  return new S2SUpdateServerStatusReq;
}

void S2SUpdateServerStatusReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    agentid_ = 0u;
    appid_ = 0u;
    if (has_appname()) {
      if (appname_ != &::google::protobuf::internal::kEmptyString) {
        appname_->clear();
      }
    }
    if (has_apptype()) {
      if (apptype_ != &::google::protobuf::internal::kEmptyString) {
        apptype_->clear();
      }
    }
    zoneid_ = 0u;
    process_ = 0u;
    startuptime_ = GOOGLE_ULONGLONG(0);
    isshutdown_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SUpdateServerStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 agentid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agentid_)));
          set_has_agentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_appid;
        break;
      }

      // required uint32 appid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_appname;
        break;
      }

      // required string appname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appname().data(), this->appname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_apptype;
        break;
      }

      // required string apptype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apptype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apptype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->apptype().data(), this->apptype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_process;
        break;
      }

      // required uint32 process = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_)));
          set_has_process();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_startuptime;
        break;
      }

      // required uint64 startuptime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startuptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &startuptime_)));
          set_has_startuptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isshutdown;
        break;
      }

      // required uint32 isshutdown = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isshutdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isshutdown_)));
          set_has_isshutdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SUpdateServerStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 agentid = 1;
  if (has_agentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->agentid(), output);
  }

  // required uint32 appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // required string appname = 3;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appname().data(), this->appname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->appname(), output);
  }

  // required string apptype = 4;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apptype().data(), this->apptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->apptype(), output);
  }

  // required uint32 zoneid = 5;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zoneid(), output);
  }

  // required uint32 process = 6;
  if (has_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->process(), output);
  }

  // required uint64 startuptime = 7;
  if (has_startuptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->startuptime(), output);
  }

  // required uint32 isshutdown = 8;
  if (has_isshutdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->isshutdown(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SUpdateServerStatusReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 agentid = 1;
  if (has_agentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->agentid(), target);
  }

  // required uint32 appid = 2;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // required string appname = 3;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appname().data(), this->appname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->appname(), target);
  }

  // required string apptype = 4;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apptype().data(), this->apptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->apptype(), target);
  }

  // required uint32 zoneid = 5;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zoneid(), target);
  }

  // required uint32 process = 6;
  if (has_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->process(), target);
  }

  // required uint64 startuptime = 7;
  if (has_startuptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->startuptime(), target);
  }

  // required uint32 isshutdown = 8;
  if (has_isshutdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->isshutdown(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SUpdateServerStatusReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 agentid = 1;
    if (has_agentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->agentid());
    }

    // required uint32 appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // required string appname = 3;
    if (has_appname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appname());
    }

    // required string apptype = 4;
    if (has_apptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apptype());
    }

    // required uint32 zoneid = 5;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // required uint32 process = 6;
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->process());
    }

    // required uint64 startuptime = 7;
    if (has_startuptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->startuptime());
    }

    // required uint32 isshutdown = 8;
    if (has_isshutdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isshutdown());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SUpdateServerStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SUpdateServerStatusReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SUpdateServerStatusReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SUpdateServerStatusReq::MergeFrom(const S2SUpdateServerStatusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agentid()) {
      set_agentid(from.agentid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_appname()) {
      set_appname(from.appname());
    }
    if (from.has_apptype()) {
      set_apptype(from.apptype());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_process()) {
      set_process(from.process());
    }
    if (from.has_startuptime()) {
      set_startuptime(from.startuptime());
    }
    if (from.has_isshutdown()) {
      set_isshutdown(from.isshutdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SUpdateServerStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SUpdateServerStatusReq::CopyFrom(const S2SUpdateServerStatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SUpdateServerStatusReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void S2SUpdateServerStatusReq::Swap(S2SUpdateServerStatusReq* other) {
  if (other != this) {
    std::swap(agentid_, other->agentid_);
    std::swap(appid_, other->appid_);
    std::swap(appname_, other->appname_);
    std::swap(apptype_, other->apptype_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(process_, other->process_);
    std::swap(startuptime_, other->startuptime_);
    std::swap(isshutdown_, other->isshutdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SUpdateServerStatusReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SUpdateServerStatusReq_descriptor_;
  metadata.reflection = S2SUpdateServerStatusReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SStartupServerToAgentReq::kAppnameFieldNumber;
const int S2SStartupServerToAgentReq::kApptypeFieldNumber;
const int S2SStartupServerToAgentReq::kAppidFieldNumber;
const int S2SStartupServerToAgentReq::kZoneidFieldNumber;
#endif  // !_MSC_VER

S2SStartupServerToAgentReq::S2SStartupServerToAgentReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SStartupServerToAgentReq::InitAsDefaultInstance() {
}

S2SStartupServerToAgentReq::S2SStartupServerToAgentReq(const S2SStartupServerToAgentReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SStartupServerToAgentReq::SharedCtor() {
  _cached_size_ = 0;
  appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0u;
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SStartupServerToAgentReq::~S2SStartupServerToAgentReq() {
  SharedDtor();
}

void S2SStartupServerToAgentReq::SharedDtor() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (this != default_instance_) {
  }
}

void S2SStartupServerToAgentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SStartupServerToAgentReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SStartupServerToAgentReq_descriptor_;
}

const S2SStartupServerToAgentReq& S2SStartupServerToAgentReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFDeployMessage_2eproto();
  return *default_instance_;
}

S2SStartupServerToAgentReq* S2SStartupServerToAgentReq::default_instance_ = NULL;

S2SStartupServerToAgentReq* S2SStartupServerToAgentReq::New() const {
  return new S2SStartupServerToAgentReq;
}

void S2SStartupServerToAgentReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_appname()) {
      if (appname_ != &::google::protobuf::internal::kEmptyString) {
        appname_->clear();
      }
    }
    if (has_apptype()) {
      if (apptype_ != &::google::protobuf::internal::kEmptyString) {
        apptype_->clear();
      }
    }
    appid_ = 0u;
    zoneid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SStartupServerToAgentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string appname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appname().data(), this->appname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_apptype;
        break;
      }

      // required string apptype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apptype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apptype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->apptype().data(), this->apptype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appid;
        break;
      }

      // required uint32 appid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SStartupServerToAgentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string appname = 1;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appname().data(), this->appname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->appname(), output);
  }

  // required string apptype = 2;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apptype().data(), this->apptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->apptype(), output);
  }

  // required uint32 appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->appid(), output);
  }

  // required uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SStartupServerToAgentReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string appname = 1;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appname().data(), this->appname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->appname(), target);
  }

  // required string apptype = 2;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apptype().data(), this->apptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->apptype(), target);
  }

  // required uint32 appid = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->appid(), target);
  }

  // required uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SStartupServerToAgentReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string appname = 1;
    if (has_appname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appname());
    }

    // required string apptype = 2;
    if (has_apptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apptype());
    }

    // required uint32 appid = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // required uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SStartupServerToAgentReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SStartupServerToAgentReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SStartupServerToAgentReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SStartupServerToAgentReq::MergeFrom(const S2SStartupServerToAgentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appname()) {
      set_appname(from.appname());
    }
    if (from.has_apptype()) {
      set_apptype(from.apptype());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SStartupServerToAgentReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SStartupServerToAgentReq::CopyFrom(const S2SStartupServerToAgentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SStartupServerToAgentReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SStartupServerToAgentReq::Swap(S2SStartupServerToAgentReq* other) {
  if (other != this) {
    std::swap(appname_, other->appname_);
    std::swap(apptype_, other->apptype_);
    std::swap(appid_, other->appid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SStartupServerToAgentReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SStartupServerToAgentReq_descriptor_;
  metadata.reflection = S2SStartupServerToAgentReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SShutDownServerToAgentReq::kAppnameFieldNumber;
const int S2SShutDownServerToAgentReq::kApptypeFieldNumber;
const int S2SShutDownServerToAgentReq::kAppidFieldNumber;
const int S2SShutDownServerToAgentReq::kZoneidFieldNumber;
const int S2SShutDownServerToAgentReq::kDelaytimeFieldNumber;
#endif  // !_MSC_VER

S2SShutDownServerToAgentReq::S2SShutDownServerToAgentReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SShutDownServerToAgentReq::InitAsDefaultInstance() {
}

S2SShutDownServerToAgentReq::S2SShutDownServerToAgentReq(const S2SShutDownServerToAgentReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SShutDownServerToAgentReq::SharedCtor() {
  _cached_size_ = 0;
  appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0u;
  zoneid_ = 0u;
  delaytime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SShutDownServerToAgentReq::~S2SShutDownServerToAgentReq() {
  SharedDtor();
}

void S2SShutDownServerToAgentReq::SharedDtor() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (this != default_instance_) {
  }
}

void S2SShutDownServerToAgentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SShutDownServerToAgentReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SShutDownServerToAgentReq_descriptor_;
}

const S2SShutDownServerToAgentReq& S2SShutDownServerToAgentReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFDeployMessage_2eproto();
  return *default_instance_;
}

S2SShutDownServerToAgentReq* S2SShutDownServerToAgentReq::default_instance_ = NULL;

S2SShutDownServerToAgentReq* S2SShutDownServerToAgentReq::New() const {
  return new S2SShutDownServerToAgentReq;
}

void S2SShutDownServerToAgentReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_appname()) {
      if (appname_ != &::google::protobuf::internal::kEmptyString) {
        appname_->clear();
      }
    }
    if (has_apptype()) {
      if (apptype_ != &::google::protobuf::internal::kEmptyString) {
        apptype_->clear();
      }
    }
    appid_ = 0u;
    zoneid_ = 0u;
    delaytime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SShutDownServerToAgentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string appname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appname().data(), this->appname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_apptype;
        break;
      }

      // required string apptype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apptype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apptype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->apptype().data(), this->apptype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appid;
        break;
      }

      // required uint32 appid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_delaytime;
        break;
      }

      // required uint32 delaytime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delaytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SShutDownServerToAgentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string appname = 1;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appname().data(), this->appname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->appname(), output);
  }

  // required string apptype = 2;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apptype().data(), this->apptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->apptype(), output);
  }

  // required uint32 appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->appid(), output);
  }

  // required uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  // required uint32 delaytime = 5;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->delaytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SShutDownServerToAgentReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string appname = 1;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appname().data(), this->appname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->appname(), target);
  }

  // required string apptype = 2;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apptype().data(), this->apptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->apptype(), target);
  }

  // required uint32 appid = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->appid(), target);
  }

  // required uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  // required uint32 delaytime = 5;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->delaytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SShutDownServerToAgentReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string appname = 1;
    if (has_appname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appname());
    }

    // required string apptype = 2;
    if (has_apptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apptype());
    }

    // required uint32 appid = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // required uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // required uint32 delaytime = 5;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delaytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SShutDownServerToAgentReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SShutDownServerToAgentReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SShutDownServerToAgentReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SShutDownServerToAgentReq::MergeFrom(const S2SShutDownServerToAgentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appname()) {
      set_appname(from.appname());
    }
    if (from.has_apptype()) {
      set_apptype(from.apptype());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SShutDownServerToAgentReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SShutDownServerToAgentReq::CopyFrom(const S2SShutDownServerToAgentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SShutDownServerToAgentReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2SShutDownServerToAgentReq::Swap(S2SShutDownServerToAgentReq* other) {
  if (other != this) {
    std::swap(appname_, other->appname_);
    std::swap(apptype_, other->apptype_);
    std::swap(appid_, other->appid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SShutDownServerToAgentReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SShutDownServerToAgentReq_descriptor_;
  metadata.reflection = S2SShutDownServerToAgentReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SShutDownServerToMasterReq::kAppnameFieldNumber;
const int S2SShutDownServerToMasterReq::kApptypeFieldNumber;
const int S2SShutDownServerToMasterReq::kAppidFieldNumber;
const int S2SShutDownServerToMasterReq::kZoneidFieldNumber;
const int S2SShutDownServerToMasterReq::kDelaytimeFieldNumber;
#endif  // !_MSC_VER

S2SShutDownServerToMasterReq::S2SShutDownServerToMasterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SShutDownServerToMasterReq::InitAsDefaultInstance() {
}

S2SShutDownServerToMasterReq::S2SShutDownServerToMasterReq(const S2SShutDownServerToMasterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SShutDownServerToMasterReq::SharedCtor() {
  _cached_size_ = 0;
  appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0u;
  zoneid_ = 0u;
  delaytime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SShutDownServerToMasterReq::~S2SShutDownServerToMasterReq() {
  SharedDtor();
}

void S2SShutDownServerToMasterReq::SharedDtor() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (this != default_instance_) {
  }
}

void S2SShutDownServerToMasterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SShutDownServerToMasterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SShutDownServerToMasterReq_descriptor_;
}

const S2SShutDownServerToMasterReq& S2SShutDownServerToMasterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFDeployMessage_2eproto();
  return *default_instance_;
}

S2SShutDownServerToMasterReq* S2SShutDownServerToMasterReq::default_instance_ = NULL;

S2SShutDownServerToMasterReq* S2SShutDownServerToMasterReq::New() const {
  return new S2SShutDownServerToMasterReq;
}

void S2SShutDownServerToMasterReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_appname()) {
      if (appname_ != &::google::protobuf::internal::kEmptyString) {
        appname_->clear();
      }
    }
    if (has_apptype()) {
      if (apptype_ != &::google::protobuf::internal::kEmptyString) {
        apptype_->clear();
      }
    }
    appid_ = 0u;
    zoneid_ = 0u;
    delaytime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SShutDownServerToMasterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string appname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appname().data(), this->appname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_apptype;
        break;
      }

      // required string apptype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apptype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apptype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->apptype().data(), this->apptype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appid;
        break;
      }

      // required uint32 appid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_delaytime;
        break;
      }

      // required uint32 delaytime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delaytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SShutDownServerToMasterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string appname = 1;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appname().data(), this->appname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->appname(), output);
  }

  // required string apptype = 2;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apptype().data(), this->apptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->apptype(), output);
  }

  // required uint32 appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->appid(), output);
  }

  // required uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  // required uint32 delaytime = 5;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->delaytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SShutDownServerToMasterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string appname = 1;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appname().data(), this->appname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->appname(), target);
  }

  // required string apptype = 2;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apptype().data(), this->apptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->apptype(), target);
  }

  // required uint32 appid = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->appid(), target);
  }

  // required uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  // required uint32 delaytime = 5;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->delaytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SShutDownServerToMasterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string appname = 1;
    if (has_appname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appname());
    }

    // required string apptype = 2;
    if (has_apptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apptype());
    }

    // required uint32 appid = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // required uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // required uint32 delaytime = 5;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delaytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SShutDownServerToMasterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SShutDownServerToMasterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SShutDownServerToMasterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SShutDownServerToMasterReq::MergeFrom(const S2SShutDownServerToMasterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appname()) {
      set_appname(from.appname());
    }
    if (from.has_apptype()) {
      set_apptype(from.apptype());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SShutDownServerToMasterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SShutDownServerToMasterReq::CopyFrom(const S2SShutDownServerToMasterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SShutDownServerToMasterReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2SShutDownServerToMasterReq::Swap(S2SShutDownServerToMasterReq* other) {
  if (other != this) {
    std::swap(appname_, other->appname_);
    std::swap(apptype_, other->apptype_);
    std::swap(appid_, other->appid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SShutDownServerToMasterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SShutDownServerToMasterReq_descriptor_;
  metadata.reflection = S2SShutDownServerToMasterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SShutDownServerToServerReq::kAppnameFieldNumber;
const int S2SShutDownServerToServerReq::kApptypeFieldNumber;
const int S2SShutDownServerToServerReq::kAppidFieldNumber;
const int S2SShutDownServerToServerReq::kZoneidFieldNumber;
const int S2SShutDownServerToServerReq::kDelaytimeFieldNumber;
#endif  // !_MSC_VER

S2SShutDownServerToServerReq::S2SShutDownServerToServerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SShutDownServerToServerReq::InitAsDefaultInstance() {
}

S2SShutDownServerToServerReq::S2SShutDownServerToServerReq(const S2SShutDownServerToServerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SShutDownServerToServerReq::SharedCtor() {
  _cached_size_ = 0;
  appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0u;
  zoneid_ = 0u;
  delaytime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SShutDownServerToServerReq::~S2SShutDownServerToServerReq() {
  SharedDtor();
}

void S2SShutDownServerToServerReq::SharedDtor() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (this != default_instance_) {
  }
}

void S2SShutDownServerToServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SShutDownServerToServerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SShutDownServerToServerReq_descriptor_;
}

const S2SShutDownServerToServerReq& S2SShutDownServerToServerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFDeployMessage_2eproto();
  return *default_instance_;
}

S2SShutDownServerToServerReq* S2SShutDownServerToServerReq::default_instance_ = NULL;

S2SShutDownServerToServerReq* S2SShutDownServerToServerReq::New() const {
  return new S2SShutDownServerToServerReq;
}

void S2SShutDownServerToServerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_appname()) {
      if (appname_ != &::google::protobuf::internal::kEmptyString) {
        appname_->clear();
      }
    }
    if (has_apptype()) {
      if (apptype_ != &::google::protobuf::internal::kEmptyString) {
        apptype_->clear();
      }
    }
    appid_ = 0u;
    zoneid_ = 0u;
    delaytime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SShutDownServerToServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string appname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appname().data(), this->appname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_apptype;
        break;
      }

      // required string apptype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apptype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apptype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->apptype().data(), this->apptype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appid;
        break;
      }

      // required uint32 appid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_delaytime;
        break;
      }

      // required uint32 delaytime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delaytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SShutDownServerToServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string appname = 1;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appname().data(), this->appname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->appname(), output);
  }

  // required string apptype = 2;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apptype().data(), this->apptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->apptype(), output);
  }

  // required uint32 appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->appid(), output);
  }

  // required uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  // required uint32 delaytime = 5;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->delaytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SShutDownServerToServerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string appname = 1;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appname().data(), this->appname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->appname(), target);
  }

  // required string apptype = 2;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apptype().data(), this->apptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->apptype(), target);
  }

  // required uint32 appid = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->appid(), target);
  }

  // required uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  // required uint32 delaytime = 5;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->delaytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SShutDownServerToServerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string appname = 1;
    if (has_appname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appname());
    }

    // required string apptype = 2;
    if (has_apptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apptype());
    }

    // required uint32 appid = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // required uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // required uint32 delaytime = 5;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delaytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SShutDownServerToServerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SShutDownServerToServerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SShutDownServerToServerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SShutDownServerToServerReq::MergeFrom(const S2SShutDownServerToServerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appname()) {
      set_appname(from.appname());
    }
    if (from.has_apptype()) {
      set_apptype(from.apptype());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SShutDownServerToServerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SShutDownServerToServerReq::CopyFrom(const S2SShutDownServerToServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SShutDownServerToServerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2SShutDownServerToServerReq::Swap(S2SShutDownServerToServerReq* other) {
  if (other != this) {
    std::swap(appname_, other->appname_);
    std::swap(apptype_, other->apptype_);
    std::swap(appid_, other->appid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SShutDownServerToServerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SShutDownServerToServerReq_descriptor_;
  metadata.reflection = S2SShutDownServerToServerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SKillServerToAgentReq::kAppnameFieldNumber;
const int S2SKillServerToAgentReq::kApptypeFieldNumber;
const int S2SKillServerToAgentReq::kAppidFieldNumber;
const int S2SKillServerToAgentReq::kZoneidFieldNumber;
#endif  // !_MSC_VER

S2SKillServerToAgentReq::S2SKillServerToAgentReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SKillServerToAgentReq::InitAsDefaultInstance() {
}

S2SKillServerToAgentReq::S2SKillServerToAgentReq(const S2SKillServerToAgentReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SKillServerToAgentReq::SharedCtor() {
  _cached_size_ = 0;
  appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0u;
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SKillServerToAgentReq::~S2SKillServerToAgentReq() {
  SharedDtor();
}

void S2SKillServerToAgentReq::SharedDtor() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (this != default_instance_) {
  }
}

void S2SKillServerToAgentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SKillServerToAgentReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SKillServerToAgentReq_descriptor_;
}

const S2SKillServerToAgentReq& S2SKillServerToAgentReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFDeployMessage_2eproto();
  return *default_instance_;
}

S2SKillServerToAgentReq* S2SKillServerToAgentReq::default_instance_ = NULL;

S2SKillServerToAgentReq* S2SKillServerToAgentReq::New() const {
  return new S2SKillServerToAgentReq;
}

void S2SKillServerToAgentReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_appname()) {
      if (appname_ != &::google::protobuf::internal::kEmptyString) {
        appname_->clear();
      }
    }
    if (has_apptype()) {
      if (apptype_ != &::google::protobuf::internal::kEmptyString) {
        apptype_->clear();
      }
    }
    appid_ = 0u;
    zoneid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SKillServerToAgentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string appname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appname().data(), this->appname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_apptype;
        break;
      }

      // required string apptype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apptype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apptype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->apptype().data(), this->apptype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appid;
        break;
      }

      // required uint32 appid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SKillServerToAgentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string appname = 1;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appname().data(), this->appname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->appname(), output);
  }

  // required string apptype = 2;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apptype().data(), this->apptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->apptype(), output);
  }

  // required uint32 appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->appid(), output);
  }

  // required uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SKillServerToAgentReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string appname = 1;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appname().data(), this->appname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->appname(), target);
  }

  // required string apptype = 2;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apptype().data(), this->apptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->apptype(), target);
  }

  // required uint32 appid = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->appid(), target);
  }

  // required uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SKillServerToAgentReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string appname = 1;
    if (has_appname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appname());
    }

    // required string apptype = 2;
    if (has_apptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apptype());
    }

    // required uint32 appid = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // required uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SKillServerToAgentReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SKillServerToAgentReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SKillServerToAgentReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SKillServerToAgentReq::MergeFrom(const S2SKillServerToAgentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appname()) {
      set_appname(from.appname());
    }
    if (from.has_apptype()) {
      set_apptype(from.apptype());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SKillServerToAgentReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SKillServerToAgentReq::CopyFrom(const S2SKillServerToAgentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SKillServerToAgentReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SKillServerToAgentReq::Swap(S2SKillServerToAgentReq* other) {
  if (other != this) {
    std::swap(appname_, other->appname_);
    std::swap(apptype_, other->apptype_);
    std::swap(appid_, other->appid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SKillServerToAgentReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SKillServerToAgentReq_descriptor_;
  metadata.reflection = S2SKillServerToAgentReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SUpdateServerToAgentReq::kAppnameFieldNumber;
const int S2SUpdateServerToAgentReq::kApptypeFieldNumber;
const int S2SUpdateServerToAgentReq::kAppidFieldNumber;
const int S2SUpdateServerToAgentReq::kZoneidFieldNumber;
#endif  // !_MSC_VER

S2SUpdateServerToAgentReq::S2SUpdateServerToAgentReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SUpdateServerToAgentReq::InitAsDefaultInstance() {
}

S2SUpdateServerToAgentReq::S2SUpdateServerToAgentReq(const S2SUpdateServerToAgentReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SUpdateServerToAgentReq::SharedCtor() {
  _cached_size_ = 0;
  appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0u;
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SUpdateServerToAgentReq::~S2SUpdateServerToAgentReq() {
  SharedDtor();
}

void S2SUpdateServerToAgentReq::SharedDtor() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (this != default_instance_) {
  }
}

void S2SUpdateServerToAgentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SUpdateServerToAgentReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SUpdateServerToAgentReq_descriptor_;
}

const S2SUpdateServerToAgentReq& S2SUpdateServerToAgentReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFDeployMessage_2eproto();
  return *default_instance_;
}

S2SUpdateServerToAgentReq* S2SUpdateServerToAgentReq::default_instance_ = NULL;

S2SUpdateServerToAgentReq* S2SUpdateServerToAgentReq::New() const {
  return new S2SUpdateServerToAgentReq;
}

void S2SUpdateServerToAgentReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_appname()) {
      if (appname_ != &::google::protobuf::internal::kEmptyString) {
        appname_->clear();
      }
    }
    if (has_apptype()) {
      if (apptype_ != &::google::protobuf::internal::kEmptyString) {
        apptype_->clear();
      }
    }
    appid_ = 0u;
    zoneid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SUpdateServerToAgentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string appname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appname().data(), this->appname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_apptype;
        break;
      }

      // required string apptype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apptype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apptype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->apptype().data(), this->apptype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appid;
        break;
      }

      // required uint32 appid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SUpdateServerToAgentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string appname = 1;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appname().data(), this->appname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->appname(), output);
  }

  // required string apptype = 2;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apptype().data(), this->apptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->apptype(), output);
  }

  // required uint32 appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->appid(), output);
  }

  // required uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SUpdateServerToAgentReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string appname = 1;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appname().data(), this->appname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->appname(), target);
  }

  // required string apptype = 2;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apptype().data(), this->apptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->apptype(), target);
  }

  // required uint32 appid = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->appid(), target);
  }

  // required uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SUpdateServerToAgentReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string appname = 1;
    if (has_appname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appname());
    }

    // required string apptype = 2;
    if (has_apptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apptype());
    }

    // required uint32 appid = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // required uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SUpdateServerToAgentReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SUpdateServerToAgentReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SUpdateServerToAgentReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SUpdateServerToAgentReq::MergeFrom(const S2SUpdateServerToAgentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appname()) {
      set_appname(from.appname());
    }
    if (from.has_apptype()) {
      set_apptype(from.apptype());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SUpdateServerToAgentReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SUpdateServerToAgentReq::CopyFrom(const S2SUpdateServerToAgentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SUpdateServerToAgentReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SUpdateServerToAgentReq::Swap(S2SUpdateServerToAgentReq* other) {
  if (other != this) {
    std::swap(appname_, other->appname_);
    std::swap(apptype_, other->apptype_);
    std::swap(appid_, other->appid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SUpdateServerToAgentReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SUpdateServerToAgentReq_descriptor_;
  metadata.reflection = S2SUpdateServerToAgentReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SRestartServerToAgentReq::kAppnameFieldNumber;
const int S2SRestartServerToAgentReq::kApptypeFieldNumber;
const int S2SRestartServerToAgentReq::kAppidFieldNumber;
const int S2SRestartServerToAgentReq::kZoneidFieldNumber;
const int S2SRestartServerToAgentReq::kDelaytimeFieldNumber;
#endif  // !_MSC_VER

S2SRestartServerToAgentReq::S2SRestartServerToAgentReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SRestartServerToAgentReq::InitAsDefaultInstance() {
}

S2SRestartServerToAgentReq::S2SRestartServerToAgentReq(const S2SRestartServerToAgentReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SRestartServerToAgentReq::SharedCtor() {
  _cached_size_ = 0;
  appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = 0u;
  zoneid_ = 0u;
  delaytime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SRestartServerToAgentReq::~S2SRestartServerToAgentReq() {
  SharedDtor();
}

void S2SRestartServerToAgentReq::SharedDtor() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (this != default_instance_) {
  }
}

void S2SRestartServerToAgentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SRestartServerToAgentReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SRestartServerToAgentReq_descriptor_;
}

const S2SRestartServerToAgentReq& S2SRestartServerToAgentReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFDeployMessage_2eproto();
  return *default_instance_;
}

S2SRestartServerToAgentReq* S2SRestartServerToAgentReq::default_instance_ = NULL;

S2SRestartServerToAgentReq* S2SRestartServerToAgentReq::New() const {
  return new S2SRestartServerToAgentReq;
}

void S2SRestartServerToAgentReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_appname()) {
      if (appname_ != &::google::protobuf::internal::kEmptyString) {
        appname_->clear();
      }
    }
    if (has_apptype()) {
      if (apptype_ != &::google::protobuf::internal::kEmptyString) {
        apptype_->clear();
      }
    }
    appid_ = 0u;
    zoneid_ = 0u;
    delaytime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SRestartServerToAgentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string appname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appname().data(), this->appname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_apptype;
        break;
      }

      // required string apptype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apptype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apptype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->apptype().data(), this->apptype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appid;
        break;
      }

      // required uint32 appid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
          set_has_appid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_delaytime;
        break;
      }

      // required uint32 delaytime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delaytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SRestartServerToAgentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string appname = 1;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appname().data(), this->appname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->appname(), output);
  }

  // required string apptype = 2;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apptype().data(), this->apptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->apptype(), output);
  }

  // required uint32 appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->appid(), output);
  }

  // required uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  // required uint32 delaytime = 5;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->delaytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SRestartServerToAgentReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string appname = 1;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appname().data(), this->appname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->appname(), target);
  }

  // required string apptype = 2;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apptype().data(), this->apptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->apptype(), target);
  }

  // required uint32 appid = 3;
  if (has_appid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->appid(), target);
  }

  // required uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  // required uint32 delaytime = 5;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->delaytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SRestartServerToAgentReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string appname = 1;
    if (has_appname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appname());
    }

    // required string apptype = 2;
    if (has_apptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apptype());
    }

    // required uint32 appid = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // required uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // required uint32 delaytime = 5;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delaytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SRestartServerToAgentReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SRestartServerToAgentReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SRestartServerToAgentReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SRestartServerToAgentReq::MergeFrom(const S2SRestartServerToAgentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appname()) {
      set_appname(from.appname());
    }
    if (from.has_apptype()) {
      set_apptype(from.apptype());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SRestartServerToAgentReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SRestartServerToAgentReq::CopyFrom(const S2SRestartServerToAgentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SRestartServerToAgentReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2SRestartServerToAgentReq::Swap(S2SRestartServerToAgentReq* other) {
  if (other != this) {
    std::swap(appname_, other->appname_);
    std::swap(apptype_, other->apptype_);
    std::swap(appid_, other->appid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SRestartServerToAgentReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SRestartServerToAgentReq_descriptor_;
  metadata.reflection = S2SRestartServerToAgentReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

// @@protoc_insertion_point(global_scope)
