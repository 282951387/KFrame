// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFDeployMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "KFDeployMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KFMsg {

namespace {

const ::google::protobuf::Descriptor* S2SRegisterAgentToServerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SRegisterAgentToServerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SGetAgentIpAddressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SGetAgentIpAddressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SGetAgentIpAddressAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SGetAgentIpAddressAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDeployCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDeployCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SDeployCommandToAgentReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SDeployCommandToAgentReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SDeployCommandToMasterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SDeployCommandToMasterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SDeployCommandToServerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SDeployCommandToServerReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DeployProtocol_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_KFDeployMessage_2eproto() {
  protobuf_AddDesc_KFDeployMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "KFDeployMessage.proto");
  GOOGLE_CHECK(file != NULL);
  S2SRegisterAgentToServerReq_descriptor_ = file->message_type(0);
  static const int S2SRegisterAgentToServerReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterAgentToServerReq, agentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterAgentToServerReq, localip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterAgentToServerReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterAgentToServerReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterAgentToServerReq, port_),
  };
  S2SRegisterAgentToServerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SRegisterAgentToServerReq_descriptor_,
      S2SRegisterAgentToServerReq::default_instance_,
      S2SRegisterAgentToServerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterAgentToServerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterAgentToServerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SRegisterAgentToServerReq));
  S2SGetAgentIpAddressReq_descriptor_ = file->message_type(1);
  static const int S2SGetAgentIpAddressReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGetAgentIpAddressReq, localip_),
  };
  S2SGetAgentIpAddressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SGetAgentIpAddressReq_descriptor_,
      S2SGetAgentIpAddressReq::default_instance_,
      S2SGetAgentIpAddressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGetAgentIpAddressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGetAgentIpAddressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SGetAgentIpAddressReq));
  S2SGetAgentIpAddressAck_descriptor_ = file->message_type(2);
  static const int S2SGetAgentIpAddressAck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGetAgentIpAddressAck, appname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGetAgentIpAddressAck, apptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGetAgentIpAddressAck, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGetAgentIpAddressAck, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGetAgentIpAddressAck, port_),
  };
  S2SGetAgentIpAddressAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SGetAgentIpAddressAck_descriptor_,
      S2SGetAgentIpAddressAck::default_instance_,
      S2SGetAgentIpAddressAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGetAgentIpAddressAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SGetAgentIpAddressAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SGetAgentIpAddressAck));
  PBDeployCommand_descriptor_ = file->message_type(3);
  static const int PBDeployCommand_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDeployCommand, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDeployCommand, appname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDeployCommand, apptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDeployCommand, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDeployCommand, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDeployCommand, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDeployCommand, logurl_),
  };
  PBDeployCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDeployCommand_descriptor_,
      PBDeployCommand::default_instance_,
      PBDeployCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDeployCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDeployCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDeployCommand));
  S2SDeployCommandToAgentReq_descriptor_ = file->message_type(4);
  static const int S2SDeployCommandToAgentReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDeployCommandToAgentReq, deploycommand_),
  };
  S2SDeployCommandToAgentReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SDeployCommandToAgentReq_descriptor_,
      S2SDeployCommandToAgentReq::default_instance_,
      S2SDeployCommandToAgentReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDeployCommandToAgentReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDeployCommandToAgentReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SDeployCommandToAgentReq));
  S2SDeployCommandToMasterReq_descriptor_ = file->message_type(5);
  static const int S2SDeployCommandToMasterReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDeployCommandToMasterReq, deploycommand_),
  };
  S2SDeployCommandToMasterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SDeployCommandToMasterReq_descriptor_,
      S2SDeployCommandToMasterReq::default_instance_,
      S2SDeployCommandToMasterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDeployCommandToMasterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDeployCommandToMasterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SDeployCommandToMasterReq));
  S2SDeployCommandToServerReq_descriptor_ = file->message_type(6);
  static const int S2SDeployCommandToServerReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDeployCommandToServerReq, deploycommand_),
  };
  S2SDeployCommandToServerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SDeployCommandToServerReq_descriptor_,
      S2SDeployCommandToServerReq::default_instance_,
      S2SDeployCommandToServerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDeployCommandToServerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDeployCommandToServerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SDeployCommandToServerReq));
  DeployProtocol_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_KFDeployMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SRegisterAgentToServerReq_descriptor_, &S2SRegisterAgentToServerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SGetAgentIpAddressReq_descriptor_, &S2SGetAgentIpAddressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SGetAgentIpAddressAck_descriptor_, &S2SGetAgentIpAddressAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDeployCommand_descriptor_, &PBDeployCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SDeployCommandToAgentReq_descriptor_, &S2SDeployCommandToAgentReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SDeployCommandToMasterReq_descriptor_, &S2SDeployCommandToMasterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SDeployCommandToServerReq_descriptor_, &S2SDeployCommandToServerReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_KFDeployMessage_2eproto() {
  delete S2SRegisterAgentToServerReq::default_instance_;
  delete S2SRegisterAgentToServerReq_reflection_;
  delete S2SGetAgentIpAddressReq::default_instance_;
  delete S2SGetAgentIpAddressReq_reflection_;
  delete S2SGetAgentIpAddressAck::default_instance_;
  delete S2SGetAgentIpAddressAck_reflection_;
  delete PBDeployCommand::default_instance_;
  delete PBDeployCommand_reflection_;
  delete S2SDeployCommandToAgentReq::default_instance_;
  delete S2SDeployCommandToAgentReq_reflection_;
  delete S2SDeployCommandToMasterReq::default_instance_;
  delete S2SDeployCommandToMasterReq_reflection_;
  delete S2SDeployCommandToServerReq::default_instance_;
  delete S2SDeployCommandToServerReq_reflection_;
}

void protobuf_AddDesc_KFDeployMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025KFDeployMessage.proto\022\005KFMsg\"i\n\033S2SReg"
    "isterAgentToServerReq\022\017\n\007agentid\030\001 \002(\014\022\017"
    "\n\007localip\030\002 \002(\014\022\014\n\004name\030\003 \002(\014\022\014\n\004type\030\004 "
    "\002(\014\022\014\n\004port\030\005 \002(\r\"*\n\027S2SGetAgentIpAddres"
    "sReq\022\017\n\007localip\030\001 \002(\014\"d\n\027S2SGetAgentIpAd"
    "dressAck\022\017\n\007appname\030\001 \002(\014\022\017\n\007apptype\030\002 \002"
    "(\014\022\r\n\005appid\030\003 \002(\014\022\n\n\002ip\030\004 \002(\014\022\014\n\004port\030\005 "
    "\002(\r\"\202\001\n\017PBDeployCommand\022\017\n\007command\030\001 \002(\014"
    "\022\017\n\007appname\030\002 \002(\014\022\017\n\007apptype\030\003 \002(\014\022\r\n\005ap"
    "pid\030\004 \002(\014\022\016\n\006zoneid\030\005 \002(\r\022\r\n\005value\030\006 \002(\014"
    "\022\016\n\006logurl\030\007 \002(\014\"K\n\032S2SDeployCommandToAg"
    "entReq\022-\n\rdeploycommand\030\001 \002(\0132\026.KFMsg.PB"
    "DeployCommand\"L\n\033S2SDeployCommandToMaste"
    "rReq\022-\n\rdeploycommand\030\001 \002(\0132\026.KFMsg.PBDe"
    "ployCommand\"L\n\033S2SDeployCommandToServerR"
    "eq\022-\n\rdeploycommand\030\001 \002(\0132\026.KFMsg.PBDepl"
    "oyCommand*\361\001\n\016DeployProtocol\022%\n S2S_REGI"
    "STER_AGENT_TO_SERVER_REQ\020\275P\022!\n\034S2S_GET_A"
    "GENT_IP_ADDRESS_REQ\020\277P\022!\n\034S2S_GET_AGENT_"
    "IP_ADDRESS_ACK\020\300P\022$\n\037S2S_DEPLOY_COMMAND_"
    "TO_AGENT_REQ\020\301P\022%\n S2S_DEPLOY_COMMAND_TO"
    "_MASTER_REQ\020\302P\022%\n S2S_DEPLOY_COMMAND_TO_"
    "SERVER_REQ\020\303P", 893);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KFDeployMessage.proto", &protobuf_RegisterTypes);
  S2SRegisterAgentToServerReq::default_instance_ = new S2SRegisterAgentToServerReq();
  S2SGetAgentIpAddressReq::default_instance_ = new S2SGetAgentIpAddressReq();
  S2SGetAgentIpAddressAck::default_instance_ = new S2SGetAgentIpAddressAck();
  PBDeployCommand::default_instance_ = new PBDeployCommand();
  S2SDeployCommandToAgentReq::default_instance_ = new S2SDeployCommandToAgentReq();
  S2SDeployCommandToMasterReq::default_instance_ = new S2SDeployCommandToMasterReq();
  S2SDeployCommandToServerReq::default_instance_ = new S2SDeployCommandToServerReq();
  S2SRegisterAgentToServerReq::default_instance_->InitAsDefaultInstance();
  S2SGetAgentIpAddressReq::default_instance_->InitAsDefaultInstance();
  S2SGetAgentIpAddressAck::default_instance_->InitAsDefaultInstance();
  PBDeployCommand::default_instance_->InitAsDefaultInstance();
  S2SDeployCommandToAgentReq::default_instance_->InitAsDefaultInstance();
  S2SDeployCommandToMasterReq::default_instance_->InitAsDefaultInstance();
  S2SDeployCommandToServerReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_KFDeployMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_KFDeployMessage_2eproto {
  StaticDescriptorInitializer_KFDeployMessage_2eproto() {
    protobuf_AddDesc_KFDeployMessage_2eproto();
  }
} static_descriptor_initializer_KFDeployMessage_2eproto_;
const ::google::protobuf::EnumDescriptor* DeployProtocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeployProtocol_descriptor_;
}
bool DeployProtocol_IsValid(int value) {
  switch(value) {
    case 10301:
    case 10303:
    case 10304:
    case 10305:
    case 10306:
    case 10307:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int S2SRegisterAgentToServerReq::kAgentidFieldNumber;
const int S2SRegisterAgentToServerReq::kLocalipFieldNumber;
const int S2SRegisterAgentToServerReq::kNameFieldNumber;
const int S2SRegisterAgentToServerReq::kTypeFieldNumber;
const int S2SRegisterAgentToServerReq::kPortFieldNumber;
#endif  // !_MSC_VER

S2SRegisterAgentToServerReq::S2SRegisterAgentToServerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SRegisterAgentToServerReq::InitAsDefaultInstance() {
}

S2SRegisterAgentToServerReq::S2SRegisterAgentToServerReq(const S2SRegisterAgentToServerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SRegisterAgentToServerReq::SharedCtor() {
  _cached_size_ = 0;
  agentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  localip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SRegisterAgentToServerReq::~S2SRegisterAgentToServerReq() {
  SharedDtor();
}

void S2SRegisterAgentToServerReq::SharedDtor() {
  if (agentid_ != &::google::protobuf::internal::kEmptyString) {
    delete agentid_;
  }
  if (localip_ != &::google::protobuf::internal::kEmptyString) {
    delete localip_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void S2SRegisterAgentToServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SRegisterAgentToServerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SRegisterAgentToServerReq_descriptor_;
}

const S2SRegisterAgentToServerReq& S2SRegisterAgentToServerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFDeployMessage_2eproto();
  return *default_instance_;
}

S2SRegisterAgentToServerReq* S2SRegisterAgentToServerReq::default_instance_ = NULL;

S2SRegisterAgentToServerReq* S2SRegisterAgentToServerReq::New() const {
  return new S2SRegisterAgentToServerReq;
}

void S2SRegisterAgentToServerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_agentid()) {
      if (agentid_ != &::google::protobuf::internal::kEmptyString) {
        agentid_->clear();
      }
    }
    if (has_localip()) {
      if (localip_ != &::google::protobuf::internal::kEmptyString) {
        localip_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SRegisterAgentToServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes agentid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_agentid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_localip;
        break;
      }

      // required bytes localip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_localip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_localip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_type;
        break;
      }

      // required bytes type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }

      // required uint32 port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SRegisterAgentToServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes agentid = 1;
  if (has_agentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->agentid(), output);
  }

  // required bytes localip = 2;
  if (has_localip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->localip(), output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // required bytes type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->type(), output);
  }

  // required uint32 port = 5;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SRegisterAgentToServerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes agentid = 1;
  if (has_agentid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->agentid(), target);
  }

  // required bytes localip = 2;
  if (has_localip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->localip(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required bytes type = 4;
  if (has_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->type(), target);
  }

  // required uint32 port = 5;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SRegisterAgentToServerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes agentid = 1;
    if (has_agentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->agentid());
    }

    // required bytes localip = 2;
    if (has_localip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->localip());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required bytes type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->type());
    }

    // required uint32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SRegisterAgentToServerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SRegisterAgentToServerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SRegisterAgentToServerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SRegisterAgentToServerReq::MergeFrom(const S2SRegisterAgentToServerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agentid()) {
      set_agentid(from.agentid());
    }
    if (from.has_localip()) {
      set_localip(from.localip());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SRegisterAgentToServerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SRegisterAgentToServerReq::CopyFrom(const S2SRegisterAgentToServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SRegisterAgentToServerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2SRegisterAgentToServerReq::Swap(S2SRegisterAgentToServerReq* other) {
  if (other != this) {
    std::swap(agentid_, other->agentid_);
    std::swap(localip_, other->localip_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SRegisterAgentToServerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SRegisterAgentToServerReq_descriptor_;
  metadata.reflection = S2SRegisterAgentToServerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SGetAgentIpAddressReq::kLocalipFieldNumber;
#endif  // !_MSC_VER

S2SGetAgentIpAddressReq::S2SGetAgentIpAddressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SGetAgentIpAddressReq::InitAsDefaultInstance() {
}

S2SGetAgentIpAddressReq::S2SGetAgentIpAddressReq(const S2SGetAgentIpAddressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SGetAgentIpAddressReq::SharedCtor() {
  _cached_size_ = 0;
  localip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SGetAgentIpAddressReq::~S2SGetAgentIpAddressReq() {
  SharedDtor();
}

void S2SGetAgentIpAddressReq::SharedDtor() {
  if (localip_ != &::google::protobuf::internal::kEmptyString) {
    delete localip_;
  }
  if (this != default_instance_) {
  }
}

void S2SGetAgentIpAddressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SGetAgentIpAddressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SGetAgentIpAddressReq_descriptor_;
}

const S2SGetAgentIpAddressReq& S2SGetAgentIpAddressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFDeployMessage_2eproto();
  return *default_instance_;
}

S2SGetAgentIpAddressReq* S2SGetAgentIpAddressReq::default_instance_ = NULL;

S2SGetAgentIpAddressReq* S2SGetAgentIpAddressReq::New() const {
  return new S2SGetAgentIpAddressReq;
}

void S2SGetAgentIpAddressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_localip()) {
      if (localip_ != &::google::protobuf::internal::kEmptyString) {
        localip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SGetAgentIpAddressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes localip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_localip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SGetAgentIpAddressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes localip = 1;
  if (has_localip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->localip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SGetAgentIpAddressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes localip = 1;
  if (has_localip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->localip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SGetAgentIpAddressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes localip = 1;
    if (has_localip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->localip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SGetAgentIpAddressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SGetAgentIpAddressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SGetAgentIpAddressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SGetAgentIpAddressReq::MergeFrom(const S2SGetAgentIpAddressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_localip()) {
      set_localip(from.localip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SGetAgentIpAddressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SGetAgentIpAddressReq::CopyFrom(const S2SGetAgentIpAddressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SGetAgentIpAddressReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2SGetAgentIpAddressReq::Swap(S2SGetAgentIpAddressReq* other) {
  if (other != this) {
    std::swap(localip_, other->localip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SGetAgentIpAddressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SGetAgentIpAddressReq_descriptor_;
  metadata.reflection = S2SGetAgentIpAddressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SGetAgentIpAddressAck::kAppnameFieldNumber;
const int S2SGetAgentIpAddressAck::kApptypeFieldNumber;
const int S2SGetAgentIpAddressAck::kAppidFieldNumber;
const int S2SGetAgentIpAddressAck::kIpFieldNumber;
const int S2SGetAgentIpAddressAck::kPortFieldNumber;
#endif  // !_MSC_VER

S2SGetAgentIpAddressAck::S2SGetAgentIpAddressAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SGetAgentIpAddressAck::InitAsDefaultInstance() {
}

S2SGetAgentIpAddressAck::S2SGetAgentIpAddressAck(const S2SGetAgentIpAddressAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SGetAgentIpAddressAck::SharedCtor() {
  _cached_size_ = 0;
  appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SGetAgentIpAddressAck::~S2SGetAgentIpAddressAck() {
  SharedDtor();
}

void S2SGetAgentIpAddressAck::SharedDtor() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    delete appid_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void S2SGetAgentIpAddressAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SGetAgentIpAddressAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SGetAgentIpAddressAck_descriptor_;
}

const S2SGetAgentIpAddressAck& S2SGetAgentIpAddressAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFDeployMessage_2eproto();
  return *default_instance_;
}

S2SGetAgentIpAddressAck* S2SGetAgentIpAddressAck::default_instance_ = NULL;

S2SGetAgentIpAddressAck* S2SGetAgentIpAddressAck::New() const {
  return new S2SGetAgentIpAddressAck;
}

void S2SGetAgentIpAddressAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_appname()) {
      if (appname_ != &::google::protobuf::internal::kEmptyString) {
        appname_->clear();
      }
    }
    if (has_apptype()) {
      if (apptype_ != &::google::protobuf::internal::kEmptyString) {
        apptype_->clear();
      }
    }
    if (has_appid()) {
      if (appid_ != &::google::protobuf::internal::kEmptyString) {
        appid_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SGetAgentIpAddressAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes appname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_appname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_apptype;
        break;
      }

      // required bytes apptype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apptype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_apptype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_appid;
        break;
      }

      // required bytes appid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_appid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // required bytes ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }

      // required uint32 port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SGetAgentIpAddressAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes appname = 1;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->appname(), output);
  }

  // required bytes apptype = 2;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->apptype(), output);
  }

  // required bytes appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->appid(), output);
  }

  // required bytes ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->ip(), output);
  }

  // required uint32 port = 5;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SGetAgentIpAddressAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes appname = 1;
  if (has_appname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->appname(), target);
  }

  // required bytes apptype = 2;
  if (has_apptype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->apptype(), target);
  }

  // required bytes appid = 3;
  if (has_appid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->appid(), target);
  }

  // required bytes ip = 4;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->ip(), target);
  }

  // required uint32 port = 5;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SGetAgentIpAddressAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes appname = 1;
    if (has_appname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->appname());
    }

    // required bytes apptype = 2;
    if (has_apptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->apptype());
    }

    // required bytes appid = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->appid());
    }

    // required bytes ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // required uint32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SGetAgentIpAddressAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SGetAgentIpAddressAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SGetAgentIpAddressAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SGetAgentIpAddressAck::MergeFrom(const S2SGetAgentIpAddressAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appname()) {
      set_appname(from.appname());
    }
    if (from.has_apptype()) {
      set_apptype(from.apptype());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SGetAgentIpAddressAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SGetAgentIpAddressAck::CopyFrom(const S2SGetAgentIpAddressAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SGetAgentIpAddressAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2SGetAgentIpAddressAck::Swap(S2SGetAgentIpAddressAck* other) {
  if (other != this) {
    std::swap(appname_, other->appname_);
    std::swap(apptype_, other->apptype_);
    std::swap(appid_, other->appid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SGetAgentIpAddressAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SGetAgentIpAddressAck_descriptor_;
  metadata.reflection = S2SGetAgentIpAddressAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBDeployCommand::kCommandFieldNumber;
const int PBDeployCommand::kAppnameFieldNumber;
const int PBDeployCommand::kApptypeFieldNumber;
const int PBDeployCommand::kAppidFieldNumber;
const int PBDeployCommand::kZoneidFieldNumber;
const int PBDeployCommand::kValueFieldNumber;
const int PBDeployCommand::kLogurlFieldNumber;
#endif  // !_MSC_VER

PBDeployCommand::PBDeployCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDeployCommand::InitAsDefaultInstance() {
}

PBDeployCommand::PBDeployCommand(const PBDeployCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDeployCommand::SharedCtor() {
  _cached_size_ = 0;
  command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zoneid_ = 0u;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDeployCommand::~PBDeployCommand() {
  SharedDtor();
}

void PBDeployCommand::SharedDtor() {
  if (command_ != &::google::protobuf::internal::kEmptyString) {
    delete command_;
  }
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    delete appid_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (logurl_ != &::google::protobuf::internal::kEmptyString) {
    delete logurl_;
  }
  if (this != default_instance_) {
  }
}

void PBDeployCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDeployCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDeployCommand_descriptor_;
}

const PBDeployCommand& PBDeployCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFDeployMessage_2eproto();
  return *default_instance_;
}

PBDeployCommand* PBDeployCommand::default_instance_ = NULL;

PBDeployCommand* PBDeployCommand::New() const {
  return new PBDeployCommand;
}

void PBDeployCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_command()) {
      if (command_ != &::google::protobuf::internal::kEmptyString) {
        command_->clear();
      }
    }
    if (has_appname()) {
      if (appname_ != &::google::protobuf::internal::kEmptyString) {
        appname_->clear();
      }
    }
    if (has_apptype()) {
      if (apptype_ != &::google::protobuf::internal::kEmptyString) {
        apptype_->clear();
      }
    }
    if (has_appid()) {
      if (appid_ != &::google::protobuf::internal::kEmptyString) {
        appid_->clear();
      }
    }
    zoneid_ = 0u;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
    if (has_logurl()) {
      if (logurl_ != &::google::protobuf::internal::kEmptyString) {
        logurl_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDeployCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_command()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appname;
        break;
      }

      // required bytes appname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_appname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_apptype;
        break;
      }

      // required bytes apptype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apptype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_apptype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_appid;
        break;
      }

      // required bytes appid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_appid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_zoneid;
        break;
      }

      // required uint32 zoneid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_value;
        break;
      }

      // required bytes value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_logurl;
        break;
      }

      // required bytes logurl = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_logurl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDeployCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->command(), output);
  }

  // required bytes appname = 2;
  if (has_appname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->appname(), output);
  }

  // required bytes apptype = 3;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->apptype(), output);
  }

  // required bytes appid = 4;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->appid(), output);
  }

  // required uint32 zoneid = 5;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zoneid(), output);
  }

  // required bytes value = 6;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->value(), output);
  }

  // required bytes logurl = 7;
  if (has_logurl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->logurl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDeployCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes command = 1;
  if (has_command()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->command(), target);
  }

  // required bytes appname = 2;
  if (has_appname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->appname(), target);
  }

  // required bytes apptype = 3;
  if (has_apptype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->apptype(), target);
  }

  // required bytes appid = 4;
  if (has_appid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->appid(), target);
  }

  // required uint32 zoneid = 5;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zoneid(), target);
  }

  // required bytes value = 6;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->value(), target);
  }

  // required bytes logurl = 7;
  if (has_logurl()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->logurl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDeployCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->command());
    }

    // required bytes appname = 2;
    if (has_appname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->appname());
    }

    // required bytes apptype = 3;
    if (has_apptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->apptype());
    }

    // required bytes appid = 4;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->appid());
    }

    // required uint32 zoneid = 5;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // required bytes value = 6;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // required bytes logurl = 7;
    if (has_logurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->logurl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDeployCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDeployCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDeployCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDeployCommand::MergeFrom(const PBDeployCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_appname()) {
      set_appname(from.appname());
    }
    if (from.has_apptype()) {
      set_apptype(from.apptype());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_logurl()) {
      set_logurl(from.logurl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDeployCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDeployCommand::CopyFrom(const PBDeployCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDeployCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void PBDeployCommand::Swap(PBDeployCommand* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(appname_, other->appname_);
    std::swap(apptype_, other->apptype_);
    std::swap(appid_, other->appid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(value_, other->value_);
    std::swap(logurl_, other->logurl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDeployCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDeployCommand_descriptor_;
  metadata.reflection = PBDeployCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SDeployCommandToAgentReq::kDeploycommandFieldNumber;
#endif  // !_MSC_VER

S2SDeployCommandToAgentReq::S2SDeployCommandToAgentReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SDeployCommandToAgentReq::InitAsDefaultInstance() {
  deploycommand_ = const_cast< ::KFMsg::PBDeployCommand*>(&::KFMsg::PBDeployCommand::default_instance());
}

S2SDeployCommandToAgentReq::S2SDeployCommandToAgentReq(const S2SDeployCommandToAgentReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SDeployCommandToAgentReq::SharedCtor() {
  _cached_size_ = 0;
  deploycommand_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SDeployCommandToAgentReq::~S2SDeployCommandToAgentReq() {
  SharedDtor();
}

void S2SDeployCommandToAgentReq::SharedDtor() {
  if (this != default_instance_) {
    delete deploycommand_;
  }
}

void S2SDeployCommandToAgentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SDeployCommandToAgentReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SDeployCommandToAgentReq_descriptor_;
}

const S2SDeployCommandToAgentReq& S2SDeployCommandToAgentReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFDeployMessage_2eproto();
  return *default_instance_;
}

S2SDeployCommandToAgentReq* S2SDeployCommandToAgentReq::default_instance_ = NULL;

S2SDeployCommandToAgentReq* S2SDeployCommandToAgentReq::New() const {
  return new S2SDeployCommandToAgentReq;
}

void S2SDeployCommandToAgentReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_deploycommand()) {
      if (deploycommand_ != NULL) deploycommand_->::KFMsg::PBDeployCommand::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SDeployCommandToAgentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KFMsg.PBDeployCommand deploycommand = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deploycommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SDeployCommandToAgentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KFMsg.PBDeployCommand deploycommand = 1;
  if (has_deploycommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->deploycommand(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SDeployCommandToAgentReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KFMsg.PBDeployCommand deploycommand = 1;
  if (has_deploycommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->deploycommand(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SDeployCommandToAgentReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KFMsg.PBDeployCommand deploycommand = 1;
    if (has_deploycommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deploycommand());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SDeployCommandToAgentReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SDeployCommandToAgentReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SDeployCommandToAgentReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SDeployCommandToAgentReq::MergeFrom(const S2SDeployCommandToAgentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deploycommand()) {
      mutable_deploycommand()->::KFMsg::PBDeployCommand::MergeFrom(from.deploycommand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SDeployCommandToAgentReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SDeployCommandToAgentReq::CopyFrom(const S2SDeployCommandToAgentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SDeployCommandToAgentReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_deploycommand()) {
    if (!this->deploycommand().IsInitialized()) return false;
  }
  return true;
}

void S2SDeployCommandToAgentReq::Swap(S2SDeployCommandToAgentReq* other) {
  if (other != this) {
    std::swap(deploycommand_, other->deploycommand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SDeployCommandToAgentReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SDeployCommandToAgentReq_descriptor_;
  metadata.reflection = S2SDeployCommandToAgentReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SDeployCommandToMasterReq::kDeploycommandFieldNumber;
#endif  // !_MSC_VER

S2SDeployCommandToMasterReq::S2SDeployCommandToMasterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SDeployCommandToMasterReq::InitAsDefaultInstance() {
  deploycommand_ = const_cast< ::KFMsg::PBDeployCommand*>(&::KFMsg::PBDeployCommand::default_instance());
}

S2SDeployCommandToMasterReq::S2SDeployCommandToMasterReq(const S2SDeployCommandToMasterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SDeployCommandToMasterReq::SharedCtor() {
  _cached_size_ = 0;
  deploycommand_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SDeployCommandToMasterReq::~S2SDeployCommandToMasterReq() {
  SharedDtor();
}

void S2SDeployCommandToMasterReq::SharedDtor() {
  if (this != default_instance_) {
    delete deploycommand_;
  }
}

void S2SDeployCommandToMasterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SDeployCommandToMasterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SDeployCommandToMasterReq_descriptor_;
}

const S2SDeployCommandToMasterReq& S2SDeployCommandToMasterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFDeployMessage_2eproto();
  return *default_instance_;
}

S2SDeployCommandToMasterReq* S2SDeployCommandToMasterReq::default_instance_ = NULL;

S2SDeployCommandToMasterReq* S2SDeployCommandToMasterReq::New() const {
  return new S2SDeployCommandToMasterReq;
}

void S2SDeployCommandToMasterReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_deploycommand()) {
      if (deploycommand_ != NULL) deploycommand_->::KFMsg::PBDeployCommand::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SDeployCommandToMasterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KFMsg.PBDeployCommand deploycommand = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deploycommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SDeployCommandToMasterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KFMsg.PBDeployCommand deploycommand = 1;
  if (has_deploycommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->deploycommand(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SDeployCommandToMasterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KFMsg.PBDeployCommand deploycommand = 1;
  if (has_deploycommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->deploycommand(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SDeployCommandToMasterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KFMsg.PBDeployCommand deploycommand = 1;
    if (has_deploycommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deploycommand());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SDeployCommandToMasterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SDeployCommandToMasterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SDeployCommandToMasterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SDeployCommandToMasterReq::MergeFrom(const S2SDeployCommandToMasterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deploycommand()) {
      mutable_deploycommand()->::KFMsg::PBDeployCommand::MergeFrom(from.deploycommand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SDeployCommandToMasterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SDeployCommandToMasterReq::CopyFrom(const S2SDeployCommandToMasterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SDeployCommandToMasterReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_deploycommand()) {
    if (!this->deploycommand().IsInitialized()) return false;
  }
  return true;
}

void S2SDeployCommandToMasterReq::Swap(S2SDeployCommandToMasterReq* other) {
  if (other != this) {
    std::swap(deploycommand_, other->deploycommand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SDeployCommandToMasterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SDeployCommandToMasterReq_descriptor_;
  metadata.reflection = S2SDeployCommandToMasterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SDeployCommandToServerReq::kDeploycommandFieldNumber;
#endif  // !_MSC_VER

S2SDeployCommandToServerReq::S2SDeployCommandToServerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SDeployCommandToServerReq::InitAsDefaultInstance() {
  deploycommand_ = const_cast< ::KFMsg::PBDeployCommand*>(&::KFMsg::PBDeployCommand::default_instance());
}

S2SDeployCommandToServerReq::S2SDeployCommandToServerReq(const S2SDeployCommandToServerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SDeployCommandToServerReq::SharedCtor() {
  _cached_size_ = 0;
  deploycommand_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SDeployCommandToServerReq::~S2SDeployCommandToServerReq() {
  SharedDtor();
}

void S2SDeployCommandToServerReq::SharedDtor() {
  if (this != default_instance_) {
    delete deploycommand_;
  }
}

void S2SDeployCommandToServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SDeployCommandToServerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SDeployCommandToServerReq_descriptor_;
}

const S2SDeployCommandToServerReq& S2SDeployCommandToServerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFDeployMessage_2eproto();
  return *default_instance_;
}

S2SDeployCommandToServerReq* S2SDeployCommandToServerReq::default_instance_ = NULL;

S2SDeployCommandToServerReq* S2SDeployCommandToServerReq::New() const {
  return new S2SDeployCommandToServerReq;
}

void S2SDeployCommandToServerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_deploycommand()) {
      if (deploycommand_ != NULL) deploycommand_->::KFMsg::PBDeployCommand::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SDeployCommandToServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KFMsg.PBDeployCommand deploycommand = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deploycommand()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SDeployCommandToServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KFMsg.PBDeployCommand deploycommand = 1;
  if (has_deploycommand()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->deploycommand(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SDeployCommandToServerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KFMsg.PBDeployCommand deploycommand = 1;
  if (has_deploycommand()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->deploycommand(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SDeployCommandToServerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KFMsg.PBDeployCommand deploycommand = 1;
    if (has_deploycommand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deploycommand());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SDeployCommandToServerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SDeployCommandToServerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SDeployCommandToServerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SDeployCommandToServerReq::MergeFrom(const S2SDeployCommandToServerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deploycommand()) {
      mutable_deploycommand()->::KFMsg::PBDeployCommand::MergeFrom(from.deploycommand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SDeployCommandToServerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SDeployCommandToServerReq::CopyFrom(const S2SDeployCommandToServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SDeployCommandToServerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_deploycommand()) {
    if (!this->deploycommand().IsInitialized()) return false;
  }
  return true;
}

void S2SDeployCommandToServerReq::Swap(S2SDeployCommandToServerReq* other) {
  if (other != this) {
    std::swap(deploycommand_, other->deploycommand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SDeployCommandToServerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SDeployCommandToServerReq_descriptor_;
  metadata.reflection = S2SDeployCommandToServerReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

// @@protoc_insertion_point(global_scope)
