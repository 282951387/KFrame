// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFLogMessage.proto

#ifndef PROTOBUF_KFLogMessage_2eproto__INCLUDED
#define PROTOBUF_KFLogMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "KFCommonMessage.pb.h"
// @@protoc_insertion_point(includes)

namespace KFMsg {

// Internal implementation detail -- do not call these.
void LIBPROTOC_EXPORT protobuf_AddDesc_KFLogMessage_2eproto();
void protobuf_AssignDesc_KFLogMessage_2eproto();
void protobuf_ShutdownFile_KFLogMessage_2eproto();

class S2SLogReq;

enum LogProtocol {
  S2S_LOG_REQ = 21001
};
LIBPROTOC_EXPORT bool LogProtocol_IsValid(int value);
const LogProtocol LogProtocol_MIN = S2S_LOG_REQ;
const LogProtocol LogProtocol_MAX = S2S_LOG_REQ;
const int LogProtocol_ARRAYSIZE = LogProtocol_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* LogProtocol_descriptor();
inline const ::std::string& LogProtocol_Name(LogProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogProtocol_descriptor(), value);
}
inline bool LogProtocol_Parse(
    const ::std::string& name, LogProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogProtocol>(
    LogProtocol_descriptor(), name, value);
}
// ===================================================================

class LIBPROTOC_EXPORT S2SLogReq : public ::google::protobuf::Message {
 public:
  S2SLogReq();
  virtual ~S2SLogReq();

  S2SLogReq(const S2SLogReq& from);

  inline S2SLogReq& operator=(const S2SLogReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SLogReq& default_instance();

  void Swap(S2SLogReq* other);

  // implements Message ----------------------------------------------

  S2SLogReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SLogReq& from);
  void MergeFrom(const S2SLogReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 log_level = 1;
  inline bool has_log_level() const;
  inline void clear_log_level();
  static const int kLogLevelFieldNumber = 1;
  inline ::google::protobuf::int32 log_level() const;
  inline void set_log_level(::google::protobuf::int32 value);

  // required int32 log_category = 2;
  inline bool has_log_category() const;
  inline void clear_log_category();
  static const int kLogCategoryFieldNumber = 2;
  inline ::google::protobuf::int32 log_category() const;
  inline void set_log_category(::google::protobuf::int32 value);

  // required int32 zone_id = 3;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 3;
  inline ::google::protobuf::int32 zone_id() const;
  inline void set_zone_id(::google::protobuf::int32 value);

  // required string app_name = 4;
  inline bool has_app_name() const;
  inline void clear_app_name();
  static const int kAppNameFieldNumber = 4;
  inline const ::std::string& app_name() const;
  inline void set_app_name(const ::std::string& value);
  inline void set_app_name(const char* value);
  inline void set_app_name(const char* value, size_t size);
  inline ::std::string* mutable_app_name();
  inline ::std::string* release_app_name();
  inline void set_allocated_app_name(::std::string* app_name);

  // required string app_type = 5;
  inline bool has_app_type() const;
  inline void clear_app_type();
  static const int kAppTypeFieldNumber = 5;
  inline const ::std::string& app_type() const;
  inline void set_app_type(const ::std::string& value);
  inline void set_app_type(const char* value);
  inline void set_app_type(const char* value, size_t size);
  inline ::std::string* mutable_app_type();
  inline ::std::string* release_app_type();
  inline void set_allocated_app_type(::std::string* app_type);

  // required int32 app_id = 6;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 6;
  inline ::google::protobuf::int32 app_id() const;
  inline void set_app_id(::google::protobuf::int32 value);

  // required string log_info = 7;
  inline bool has_log_info() const;
  inline void clear_log_info();
  static const int kLogInfoFieldNumber = 7;
  inline const ::std::string& log_info() const;
  inline void set_log_info(const ::std::string& value);
  inline void set_log_info(const char* value);
  inline void set_log_info(const char* value, size_t size);
  inline ::std::string* mutable_log_info();
  inline ::std::string* release_log_info();
  inline void set_allocated_log_info(::std::string* log_info);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SLogReq)
 private:
  inline void set_has_log_level();
  inline void clear_has_log_level();
  inline void set_has_log_category();
  inline void clear_has_log_category();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_app_name();
  inline void clear_has_app_name();
  inline void set_has_app_type();
  inline void clear_has_app_type();
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_log_info();
  inline void clear_has_log_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 log_level_;
  ::google::protobuf::int32 log_category_;
  ::std::string* app_name_;
  ::google::protobuf::int32 zone_id_;
  ::google::protobuf::int32 app_id_;
  ::std::string* app_type_;
  ::std::string* log_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFLogMessage_2eproto();
  friend void protobuf_AssignDesc_KFLogMessage_2eproto();
  friend void protobuf_ShutdownFile_KFLogMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SLogReq* default_instance_;
};
// ===================================================================


// ===================================================================

// S2SLogReq

// required int32 log_level = 1;
inline bool S2SLogReq::has_log_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SLogReq::set_has_log_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SLogReq::clear_has_log_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SLogReq::clear_log_level() {
  log_level_ = 0;
  clear_has_log_level();
}
inline ::google::protobuf::int32 S2SLogReq::log_level() const {
  return log_level_;
}
inline void S2SLogReq::set_log_level(::google::protobuf::int32 value) {
  set_has_log_level();
  log_level_ = value;
}

// required int32 log_category = 2;
inline bool S2SLogReq::has_log_category() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SLogReq::set_has_log_category() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SLogReq::clear_has_log_category() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SLogReq::clear_log_category() {
  log_category_ = 0;
  clear_has_log_category();
}
inline ::google::protobuf::int32 S2SLogReq::log_category() const {
  return log_category_;
}
inline void S2SLogReq::set_log_category(::google::protobuf::int32 value) {
  set_has_log_category();
  log_category_ = value;
}

// required int32 zone_id = 3;
inline bool S2SLogReq::has_zone_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SLogReq::set_has_zone_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SLogReq::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SLogReq::clear_zone_id() {
  zone_id_ = 0;
  clear_has_zone_id();
}
inline ::google::protobuf::int32 S2SLogReq::zone_id() const {
  return zone_id_;
}
inline void S2SLogReq::set_zone_id(::google::protobuf::int32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required string app_name = 4;
inline bool S2SLogReq::has_app_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SLogReq::set_has_app_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SLogReq::clear_has_app_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SLogReq::clear_app_name() {
  if (app_name_ != &::google::protobuf::internal::kEmptyString) {
    app_name_->clear();
  }
  clear_has_app_name();
}
inline const ::std::string& S2SLogReq::app_name() const {
  return *app_name_;
}
inline void S2SLogReq::set_app_name(const ::std::string& value) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::kEmptyString) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(value);
}
inline void S2SLogReq::set_app_name(const char* value) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::kEmptyString) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(value);
}
inline void S2SLogReq::set_app_name(const char* value, size_t size) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::kEmptyString) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SLogReq::mutable_app_name() {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::kEmptyString) {
    app_name_ = new ::std::string;
  }
  return app_name_;
}
inline ::std::string* S2SLogReq::release_app_name() {
  clear_has_app_name();
  if (app_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_name_;
    app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SLogReq::set_allocated_app_name(::std::string* app_name) {
  if (app_name_ != &::google::protobuf::internal::kEmptyString) {
    delete app_name_;
  }
  if (app_name) {
    set_has_app_name();
    app_name_ = app_name;
  } else {
    clear_has_app_name();
    app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string app_type = 5;
inline bool S2SLogReq::has_app_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SLogReq::set_has_app_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SLogReq::clear_has_app_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SLogReq::clear_app_type() {
  if (app_type_ != &::google::protobuf::internal::kEmptyString) {
    app_type_->clear();
  }
  clear_has_app_type();
}
inline const ::std::string& S2SLogReq::app_type() const {
  return *app_type_;
}
inline void S2SLogReq::set_app_type(const ::std::string& value) {
  set_has_app_type();
  if (app_type_ == &::google::protobuf::internal::kEmptyString) {
    app_type_ = new ::std::string;
  }
  app_type_->assign(value);
}
inline void S2SLogReq::set_app_type(const char* value) {
  set_has_app_type();
  if (app_type_ == &::google::protobuf::internal::kEmptyString) {
    app_type_ = new ::std::string;
  }
  app_type_->assign(value);
}
inline void S2SLogReq::set_app_type(const char* value, size_t size) {
  set_has_app_type();
  if (app_type_ == &::google::protobuf::internal::kEmptyString) {
    app_type_ = new ::std::string;
  }
  app_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SLogReq::mutable_app_type() {
  set_has_app_type();
  if (app_type_ == &::google::protobuf::internal::kEmptyString) {
    app_type_ = new ::std::string;
  }
  return app_type_;
}
inline ::std::string* S2SLogReq::release_app_type() {
  clear_has_app_type();
  if (app_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_type_;
    app_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SLogReq::set_allocated_app_type(::std::string* app_type) {
  if (app_type_ != &::google::protobuf::internal::kEmptyString) {
    delete app_type_;
  }
  if (app_type) {
    set_has_app_type();
    app_type_ = app_type;
  } else {
    clear_has_app_type();
    app_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 app_id = 6;
inline bool S2SLogReq::has_app_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void S2SLogReq::set_has_app_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void S2SLogReq::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void S2SLogReq::clear_app_id() {
  app_id_ = 0;
  clear_has_app_id();
}
inline ::google::protobuf::int32 S2SLogReq::app_id() const {
  return app_id_;
}
inline void S2SLogReq::set_app_id(::google::protobuf::int32 value) {
  set_has_app_id();
  app_id_ = value;
}

// required string log_info = 7;
inline bool S2SLogReq::has_log_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void S2SLogReq::set_has_log_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void S2SLogReq::clear_has_log_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void S2SLogReq::clear_log_info() {
  if (log_info_ != &::google::protobuf::internal::kEmptyString) {
    log_info_->clear();
  }
  clear_has_log_info();
}
inline const ::std::string& S2SLogReq::log_info() const {
  return *log_info_;
}
inline void S2SLogReq::set_log_info(const ::std::string& value) {
  set_has_log_info();
  if (log_info_ == &::google::protobuf::internal::kEmptyString) {
    log_info_ = new ::std::string;
  }
  log_info_->assign(value);
}
inline void S2SLogReq::set_log_info(const char* value) {
  set_has_log_info();
  if (log_info_ == &::google::protobuf::internal::kEmptyString) {
    log_info_ = new ::std::string;
  }
  log_info_->assign(value);
}
inline void S2SLogReq::set_log_info(const char* value, size_t size) {
  set_has_log_info();
  if (log_info_ == &::google::protobuf::internal::kEmptyString) {
    log_info_ = new ::std::string;
  }
  log_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SLogReq::mutable_log_info() {
  set_has_log_info();
  if (log_info_ == &::google::protobuf::internal::kEmptyString) {
    log_info_ = new ::std::string;
  }
  return log_info_;
}
inline ::std::string* S2SLogReq::release_log_info() {
  clear_has_log_info();
  if (log_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = log_info_;
    log_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SLogReq::set_allocated_log_info(::std::string* log_info) {
  if (log_info_ != &::google::protobuf::internal::kEmptyString) {
    delete log_info_;
  }
  if (log_info) {
    set_has_log_info();
    log_info_ = log_info;
  } else {
    clear_has_log_info();
    log_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::LogProtocol>() {
  return ::KFMsg::LogProtocol_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_KFLogMessage_2eproto__INCLUDED
