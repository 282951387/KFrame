// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFCommonMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "KFCommonMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KFMsg {

namespace {

const ::google::protobuf::Descriptor* Vector3D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3D_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBInt32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBInt32_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBUIntUInt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBUIntUInt_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBUInt32_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBUInt32_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBInt64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBInt64_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBUInt64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBUInt64_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDouble_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDouble_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBString_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBStrings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBStrings_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBVector3D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBVector3D_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRankData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRankData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRankDatas_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRankDatas_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTaskData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTaskData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBTaskDatas_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBTaskDatas_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBattlePlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBattlePlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBattleCamp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBattleCamp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBMatchGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBMatchGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGuestData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGuestData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBattleScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBattleScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRecentData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRecentData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBPlayerIds_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBPlayerIds_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBApplicationlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBApplicationlist_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBApplicationlists_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBApplicationlists_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGuildIdArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGuildIdArray_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AckEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ChannelEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SexEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* KickEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FlagEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MailEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MailConfigEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StatusEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* InviteEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StoreWishEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WishStateEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RankListEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FriendLinessEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GuildEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GuildReviewEnum_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_KFCommonMessage_2eproto() {
  protobuf_AddDesc_KFCommonMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "KFCommonMessage.proto");
  GOOGLE_CHECK(file != NULL);
  Vector3D_descriptor_ = file->message_type(0);
  static const int Vector3D_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3D, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3D, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3D, z_),
  };
  Vector3D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector3D_descriptor_,
      Vector3D::default_instance_,
      Vector3D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector3D));
  PBInt32_descriptor_ = file->message_type(1);
  static const int PBInt32_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBInt32, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBInt32, value_),
  };
  PBInt32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBInt32_descriptor_,
      PBInt32::default_instance_,
      PBInt32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBInt32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBInt32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBInt32));
  PBUIntUInt_descriptor_ = file->message_type(2);
  static const int PBUIntUInt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUIntUInt, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUIntUInt, value_),
  };
  PBUIntUInt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBUIntUInt_descriptor_,
      PBUIntUInt::default_instance_,
      PBUIntUInt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUIntUInt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUIntUInt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBUIntUInt));
  PBUInt32_descriptor_ = file->message_type(3);
  static const int PBUInt32_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUInt32, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUInt32, value_),
  };
  PBUInt32_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBUInt32_descriptor_,
      PBUInt32::default_instance_,
      PBUInt32_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUInt32, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUInt32, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBUInt32));
  PBInt64_descriptor_ = file->message_type(4);
  static const int PBInt64_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBInt64, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBInt64, value_),
  };
  PBInt64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBInt64_descriptor_,
      PBInt64::default_instance_,
      PBInt64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBInt64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBInt64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBInt64));
  PBUInt64_descriptor_ = file->message_type(5);
  static const int PBUInt64_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUInt64, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUInt64, value_),
  };
  PBUInt64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBUInt64_descriptor_,
      PBUInt64::default_instance_,
      PBUInt64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUInt64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBUInt64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBUInt64));
  PBDouble_descriptor_ = file->message_type(6);
  static const int PBDouble_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDouble, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDouble, value_),
  };
  PBDouble_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDouble_descriptor_,
      PBDouble::default_instance_,
      PBDouble_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDouble, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDouble, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDouble));
  PBString_descriptor_ = file->message_type(7);
  static const int PBString_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBString, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBString, value_),
  };
  PBString_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBString_descriptor_,
      PBString::default_instance_,
      PBString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBString, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBString, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBString));
  PBStrings_descriptor_ = file->message_type(8);
  static const int PBStrings_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStrings, pbstring_),
  };
  PBStrings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBStrings_descriptor_,
      PBStrings::default_instance_,
      PBStrings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStrings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStrings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBStrings));
  PBVector3D_descriptor_ = file->message_type(9);
  static const int PBVector3D_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBVector3D, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBVector3D, value_),
  };
  PBVector3D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBVector3D_descriptor_,
      PBVector3D::default_instance_,
      PBVector3D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBVector3D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBVector3D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBVector3D));
  PBArray_descriptor_ = file->message_type(10);
  static const int PBArray_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBArray, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBArray, pbint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBArray, pbuint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBArray, pbint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBArray, pbuint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBArray, pbdouble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBArray, pbstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBArray, pbvector3d_),
  };
  PBArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBArray_descriptor_,
      PBArray::default_instance_,
      PBArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBArray));
  PBObject_descriptor_ = file->message_type(11);
  static const int PBObject_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBObject, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBObject, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBObject, pbint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBObject, pbuint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBObject, pbint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBObject, pbuint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBObject, pbdouble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBObject, pbstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBObject, pbvector3d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBObject, pbarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBObject, pbobject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBObject, pbrecord_),
  };
  PBObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBObject_descriptor_,
      PBObject::default_instance_,
      PBObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBObject));
  PBRecord_descriptor_ = file->message_type(12);
  static const int PBRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRecord, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRecord, pbobject_),
  };
  PBRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRecord_descriptor_,
      PBRecord::default_instance_,
      PBRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRecord));
  PBRankData_descriptor_ = file->message_type(13);
  static const int PBRankData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankData, rankindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankData, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankData, rankscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankData, pbdata_),
  };
  PBRankData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRankData_descriptor_,
      PBRankData::default_instance_,
      PBRankData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRankData));
  PBRankDatas_descriptor_ = file->message_type(14);
  static const int PBRankDatas_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankDatas, rankdata_),
  };
  PBRankDatas_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRankDatas_descriptor_,
      PBRankDatas::default_instance_,
      PBRankDatas_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankDatas, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRankDatas, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRankDatas));
  PBTaskData_descriptor_ = file->message_type(15);
  static const int PBTaskData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskData, value_),
  };
  PBTaskData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTaskData_descriptor_,
      PBTaskData::default_instance_,
      PBTaskData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTaskData));
  PBTaskDatas_descriptor_ = file->message_type(16);
  static const int PBTaskDatas_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskDatas, taskdata_),
  };
  PBTaskDatas_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBTaskDatas_descriptor_,
      PBTaskDatas::default_instance_,
      PBTaskDatas_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskDatas, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBTaskDatas, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBTaskDatas));
  PBBattlePlayer_descriptor_ = file->message_type(17);
  static const int PBBattlePlayer_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePlayer, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePlayer, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePlayer, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePlayer, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePlayer, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePlayer, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePlayer, iconbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePlayer, grading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePlayer, modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePlayer, clothesid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePlayer, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePlayer, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePlayer, achieve_),
  };
  PBBattlePlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBattlePlayer_descriptor_,
      PBBattlePlayer::default_instance_,
      PBBattlePlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattlePlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBattlePlayer));
  PBBattleCamp_descriptor_ = file->message_type(18);
  static const int PBBattleCamp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleCamp, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleCamp, pbplayer_),
  };
  PBBattleCamp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBattleCamp_descriptor_,
      PBBattleCamp::default_instance_,
      PBBattleCamp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleCamp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleCamp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBattleCamp));
  PBMatchGroup_descriptor_ = file->message_type(19);
  static const int PBMatchGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatchGroup, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatchGroup, pbplayer_),
  };
  PBMatchGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBMatchGroup_descriptor_,
      PBMatchGroup::default_instance_,
      PBMatchGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatchGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBMatchGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBMatchGroup));
  PBGuestData_descriptor_ = file->message_type(20);
  static const int PBGuestData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGuestData, guestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGuestData, guesticon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGuestData, guesticonbox_),
  };
  PBGuestData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGuestData_descriptor_,
      PBGuestData::default_instance_,
      PBGuestData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGuestData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGuestData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGuestData));
  PBBattleScore_descriptor_ = file->message_type(21);
  static const int PBBattleScore_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleScore, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleScore, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleScore, pbdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleScore, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleScore, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleScore, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleScore, achieve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleScore, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleScore, playercount_),
  };
  PBBattleScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBattleScore_descriptor_,
      PBBattleScore::default_instance_,
      PBBattleScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBattleScore));
  PBRecentData_descriptor_ = file->message_type(22);
  static const int PBRecentData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRecentData, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRecentData, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRecentData, totalnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRecentData, kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRecentData, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRecentData, bekillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRecentData, relationtype_),
  };
  PBRecentData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRecentData_descriptor_,
      PBRecentData::default_instance_,
      PBRecentData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRecentData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRecentData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRecentData));
  PBPlayerIds_descriptor_ = file->message_type(23);
  static const int PBPlayerIds_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerIds, playerid_),
  };
  PBPlayerIds_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBPlayerIds_descriptor_,
      PBPlayerIds::default_instance_,
      PBPlayerIds_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerIds, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBPlayerIds, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBPlayerIds));
  PBApplicationlist_descriptor_ = file->message_type(24);
  static const int PBApplicationlist_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApplicationlist, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApplicationlist, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApplicationlist, basic_),
  };
  PBApplicationlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBApplicationlist_descriptor_,
      PBApplicationlist::default_instance_,
      PBApplicationlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApplicationlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApplicationlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBApplicationlist));
  PBApplicationlists_descriptor_ = file->message_type(25);
  static const int PBApplicationlists_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApplicationlists, applylists_),
  };
  PBApplicationlists_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBApplicationlists_descriptor_,
      PBApplicationlists::default_instance_,
      PBApplicationlists_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApplicationlists, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBApplicationlists, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBApplicationlists));
  PBGuildIdArray_descriptor_ = file->message_type(26);
  static const int PBGuildIdArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGuildIdArray, guildid_),
  };
  PBGuildIdArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGuildIdArray_descriptor_,
      PBGuildIdArray::default_instance_,
      PBGuildIdArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGuildIdArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGuildIdArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGuildIdArray));
  AckEnum_descriptor_ = file->enum_type(0);
  ChannelEnum_descriptor_ = file->enum_type(1);
  SexEnum_descriptor_ = file->enum_type(2);
  KickEnum_descriptor_ = file->enum_type(3);
  FlagEnum_descriptor_ = file->enum_type(4);
  MailEnum_descriptor_ = file->enum_type(5);
  MailConfigEnum_descriptor_ = file->enum_type(6);
  StatusEnum_descriptor_ = file->enum_type(7);
  ChatEnum_descriptor_ = file->enum_type(8);
  InviteEnum_descriptor_ = file->enum_type(9);
  StoreWishEnum_descriptor_ = file->enum_type(10);
  WishStateEnum_descriptor_ = file->enum_type(11);
  RankListEnum_descriptor_ = file->enum_type(12);
  FriendLinessEnum_descriptor_ = file->enum_type(13);
  GuildEnum_descriptor_ = file->enum_type(14);
  GuildReviewEnum_descriptor_ = file->enum_type(15);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_KFCommonMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector3D_descriptor_, &Vector3D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBInt32_descriptor_, &PBInt32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBUIntUInt_descriptor_, &PBUIntUInt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBUInt32_descriptor_, &PBUInt32::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBInt64_descriptor_, &PBInt64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBUInt64_descriptor_, &PBUInt64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDouble_descriptor_, &PBDouble::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBString_descriptor_, &PBString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBStrings_descriptor_, &PBStrings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBVector3D_descriptor_, &PBVector3D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBArray_descriptor_, &PBArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBObject_descriptor_, &PBObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRecord_descriptor_, &PBRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRankData_descriptor_, &PBRankData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRankDatas_descriptor_, &PBRankDatas::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTaskData_descriptor_, &PBTaskData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBTaskDatas_descriptor_, &PBTaskDatas::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBattlePlayer_descriptor_, &PBBattlePlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBattleCamp_descriptor_, &PBBattleCamp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBMatchGroup_descriptor_, &PBMatchGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGuestData_descriptor_, &PBGuestData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBattleScore_descriptor_, &PBBattleScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRecentData_descriptor_, &PBRecentData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBPlayerIds_descriptor_, &PBPlayerIds::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBApplicationlist_descriptor_, &PBApplicationlist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBApplicationlists_descriptor_, &PBApplicationlists::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGuildIdArray_descriptor_, &PBGuildIdArray::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_KFCommonMessage_2eproto() {
  delete Vector3D::default_instance_;
  delete Vector3D_reflection_;
  delete PBInt32::default_instance_;
  delete PBInt32_reflection_;
  delete PBUIntUInt::default_instance_;
  delete PBUIntUInt_reflection_;
  delete PBUInt32::default_instance_;
  delete PBUInt32_reflection_;
  delete PBInt64::default_instance_;
  delete PBInt64_reflection_;
  delete PBUInt64::default_instance_;
  delete PBUInt64_reflection_;
  delete PBDouble::default_instance_;
  delete PBDouble_reflection_;
  delete PBString::default_instance_;
  delete PBString_reflection_;
  delete PBStrings::default_instance_;
  delete PBStrings_reflection_;
  delete PBVector3D::default_instance_;
  delete PBVector3D_reflection_;
  delete PBArray::default_instance_;
  delete PBArray_reflection_;
  delete PBObject::default_instance_;
  delete PBObject_reflection_;
  delete PBRecord::default_instance_;
  delete PBRecord_reflection_;
  delete PBRankData::default_instance_;
  delete PBRankData_reflection_;
  delete PBRankDatas::default_instance_;
  delete PBRankDatas_reflection_;
  delete PBTaskData::default_instance_;
  delete PBTaskData_reflection_;
  delete PBTaskDatas::default_instance_;
  delete PBTaskDatas_reflection_;
  delete PBBattlePlayer::default_instance_;
  delete PBBattlePlayer_reflection_;
  delete PBBattleCamp::default_instance_;
  delete PBBattleCamp_reflection_;
  delete PBMatchGroup::default_instance_;
  delete PBMatchGroup_reflection_;
  delete PBGuestData::default_instance_;
  delete PBGuestData_reflection_;
  delete PBBattleScore::default_instance_;
  delete PBBattleScore_reflection_;
  delete PBRecentData::default_instance_;
  delete PBRecentData_reflection_;
  delete PBPlayerIds::default_instance_;
  delete PBPlayerIds_reflection_;
  delete PBApplicationlist::default_instance_;
  delete PBApplicationlist_reflection_;
  delete PBApplicationlists::default_instance_;
  delete PBApplicationlists_reflection_;
  delete PBGuildIdArray::default_instance_;
  delete PBGuildIdArray_reflection_;
}

void protobuf_AddDesc_KFCommonMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025KFCommonMessage.proto\022\005KFMsg\"+\n\010Vector"
    "3D\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"&\n\007P"
    "BInt32\022\014\n\004name\030\001 \001(\014\022\r\n\005value\030\002 \001(\021\"(\n\nP"
    "BUIntUInt\022\013\n\003key\030\001 \001(\004\022\r\n\005value\030\002 \001(\r\"\'\n"
    "\010PBUInt32\022\014\n\004name\030\001 \001(\014\022\r\n\005value\030\002 \001(\r\"&"
    "\n\007PBInt64\022\014\n\004name\030\001 \001(\014\022\r\n\005value\030\002 \001(\022\"\'"
    "\n\010PBUInt64\022\014\n\004name\030\001 \001(\014\022\r\n\005value\030\002 \001(\004\""
    "\'\n\010PBDouble\022\014\n\004name\030\001 \001(\014\022\r\n\005value\030\002 \001(\001"
    "\"\'\n\010PBString\022\014\n\004name\030\001 \001(\014\022\r\n\005value\030\002 \001("
    "\014\".\n\tPBStrings\022!\n\010pbstring\030\001 \003(\0132\017.KFMsg"
    ".PBString\":\n\nPBVector3D\022\014\n\004name\030\001 \001(\014\022\036\n"
    "\005value\030\002 \001(\0132\017.KFMsg.Vector3D\"\246\001\n\007PBArra"
    "y\022\014\n\004name\030\001 \001(\014\022\017\n\007pbint32\030\002 \003(\021\022\020\n\010pbui"
    "nt32\030\003 \003(\r\022\017\n\007pbint64\030\004 \003(\022\022\020\n\010pbuint64\030"
    "\005 \003(\004\022\020\n\010pbdouble\030\006 \003(\001\022\020\n\010pbstring\030\007 \003("
    "\014\022#\n\npbvector3d\030\010 \003(\0132\017.KFMsg.Vector3D\"\201"
    "\003\n\010PBObject\022\014\n\004name\030\001 \001(\014\022\013\n\003key\030\002 \001(\004\022\037"
    "\n\007pbint32\030\003 \003(\0132\016.KFMsg.PBInt32\022!\n\010pbuin"
    "t32\030\004 \003(\0132\017.KFMsg.PBUInt32\022\037\n\007pbint64\030\005 "
    "\003(\0132\016.KFMsg.PBInt64\022!\n\010pbuint64\030\006 \003(\0132\017."
    "KFMsg.PBUInt64\022!\n\010pbdouble\030\007 \003(\0132\017.KFMsg"
    ".PBDouble\022!\n\010pbstring\030\010 \003(\0132\017.KFMsg.PBSt"
    "ring\022%\n\npbvector3d\030\t \003(\0132\021.KFMsg.PBVecto"
    "r3D\022\037\n\007pbarray\030\n \003(\0132\016.KFMsg.PBArray\022!\n\010"
    "pbobject\030\013 \003(\0132\017.KFMsg.PBObject\022!\n\010pbrec"
    "ord\030\014 \003(\0132\017.KFMsg.PBRecord\";\n\010PBRecord\022\014"
    "\n\004name\030\001 \001(\014\022!\n\010pbobject\030\002 \003(\0132\017.KFMsg.P"
    "BObject\"f\n\nPBRankData\022\021\n\trankindex\030\001 \001(\r"
    "\022\020\n\010playerid\030\002 \001(\r\022\021\n\trankscore\030\003 \001(\004\022 \n"
    "\006pbdata\030\004 \001(\0132\020.KFMsg.PBStrings\"2\n\013PBRan"
    "kDatas\022#\n\010rankdata\030\003 \003(\0132\021.KFMsg.PBRankD"
    "ata\"\'\n\nPBTaskData\022\n\n\002id\030\001 \001(\r\022\r\n\005value\030\002"
    " \001(\r\"2\n\013PBTaskDatas\022#\n\010taskdata\030\001 \003(\0132\021."
    "KFMsg.PBTaskData\"\371\001\n\016PBBattlePlayer\022\016\n\006z"
    "oneid\030\001 \001(\r\022\020\n\010serverid\030\002 \001(\r\022\020\n\010playeri"
    "d\030\003 \001(\r\022\014\n\004name\030\004 \001(\014\022\013\n\003sex\030\005 \001(\r\022\014\n\004ic"
    "on\030\006 \001(\014\022\017\n\007iconbox\030\007 \001(\014\022\017\n\007grading\030\010 \001"
    "(\r\022\017\n\007modelid\030\t \001(\r\022\021\n\tclothesid\030\n \001(\r\022\017"
    "\n\007groupid\030\013 \001(\004\022\016\n\006campid\030\014 \001(\r\022#\n\007achie"
    "ve\030\r \001(\0132\022.KFMsg.PBTaskDatas\"G\n\014PBBattle"
    "Camp\022\016\n\006campid\030\001 \002(\r\022\'\n\010pbplayer\030\002 \003(\0132\025"
    ".KFMsg.PBBattlePlayer\"H\n\014PBMatchGroup\022\017\n"
    "\007groupid\030\001 \002(\004\022\'\n\010pbplayer\030\002 \003(\0132\025.KFMsg"
    ".PBBattlePlayer\"G\n\013PBGuestData\022\017\n\007guesti"
    "d\030\001 \002(\r\022\021\n\tguesticon\030\002 \002(\014\022\024\n\014guesticonb"
    "ox\030\003 \002(\014\"\316\001\n\rPBBattleScore\022\020\n\010playerid\030\001"
    " \002(\r\022\017\n\007ranking\030\002 \002(\r\022\037\n\006pbdata\030\003 \003(\0132\017."
    "KFMsg.PBUInt32\022\r\n\005score\030\004 \001(\r\022\017\n\007matchid"
    "\030\005 \001(\r\022\016\n\006reward\030\006 \001(\014\022#\n\007achieve\030\007 \001(\0132"
    "\022.KFMsg.PBTaskDatas\022\017\n\007members\030\010 \003(\r\022\023\n\013"
    "playercount\030\t \001(\r\"\210\001\n\014PBRecentData\022\020\n\010pl"
    "ayerid\030\001 \002(\r\022\017\n\007ranking\030\002 \002(\r\022\020\n\010totalnu"
    "m\030\003 \002(\r\022\014\n\004kill\030\004 \001(\r\022\r\n\005score\030\005 \001(\r\022\020\n\010"
    "bekillid\030\006 \001(\r\022\024\n\014relationtype\030\007 \001(\r\"\037\n\013"
    "PBPlayerIds\022\020\n\010playerid\030\001 \003(\r\"T\n\021PBAppli"
    "cationlist\022\020\n\010playerid\030\001 \002(\r\022\014\n\004time\030\002 \002"
    "(\004\022\037\n\005basic\030\003 \002(\0132\020.KFMsg.PBStrings\"B\n\022P"
    "BApplicationlists\022,\n\napplylists\030\001 \003(\0132\030."
    "KFMsg.PBApplicationlist\"!\n\016PBGuildIdArra"
    "y\022\017\n\007guildid\030\001 \003(\004*\240+\n\007AckEnum\022\013\n\007Succes"
    "s\020\001\022\r\n\tSignError\020\002\022\017\n\013WeiXinError\020\003\022\023\n\017W"
    "eiXinCodeError\020\004\022\026\n\022WeiXinTokenTimeout\020\005"
    "\022\024\n\020WeiXinTokenError\020\006\022\023\n\017WeiXinUserErro"
    "r\020\007\022\020\n\014ChannelError\020\010\022\022\n\016ChannelNotOpen\020"
    "\t\022\023\n\017WorldSystemBusy\020\n\022\023\n\017LoginSystemBus"
    "y\020\013\022\023\n\017CanNotFindProxy\020\014\022\022\n\016AuthServerBu"
    "sy\020\r\022\024\n\020AuthDatabaseBusy\020\016\022\022\n\016CanNotFind"
    "Game\020\017\022\023\n\017LoginTokenError\020\020\022\022\n\016LoadDataF"
    "ailed\020\021\022\021\n\rHttpDataError\020\022\022\026\n\022LoginDatab"
    "aseError\020\023\022\025\n\021CreatePlayerError\020\024\022\014\n\010Sex"
    "SetOK\020\025\022\022\n\016NameAlreadySet\020\026\022\024\n\020NameAlrea"
    "dyExist\020\027\022\027\n\023PublicDatabaseError\020\030\022\r\n\tNa"
    "meSetOK\020\031\022\022\n\016AccountIsEmpty\020\032\022\025\n\021CreateR"
    "oleAlready\020\033\022\020\n\014CreateRoleOK\020\034\022\026\n\022LoginA"
    "lreadyOnline\020\035\022\020\n\014ChangeIconOK\020\036\022\r\n\tName"
    "Empty\020\037\022\021\n\rChangeMottoOK\020 \022\023\n\017ModuleIdNo"
    "tFind\020!\022\025\n\021SetModelClothesOK\020\"\022\023\n\017Change"
    "IconBoxOK\020#\022\022\n\016DataSystemBusy\020$\022\025\n\021Activ"
    "ationAccount\020%\022\027\n\023ActivationCodeError\020&\022"
    "\027\n\023LoginCanNotFindGate\020\'\022\024\n\020TaskIdCanNot"
    "Find\020(\022\026\n\022TaskNotInValidTime\020)\022\024\n\020CanNot"
    "FindPlayer\020*\022\026\n\022CanNotFindTaskData\020+\022\017\n\013"
    "TaskNotDone\020,\022\027\n\023TaskAlreadyReceived\020-\022\027"
    "\n\023TaskReceiveRewardOK\020.\022\025\n\021CanNotInquire"
    "Self\020/\022\030\n\024ActivityIdCanNotFind\0200\022\032\n\026CanN"
    "otFindActivityType\0201\022\033\n\027ActivityAlreadyR"
    "eceived\0202\022\023\n\017ActivityNotDone\0203\022\033\n\027Activi"
    "tyReceiveRewardOK\0204\022\027\n\023AchieveIdCanNotFi"
    "nd\0205\022\031\n\025CanNotFindAchieveData\0206\022\032\n\026Achie"
    "veAlreadyReceived\0207\022\022\n\016AchieveNotDone\0208\022"
    "\032\n\026AchieveReceiveRewardOK\0209\022\021\n\rReceiveGi"
    "ftOK\020:\022\025\n\021ReceiveGiftFailed\020;\022\020\n\014MailNot"
    "Exist\020<\022\027\n\023MailAlreadyReceived\020=\022\025\n\021Mail"
    "NotHaveReward\020>\022\024\n\020MailDeleteFailed\020\?\022\017\n"
    "\013MailTimeOut\020@\022\026\n\022ToastSendCountOver\020A\022\025"
    "\n\021ToastCanNotRepeat\020B\022\025\n\021ToastGetCountOv"
    "er\020C\022\017\n\013ToastFailed\020D\022\013\n\007ToastOK\020E\022\024\n\020Ma"
    "tchAlreadyWait\020F\022\024\n\020MatchClusterBusy\020G\022\031"
    "\n\025MatchCanNotFindServer\020H\022\030\n\024MatchCanNot"
    "FindMatch\020I\022\031\n\025MatchGroupPlayerLimit\020J\022\027"
    "\n\023MatchRequestSuccess\020K\022\026\n\022MatchCancelSu"
    "ccess\020L\022\022\n\016FriendInviteOK\020M\022\026\n\022FriendRef"
    "useInvite\020N\022\025\n\021FriendTargetLimit\020O\022\023\n\017Fr"
    "iendSelfLimit\020P\022\021\n\rFriendAlready\020Q\022\022\n\016Fr"
    "iendNotExist\020R\022\017\n\013FriendDelOK\020S\022\025\n\021Frien"
    "dInviteLimit\020T\022\030\n\024FriendInviteNotExist\020U"
    "\022\023\n\017MatchNotInMatch\020V\022\027\n\023FriendInviteAlr"
    "eady\020W\022\024\n\020MatchMustPrepare\020X\022\023\n\017StorePar"
    "amError\020Y\022\021\n\rStoreLackCost\020Z\022\024\n\020StoreOut"
    "OfLimits\020[\022\026\n\022StoreOutOfLimitOwm\020\\\022\027\n\023St"
    "oreOutOfLimitDate\020]\022\022\n\016WishOrderEmpty\020^\022"
    "\024\n\020WishOrderNoExist\020_\022\026\n\022WishOrderNoStor"
    "eId\020`\022\027\n\023WishOrderHadStoreId\020a\022\024\n\020WishOr"
    "derMaxSize\020b\022\033\n\027WishOrderStateRepeatSet\020"
    "c\022\020\n\014GiveLackCost\020d\022\023\n\017ClothesNotExist\020e"
    "\022\024\n\020ClothesDataError\020f\022\030\n\024ClothesModleNo"
    "tMatch\020g\022\022\n\016ClothesDressOK\020h\022\021\n\rModelNot"
    "Exist\020i\022\021\n\rModelChangeOK\020j\022\023\n\017ChatByteTo"
    "oLong\020k\022\025\n\021ChatNotFindPlayer\020l\022\025\n\021ChatIn"
    "tervalError\020m\022\025\n\021ChatFriendIdError\020n\022\026\n\022"
    "InviteMatchGroupOK\020o\022\020\n\014GroupLeaveOK\020p\022\025"
    "\n\021GroupMemberIsFull\020q\022\023\n\017GroupServerBusy"
    "\020r\022\027\n\023GroupInviteNotExist\020s\022\027\n\023GroupCanN"
    "otKickSelf\020t\022\020\n\014GroupInGroup\020u\022\026\n\022GroupA"
    "pplyNotExist\020v\022\023\n\017GroupNotInGroup\020w\022\020\n\014I"
    "temNotExist\020x\022\021\n\rItemDataError\020y\022\021\n\rItem"
    "CanNotUse\020z\022\021\n\rGroupNotExist\020{\022\016\n\nStoreB"
    "uyOK\020|\022\r\n\tGiveBuyOK\020}\022\026\n\022GroupPlayerOffl"
    "ine\020~\022\027\n\023GroupAlreadyInGroup\020\177\022\026\n\021GroupR"
    "efuseInvite\020\200\001\022\032\n\025GroupRefuseYourInvite\020"
    "\201\001\022\025\n\020GroupMemberLeave\020\202\001\022\025\n\020GroupRefuse"
    "Apply\020\203\001\022\030\n\023GroupCaptainOffline\020\204\001\022\023\n\016Gr"
    "oupNoCaption\020\205\001\022\024\n\017GroupNotCaption\020\206\001\022\025\n"
    "\020FriendServerBusy\020\207\001\022\033\n\026FriendRefuseYour"
    "Invite\020\210\001\022\020\n\013FriendAddOK\020\211\001\022\024\n\017FriendInv"
    "iteReq\020\212\001\022\020\n\013GroupJoinOK\020\213\001\022\024\n\017GroupMemb"
    "erJoin\020\214\001\022\026\n\021GroupIsNewCaption\020\215\001\022\024\n\017Fri"
    "endLinessAdd\020\216\001\022\031\n\024FriendLinessAddLimit\020"
    "\217\001\022\035\n\030FriendLinessAddByWinGame\020\220\001\022\031\n\024Fri"
    "endLinessMaxLimit\020\221\001\022\032\n\025WishPanelAddSucc"
    "essed\020\222\001\022\027\n\022GroupInviteInMatch\020\223\001\022\026\n\021Gro"
    "upApplyInMatch\020\224\001\022\027\n\022GroupInviteTimeOut\020"
    "\225\001\022\032\n\025GroupInviteMatchError\020\226\001\022\026\n\021GroupA"
    "pplyTimeOut\020\227\001\022\026\n\021OperateFrequently\020\230\001\022\022"
    "\n\rDataNotEnough\020\231\001\022\025\n\020CompoundNotExist\020\232"
    "\001\022\021\n\014LoginIsClose\020\233\001\022\021\n\014RankNotExist\020\234\001\022"
    "\023\n\016RankServerBusy\020\235\001\022\021\n\014SignInNotDay\020\241\001\022"
    "\024\n\017SignInDataError\020\242\001\022\030\n\023SignInRewardAlr"
    "eady\020\243\001\022\022\n\rDirServerBusy\020\244\001\022\027\n\022GroupTarg"
    "etInMatch\020\245\001\022\021\n\014GroupInMatch\020\246\001\022\025\n\020Group"
    "KickInMatch\020\247\001\022\026\n\021GroupLeaveInMatch\020\250\001\022\030"
    "\n\023MatchCancelInBattle\020\251\001\022\023\n\016MailServerBu"
    "sy\020\252\001\022\031\n\024RelationDatabaseBusy\020\253\001\022\022\n\rInva"
    "lidFilter\020\254\001\022\017\n\nSteamError\020\255\001\022\023\n\016SteamDa"
    "taError\020\256\001\022\023\n\016SteamAuthError\020\257\001\022\032\n\025Inval"
    "idActivationCode\020\260\001\022\030\n\023CanNotFindLoginNo"
    "de\020\261\001\022\026\n\021ChannelNotSupport\020\262\001\022\020\n\013HaveNot"
    "Icon\020\263\001\022\032\n\025QueryInviteScoreError\020\264\001\022\027\n\022P"
    "latformServerBusy\020\265\001\022\021\n\014BindAlipayOk\020\266\001\022"
    "\025\n\020BindAlipayFailed\020\267\001\022\035\n\030ExchangeInvite"
    "ScoreError\020\270\001\022\036\n\031ExchangeInviteRecordErr"
    "or\020\271\001\022\034\n\027VersionNotCompatibility\020\272\001\022\033\n\026B"
    "attleNotCompatibility\020\273\001\022\025\n\020BattleNotPre"
    "pare\020\274\001\022\023\n\016BanForbidLogin\020\275\001\022\022\n\rTitleNot"
    "Exist\020\276\001\022\032\n\025FriendFriendCountOver\020\220N\022\031\n\024"
    "FriendApplyCountOver\020\221N\022\026\n\021FriendSearchE"
    "mpty\020\222N\022\035\n\030FriendAddFriendSuccessed\020\223N\022\032"
    "\n\025EquipDeleteTipContent\020\224N\022\034\n\027ClothesDel"
    "eteTipContent\020\225N\022\030\n\023NoCanSettingDefault\020"
    "\226N\022\022\n\rClothesNotFit\020\227N\022\024\n\017KickLoginBeKic"
    "k\020\230N\022\027\n\022KickPlatformBeKick\020\231N\022\034\n\027Autogra"
    "phCharOverLength\020\232N\022\030\n\023ContainIIleagalCh"
    "ar\020\233N\022\031\n\024ClothesNotMatchModel\020\234N\022\020\n\013Mone"
    "yIsLack\020\235N\022\022\n\rDiamondIsLack\020\236N\022\r\n\010MoneyG"
    "et\020\237N\022\017\n\nDiamondGet\020\240N\022\022\n\rWishOverCount\020"
    "\241N\022\020\n\013PleaseLogin\020\242N\022\032\n\025CreateRoleNameIl"
    "legal\020\243N\022\024\n\017PleaseClickRole\020\244N\022\024\n\017ChatCh"
    "arIllegal\020\245N\022\036\n\031ChatUnCheckInNearbyChane"
    "l\020\246N\022\026\n\021ChatUnJoinWarTeam\020\247N\022\023\n\016ChatUnJo"
    "inTeam\020\250N\022\034\n\027MatchRepeatInviteToCode\020\251N\022"
    "\022\n\rCopySuccessed\020\252N\022\034\n\027GiveFaildForLimit"
    "sGoods\020\253N\022\025\n\020MatchHasPrepared\020\254N\022\025\n\020Matc"
    "hHasCanceled\020\255N\022\022\n\rGuildHadExist\020\256N\022\027\n\022G"
    "uildCreateIllegal\020\257N\022\025\n\020GuildNameTooLong"
    "\020\260N\022\032\n\025GuildManifestoTooLong\020\261N\022\024\n\017Guild"
    "NameRepeat\020\262N\022\022\n\rGuildHadBuild\020\263N\022\022\n\rGui"
    "ldNotExist\020\264N\022\023\n\016GuildHadInvite\020\265N\022\030\n\023Pl"
    "ayerisguildmember\020\266N\022\032\n\025GuildApplyListTo"
    "oLong\020\267N\022\031\n\024PlayerInApplicanlist\020\270N\022\022\n\rG"
    "uildHadApply\020\271N\022\022\n\rPlayerNoGuild\020\272N\022\020\n\013G"
    "uildMaster\020\273N\022\022\n\rPlayerNoPower\020\274N\022\027\n\022Pla"
    "yerNoSmallGuild\020\275N\022\033\n\026PlayerNoInApplican"
    "list\020\276N\022\033\n\026GuildMemberlistTooLong\020\277N\022\025\n\020"
    "GuildMedalRepeat\020\300N\022\022\n\rGuildMaxLevel\020\301N\022"
    "\030\n\023GuildLackActiveness\020\302N\022\030\n\023GuildMember"
    "OwnTitle\020\303N\022\027\n\022GuildMaxViceMember\020\304N\022\025\n\020"
    "GuildNameInvalid\020\305N\022\024\n\017GuildLogOutPage\020\306"
    "N\022\022\n\014GMParamError\020\240\234\001\022\016\n\010SysError\020\260\352\001*2\n"
    "\013ChannelEnum\022\014\n\010Internal\020\001\022\n\n\006WeiXin\020\002\022\t"
    "\n\005Steam\020\003*+\n\007SexEnum\022\n\n\006Unknow\020\000\022\010\n\004Male"
    "\020\001\022\n\n\006Female\020\002*/\n\010KickEnum\022\017\n\013LoginBeKic"
    "k\020\001\022\022\n\016PlatformBeKick\020\002*K\n\010FlagEnum\022\010\n\004I"
    "nit\020\000\022\010\n\004Done\020\001\022\014\n\010Received\020\002\022\n\n\006Remove\020"
    "\003\022\021\n\rReceiveRemove\020\004*7\n\010MailEnum\022\r\n\tWhol"
    "eMail\020\001\022\016\n\nFriendMail\020\002\022\014\n\010GiftMail\020\003*\037\n"
    "\016MailConfigEnum\022\r\n\tToastMail\020\001*f\n\nStatus"
    "Enum\022\020\n\014OnlineStatus\020\001\022\017\n\013GroupStatus\020\002\022"
    "\017\n\013MatchStatus\020\003\022\021\n\rPlayingStatus\020\004\022\021\n\rO"
    "fflineStatus\020\005*\027\n\010ChatEnum\022\013\n\007Jianghu\020\001*"
    "C\n\nInviteEnum\022\013\n\007Consent\020\001\022\n\n\006Refuse\020\002\022\n"
    "\n\006Delete\020\003\022\020\n\014RefuseMinute\020\004*-\n\rStoreWis"
    "hEnum\022\007\n\003Add\020\001\022\007\n\003Del\020\002\022\n\n\006Modify\020\003*L\n\rW"
    "ishStateEnum\022\014\n\010AllWatch\020\000\022\r\n\tNoneWatch\020"
    "\001\022\017\n\013FriendWatch\020\002\022\r\n\tTeamWatch\020\003*K\n\014Ran"
    "kListEnum\022\016\n\nSingleRank\020\001\022\016\n\nDoubleRank\020"
    "\002\022\014\n\010FourRank\020\003\022\r\n\tTotalRank\020\004*:\n\020Friend"
    "LinessEnum\022\010\n\004Team\020\001\022\007\n\003Win\020\002\022\t\n\005Toast\020\003"
    "\022\010\n\004Give\020\004*)\n\tGuildEnum\022\r\n\tJoinGuild\020\001\022\r"
    "\n\tExitGuild\020\002*2\n\017GuildReviewEnum\022\016\n\nAgre"
    "eApply\020\001\022\017\n\013RefuseApply\020\002", 8785);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KFCommonMessage.proto", &protobuf_RegisterTypes);
  Vector3D::default_instance_ = new Vector3D();
  PBInt32::default_instance_ = new PBInt32();
  PBUIntUInt::default_instance_ = new PBUIntUInt();
  PBUInt32::default_instance_ = new PBUInt32();
  PBInt64::default_instance_ = new PBInt64();
  PBUInt64::default_instance_ = new PBUInt64();
  PBDouble::default_instance_ = new PBDouble();
  PBString::default_instance_ = new PBString();
  PBStrings::default_instance_ = new PBStrings();
  PBVector3D::default_instance_ = new PBVector3D();
  PBArray::default_instance_ = new PBArray();
  PBObject::default_instance_ = new PBObject();
  PBRecord::default_instance_ = new PBRecord();
  PBRankData::default_instance_ = new PBRankData();
  PBRankDatas::default_instance_ = new PBRankDatas();
  PBTaskData::default_instance_ = new PBTaskData();
  PBTaskDatas::default_instance_ = new PBTaskDatas();
  PBBattlePlayer::default_instance_ = new PBBattlePlayer();
  PBBattleCamp::default_instance_ = new PBBattleCamp();
  PBMatchGroup::default_instance_ = new PBMatchGroup();
  PBGuestData::default_instance_ = new PBGuestData();
  PBBattleScore::default_instance_ = new PBBattleScore();
  PBRecentData::default_instance_ = new PBRecentData();
  PBPlayerIds::default_instance_ = new PBPlayerIds();
  PBApplicationlist::default_instance_ = new PBApplicationlist();
  PBApplicationlists::default_instance_ = new PBApplicationlists();
  PBGuildIdArray::default_instance_ = new PBGuildIdArray();
  Vector3D::default_instance_->InitAsDefaultInstance();
  PBInt32::default_instance_->InitAsDefaultInstance();
  PBUIntUInt::default_instance_->InitAsDefaultInstance();
  PBUInt32::default_instance_->InitAsDefaultInstance();
  PBInt64::default_instance_->InitAsDefaultInstance();
  PBUInt64::default_instance_->InitAsDefaultInstance();
  PBDouble::default_instance_->InitAsDefaultInstance();
  PBString::default_instance_->InitAsDefaultInstance();
  PBStrings::default_instance_->InitAsDefaultInstance();
  PBVector3D::default_instance_->InitAsDefaultInstance();
  PBArray::default_instance_->InitAsDefaultInstance();
  PBObject::default_instance_->InitAsDefaultInstance();
  PBRecord::default_instance_->InitAsDefaultInstance();
  PBRankData::default_instance_->InitAsDefaultInstance();
  PBRankDatas::default_instance_->InitAsDefaultInstance();
  PBTaskData::default_instance_->InitAsDefaultInstance();
  PBTaskDatas::default_instance_->InitAsDefaultInstance();
  PBBattlePlayer::default_instance_->InitAsDefaultInstance();
  PBBattleCamp::default_instance_->InitAsDefaultInstance();
  PBMatchGroup::default_instance_->InitAsDefaultInstance();
  PBGuestData::default_instance_->InitAsDefaultInstance();
  PBBattleScore::default_instance_->InitAsDefaultInstance();
  PBRecentData::default_instance_->InitAsDefaultInstance();
  PBPlayerIds::default_instance_->InitAsDefaultInstance();
  PBApplicationlist::default_instance_->InitAsDefaultInstance();
  PBApplicationlists::default_instance_->InitAsDefaultInstance();
  PBGuildIdArray::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_KFCommonMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_KFCommonMessage_2eproto {
  StaticDescriptorInitializer_KFCommonMessage_2eproto() {
    protobuf_AddDesc_KFCommonMessage_2eproto();
  }
} static_descriptor_initializer_KFCommonMessage_2eproto_;
const ::google::protobuf::EnumDescriptor* AckEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckEnum_descriptor_;
}
bool AckEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 10000:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10005:
    case 10006:
    case 10007:
    case 10008:
    case 10009:
    case 10010:
    case 10011:
    case 10012:
    case 10013:
    case 10014:
    case 10015:
    case 10016:
    case 10017:
    case 10018:
    case 10019:
    case 10020:
    case 10021:
    case 10022:
    case 10023:
    case 10024:
    case 10025:
    case 10026:
    case 10027:
    case 10028:
    case 10029:
    case 10030:
    case 10031:
    case 10032:
    case 10033:
    case 10034:
    case 10035:
    case 10036:
    case 10037:
    case 10038:
    case 10039:
    case 10040:
    case 10041:
    case 10042:
    case 10043:
    case 10044:
    case 10045:
    case 10046:
    case 10047:
    case 10048:
    case 10049:
    case 10050:
    case 10051:
    case 10052:
    case 10053:
    case 10054:
    case 20000:
    case 30000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChannelEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelEnum_descriptor_;
}
bool ChannelEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SexEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SexEnum_descriptor_;
}
bool SexEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* KickEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickEnum_descriptor_;
}
bool KickEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FlagEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlagEnum_descriptor_;
}
bool FlagEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MailEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailEnum_descriptor_;
}
bool MailEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MailConfigEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailConfigEnum_descriptor_;
}
bool MailConfigEnum_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StatusEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusEnum_descriptor_;
}
bool StatusEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChatEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatEnum_descriptor_;
}
bool ChatEnum_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* InviteEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteEnum_descriptor_;
}
bool InviteEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StoreWishEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreWishEnum_descriptor_;
}
bool StoreWishEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WishStateEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WishStateEnum_descriptor_;
}
bool WishStateEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RankListEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankListEnum_descriptor_;
}
bool RankListEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FriendLinessEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendLinessEnum_descriptor_;
}
bool FriendLinessEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GuildEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildEnum_descriptor_;
}
bool GuildEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GuildReviewEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildReviewEnum_descriptor_;
}
bool GuildReviewEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Vector3D::kXFieldNumber;
const int Vector3D::kYFieldNumber;
const int Vector3D::kZFieldNumber;
#endif  // !_MSC_VER

Vector3D::Vector3D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector3D::InitAsDefaultInstance() {
}

Vector3D::Vector3D(const Vector3D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector3D::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector3D::~Vector3D() {
  SharedDtor();
}

void Vector3D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3D_descriptor_;
}

const Vector3D& Vector3D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

Vector3D* Vector3D::default_instance_ = NULL;

Vector3D* Vector3D::New() const {
  return new Vector3D;
}

void Vector3D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector3D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector3D::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector3D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector3D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector3D::MergeFrom(const Vector3D& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector3D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3D::CopyFrom(const Vector3D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3D::IsInitialized() const {

  return true;
}

void Vector3D::Swap(Vector3D* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector3D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3D_descriptor_;
  metadata.reflection = Vector3D_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBInt32::kNameFieldNumber;
const int PBInt32::kValueFieldNumber;
#endif  // !_MSC_VER

PBInt32::PBInt32()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBInt32::InitAsDefaultInstance() {
}

PBInt32::PBInt32(const PBInt32& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBInt32::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBInt32::~PBInt32() {
  SharedDtor();
}

void PBInt32::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PBInt32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBInt32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBInt32_descriptor_;
}

const PBInt32& PBInt32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

PBInt32* PBInt32::default_instance_ = NULL;

PBInt32* PBInt32::New() const {
  return new PBInt32;
}

void PBInt32::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBInt32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional sint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBInt32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional sint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBInt32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional sint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBInt32::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional sint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBInt32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBInt32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBInt32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBInt32::MergeFrom(const PBInt32& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBInt32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBInt32::CopyFrom(const PBInt32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBInt32::IsInitialized() const {

  return true;
}

void PBInt32::Swap(PBInt32* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBInt32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBInt32_descriptor_;
  metadata.reflection = PBInt32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBUIntUInt::kKeyFieldNumber;
const int PBUIntUInt::kValueFieldNumber;
#endif  // !_MSC_VER

PBUIntUInt::PBUIntUInt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBUIntUInt::InitAsDefaultInstance() {
}

PBUIntUInt::PBUIntUInt(const PBUIntUInt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBUIntUInt::SharedCtor() {
  _cached_size_ = 0;
  key_ = GOOGLE_ULONGLONG(0);
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBUIntUInt::~PBUIntUInt() {
  SharedDtor();
}

void PBUIntUInt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBUIntUInt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBUIntUInt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBUIntUInt_descriptor_;
}

const PBUIntUInt& PBUIntUInt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

PBUIntUInt* PBUIntUInt::default_instance_ = NULL;

PBUIntUInt* PBUIntUInt::New() const {
  return new PBUIntUInt;
}

void PBUIntUInt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = GOOGLE_ULONGLONG(0);
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBUIntUInt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBUIntUInt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->key(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBUIntUInt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->key(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBUIntUInt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBUIntUInt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBUIntUInt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBUIntUInt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBUIntUInt::MergeFrom(const PBUIntUInt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBUIntUInt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBUIntUInt::CopyFrom(const PBUIntUInt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBUIntUInt::IsInitialized() const {

  return true;
}

void PBUIntUInt::Swap(PBUIntUInt* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBUIntUInt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBUIntUInt_descriptor_;
  metadata.reflection = PBUIntUInt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBUInt32::kNameFieldNumber;
const int PBUInt32::kValueFieldNumber;
#endif  // !_MSC_VER

PBUInt32::PBUInt32()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBUInt32::InitAsDefaultInstance() {
}

PBUInt32::PBUInt32(const PBUInt32& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBUInt32::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBUInt32::~PBUInt32() {
  SharedDtor();
}

void PBUInt32::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PBUInt32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBUInt32::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBUInt32_descriptor_;
}

const PBUInt32& PBUInt32::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

PBUInt32* PBUInt32::default_instance_ = NULL;

PBUInt32* PBUInt32::New() const {
  return new PBUInt32;
}

void PBUInt32::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBUInt32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBUInt32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBUInt32::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBUInt32::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBUInt32::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBUInt32* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBUInt32*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBUInt32::MergeFrom(const PBUInt32& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBUInt32::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBUInt32::CopyFrom(const PBUInt32& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBUInt32::IsInitialized() const {

  return true;
}

void PBUInt32::Swap(PBUInt32* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBUInt32::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBUInt32_descriptor_;
  metadata.reflection = PBUInt32_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBInt64::kNameFieldNumber;
const int PBInt64::kValueFieldNumber;
#endif  // !_MSC_VER

PBInt64::PBInt64()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBInt64::InitAsDefaultInstance() {
}

PBInt64::PBInt64(const PBInt64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBInt64::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBInt64::~PBInt64() {
  SharedDtor();
}

void PBInt64::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PBInt64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBInt64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBInt64_descriptor_;
}

const PBInt64& PBInt64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

PBInt64* PBInt64::default_instance_ = NULL;

PBInt64* PBInt64::New() const {
  return new PBInt64;
}

void PBInt64::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBInt64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional sint64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBInt64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional sint64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBInt64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional sint64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBInt64::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional sint64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBInt64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBInt64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBInt64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBInt64::MergeFrom(const PBInt64& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBInt64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBInt64::CopyFrom(const PBInt64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBInt64::IsInitialized() const {

  return true;
}

void PBInt64::Swap(PBInt64* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBInt64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBInt64_descriptor_;
  metadata.reflection = PBInt64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBUInt64::kNameFieldNumber;
const int PBUInt64::kValueFieldNumber;
#endif  // !_MSC_VER

PBUInt64::PBUInt64()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBUInt64::InitAsDefaultInstance() {
}

PBUInt64::PBUInt64(const PBUInt64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBUInt64::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBUInt64::~PBUInt64() {
  SharedDtor();
}

void PBUInt64::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PBUInt64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBUInt64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBUInt64_descriptor_;
}

const PBUInt64& PBUInt64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

PBUInt64* PBUInt64::default_instance_ = NULL;

PBUInt64* PBUInt64::New() const {
  return new PBUInt64;
}

void PBUInt64::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBUInt64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBUInt64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional uint64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBUInt64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional uint64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBUInt64::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBUInt64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBUInt64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBUInt64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBUInt64::MergeFrom(const PBUInt64& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBUInt64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBUInt64::CopyFrom(const PBUInt64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBUInt64::IsInitialized() const {

  return true;
}

void PBUInt64::Swap(PBUInt64* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBUInt64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBUInt64_descriptor_;
  metadata.reflection = PBUInt64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBDouble::kNameFieldNumber;
const int PBDouble::kValueFieldNumber;
#endif  // !_MSC_VER

PBDouble::PBDouble()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDouble::InitAsDefaultInstance() {
}

PBDouble::PBDouble(const PBDouble& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDouble::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDouble::~PBDouble() {
  SharedDtor();
}

void PBDouble::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PBDouble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDouble::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDouble_descriptor_;
}

const PBDouble& PBDouble::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

PBDouble* PBDouble::default_instance_ = NULL;

PBDouble* PBDouble::New() const {
  return new PBDouble;
}

void PBDouble::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDouble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_value;
        break;
      }

      // optional double value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDouble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional double value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDouble::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional double value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDouble::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional double value = 2;
    if (has_value()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDouble::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDouble* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDouble*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDouble::MergeFrom(const PBDouble& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDouble::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDouble::CopyFrom(const PBDouble& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDouble::IsInitialized() const {

  return true;
}

void PBDouble::Swap(PBDouble* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDouble::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDouble_descriptor_;
  metadata.reflection = PBDouble_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBString::kNameFieldNumber;
const int PBString::kValueFieldNumber;
#endif  // !_MSC_VER

PBString::PBString()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBString::InitAsDefaultInstance() {
}

PBString::PBString(const PBString& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBString::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBString::~PBString() {
  SharedDtor();
}

void PBString::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void PBString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBString_descriptor_;
}

const PBString& PBString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

PBString* PBString::default_instance_ = NULL;

PBString* PBString::New() const {
  return new PBString;
}

void PBString::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBString::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBString::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBString::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBString* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBString*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBString::MergeFrom(const PBString& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBString::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBString::CopyFrom(const PBString& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBString::IsInitialized() const {

  return true;
}

void PBString::Swap(PBString* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBString_descriptor_;
  metadata.reflection = PBString_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBStrings::kPbstringFieldNumber;
#endif  // !_MSC_VER

PBStrings::PBStrings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBStrings::InitAsDefaultInstance() {
}

PBStrings::PBStrings(const PBStrings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBStrings::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBStrings::~PBStrings() {
  SharedDtor();
}

void PBStrings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBStrings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBStrings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBStrings_descriptor_;
}

const PBStrings& PBStrings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

PBStrings* PBStrings::default_instance_ = NULL;

PBStrings* PBStrings::New() const {
  return new PBStrings;
}

void PBStrings::Clear() {
  pbstring_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBStrings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .KFMsg.PBString pbstring = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbstring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbstring()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pbstring;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBStrings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .KFMsg.PBString pbstring = 1;
  for (int i = 0; i < this->pbstring_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pbstring(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBStrings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .KFMsg.PBString pbstring = 1;
  for (int i = 0; i < this->pbstring_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pbstring(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBStrings::ByteSize() const {
  int total_size = 0;

  // repeated .KFMsg.PBString pbstring = 1;
  total_size += 1 * this->pbstring_size();
  for (int i = 0; i < this->pbstring_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbstring(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBStrings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBStrings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBStrings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBStrings::MergeFrom(const PBStrings& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbstring_.MergeFrom(from.pbstring_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBStrings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBStrings::CopyFrom(const PBStrings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBStrings::IsInitialized() const {

  return true;
}

void PBStrings::Swap(PBStrings* other) {
  if (other != this) {
    pbstring_.Swap(&other->pbstring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBStrings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBStrings_descriptor_;
  metadata.reflection = PBStrings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBVector3D::kNameFieldNumber;
const int PBVector3D::kValueFieldNumber;
#endif  // !_MSC_VER

PBVector3D::PBVector3D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBVector3D::InitAsDefaultInstance() {
  value_ = const_cast< ::KFMsg::Vector3D*>(&::KFMsg::Vector3D::default_instance());
}

PBVector3D::PBVector3D(const PBVector3D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBVector3D::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBVector3D::~PBVector3D() {
  SharedDtor();
}

void PBVector3D::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete value_;
  }
}

void PBVector3D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBVector3D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBVector3D_descriptor_;
}

const PBVector3D& PBVector3D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

PBVector3D* PBVector3D::default_instance_ = NULL;

PBVector3D* PBVector3D::New() const {
  return new PBVector3D;
}

void PBVector3D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != NULL) value_->::KFMsg::Vector3D::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBVector3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional .KFMsg.Vector3D value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBVector3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional .KFMsg.Vector3D value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBVector3D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional .KFMsg.Vector3D value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBVector3D::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional .KFMsg.Vector3D value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBVector3D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBVector3D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBVector3D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBVector3D::MergeFrom(const PBVector3D& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      mutable_value()->::KFMsg::Vector3D::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBVector3D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBVector3D::CopyFrom(const PBVector3D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBVector3D::IsInitialized() const {

  return true;
}

void PBVector3D::Swap(PBVector3D* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBVector3D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBVector3D_descriptor_;
  metadata.reflection = PBVector3D_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBArray::kNameFieldNumber;
const int PBArray::kPbint32FieldNumber;
const int PBArray::kPbuint32FieldNumber;
const int PBArray::kPbint64FieldNumber;
const int PBArray::kPbuint64FieldNumber;
const int PBArray::kPbdoubleFieldNumber;
const int PBArray::kPbstringFieldNumber;
const int PBArray::kPbvector3DFieldNumber;
#endif  // !_MSC_VER

PBArray::PBArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBArray::InitAsDefaultInstance() {
}

PBArray::PBArray(const PBArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBArray::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBArray::~PBArray() {
  SharedDtor();
}

void PBArray::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PBArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBArray_descriptor_;
}

const PBArray& PBArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

PBArray* PBArray::default_instance_ = NULL;

PBArray* PBArray::New() const {
  return new PBArray;
}

void PBArray::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  pbint32_.Clear();
  pbuint32_.Clear();
  pbint64_.Clear();
  pbuint64_.Clear();
  pbdouble_.Clear();
  pbstring_.Clear();
  pbvector3d_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pbint32;
        break;
      }

      // repeated sint32 pbint32 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pbint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 16, input, this->mutable_pbint32())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_pbint32())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pbint32;
        if (input->ExpectTag(24)) goto parse_pbuint32;
        break;
      }

      // repeated uint32 pbuint32 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pbuint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_pbuint32())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pbuint32())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pbuint32;
        if (input->ExpectTag(32)) goto parse_pbint64;
        break;
      }

      // repeated sint64 pbint64 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pbint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 32, input, this->mutable_pbint64())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_pbint64())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pbint64;
        if (input->ExpectTag(40)) goto parse_pbuint64;
        break;
      }

      // repeated uint64 pbuint64 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pbuint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_pbuint64())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_pbuint64())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pbuint64;
        if (input->ExpectTag(49)) goto parse_pbdouble;
        break;
      }

      // repeated double pbdouble = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pbdouble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 49, input, this->mutable_pbdouble())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_pbdouble())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_pbdouble;
        if (input->ExpectTag(58)) goto parse_pbstring;
        break;
      }

      // repeated bytes pbstring = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbstring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_pbstring()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_pbstring;
        if (input->ExpectTag(66)) goto parse_pbvector3d;
        break;
      }

      // repeated .KFMsg.Vector3D pbvector3d = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbvector3d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbvector3d()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pbvector3d;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // repeated sint32 pbint32 = 2;
  for (int i = 0; i < this->pbint32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      2, this->pbint32(i), output);
  }

  // repeated uint32 pbuint32 = 3;
  for (int i = 0; i < this->pbuint32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->pbuint32(i), output);
  }

  // repeated sint64 pbint64 = 4;
  for (int i = 0; i < this->pbint64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      4, this->pbint64(i), output);
  }

  // repeated uint64 pbuint64 = 5;
  for (int i = 0; i < this->pbuint64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->pbuint64(i), output);
  }

  // repeated double pbdouble = 6;
  for (int i = 0; i < this->pbdouble_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      6, this->pbdouble(i), output);
  }

  // repeated bytes pbstring = 7;
  for (int i = 0; i < this->pbstring_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->pbstring(i), output);
  }

  // repeated .KFMsg.Vector3D pbvector3d = 8;
  for (int i = 0; i < this->pbvector3d_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->pbvector3d(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // repeated sint32 pbint32 = 2;
  for (int i = 0; i < this->pbint32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(2, this->pbint32(i), target);
  }

  // repeated uint32 pbuint32 = 3;
  for (int i = 0; i < this->pbuint32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->pbuint32(i), target);
  }

  // repeated sint64 pbint64 = 4;
  for (int i = 0; i < this->pbint64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(4, this->pbint64(i), target);
  }

  // repeated uint64 pbuint64 = 5;
  for (int i = 0; i < this->pbuint64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->pbuint64(i), target);
  }

  // repeated double pbdouble = 6;
  for (int i = 0; i < this->pbdouble_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(6, this->pbdouble(i), target);
  }

  // repeated bytes pbstring = 7;
  for (int i = 0; i < this->pbstring_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(7, this->pbstring(i), target);
  }

  // repeated .KFMsg.Vector3D pbvector3d = 8;
  for (int i = 0; i < this->pbvector3d_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->pbvector3d(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBArray::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  // repeated sint32 pbint32 = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->pbint32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->pbint32(i));
    }
    total_size += 1 * this->pbint32_size() + data_size;
  }

  // repeated uint32 pbuint32 = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->pbuint32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->pbuint32(i));
    }
    total_size += 1 * this->pbuint32_size() + data_size;
  }

  // repeated sint64 pbint64 = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->pbint64_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->pbint64(i));
    }
    total_size += 1 * this->pbint64_size() + data_size;
  }

  // repeated uint64 pbuint64 = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->pbuint64_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->pbuint64(i));
    }
    total_size += 1 * this->pbuint64_size() + data_size;
  }

  // repeated double pbdouble = 6;
  {
    int data_size = 0;
    data_size = 8 * this->pbdouble_size();
    total_size += 1 * this->pbdouble_size() + data_size;
  }

  // repeated bytes pbstring = 7;
  total_size += 1 * this->pbstring_size();
  for (int i = 0; i < this->pbstring_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->pbstring(i));
  }

  // repeated .KFMsg.Vector3D pbvector3d = 8;
  total_size += 1 * this->pbvector3d_size();
  for (int i = 0; i < this->pbvector3d_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbvector3d(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBArray::MergeFrom(const PBArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbint32_.MergeFrom(from.pbint32_);
  pbuint32_.MergeFrom(from.pbuint32_);
  pbint64_.MergeFrom(from.pbint64_);
  pbuint64_.MergeFrom(from.pbuint64_);
  pbdouble_.MergeFrom(from.pbdouble_);
  pbstring_.MergeFrom(from.pbstring_);
  pbvector3d_.MergeFrom(from.pbvector3d_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBArray::CopyFrom(const PBArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBArray::IsInitialized() const {

  return true;
}

void PBArray::Swap(PBArray* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    pbint32_.Swap(&other->pbint32_);
    pbuint32_.Swap(&other->pbuint32_);
    pbint64_.Swap(&other->pbint64_);
    pbuint64_.Swap(&other->pbuint64_);
    pbdouble_.Swap(&other->pbdouble_);
    pbstring_.Swap(&other->pbstring_);
    pbvector3d_.Swap(&other->pbvector3d_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBArray_descriptor_;
  metadata.reflection = PBArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBObject::kNameFieldNumber;
const int PBObject::kKeyFieldNumber;
const int PBObject::kPbint32FieldNumber;
const int PBObject::kPbuint32FieldNumber;
const int PBObject::kPbint64FieldNumber;
const int PBObject::kPbuint64FieldNumber;
const int PBObject::kPbdoubleFieldNumber;
const int PBObject::kPbstringFieldNumber;
const int PBObject::kPbvector3DFieldNumber;
const int PBObject::kPbarrayFieldNumber;
const int PBObject::kPbobjectFieldNumber;
const int PBObject::kPbrecordFieldNumber;
#endif  // !_MSC_VER

PBObject::PBObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBObject::InitAsDefaultInstance() {
}

PBObject::PBObject(const PBObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBObject::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBObject::~PBObject() {
  SharedDtor();
}

void PBObject::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PBObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBObject_descriptor_;
}

const PBObject& PBObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

PBObject* PBObject::default_instance_ = NULL;

PBObject* PBObject::New() const {
  return new PBObject;
}

void PBObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    key_ = GOOGLE_ULONGLONG(0);
  }
  pbint32_.Clear();
  pbuint32_.Clear();
  pbint64_.Clear();
  pbuint64_.Clear();
  pbdouble_.Clear();
  pbstring_.Clear();
  pbvector3d_.Clear();
  pbarray_.Clear();
  pbobject_.Clear();
  pbrecord_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_key;
        break;
      }

      // optional uint64 key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pbint32;
        break;
      }

      // repeated .KFMsg.PBInt32 pbint32 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbint32:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbint32()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pbint32;
        if (input->ExpectTag(34)) goto parse_pbuint32;
        break;
      }

      // repeated .KFMsg.PBUInt32 pbuint32 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbuint32:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbuint32()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pbuint32;
        if (input->ExpectTag(42)) goto parse_pbint64;
        break;
      }

      // repeated .KFMsg.PBInt64 pbint64 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbint64:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbint64()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pbint64;
        if (input->ExpectTag(50)) goto parse_pbuint64;
        break;
      }

      // repeated .KFMsg.PBUInt64 pbuint64 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbuint64:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbuint64()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pbuint64;
        if (input->ExpectTag(58)) goto parse_pbdouble;
        break;
      }

      // repeated .KFMsg.PBDouble pbdouble = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbdouble:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbdouble()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_pbdouble;
        if (input->ExpectTag(66)) goto parse_pbstring;
        break;
      }

      // repeated .KFMsg.PBString pbstring = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbstring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbstring()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pbstring;
        if (input->ExpectTag(74)) goto parse_pbvector3d;
        break;
      }

      // repeated .KFMsg.PBVector3D pbvector3d = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbvector3d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbvector3d()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_pbvector3d;
        if (input->ExpectTag(82)) goto parse_pbarray;
        break;
      }

      // repeated .KFMsg.PBArray pbarray = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbarray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbarray()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_pbarray;
        if (input->ExpectTag(90)) goto parse_pbobject;
        break;
      }

      // repeated .KFMsg.PBObject pbobject = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbobject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbobject()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_pbobject;
        if (input->ExpectTag(98)) goto parse_pbrecord;
        break;
      }

      // repeated .KFMsg.PBRecord pbrecord = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbrecord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbrecord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_pbrecord;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional uint64 key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->key(), output);
  }

  // repeated .KFMsg.PBInt32 pbint32 = 3;
  for (int i = 0; i < this->pbint32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pbint32(i), output);
  }

  // repeated .KFMsg.PBUInt32 pbuint32 = 4;
  for (int i = 0; i < this->pbuint32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pbuint32(i), output);
  }

  // repeated .KFMsg.PBInt64 pbint64 = 5;
  for (int i = 0; i < this->pbint64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pbint64(i), output);
  }

  // repeated .KFMsg.PBUInt64 pbuint64 = 6;
  for (int i = 0; i < this->pbuint64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pbuint64(i), output);
  }

  // repeated .KFMsg.PBDouble pbdouble = 7;
  for (int i = 0; i < this->pbdouble_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pbdouble(i), output);
  }

  // repeated .KFMsg.PBString pbstring = 8;
  for (int i = 0; i < this->pbstring_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->pbstring(i), output);
  }

  // repeated .KFMsg.PBVector3D pbvector3d = 9;
  for (int i = 0; i < this->pbvector3d_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->pbvector3d(i), output);
  }

  // repeated .KFMsg.PBArray pbarray = 10;
  for (int i = 0; i < this->pbarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->pbarray(i), output);
  }

  // repeated .KFMsg.PBObject pbobject = 11;
  for (int i = 0; i < this->pbobject_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->pbobject(i), output);
  }

  // repeated .KFMsg.PBRecord pbrecord = 12;
  for (int i = 0; i < this->pbrecord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->pbrecord(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional uint64 key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->key(), target);
  }

  // repeated .KFMsg.PBInt32 pbint32 = 3;
  for (int i = 0; i < this->pbint32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pbint32(i), target);
  }

  // repeated .KFMsg.PBUInt32 pbuint32 = 4;
  for (int i = 0; i < this->pbuint32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pbuint32(i), target);
  }

  // repeated .KFMsg.PBInt64 pbint64 = 5;
  for (int i = 0; i < this->pbint64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pbint64(i), target);
  }

  // repeated .KFMsg.PBUInt64 pbuint64 = 6;
  for (int i = 0; i < this->pbuint64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pbuint64(i), target);
  }

  // repeated .KFMsg.PBDouble pbdouble = 7;
  for (int i = 0; i < this->pbdouble_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pbdouble(i), target);
  }

  // repeated .KFMsg.PBString pbstring = 8;
  for (int i = 0; i < this->pbstring_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->pbstring(i), target);
  }

  // repeated .KFMsg.PBVector3D pbvector3d = 9;
  for (int i = 0; i < this->pbvector3d_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->pbvector3d(i), target);
  }

  // repeated .KFMsg.PBArray pbarray = 10;
  for (int i = 0; i < this->pbarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->pbarray(i), target);
  }

  // repeated .KFMsg.PBObject pbobject = 11;
  for (int i = 0; i < this->pbobject_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->pbobject(i), target);
  }

  // repeated .KFMsg.PBRecord pbrecord = 12;
  for (int i = 0; i < this->pbrecord_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->pbrecord(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint64 key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key());
    }

  }
  // repeated .KFMsg.PBInt32 pbint32 = 3;
  total_size += 1 * this->pbint32_size();
  for (int i = 0; i < this->pbint32_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbint32(i));
  }

  // repeated .KFMsg.PBUInt32 pbuint32 = 4;
  total_size += 1 * this->pbuint32_size();
  for (int i = 0; i < this->pbuint32_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbuint32(i));
  }

  // repeated .KFMsg.PBInt64 pbint64 = 5;
  total_size += 1 * this->pbint64_size();
  for (int i = 0; i < this->pbint64_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbint64(i));
  }

  // repeated .KFMsg.PBUInt64 pbuint64 = 6;
  total_size += 1 * this->pbuint64_size();
  for (int i = 0; i < this->pbuint64_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbuint64(i));
  }

  // repeated .KFMsg.PBDouble pbdouble = 7;
  total_size += 1 * this->pbdouble_size();
  for (int i = 0; i < this->pbdouble_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbdouble(i));
  }

  // repeated .KFMsg.PBString pbstring = 8;
  total_size += 1 * this->pbstring_size();
  for (int i = 0; i < this->pbstring_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbstring(i));
  }

  // repeated .KFMsg.PBVector3D pbvector3d = 9;
  total_size += 1 * this->pbvector3d_size();
  for (int i = 0; i < this->pbvector3d_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbvector3d(i));
  }

  // repeated .KFMsg.PBArray pbarray = 10;
  total_size += 1 * this->pbarray_size();
  for (int i = 0; i < this->pbarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbarray(i));
  }

  // repeated .KFMsg.PBObject pbobject = 11;
  total_size += 1 * this->pbobject_size();
  for (int i = 0; i < this->pbobject_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbobject(i));
  }

  // repeated .KFMsg.PBRecord pbrecord = 12;
  total_size += 1 * this->pbrecord_size();
  for (int i = 0; i < this->pbrecord_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbrecord(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBObject::MergeFrom(const PBObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbint32_.MergeFrom(from.pbint32_);
  pbuint32_.MergeFrom(from.pbuint32_);
  pbint64_.MergeFrom(from.pbint64_);
  pbuint64_.MergeFrom(from.pbuint64_);
  pbdouble_.MergeFrom(from.pbdouble_);
  pbstring_.MergeFrom(from.pbstring_);
  pbvector3d_.MergeFrom(from.pbvector3d_);
  pbarray_.MergeFrom(from.pbarray_);
  pbobject_.MergeFrom(from.pbobject_);
  pbrecord_.MergeFrom(from.pbrecord_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBObject::CopyFrom(const PBObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBObject::IsInitialized() const {

  return true;
}

void PBObject::Swap(PBObject* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(key_, other->key_);
    pbint32_.Swap(&other->pbint32_);
    pbuint32_.Swap(&other->pbuint32_);
    pbint64_.Swap(&other->pbint64_);
    pbuint64_.Swap(&other->pbuint64_);
    pbdouble_.Swap(&other->pbdouble_);
    pbstring_.Swap(&other->pbstring_);
    pbvector3d_.Swap(&other->pbvector3d_);
    pbarray_.Swap(&other->pbarray_);
    pbobject_.Swap(&other->pbobject_);
    pbrecord_.Swap(&other->pbrecord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBObject_descriptor_;
  metadata.reflection = PBObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRecord::kNameFieldNumber;
const int PBRecord::kPbobjectFieldNumber;
#endif  // !_MSC_VER

PBRecord::PBRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRecord::InitAsDefaultInstance() {
}

PBRecord::PBRecord(const PBRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRecord::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRecord::~PBRecord() {
  SharedDtor();
}

void PBRecord::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PBRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRecord_descriptor_;
}

const PBRecord& PBRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

PBRecord* PBRecord::default_instance_ = NULL;

PBRecord* PBRecord::New() const {
  return new PBRecord;
}

void PBRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  pbobject_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbobject;
        break;
      }

      // repeated .KFMsg.PBObject pbobject = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbobject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbobject()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbobject;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // repeated .KFMsg.PBObject pbobject = 2;
  for (int i = 0; i < this->pbobject_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pbobject(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // repeated .KFMsg.PBObject pbobject = 2;
  for (int i = 0; i < this->pbobject_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pbobject(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  // repeated .KFMsg.PBObject pbobject = 2;
  total_size += 1 * this->pbobject_size();
  for (int i = 0; i < this->pbobject_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbobject(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRecord::MergeFrom(const PBRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbobject_.MergeFrom(from.pbobject_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRecord::CopyFrom(const PBRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRecord::IsInitialized() const {

  return true;
}

void PBRecord::Swap(PBRecord* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    pbobject_.Swap(&other->pbobject_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRecord_descriptor_;
  metadata.reflection = PBRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRankData::kRankindexFieldNumber;
const int PBRankData::kPlayeridFieldNumber;
const int PBRankData::kRankscoreFieldNumber;
const int PBRankData::kPbdataFieldNumber;
#endif  // !_MSC_VER

PBRankData::PBRankData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRankData::InitAsDefaultInstance() {
  pbdata_ = const_cast< ::KFMsg::PBStrings*>(&::KFMsg::PBStrings::default_instance());
}

PBRankData::PBRankData(const PBRankData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRankData::SharedCtor() {
  _cached_size_ = 0;
  rankindex_ = 0u;
  playerid_ = 0u;
  rankscore_ = GOOGLE_ULONGLONG(0);
  pbdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRankData::~PBRankData() {
  SharedDtor();
}

void PBRankData::SharedDtor() {
  if (this != default_instance_) {
    delete pbdata_;
  }
}

void PBRankData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRankData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRankData_descriptor_;
}

const PBRankData& PBRankData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

PBRankData* PBRankData::default_instance_ = NULL;

PBRankData* PBRankData::New() const {
  return new PBRankData;
}

void PBRankData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rankindex_ = 0u;
    playerid_ = 0u;
    rankscore_ = GOOGLE_ULONGLONG(0);
    if (has_pbdata()) {
      if (pbdata_ != NULL) pbdata_->::KFMsg::PBStrings::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRankData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rankindex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankindex_)));
          set_has_rankindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // optional uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rankscore;
        break;
      }

      // optional uint64 rankscore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rankscore_)));
          set_has_rankscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pbdata;
        break;
      }

      // optional .KFMsg.PBStrings pbdata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRankData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rankindex = 1;
  if (has_rankindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rankindex(), output);
  }

  // optional uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // optional uint64 rankscore = 3;
  if (has_rankscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->rankscore(), output);
  }

  // optional .KFMsg.PBStrings pbdata = 4;
  if (has_pbdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pbdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRankData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rankindex = 1;
  if (has_rankindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rankindex(), target);
  }

  // optional uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // optional uint64 rankscore = 3;
  if (has_rankscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->rankscore(), target);
  }

  // optional .KFMsg.PBStrings pbdata = 4;
  if (has_pbdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pbdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRankData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rankindex = 1;
    if (has_rankindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankindex());
    }

    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // optional uint64 rankscore = 3;
    if (has_rankscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rankscore());
    }

    // optional .KFMsg.PBStrings pbdata = 4;
    if (has_pbdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRankData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRankData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRankData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRankData::MergeFrom(const PBRankData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankindex()) {
      set_rankindex(from.rankindex());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_rankscore()) {
      set_rankscore(from.rankscore());
    }
    if (from.has_pbdata()) {
      mutable_pbdata()->::KFMsg::PBStrings::MergeFrom(from.pbdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRankData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRankData::CopyFrom(const PBRankData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRankData::IsInitialized() const {

  return true;
}

void PBRankData::Swap(PBRankData* other) {
  if (other != this) {
    std::swap(rankindex_, other->rankindex_);
    std::swap(playerid_, other->playerid_);
    std::swap(rankscore_, other->rankscore_);
    std::swap(pbdata_, other->pbdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRankData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRankData_descriptor_;
  metadata.reflection = PBRankData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRankDatas::kRankdataFieldNumber;
#endif  // !_MSC_VER

PBRankDatas::PBRankDatas()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRankDatas::InitAsDefaultInstance() {
}

PBRankDatas::PBRankDatas(const PBRankDatas& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRankDatas::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRankDatas::~PBRankDatas() {
  SharedDtor();
}

void PBRankDatas::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBRankDatas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRankDatas::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRankDatas_descriptor_;
}

const PBRankDatas& PBRankDatas::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

PBRankDatas* PBRankDatas::default_instance_ = NULL;

PBRankDatas* PBRankDatas::New() const {
  return new PBRankDatas;
}

void PBRankDatas::Clear() {
  rankdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRankDatas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .KFMsg.PBRankData rankdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rankdata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRankDatas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .KFMsg.PBRankData rankdata = 3;
  for (int i = 0; i < this->rankdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rankdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRankDatas::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .KFMsg.PBRankData rankdata = 3;
  for (int i = 0; i < this->rankdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rankdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRankDatas::ByteSize() const {
  int total_size = 0;

  // repeated .KFMsg.PBRankData rankdata = 3;
  total_size += 1 * this->rankdata_size();
  for (int i = 0; i < this->rankdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRankDatas::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRankDatas* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRankDatas*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRankDatas::MergeFrom(const PBRankDatas& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankdata_.MergeFrom(from.rankdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRankDatas::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRankDatas::CopyFrom(const PBRankDatas& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRankDatas::IsInitialized() const {

  return true;
}

void PBRankDatas::Swap(PBRankDatas* other) {
  if (other != this) {
    rankdata_.Swap(&other->rankdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRankDatas::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRankDatas_descriptor_;
  metadata.reflection = PBRankDatas_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTaskData::kIdFieldNumber;
const int PBTaskData::kValueFieldNumber;
#endif  // !_MSC_VER

PBTaskData::PBTaskData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTaskData::InitAsDefaultInstance() {
}

PBTaskData::PBTaskData(const PBTaskData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTaskData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTaskData::~PBTaskData() {
  SharedDtor();
}

void PBTaskData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBTaskData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTaskData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTaskData_descriptor_;
}

const PBTaskData& PBTaskData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

PBTaskData* PBTaskData::default_instance_ = NULL;

PBTaskData* PBTaskData::New() const {
  return new PBTaskData;
}

void PBTaskData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTaskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTaskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTaskData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTaskData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTaskData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTaskData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTaskData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTaskData::MergeFrom(const PBTaskData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTaskData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTaskData::CopyFrom(const PBTaskData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTaskData::IsInitialized() const {

  return true;
}

void PBTaskData::Swap(PBTaskData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTaskData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTaskData_descriptor_;
  metadata.reflection = PBTaskData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBTaskDatas::kTaskdataFieldNumber;
#endif  // !_MSC_VER

PBTaskDatas::PBTaskDatas()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBTaskDatas::InitAsDefaultInstance() {
}

PBTaskDatas::PBTaskDatas(const PBTaskDatas& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBTaskDatas::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBTaskDatas::~PBTaskDatas() {
  SharedDtor();
}

void PBTaskDatas::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBTaskDatas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBTaskDatas::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBTaskDatas_descriptor_;
}

const PBTaskDatas& PBTaskDatas::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

PBTaskDatas* PBTaskDatas::default_instance_ = NULL;

PBTaskDatas* PBTaskDatas::New() const {
  return new PBTaskDatas;
}

void PBTaskDatas::Clear() {
  taskdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBTaskDatas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .KFMsg.PBTaskData taskdata = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taskdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_taskdata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBTaskDatas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .KFMsg.PBTaskData taskdata = 1;
  for (int i = 0; i < this->taskdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->taskdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBTaskDatas::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .KFMsg.PBTaskData taskdata = 1;
  for (int i = 0; i < this->taskdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->taskdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBTaskDatas::ByteSize() const {
  int total_size = 0;

  // repeated .KFMsg.PBTaskData taskdata = 1;
  total_size += 1 * this->taskdata_size();
  for (int i = 0; i < this->taskdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taskdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBTaskDatas::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBTaskDatas* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBTaskDatas*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBTaskDatas::MergeFrom(const PBTaskDatas& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskdata_.MergeFrom(from.taskdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBTaskDatas::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBTaskDatas::CopyFrom(const PBTaskDatas& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBTaskDatas::IsInitialized() const {

  return true;
}

void PBTaskDatas::Swap(PBTaskDatas* other) {
  if (other != this) {
    taskdata_.Swap(&other->taskdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBTaskDatas::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBTaskDatas_descriptor_;
  metadata.reflection = PBTaskDatas_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBattlePlayer::kZoneidFieldNumber;
const int PBBattlePlayer::kServeridFieldNumber;
const int PBBattlePlayer::kPlayeridFieldNumber;
const int PBBattlePlayer::kNameFieldNumber;
const int PBBattlePlayer::kSexFieldNumber;
const int PBBattlePlayer::kIconFieldNumber;
const int PBBattlePlayer::kIconboxFieldNumber;
const int PBBattlePlayer::kGradingFieldNumber;
const int PBBattlePlayer::kModelidFieldNumber;
const int PBBattlePlayer::kClothesidFieldNumber;
const int PBBattlePlayer::kGroupidFieldNumber;
const int PBBattlePlayer::kCampidFieldNumber;
const int PBBattlePlayer::kAchieveFieldNumber;
#endif  // !_MSC_VER

PBBattlePlayer::PBBattlePlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBattlePlayer::InitAsDefaultInstance() {
  achieve_ = const_cast< ::KFMsg::PBTaskDatas*>(&::KFMsg::PBTaskDatas::default_instance());
}

PBBattlePlayer::PBBattlePlayer(const PBBattlePlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBattlePlayer::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0u;
  serverid_ = 0u;
  playerid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0u;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iconbox_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  grading_ = 0u;
  modelid_ = 0u;
  clothesid_ = 0u;
  groupid_ = GOOGLE_ULONGLONG(0);
  campid_ = 0u;
  achieve_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBattlePlayer::~PBBattlePlayer() {
  SharedDtor();
}

void PBBattlePlayer::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (iconbox_ != &::google::protobuf::internal::kEmptyString) {
    delete iconbox_;
  }
  if (this != default_instance_) {
    delete achieve_;
  }
}

void PBBattlePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBattlePlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBattlePlayer_descriptor_;
}

const PBBattlePlayer& PBBattlePlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

PBBattlePlayer* PBBattlePlayer::default_instance_ = NULL;

PBBattlePlayer* PBBattlePlayer::New() const {
  return new PBBattlePlayer;
}

void PBBattlePlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zoneid_ = 0u;
    serverid_ = 0u;
    playerid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0u;
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    if (has_iconbox()) {
      if (iconbox_ != &::google::protobuf::internal::kEmptyString) {
        iconbox_->clear();
      }
    }
    grading_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    modelid_ = 0u;
    clothesid_ = 0u;
    groupid_ = GOOGLE_ULONGLONG(0);
    campid_ = 0u;
    if (has_achieve()) {
      if (achieve_ != NULL) achieve_->::KFMsg::PBTaskDatas::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBattlePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zoneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // optional uint32 serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerid;
        break;
      }

      // optional uint32 playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional bytes name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_icon;
        break;
      }

      // optional bytes icon = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_icon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_iconbox;
        break;
      }

      // optional bytes iconbox = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iconbox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_iconbox()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_grading;
        break;
      }

      // optional uint32 grading = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grading_)));
          set_has_grading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_modelid;
        break;
      }

      // optional uint32 modelid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modelid_)));
          set_has_modelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_clothesid;
        break;
      }

      // optional uint32 clothesid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clothesid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clothesid_)));
          set_has_clothesid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_groupid;
        break;
      }

      // optional uint64 groupid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_campid;
        break;
      }

      // optional uint32 campid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_achieve;
        break;
      }

      // optional .KFMsg.PBTaskDatas achieve = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achieve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_achieve()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBattlePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  // optional uint32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  // optional uint32 playerid = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerid(), output);
  }

  // optional bytes name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->name(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional bytes icon = 6;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->icon(), output);
  }

  // optional bytes iconbox = 7;
  if (has_iconbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->iconbox(), output);
  }

  // optional uint32 grading = 8;
  if (has_grading()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->grading(), output);
  }

  // optional uint32 modelid = 9;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->modelid(), output);
  }

  // optional uint32 clothesid = 10;
  if (has_clothesid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->clothesid(), output);
  }

  // optional uint64 groupid = 11;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->groupid(), output);
  }

  // optional uint32 campid = 12;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->campid(), output);
  }

  // optional .KFMsg.PBTaskDatas achieve = 13;
  if (has_achieve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->achieve(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBattlePlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 zoneid = 1;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  // optional uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  // optional uint32 playerid = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerid(), target);
  }

  // optional bytes name = 4;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional bytes icon = 6;
  if (has_icon()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->icon(), target);
  }

  // optional bytes iconbox = 7;
  if (has_iconbox()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->iconbox(), target);
  }

  // optional uint32 grading = 8;
  if (has_grading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->grading(), target);
  }

  // optional uint32 modelid = 9;
  if (has_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->modelid(), target);
  }

  // optional uint32 clothesid = 10;
  if (has_clothesid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->clothesid(), target);
  }

  // optional uint64 groupid = 11;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->groupid(), target);
  }

  // optional uint32 campid = 12;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->campid(), target);
  }

  // optional .KFMsg.PBTaskDatas achieve = 13;
  if (has_achieve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->achieve(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBattlePlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zoneid = 1;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // optional uint32 playerid = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // optional bytes name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional bytes icon = 6;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->icon());
    }

    // optional bytes iconbox = 7;
    if (has_iconbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->iconbox());
    }

    // optional uint32 grading = 8;
    if (has_grading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grading());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 modelid = 9;
    if (has_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modelid());
    }

    // optional uint32 clothesid = 10;
    if (has_clothesid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clothesid());
    }

    // optional uint64 groupid = 11;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // optional uint32 campid = 12;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // optional .KFMsg.PBTaskDatas achieve = 13;
    if (has_achieve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achieve());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBattlePlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBattlePlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBattlePlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBattlePlayer::MergeFrom(const PBBattlePlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_iconbox()) {
      set_iconbox(from.iconbox());
    }
    if (from.has_grading()) {
      set_grading(from.grading());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
    if (from.has_clothesid()) {
      set_clothesid(from.clothesid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_achieve()) {
      mutable_achieve()->::KFMsg::PBTaskDatas::MergeFrom(from.achieve());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBattlePlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBattlePlayer::CopyFrom(const PBBattlePlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBattlePlayer::IsInitialized() const {

  return true;
}

void PBBattlePlayer::Swap(PBBattlePlayer* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(serverid_, other->serverid_);
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(icon_, other->icon_);
    std::swap(iconbox_, other->iconbox_);
    std::swap(grading_, other->grading_);
    std::swap(modelid_, other->modelid_);
    std::swap(clothesid_, other->clothesid_);
    std::swap(groupid_, other->groupid_);
    std::swap(campid_, other->campid_);
    std::swap(achieve_, other->achieve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBattlePlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBattlePlayer_descriptor_;
  metadata.reflection = PBBattlePlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBattleCamp::kCampidFieldNumber;
const int PBBattleCamp::kPbplayerFieldNumber;
#endif  // !_MSC_VER

PBBattleCamp::PBBattleCamp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBattleCamp::InitAsDefaultInstance() {
}

PBBattleCamp::PBBattleCamp(const PBBattleCamp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBattleCamp::SharedCtor() {
  _cached_size_ = 0;
  campid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBattleCamp::~PBBattleCamp() {
  SharedDtor();
}

void PBBattleCamp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBBattleCamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBattleCamp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBattleCamp_descriptor_;
}

const PBBattleCamp& PBBattleCamp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

PBBattleCamp* PBBattleCamp::default_instance_ = NULL;

PBBattleCamp* PBBattleCamp::New() const {
  return new PBBattleCamp;
}

void PBBattleCamp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    campid_ = 0u;
  }
  pbplayer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBattleCamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 campid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbplayer;
        break;
      }

      // repeated .KFMsg.PBBattlePlayer pbplayer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbplayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbplayer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbplayer;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBattleCamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 campid = 1;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->campid(), output);
  }

  // repeated .KFMsg.PBBattlePlayer pbplayer = 2;
  for (int i = 0; i < this->pbplayer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pbplayer(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBattleCamp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 campid = 1;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->campid(), target);
  }

  // repeated .KFMsg.PBBattlePlayer pbplayer = 2;
  for (int i = 0; i < this->pbplayer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pbplayer(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBattleCamp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 campid = 1;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

  }
  // repeated .KFMsg.PBBattlePlayer pbplayer = 2;
  total_size += 1 * this->pbplayer_size();
  for (int i = 0; i < this->pbplayer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbplayer(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBattleCamp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBattleCamp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBattleCamp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBattleCamp::MergeFrom(const PBBattleCamp& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbplayer_.MergeFrom(from.pbplayer_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_campid()) {
      set_campid(from.campid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBattleCamp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBattleCamp::CopyFrom(const PBBattleCamp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBattleCamp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PBBattleCamp::Swap(PBBattleCamp* other) {
  if (other != this) {
    std::swap(campid_, other->campid_);
    pbplayer_.Swap(&other->pbplayer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBattleCamp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBattleCamp_descriptor_;
  metadata.reflection = PBBattleCamp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBMatchGroup::kGroupidFieldNumber;
const int PBMatchGroup::kPbplayerFieldNumber;
#endif  // !_MSC_VER

PBMatchGroup::PBMatchGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBMatchGroup::InitAsDefaultInstance() {
}

PBMatchGroup::PBMatchGroup(const PBMatchGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBMatchGroup::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBMatchGroup::~PBMatchGroup() {
  SharedDtor();
}

void PBMatchGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBMatchGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBMatchGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBMatchGroup_descriptor_;
}

const PBMatchGroup& PBMatchGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

PBMatchGroup* PBMatchGroup::default_instance_ = NULL;

PBMatchGroup* PBMatchGroup::New() const {
  return new PBMatchGroup;
}

void PBMatchGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  pbplayer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBMatchGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbplayer;
        break;
      }

      // repeated .KFMsg.PBBattlePlayer pbplayer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbplayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbplayer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbplayer;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBMatchGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // repeated .KFMsg.PBBattlePlayer pbplayer = 2;
  for (int i = 0; i < this->pbplayer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pbplayer(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBMatchGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // repeated .KFMsg.PBBattlePlayer pbplayer = 2;
  for (int i = 0; i < this->pbplayer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pbplayer(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBMatchGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  // repeated .KFMsg.PBBattlePlayer pbplayer = 2;
  total_size += 1 * this->pbplayer_size();
  for (int i = 0; i < this->pbplayer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbplayer(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBMatchGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBMatchGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBMatchGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBMatchGroup::MergeFrom(const PBMatchGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbplayer_.MergeFrom(from.pbplayer_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBMatchGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBMatchGroup::CopyFrom(const PBMatchGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBMatchGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PBMatchGroup::Swap(PBMatchGroup* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    pbplayer_.Swap(&other->pbplayer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBMatchGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBMatchGroup_descriptor_;
  metadata.reflection = PBMatchGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGuestData::kGuestidFieldNumber;
const int PBGuestData::kGuesticonFieldNumber;
const int PBGuestData::kGuesticonboxFieldNumber;
#endif  // !_MSC_VER

PBGuestData::PBGuestData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGuestData::InitAsDefaultInstance() {
}

PBGuestData::PBGuestData(const PBGuestData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGuestData::SharedCtor() {
  _cached_size_ = 0;
  guestid_ = 0u;
  guesticon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guesticonbox_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGuestData::~PBGuestData() {
  SharedDtor();
}

void PBGuestData::SharedDtor() {
  if (guesticon_ != &::google::protobuf::internal::kEmptyString) {
    delete guesticon_;
  }
  if (guesticonbox_ != &::google::protobuf::internal::kEmptyString) {
    delete guesticonbox_;
  }
  if (this != default_instance_) {
  }
}

void PBGuestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGuestData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGuestData_descriptor_;
}

const PBGuestData& PBGuestData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

PBGuestData* PBGuestData::default_instance_ = NULL;

PBGuestData* PBGuestData::New() const {
  return new PBGuestData;
}

void PBGuestData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guestid_ = 0u;
    if (has_guesticon()) {
      if (guesticon_ != &::google::protobuf::internal::kEmptyString) {
        guesticon_->clear();
      }
    }
    if (has_guesticonbox()) {
      if (guesticonbox_ != &::google::protobuf::internal::kEmptyString) {
        guesticonbox_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGuestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 guestid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guestid_)));
          set_has_guestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guesticon;
        break;
      }

      // required bytes guesticon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guesticon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guesticon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guesticonbox;
        break;
      }

      // required bytes guesticonbox = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guesticonbox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guesticonbox()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGuestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 guestid = 1;
  if (has_guestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guestid(), output);
  }

  // required bytes guesticon = 2;
  if (has_guesticon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->guesticon(), output);
  }

  // required bytes guesticonbox = 3;
  if (has_guesticonbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->guesticonbox(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGuestData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 guestid = 1;
  if (has_guestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guestid(), target);
  }

  // required bytes guesticon = 2;
  if (has_guesticon()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->guesticon(), target);
  }

  // required bytes guesticonbox = 3;
  if (has_guesticonbox()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->guesticonbox(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGuestData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 guestid = 1;
    if (has_guestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guestid());
    }

    // required bytes guesticon = 2;
    if (has_guesticon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->guesticon());
    }

    // required bytes guesticonbox = 3;
    if (has_guesticonbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->guesticonbox());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGuestData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGuestData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGuestData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGuestData::MergeFrom(const PBGuestData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guestid()) {
      set_guestid(from.guestid());
    }
    if (from.has_guesticon()) {
      set_guesticon(from.guesticon());
    }
    if (from.has_guesticonbox()) {
      set_guesticonbox(from.guesticonbox());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGuestData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGuestData::CopyFrom(const PBGuestData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGuestData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PBGuestData::Swap(PBGuestData* other) {
  if (other != this) {
    std::swap(guestid_, other->guestid_);
    std::swap(guesticon_, other->guesticon_);
    std::swap(guesticonbox_, other->guesticonbox_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGuestData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGuestData_descriptor_;
  metadata.reflection = PBGuestData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBattleScore::kPlayeridFieldNumber;
const int PBBattleScore::kRankingFieldNumber;
const int PBBattleScore::kPbdataFieldNumber;
const int PBBattleScore::kScoreFieldNumber;
const int PBBattleScore::kMatchidFieldNumber;
const int PBBattleScore::kRewardFieldNumber;
const int PBBattleScore::kAchieveFieldNumber;
const int PBBattleScore::kMembersFieldNumber;
const int PBBattleScore::kPlayercountFieldNumber;
#endif  // !_MSC_VER

PBBattleScore::PBBattleScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBattleScore::InitAsDefaultInstance() {
  achieve_ = const_cast< ::KFMsg::PBTaskDatas*>(&::KFMsg::PBTaskDatas::default_instance());
}

PBBattleScore::PBBattleScore(const PBBattleScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBattleScore::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ranking_ = 0u;
  score_ = 0u;
  matchid_ = 0u;
  reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  achieve_ = NULL;
  playercount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBattleScore::~PBBattleScore() {
  SharedDtor();
}

void PBBattleScore::SharedDtor() {
  if (reward_ != &::google::protobuf::internal::kEmptyString) {
    delete reward_;
  }
  if (this != default_instance_) {
    delete achieve_;
  }
}

void PBBattleScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBattleScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBattleScore_descriptor_;
}

const PBBattleScore& PBBattleScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

PBBattleScore* PBBattleScore::default_instance_ = NULL;

PBBattleScore* PBBattleScore::New() const {
  return new PBBattleScore;
}

void PBBattleScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    ranking_ = 0u;
    score_ = 0u;
    matchid_ = 0u;
    if (has_reward()) {
      if (reward_ != &::google::protobuf::internal::kEmptyString) {
        reward_->clear();
      }
    }
    if (has_achieve()) {
      if (achieve_ != NULL) achieve_->::KFMsg::PBTaskDatas::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    playercount_ = 0u;
  }
  pbdata_.Clear();
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBattleScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ranking;
        break;
      }

      // required uint32 ranking = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pbdata;
        break;
      }

      // repeated .KFMsg.PBUInt32 pbdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pbdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pbdata;
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional uint32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_matchid;
        break;
      }

      // optional uint32 matchid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_reward;
        break;
      }

      // optional bytes reward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_achieve;
        break;
      }

      // optional .KFMsg.PBTaskDatas achieve = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achieve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_achieve()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_members;
        break;
      }

      // repeated uint32 members = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_members())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_members())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_members;
        if (input->ExpectTag(72)) goto parse_playercount;
        break;
      }

      // optional uint32 playercount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playercount_)));
          set_has_playercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBattleScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 ranking = 2;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ranking(), output);
  }

  // repeated .KFMsg.PBUInt32 pbdata = 3;
  for (int i = 0; i < this->pbdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pbdata(i), output);
  }

  // optional uint32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->score(), output);
  }

  // optional uint32 matchid = 5;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->matchid(), output);
  }

  // optional bytes reward = 6;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->reward(), output);
  }

  // optional .KFMsg.PBTaskDatas achieve = 7;
  if (has_achieve()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->achieve(), output);
  }

  // repeated uint32 members = 8;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->members(i), output);
  }

  // optional uint32 playercount = 9;
  if (has_playercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->playercount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBattleScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 ranking = 2;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ranking(), target);
  }

  // repeated .KFMsg.PBUInt32 pbdata = 3;
  for (int i = 0; i < this->pbdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pbdata(i), target);
  }

  // optional uint32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->score(), target);
  }

  // optional uint32 matchid = 5;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->matchid(), target);
  }

  // optional bytes reward = 6;
  if (has_reward()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->reward(), target);
  }

  // optional .KFMsg.PBTaskDatas achieve = 7;
  if (has_achieve()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->achieve(), target);
  }

  // repeated uint32 members = 8;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->members(i), target);
  }

  // optional uint32 playercount = 9;
  if (has_playercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->playercount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBattleScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 ranking = 2;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranking());
    }

    // optional uint32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 matchid = 5;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // optional bytes reward = 6;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reward());
    }

    // optional .KFMsg.PBTaskDatas achieve = 7;
    if (has_achieve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achieve());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 playercount = 9;
    if (has_playercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playercount());
    }

  }
  // repeated .KFMsg.PBUInt32 pbdata = 3;
  total_size += 1 * this->pbdata_size();
  for (int i = 0; i < this->pbdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pbdata(i));
  }

  // repeated uint32 members = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->members_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->members(i));
    }
    total_size += 1 * this->members_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBattleScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBattleScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBattleScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBattleScore::MergeFrom(const PBBattleScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  pbdata_.MergeFrom(from.pbdata_);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_achieve()) {
      mutable_achieve()->::KFMsg::PBTaskDatas::MergeFrom(from.achieve());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_playercount()) {
      set_playercount(from.playercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBattleScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBattleScore::CopyFrom(const PBBattleScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBattleScore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PBBattleScore::Swap(PBBattleScore* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(ranking_, other->ranking_);
    pbdata_.Swap(&other->pbdata_);
    std::swap(score_, other->score_);
    std::swap(matchid_, other->matchid_);
    std::swap(reward_, other->reward_);
    std::swap(achieve_, other->achieve_);
    members_.Swap(&other->members_);
    std::swap(playercount_, other->playercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBattleScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBattleScore_descriptor_;
  metadata.reflection = PBBattleScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRecentData::kPlayeridFieldNumber;
const int PBRecentData::kRankingFieldNumber;
const int PBRecentData::kTotalnumFieldNumber;
const int PBRecentData::kKillFieldNumber;
const int PBRecentData::kScoreFieldNumber;
const int PBRecentData::kBekillidFieldNumber;
const int PBRecentData::kRelationtypeFieldNumber;
#endif  // !_MSC_VER

PBRecentData::PBRecentData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRecentData::InitAsDefaultInstance() {
}

PBRecentData::PBRecentData(const PBRecentData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRecentData::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ranking_ = 0u;
  totalnum_ = 0u;
  kill_ = 0u;
  score_ = 0u;
  bekillid_ = 0u;
  relationtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRecentData::~PBRecentData() {
  SharedDtor();
}

void PBRecentData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBRecentData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRecentData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRecentData_descriptor_;
}

const PBRecentData& PBRecentData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

PBRecentData* PBRecentData::default_instance_ = NULL;

PBRecentData* PBRecentData::New() const {
  return new PBRecentData;
}

void PBRecentData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    ranking_ = 0u;
    totalnum_ = 0u;
    kill_ = 0u;
    score_ = 0u;
    bekillid_ = 0u;
    relationtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRecentData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ranking;
        break;
      }

      // required uint32 ranking = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_totalnum;
        break;
      }

      // required uint32 totalnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalnum_)));
          set_has_totalnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kill;
        break;
      }

      // optional uint32 kill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_)));
          set_has_kill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // optional uint32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bekillid;
        break;
      }

      // optional uint32 bekillid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bekillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bekillid_)));
          set_has_bekillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_relationtype;
        break;
      }

      // optional uint32 relationtype = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relationtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relationtype_)));
          set_has_relationtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRecentData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 ranking = 2;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ranking(), output);
  }

  // required uint32 totalnum = 3;
  if (has_totalnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->totalnum(), output);
  }

  // optional uint32 kill = 4;
  if (has_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->kill(), output);
  }

  // optional uint32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score(), output);
  }

  // optional uint32 bekillid = 6;
  if (has_bekillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bekillid(), output);
  }

  // optional uint32 relationtype = 7;
  if (has_relationtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->relationtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRecentData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 ranking = 2;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ranking(), target);
  }

  // required uint32 totalnum = 3;
  if (has_totalnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->totalnum(), target);
  }

  // optional uint32 kill = 4;
  if (has_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->kill(), target);
  }

  // optional uint32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->score(), target);
  }

  // optional uint32 bekillid = 6;
  if (has_bekillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->bekillid(), target);
  }

  // optional uint32 relationtype = 7;
  if (has_relationtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->relationtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRecentData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 ranking = 2;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranking());
    }

    // required uint32 totalnum = 3;
    if (has_totalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalnum());
    }

    // optional uint32 kill = 4;
    if (has_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill());
    }

    // optional uint32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 bekillid = 6;
    if (has_bekillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bekillid());
    }

    // optional uint32 relationtype = 7;
    if (has_relationtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relationtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRecentData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRecentData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRecentData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRecentData::MergeFrom(const PBRecentData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
    if (from.has_totalnum()) {
      set_totalnum(from.totalnum());
    }
    if (from.has_kill()) {
      set_kill(from.kill());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_bekillid()) {
      set_bekillid(from.bekillid());
    }
    if (from.has_relationtype()) {
      set_relationtype(from.relationtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRecentData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRecentData::CopyFrom(const PBRecentData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRecentData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PBRecentData::Swap(PBRecentData* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(ranking_, other->ranking_);
    std::swap(totalnum_, other->totalnum_);
    std::swap(kill_, other->kill_);
    std::swap(score_, other->score_);
    std::swap(bekillid_, other->bekillid_);
    std::swap(relationtype_, other->relationtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRecentData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRecentData_descriptor_;
  metadata.reflection = PBRecentData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBPlayerIds::kPlayeridFieldNumber;
#endif  // !_MSC_VER

PBPlayerIds::PBPlayerIds()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBPlayerIds::InitAsDefaultInstance() {
}

PBPlayerIds::PBPlayerIds(const PBPlayerIds& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBPlayerIds::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBPlayerIds::~PBPlayerIds() {
  SharedDtor();
}

void PBPlayerIds::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBPlayerIds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBPlayerIds::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBPlayerIds_descriptor_;
}

const PBPlayerIds& PBPlayerIds::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

PBPlayerIds* PBPlayerIds::default_instance_ = NULL;

PBPlayerIds* PBPlayerIds::New() const {
  return new PBPlayerIds;
}

void PBPlayerIds::Clear() {
  playerid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBPlayerIds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_playerid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_playerid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_playerid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBPlayerIds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 playerid = 1;
  for (int i = 0; i < this->playerid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->playerid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBPlayerIds::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 playerid = 1;
  for (int i = 0; i < this->playerid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->playerid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBPlayerIds::ByteSize() const {
  int total_size = 0;

  // repeated uint32 playerid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->playerid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->playerid(i));
    }
    total_size += 1 * this->playerid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBPlayerIds::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBPlayerIds* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBPlayerIds*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBPlayerIds::MergeFrom(const PBPlayerIds& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerid_.MergeFrom(from.playerid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBPlayerIds::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBPlayerIds::CopyFrom(const PBPlayerIds& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBPlayerIds::IsInitialized() const {

  return true;
}

void PBPlayerIds::Swap(PBPlayerIds* other) {
  if (other != this) {
    playerid_.Swap(&other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBPlayerIds::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBPlayerIds_descriptor_;
  metadata.reflection = PBPlayerIds_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBApplicationlist::kPlayeridFieldNumber;
const int PBApplicationlist::kTimeFieldNumber;
const int PBApplicationlist::kBasicFieldNumber;
#endif  // !_MSC_VER

PBApplicationlist::PBApplicationlist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBApplicationlist::InitAsDefaultInstance() {
  basic_ = const_cast< ::KFMsg::PBStrings*>(&::KFMsg::PBStrings::default_instance());
}

PBApplicationlist::PBApplicationlist(const PBApplicationlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBApplicationlist::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  basic_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBApplicationlist::~PBApplicationlist() {
  SharedDtor();
}

void PBApplicationlist::SharedDtor() {
  if (this != default_instance_) {
    delete basic_;
  }
}

void PBApplicationlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBApplicationlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBApplicationlist_descriptor_;
}

const PBApplicationlist& PBApplicationlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

PBApplicationlist* PBApplicationlist::default_instance_ = NULL;

PBApplicationlist* PBApplicationlist::New() const {
  return new PBApplicationlist;
}

void PBApplicationlist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    time_ = GOOGLE_ULONGLONG(0);
    if (has_basic()) {
      if (basic_ != NULL) basic_->::KFMsg::PBStrings::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBApplicationlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_basic;
        break;
      }

      // required .KFMsg.PBStrings basic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_basic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBApplicationlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // required .KFMsg.PBStrings basic = 3;
  if (has_basic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->basic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBApplicationlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // required .KFMsg.PBStrings basic = 3;
  if (has_basic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->basic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBApplicationlist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // required .KFMsg.PBStrings basic = 3;
    if (has_basic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBApplicationlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBApplicationlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBApplicationlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBApplicationlist::MergeFrom(const PBApplicationlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_basic()) {
      mutable_basic()->::KFMsg::PBStrings::MergeFrom(from.basic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBApplicationlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBApplicationlist::CopyFrom(const PBApplicationlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBApplicationlist::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PBApplicationlist::Swap(PBApplicationlist* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(time_, other->time_);
    std::swap(basic_, other->basic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBApplicationlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBApplicationlist_descriptor_;
  metadata.reflection = PBApplicationlist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBApplicationlists::kApplylistsFieldNumber;
#endif  // !_MSC_VER

PBApplicationlists::PBApplicationlists()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBApplicationlists::InitAsDefaultInstance() {
}

PBApplicationlists::PBApplicationlists(const PBApplicationlists& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBApplicationlists::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBApplicationlists::~PBApplicationlists() {
  SharedDtor();
}

void PBApplicationlists::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBApplicationlists::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBApplicationlists::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBApplicationlists_descriptor_;
}

const PBApplicationlists& PBApplicationlists::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

PBApplicationlists* PBApplicationlists::default_instance_ = NULL;

PBApplicationlists* PBApplicationlists::New() const {
  return new PBApplicationlists;
}

void PBApplicationlists::Clear() {
  applylists_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBApplicationlists::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .KFMsg.PBApplicationlist applylists = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applylists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applylists()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_applylists;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBApplicationlists::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .KFMsg.PBApplicationlist applylists = 1;
  for (int i = 0; i < this->applylists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->applylists(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBApplicationlists::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .KFMsg.PBApplicationlist applylists = 1;
  for (int i = 0; i < this->applylists_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->applylists(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBApplicationlists::ByteSize() const {
  int total_size = 0;

  // repeated .KFMsg.PBApplicationlist applylists = 1;
  total_size += 1 * this->applylists_size();
  for (int i = 0; i < this->applylists_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applylists(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBApplicationlists::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBApplicationlists* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBApplicationlists*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBApplicationlists::MergeFrom(const PBApplicationlists& from) {
  GOOGLE_CHECK_NE(&from, this);
  applylists_.MergeFrom(from.applylists_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBApplicationlists::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBApplicationlists::CopyFrom(const PBApplicationlists& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBApplicationlists::IsInitialized() const {

  for (int i = 0; i < applylists_size(); i++) {
    if (!this->applylists(i).IsInitialized()) return false;
  }
  return true;
}

void PBApplicationlists::Swap(PBApplicationlists* other) {
  if (other != this) {
    applylists_.Swap(&other->applylists_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBApplicationlists::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBApplicationlists_descriptor_;
  metadata.reflection = PBApplicationlists_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGuildIdArray::kGuildidFieldNumber;
#endif  // !_MSC_VER

PBGuildIdArray::PBGuildIdArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGuildIdArray::InitAsDefaultInstance() {
}

PBGuildIdArray::PBGuildIdArray(const PBGuildIdArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGuildIdArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGuildIdArray::~PBGuildIdArray() {
  SharedDtor();
}

void PBGuildIdArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGuildIdArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGuildIdArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGuildIdArray_descriptor_;
}

const PBGuildIdArray& PBGuildIdArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFCommonMessage_2eproto();
  return *default_instance_;
}

PBGuildIdArray* PBGuildIdArray::default_instance_ = NULL;

PBGuildIdArray* PBGuildIdArray::New() const {
  return new PBGuildIdArray;
}

void PBGuildIdArray::Clear() {
  guildid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGuildIdArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_guildid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_guildid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_guildid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGuildIdArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 guildid = 1;
  for (int i = 0; i < this->guildid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->guildid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGuildIdArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 guildid = 1;
  for (int i = 0; i < this->guildid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->guildid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGuildIdArray::ByteSize() const {
  int total_size = 0;

  // repeated uint64 guildid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->guildid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->guildid(i));
    }
    total_size += 1 * this->guildid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGuildIdArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGuildIdArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGuildIdArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGuildIdArray::MergeFrom(const PBGuildIdArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildid_.MergeFrom(from.guildid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGuildIdArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGuildIdArray::CopyFrom(const PBGuildIdArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGuildIdArray::IsInitialized() const {

  return true;
}

void PBGuildIdArray::Swap(PBGuildIdArray* other) {
  if (other != this) {
    guildid_.Swap(&other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGuildIdArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGuildIdArray_descriptor_;
  metadata.reflection = PBGuildIdArray_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

// @@protoc_insertion_point(global_scope)
