// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFClientMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "KFClientMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KFMsg {

namespace {

const ::google::protobuf::Descriptor* MsgResultDisplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgResultDisplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTellBeKick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTellBeKick_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLoginVerifyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLoginVerifyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLoginVerifyAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLoginVerifyAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLoginGameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLoginGameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLoginOutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLoginOutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCreateRoleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCreateRoleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgChangeNameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgChangeNameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgChangeSexReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgChangeSexReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgChangeIconReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgChangeIconReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgChangeIconBoxReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgChangeIconBoxReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgChangeMottoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgChangeMottoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryBasicReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryBasicReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryPlayerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryPlayerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgReceiveTaskRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgReceiveTaskRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgReceiveActivityRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgReceiveActivityRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgReceiveAchieveRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgReceiveAchieveRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgReceiveGiftRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgReceiveGiftRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgReceiveMailRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgReceiveMailRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgViewMailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgViewMailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDeleteMailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDeleteMailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryMailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryMailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgStartMatchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStartMatchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgStartMatchAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStartMatchAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCancelMatchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCancelMatchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCancelMatchAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCancelMatchAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMatchResultAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMatchResultAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTellMatchWaitTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTellMatchWaitTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTellMatchPlayerCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTellMatchPlayerCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAddFriendInviteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAddFriendInviteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgReplyFriendInviteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgReplyFriendInviteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDelFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDelFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSetRefuseFriendInviteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSetRefuseFriendInviteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgEnterChatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgEnterChatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSendChatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSendChatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSendChatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSendChatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLeaveChatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLeaveChatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSendOneByOneChatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSendOneByOneChatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSendOneByOneChatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSendOneByOneChatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDebugCommandReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDebugCommandReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgShowRewardAgent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgShowRewardAgent_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSendGroupChatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSendGroupChatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSendGroupChatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSendGroupChatInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBuyStoreReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBuyStoreReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgGiveStoreReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgGiveStoreReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlayerToastReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlayerToastReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryToastCountReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryToastCountReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryToastCountAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryToastCountAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgRemoveDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgRemoveDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgChangeModelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgChangeModelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSetModelDefaultClothesReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSetModelDefaultClothesReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDressClothesReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDressClothesReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgInviteMatchGroupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgInviteMatchGroupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgReplyInviteMatchGroupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgReplyInviteMatchGroupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLeaveMatchGroupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLeaveMatchGroupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgKickMatchGroupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgKickMatchGroupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgApplyMatchGroupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgApplyMatchGroupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgReplyApplyMatchGroupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgReplyApplyMatchGroupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMatchGroupPrepareReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMatchGroupPrepareReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUpdateGroupMatchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUpdateGroupMatchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryGuestReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryGuestReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryGuestAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryGuestAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUseItemReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUseItemReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBStore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBStore_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBStores_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBStores_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryStoreInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryStoreInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryStoreInfoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryStoreInfoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBuyStoreAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBuyStoreAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSetWishOrderReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSetWishOrderReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQuerySettingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQuerySettingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQuerySettingAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQuerySettingAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUpdateSettingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUpdateSettingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryRecentListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryRecentListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryRecentListAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryRecentListAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCompoundDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCompoundDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryRankListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryRankListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryRankListAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryRankListAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryFriendRankListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryFriendRankListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryFriendRankListAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryFriendRankListAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSevenSignInRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSevenSignInRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTellSevenExtendReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTellSevenExtendReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCreateGuildReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCreateGuildReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgInviteGuildReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgInviteGuildReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgApplyGuildReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgApplyGuildReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgExitGuildReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgExitGuildReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTransferMasterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTransferMasterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgReviewApplyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgReviewApplyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDissolveGuildReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDissolveGuildReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgModifyGuildMedalReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgModifyGuildMedalReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryGuildListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryGuildListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryGuildListAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryGuildListAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgKickMemberReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgKickMemberReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUpgradeGuildReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUpgradeGuildReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAppointGuildMemberReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAppointGuildMemberReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSearchGuildByNameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSearchGuildByNameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSetGuildSwitchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSetGuildSwitchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryGuildLogReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryGuildLogReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryGuildLogAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryGuildLogAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTellMarquee_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTellMarquee_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTellSysNotcie_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTellSysNotcie_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBindAlipayReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBindAlipayReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgExChangeInviteScoreReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgExChangeInviteScoreReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgExChangeInviteScoreAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgExChangeInviteScoreAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryInviteScoreReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryInviteScoreReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgQueryInviteScoreAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgQueryInviteScoreAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgExChangeInviteRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgExChangeInviteRecordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBExChangeInviteRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBExChangeInviteRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgExChangeInviteRecordAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgExChangeInviteRecordAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientProtocol_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_KFClientMessage_2eproto() {
  protobuf_AddDesc_KFClientMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "KFClientMessage.proto");
  GOOGLE_CHECK(file != NULL);
  MsgResultDisplay_descriptor_ = file->message_type(0);
  static const int MsgResultDisplay_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgResultDisplay, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgResultDisplay, param_),
  };
  MsgResultDisplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgResultDisplay_descriptor_,
      MsgResultDisplay::default_instance_,
      MsgResultDisplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgResultDisplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgResultDisplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgResultDisplay));
  MsgTellBeKick_descriptor_ = file->message_type(1);
  static const int MsgTellBeKick_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTellBeKick, type_),
  };
  MsgTellBeKick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTellBeKick_descriptor_,
      MsgTellBeKick::default_instance_,
      MsgTellBeKick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTellBeKick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTellBeKick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTellBeKick));
  MsgLoginVerifyReq_descriptor_ = file->message_type(2);
  static const int MsgLoginVerifyReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginVerifyReq, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginVerifyReq, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginVerifyReq, version_),
  };
  MsgLoginVerifyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLoginVerifyReq_descriptor_,
      MsgLoginVerifyReq::default_instance_,
      MsgLoginVerifyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginVerifyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginVerifyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLoginVerifyReq));
  MsgLoginVerifyAck_descriptor_ = file->message_type(3);
  static const int MsgLoginVerifyAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginVerifyAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginVerifyAck, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginVerifyAck, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginVerifyAck, port_),
  };
  MsgLoginVerifyAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLoginVerifyAck_descriptor_,
      MsgLoginVerifyAck::default_instance_,
      MsgLoginVerifyAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginVerifyAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginVerifyAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLoginVerifyAck));
  MsgLoginGameReq_descriptor_ = file->message_type(4);
  static const int MsgLoginGameReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginGameReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginGameReq, token_),
  };
  MsgLoginGameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLoginGameReq_descriptor_,
      MsgLoginGameReq::default_instance_,
      MsgLoginGameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginGameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginGameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLoginGameReq));
  MsgLoginOutReq_descriptor_ = file->message_type(5);
  static const int MsgLoginOutReq_offsets_[1] = {
  };
  MsgLoginOutReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLoginOutReq_descriptor_,
      MsgLoginOutReq::default_instance_,
      MsgLoginOutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginOutReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLoginOutReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLoginOutReq));
  MsgCreateRoleReq_descriptor_ = file->message_type(6);
  static const int MsgCreateRoleReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateRoleReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateRoleReq, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateRoleReq, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateRoleReq, inviterid_),
  };
  MsgCreateRoleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCreateRoleReq_descriptor_,
      MsgCreateRoleReq::default_instance_,
      MsgCreateRoleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateRoleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateRoleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCreateRoleReq));
  MsgChangeNameReq_descriptor_ = file->message_type(7);
  static const int MsgChangeNameReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeNameReq, name_),
  };
  MsgChangeNameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgChangeNameReq_descriptor_,
      MsgChangeNameReq::default_instance_,
      MsgChangeNameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeNameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeNameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgChangeNameReq));
  MsgChangeSexReq_descriptor_ = file->message_type(8);
  static const int MsgChangeSexReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeSexReq, sex_),
  };
  MsgChangeSexReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgChangeSexReq_descriptor_,
      MsgChangeSexReq::default_instance_,
      MsgChangeSexReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeSexReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeSexReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgChangeSexReq));
  MsgChangeIconReq_descriptor_ = file->message_type(9);
  static const int MsgChangeIconReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeIconReq, icon_),
  };
  MsgChangeIconReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgChangeIconReq_descriptor_,
      MsgChangeIconReq::default_instance_,
      MsgChangeIconReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeIconReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeIconReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgChangeIconReq));
  MsgChangeIconBoxReq_descriptor_ = file->message_type(10);
  static const int MsgChangeIconBoxReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeIconBoxReq, iconbox_),
  };
  MsgChangeIconBoxReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgChangeIconBoxReq_descriptor_,
      MsgChangeIconBoxReq::default_instance_,
      MsgChangeIconBoxReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeIconBoxReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeIconBoxReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgChangeIconBoxReq));
  MsgChangeMottoReq_descriptor_ = file->message_type(11);
  static const int MsgChangeMottoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeMottoReq, motto_),
  };
  MsgChangeMottoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgChangeMottoReq_descriptor_,
      MsgChangeMottoReq::default_instance_,
      MsgChangeMottoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeMottoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeMottoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgChangeMottoReq));
  MsgQueryBasicReq_descriptor_ = file->message_type(12);
  static const int MsgQueryBasicReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryBasicReq, name_),
  };
  MsgQueryBasicReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryBasicReq_descriptor_,
      MsgQueryBasicReq::default_instance_,
      MsgQueryBasicReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryBasicReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryBasicReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryBasicReq));
  MsgQueryPlayerReq_descriptor_ = file->message_type(13);
  static const int MsgQueryPlayerReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerReq, playerid_),
  };
  MsgQueryPlayerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryPlayerReq_descriptor_,
      MsgQueryPlayerReq::default_instance_,
      MsgQueryPlayerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryPlayerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryPlayerReq));
  MsgReceiveTaskRewardReq_descriptor_ = file->message_type(14);
  static const int MsgReceiveTaskRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReceiveTaskRewardReq, taskid_),
  };
  MsgReceiveTaskRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgReceiveTaskRewardReq_descriptor_,
      MsgReceiveTaskRewardReq::default_instance_,
      MsgReceiveTaskRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReceiveTaskRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReceiveTaskRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgReceiveTaskRewardReq));
  MsgReceiveActivityRewardReq_descriptor_ = file->message_type(15);
  static const int MsgReceiveActivityRewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReceiveActivityRewardReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReceiveActivityRewardReq, id_),
  };
  MsgReceiveActivityRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgReceiveActivityRewardReq_descriptor_,
      MsgReceiveActivityRewardReq::default_instance_,
      MsgReceiveActivityRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReceiveActivityRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReceiveActivityRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgReceiveActivityRewardReq));
  MsgReceiveAchieveRewardReq_descriptor_ = file->message_type(16);
  static const int MsgReceiveAchieveRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReceiveAchieveRewardReq, achieveid_),
  };
  MsgReceiveAchieveRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgReceiveAchieveRewardReq_descriptor_,
      MsgReceiveAchieveRewardReq::default_instance_,
      MsgReceiveAchieveRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReceiveAchieveRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReceiveAchieveRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgReceiveAchieveRewardReq));
  MsgReceiveGiftRewardReq_descriptor_ = file->message_type(17);
  static const int MsgReceiveGiftRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReceiveGiftRewardReq, giftkey_),
  };
  MsgReceiveGiftRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgReceiveGiftRewardReq_descriptor_,
      MsgReceiveGiftRewardReq::default_instance_,
      MsgReceiveGiftRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReceiveGiftRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReceiveGiftRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgReceiveGiftRewardReq));
  MsgReceiveMailRewardReq_descriptor_ = file->message_type(18);
  static const int MsgReceiveMailRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReceiveMailRewardReq, mailid_),
  };
  MsgReceiveMailRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgReceiveMailRewardReq_descriptor_,
      MsgReceiveMailRewardReq::default_instance_,
      MsgReceiveMailRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReceiveMailRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReceiveMailRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgReceiveMailRewardReq));
  MsgViewMailReq_descriptor_ = file->message_type(19);
  static const int MsgViewMailReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgViewMailReq, mailid_),
  };
  MsgViewMailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgViewMailReq_descriptor_,
      MsgViewMailReq::default_instance_,
      MsgViewMailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgViewMailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgViewMailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgViewMailReq));
  MsgDeleteMailReq_descriptor_ = file->message_type(20);
  static const int MsgDeleteMailReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDeleteMailReq, mailid_),
  };
  MsgDeleteMailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDeleteMailReq_descriptor_,
      MsgDeleteMailReq::default_instance_,
      MsgDeleteMailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDeleteMailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDeleteMailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDeleteMailReq));
  MsgQueryMailReq_descriptor_ = file->message_type(21);
  static const int MsgQueryMailReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryMailReq, mailtype_),
  };
  MsgQueryMailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryMailReq_descriptor_,
      MsgQueryMailReq::default_instance_,
      MsgQueryMailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryMailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryMailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryMailReq));
  MsgStartMatchReq_descriptor_ = file->message_type(22);
  static const int MsgStartMatchReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartMatchReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartMatchReq, allowgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartMatchReq, battleserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartMatchReq, version_),
  };
  MsgStartMatchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStartMatchReq_descriptor_,
      MsgStartMatchReq::default_instance_,
      MsgStartMatchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartMatchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartMatchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStartMatchReq));
  MsgStartMatchAck_descriptor_ = file->message_type(23);
  static const int MsgStartMatchAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartMatchAck, matchid_),
  };
  MsgStartMatchAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStartMatchAck_descriptor_,
      MsgStartMatchAck::default_instance_,
      MsgStartMatchAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartMatchAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartMatchAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStartMatchAck));
  MsgCancelMatchReq_descriptor_ = file->message_type(24);
  static const int MsgCancelMatchReq_offsets_[1] = {
  };
  MsgCancelMatchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCancelMatchReq_descriptor_,
      MsgCancelMatchReq::default_instance_,
      MsgCancelMatchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCancelMatchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCancelMatchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCancelMatchReq));
  MsgCancelMatchAck_descriptor_ = file->message_type(25);
  static const int MsgCancelMatchAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCancelMatchAck, matchid_),
  };
  MsgCancelMatchAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCancelMatchAck_descriptor_,
      MsgCancelMatchAck::default_instance_,
      MsgCancelMatchAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCancelMatchAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCancelMatchAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCancelMatchAck));
  MsgMatchResultAck_descriptor_ = file->message_type(26);
  static const int MsgMatchResultAck_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchResultAck, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchResultAck, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchResultAck, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchResultAck, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchResultAck, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchResultAck, token_),
  };
  MsgMatchResultAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMatchResultAck_descriptor_,
      MsgMatchResultAck::default_instance_,
      MsgMatchResultAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchResultAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchResultAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMatchResultAck));
  MsgTellMatchWaitTime_descriptor_ = file->message_type(27);
  static const int MsgTellMatchWaitTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTellMatchWaitTime, waittime_),
  };
  MsgTellMatchWaitTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTellMatchWaitTime_descriptor_,
      MsgTellMatchWaitTime::default_instance_,
      MsgTellMatchWaitTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTellMatchWaitTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTellMatchWaitTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTellMatchWaitTime));
  MsgTellMatchPlayerCount_descriptor_ = file->message_type(28);
  static const int MsgTellMatchPlayerCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTellMatchPlayerCount, count_),
  };
  MsgTellMatchPlayerCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTellMatchPlayerCount_descriptor_,
      MsgTellMatchPlayerCount::default_instance_,
      MsgTellMatchPlayerCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTellMatchPlayerCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTellMatchPlayerCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTellMatchPlayerCount));
  MsgAddFriendInviteReq_descriptor_ = file->message_type(29);
  static const int MsgAddFriendInviteReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAddFriendInviteReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAddFriendInviteReq, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAddFriendInviteReq, name_),
  };
  MsgAddFriendInviteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAddFriendInviteReq_descriptor_,
      MsgAddFriendInviteReq::default_instance_,
      MsgAddFriendInviteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAddFriendInviteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAddFriendInviteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAddFriendInviteReq));
  MsgReplyFriendInviteReq_descriptor_ = file->message_type(30);
  static const int MsgReplyFriendInviteReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReplyFriendInviteReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReplyFriendInviteReq, operate_),
  };
  MsgReplyFriendInviteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgReplyFriendInviteReq_descriptor_,
      MsgReplyFriendInviteReq::default_instance_,
      MsgReplyFriendInviteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReplyFriendInviteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReplyFriendInviteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgReplyFriendInviteReq));
  MsgDelFriendReq_descriptor_ = file->message_type(31);
  static const int MsgDelFriendReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDelFriendReq, playerid_),
  };
  MsgDelFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDelFriendReq_descriptor_,
      MsgDelFriendReq::default_instance_,
      MsgDelFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDelFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDelFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDelFriendReq));
  MsgSetRefuseFriendInviteReq_descriptor_ = file->message_type(32);
  static const int MsgSetRefuseFriendInviteReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSetRefuseFriendInviteReq, refuse_),
  };
  MsgSetRefuseFriendInviteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSetRefuseFriendInviteReq_descriptor_,
      MsgSetRefuseFriendInviteReq::default_instance_,
      MsgSetRefuseFriendInviteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSetRefuseFriendInviteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSetRefuseFriendInviteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSetRefuseFriendInviteReq));
  MsgEnterChatReq_descriptor_ = file->message_type(33);
  static const int MsgEnterChatReq_offsets_[1] = {
  };
  MsgEnterChatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgEnterChatReq_descriptor_,
      MsgEnterChatReq::default_instance_,
      MsgEnterChatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterChatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgEnterChatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgEnterChatReq));
  MsgSendChatReq_descriptor_ = file->message_type(34);
  static const int MsgSendChatReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendChatReq, chatinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendChatReq, isvoice_),
  };
  MsgSendChatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSendChatReq_descriptor_,
      MsgSendChatReq::default_instance_,
      MsgSendChatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendChatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendChatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSendChatReq));
  MsgSendChatInfo_descriptor_ = file->message_type(35);
  static const int MsgSendChatInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendChatInfo, chatinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendChatInfo, isvoice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendChatInfo, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendChatInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendChatInfo, playericon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendChatInfo, playergrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendChatInfo, playersex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendChatInfo, playericonbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendChatInfo, playerserverid_),
  };
  MsgSendChatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSendChatInfo_descriptor_,
      MsgSendChatInfo::default_instance_,
      MsgSendChatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendChatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendChatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSendChatInfo));
  MsgLeaveChatReq_descriptor_ = file->message_type(36);
  static const int MsgLeaveChatReq_offsets_[1] = {
  };
  MsgLeaveChatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLeaveChatReq_descriptor_,
      MsgLeaveChatReq::default_instance_,
      MsgLeaveChatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLeaveChatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLeaveChatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLeaveChatReq));
  MsgSendOneByOneChatReq_descriptor_ = file->message_type(37);
  static const int MsgSendOneByOneChatReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendOneByOneChatReq, chatinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendOneByOneChatReq, isvoice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendOneByOneChatReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendOneByOneChatReq, chattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendOneByOneChatReq, selfinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendOneByOneChatReq, serverid_),
  };
  MsgSendOneByOneChatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSendOneByOneChatReq_descriptor_,
      MsgSendOneByOneChatReq::default_instance_,
      MsgSendOneByOneChatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendOneByOneChatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendOneByOneChatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSendOneByOneChatReq));
  MsgSendOneByOneChatInfo_descriptor_ = file->message_type(38);
  static const int MsgSendOneByOneChatInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendOneByOneChatInfo, chatinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendOneByOneChatInfo, isvoice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendOneByOneChatInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendOneByOneChatInfo, chattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendOneByOneChatInfo, playerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendOneByOneChatInfo, serverid_),
  };
  MsgSendOneByOneChatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSendOneByOneChatInfo_descriptor_,
      MsgSendOneByOneChatInfo::default_instance_,
      MsgSendOneByOneChatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendOneByOneChatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendOneByOneChatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSendOneByOneChatInfo));
  MsgDebugCommandReq_descriptor_ = file->message_type(39);
  static const int MsgDebugCommandReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDebugCommandReq, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDebugCommandReq, params_),
  };
  MsgDebugCommandReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDebugCommandReq_descriptor_,
      MsgDebugCommandReq::default_instance_,
      MsgDebugCommandReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDebugCommandReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDebugCommandReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDebugCommandReq));
  MsgShowRewardAgent_descriptor_ = file->message_type(40);
  static const int MsgShowRewardAgent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowRewardAgent, reward_),
  };
  MsgShowRewardAgent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgShowRewardAgent_descriptor_,
      MsgShowRewardAgent::default_instance_,
      MsgShowRewardAgent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowRewardAgent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShowRewardAgent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgShowRewardAgent));
  MsgSendGroupChatReq_descriptor_ = file->message_type(41);
  static const int MsgSendGroupChatReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendGroupChatReq, chatinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendGroupChatReq, isvoice_),
  };
  MsgSendGroupChatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSendGroupChatReq_descriptor_,
      MsgSendGroupChatReq::default_instance_,
      MsgSendGroupChatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendGroupChatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendGroupChatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSendGroupChatReq));
  MsgSendGroupChatInfo_descriptor_ = file->message_type(42);
  static const int MsgSendGroupChatInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendGroupChatInfo, chatinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendGroupChatInfo, isvoice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendGroupChatInfo, playerid_),
  };
  MsgSendGroupChatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSendGroupChatInfo_descriptor_,
      MsgSendGroupChatInfo::default_instance_,
      MsgSendGroupChatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendGroupChatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSendGroupChatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSendGroupChatInfo));
  MsgBuyStoreReq_descriptor_ = file->message_type(43);
  static const int MsgBuyStoreReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuyStoreReq, buytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuyStoreReq, shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuyStoreReq, num_),
  };
  MsgBuyStoreReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBuyStoreReq_descriptor_,
      MsgBuyStoreReq::default_instance_,
      MsgBuyStoreReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuyStoreReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuyStoreReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBuyStoreReq));
  MsgGiveStoreReq_descriptor_ = file->message_type(44);
  static const int MsgGiveStoreReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGiveStoreReq, toplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGiveStoreReq, shopid_),
  };
  MsgGiveStoreReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgGiveStoreReq_descriptor_,
      MsgGiveStoreReq::default_instance_,
      MsgGiveStoreReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGiveStoreReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgGiveStoreReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgGiveStoreReq));
  MsgPlayerToastReq_descriptor_ = file->message_type(45);
  static const int MsgPlayerToastReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerToastReq, playerid_),
  };
  MsgPlayerToastReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlayerToastReq_descriptor_,
      MsgPlayerToastReq::default_instance_,
      MsgPlayerToastReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerToastReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlayerToastReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlayerToastReq));
  MsgQueryToastCountReq_descriptor_ = file->message_type(46);
  static const int MsgQueryToastCountReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryToastCountReq, playerid_),
  };
  MsgQueryToastCountReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryToastCountReq_descriptor_,
      MsgQueryToastCountReq::default_instance_,
      MsgQueryToastCountReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryToastCountReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryToastCountReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryToastCountReq));
  MsgQueryToastCountAck_descriptor_ = file->message_type(47);
  static const int MsgQueryToastCountAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryToastCountAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryToastCountAck, toastcount_),
  };
  MsgQueryToastCountAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryToastCountAck_descriptor_,
      MsgQueryToastCountAck::default_instance_,
      MsgQueryToastCountAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryToastCountAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryToastCountAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryToastCountAck));
  MsgRemoveDataReq_descriptor_ = file->message_type(48);
  static const int MsgRemoveDataReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRemoveDataReq, dataname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRemoveDataReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRemoveDataReq, count_),
  };
  MsgRemoveDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgRemoveDataReq_descriptor_,
      MsgRemoveDataReq::default_instance_,
      MsgRemoveDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRemoveDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgRemoveDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgRemoveDataReq));
  MsgChangeModelReq_descriptor_ = file->message_type(49);
  static const int MsgChangeModelReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeModelReq, modelid_),
  };
  MsgChangeModelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgChangeModelReq_descriptor_,
      MsgChangeModelReq::default_instance_,
      MsgChangeModelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeModelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeModelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgChangeModelReq));
  MsgSetModelDefaultClothesReq_descriptor_ = file->message_type(50);
  static const int MsgSetModelDefaultClothesReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSetModelDefaultClothesReq, modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSetModelDefaultClothesReq, clothesid_),
  };
  MsgSetModelDefaultClothesReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSetModelDefaultClothesReq_descriptor_,
      MsgSetModelDefaultClothesReq::default_instance_,
      MsgSetModelDefaultClothesReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSetModelDefaultClothesReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSetModelDefaultClothesReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSetModelDefaultClothesReq));
  MsgDressClothesReq_descriptor_ = file->message_type(51);
  static const int MsgDressClothesReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDressClothesReq, clothesid_),
  };
  MsgDressClothesReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDressClothesReq_descriptor_,
      MsgDressClothesReq::default_instance_,
      MsgDressClothesReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDressClothesReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDressClothesReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDressClothesReq));
  MsgInviteMatchGroupReq_descriptor_ = file->message_type(52);
  static const int MsgInviteMatchGroupReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInviteMatchGroupReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInviteMatchGroupReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInviteMatchGroupReq, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInviteMatchGroupReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInviteMatchGroupReq, playername_),
  };
  MsgInviteMatchGroupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgInviteMatchGroupReq_descriptor_,
      MsgInviteMatchGroupReq::default_instance_,
      MsgInviteMatchGroupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInviteMatchGroupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInviteMatchGroupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgInviteMatchGroupReq));
  MsgReplyInviteMatchGroupReq_descriptor_ = file->message_type(53);
  static const int MsgReplyInviteMatchGroupReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReplyInviteMatchGroupReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReplyInviteMatchGroupReq, inviterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReplyInviteMatchGroupReq, operate_),
  };
  MsgReplyInviteMatchGroupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgReplyInviteMatchGroupReq_descriptor_,
      MsgReplyInviteMatchGroupReq::default_instance_,
      MsgReplyInviteMatchGroupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReplyInviteMatchGroupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReplyInviteMatchGroupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgReplyInviteMatchGroupReq));
  MsgLeaveMatchGroupReq_descriptor_ = file->message_type(54);
  static const int MsgLeaveMatchGroupReq_offsets_[1] = {
  };
  MsgLeaveMatchGroupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLeaveMatchGroupReq_descriptor_,
      MsgLeaveMatchGroupReq::default_instance_,
      MsgLeaveMatchGroupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLeaveMatchGroupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLeaveMatchGroupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLeaveMatchGroupReq));
  MsgKickMatchGroupReq_descriptor_ = file->message_type(55);
  static const int MsgKickMatchGroupReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKickMatchGroupReq, memberid_),
  };
  MsgKickMatchGroupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgKickMatchGroupReq_descriptor_,
      MsgKickMatchGroupReq::default_instance_,
      MsgKickMatchGroupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKickMatchGroupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKickMatchGroupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgKickMatchGroupReq));
  MsgApplyMatchGroupReq_descriptor_ = file->message_type(56);
  static const int MsgApplyMatchGroupReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApplyMatchGroupReq, groupid_),
  };
  MsgApplyMatchGroupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgApplyMatchGroupReq_descriptor_,
      MsgApplyMatchGroupReq::default_instance_,
      MsgApplyMatchGroupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApplyMatchGroupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApplyMatchGroupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgApplyMatchGroupReq));
  MsgReplyApplyMatchGroupReq_descriptor_ = file->message_type(57);
  static const int MsgReplyApplyMatchGroupReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReplyApplyMatchGroupReq, applyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReplyApplyMatchGroupReq, operate_),
  };
  MsgReplyApplyMatchGroupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgReplyApplyMatchGroupReq_descriptor_,
      MsgReplyApplyMatchGroupReq::default_instance_,
      MsgReplyApplyMatchGroupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReplyApplyMatchGroupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReplyApplyMatchGroupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgReplyApplyMatchGroupReq));
  MsgMatchGroupPrepareReq_descriptor_ = file->message_type(58);
  static const int MsgMatchGroupPrepareReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchGroupPrepareReq, prepare_),
  };
  MsgMatchGroupPrepareReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMatchGroupPrepareReq_descriptor_,
      MsgMatchGroupPrepareReq::default_instance_,
      MsgMatchGroupPrepareReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchGroupPrepareReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMatchGroupPrepareReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMatchGroupPrepareReq));
  MsgUpdateGroupMatchReq_descriptor_ = file->message_type(59);
  static const int MsgUpdateGroupMatchReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateGroupMatchReq, matchid_),
  };
  MsgUpdateGroupMatchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUpdateGroupMatchReq_descriptor_,
      MsgUpdateGroupMatchReq::default_instance_,
      MsgUpdateGroupMatchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateGroupMatchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateGroupMatchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUpdateGroupMatchReq));
  MsgQueryGuestReq_descriptor_ = file->message_type(60);
  static const int MsgQueryGuestReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryGuestReq, playerid_),
  };
  MsgQueryGuestReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryGuestReq_descriptor_,
      MsgQueryGuestReq::default_instance_,
      MsgQueryGuestReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryGuestReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryGuestReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryGuestReq));
  MsgQueryGuestAck_descriptor_ = file->message_type(61);
  static const int MsgQueryGuestAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryGuestAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryGuestAck, guestcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryGuestAck, guestdata_),
  };
  MsgQueryGuestAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryGuestAck_descriptor_,
      MsgQueryGuestAck::default_instance_,
      MsgQueryGuestAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryGuestAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryGuestAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryGuestAck));
  MsgUseItemReq_descriptor_ = file->message_type(62);
  static const int MsgUseItemReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseItemReq, itemguid_),
  };
  MsgUseItemReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUseItemReq_descriptor_,
      MsgUseItemReq::default_instance_,
      MsgUseItemReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseItemReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUseItemReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUseItemReq));
  PBStore_descriptor_ = file->message_type(63);
  static const int PBStore_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStore, data_),
  };
  PBStore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBStore_descriptor_,
      PBStore::default_instance_,
      PBStore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBStore));
  PBStores_descriptor_ = file->message_type(64);
  static const int PBStores_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStores, store_),
  };
  PBStores_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBStores_descriptor_,
      PBStores::default_instance_,
      PBStores_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStores, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBStores, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBStores));
  MsgQueryStoreInfoReq_descriptor_ = file->message_type(65);
  static const int MsgQueryStoreInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryStoreInfoReq, version_),
  };
  MsgQueryStoreInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryStoreInfoReq_descriptor_,
      MsgQueryStoreInfoReq::default_instance_,
      MsgQueryStoreInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryStoreInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryStoreInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryStoreInfoReq));
  MsgQueryStoreInfoAck_descriptor_ = file->message_type(66);
  static const int MsgQueryStoreInfoAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryStoreInfoAck, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryStoreInfoAck, stores_),
  };
  MsgQueryStoreInfoAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryStoreInfoAck_descriptor_,
      MsgQueryStoreInfoAck::default_instance_,
      MsgQueryStoreInfoAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryStoreInfoAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryStoreInfoAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryStoreInfoAck));
  MsgBuyStoreAck_descriptor_ = file->message_type(67);
  static const int MsgBuyStoreAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuyStoreAck, storeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuyStoreAck, code_),
  };
  MsgBuyStoreAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBuyStoreAck_descriptor_,
      MsgBuyStoreAck::default_instance_,
      MsgBuyStoreAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuyStoreAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBuyStoreAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBuyStoreAck));
  MsgSetWishOrderReq_descriptor_ = file->message_type(68);
  static const int MsgSetWishOrderReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSetWishOrderReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSetWishOrderReq, storeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSetWishOrderReq, status_),
  };
  MsgSetWishOrderReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSetWishOrderReq_descriptor_,
      MsgSetWishOrderReq::default_instance_,
      MsgSetWishOrderReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSetWishOrderReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSetWishOrderReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSetWishOrderReq));
  MsgQuerySettingReq_descriptor_ = file->message_type(69);
  static const int MsgQuerySettingReq_offsets_[1] = {
  };
  MsgQuerySettingReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQuerySettingReq_descriptor_,
      MsgQuerySettingReq::default_instance_,
      MsgQuerySettingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQuerySettingReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQuerySettingReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQuerySettingReq));
  MsgQuerySettingAck_descriptor_ = file->message_type(70);
  static const int MsgQuerySettingAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQuerySettingAck, pbsetting_),
  };
  MsgQuerySettingAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQuerySettingAck_descriptor_,
      MsgQuerySettingAck::default_instance_,
      MsgQuerySettingAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQuerySettingAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQuerySettingAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQuerySettingAck));
  MsgUpdateSettingReq_descriptor_ = file->message_type(71);
  static const int MsgUpdateSettingReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateSettingReq, settingkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateSettingReq, settingvalue_),
  };
  MsgUpdateSettingReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUpdateSettingReq_descriptor_,
      MsgUpdateSettingReq::default_instance_,
      MsgUpdateSettingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateSettingReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpdateSettingReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUpdateSettingReq));
  MsgQueryRecentListReq_descriptor_ = file->message_type(72);
  static const int MsgQueryRecentListReq_offsets_[1] = {
  };
  MsgQueryRecentListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryRecentListReq_descriptor_,
      MsgQueryRecentListReq::default_instance_,
      MsgQueryRecentListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryRecentListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryRecentListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryRecentListReq));
  MsgQueryRecentListAck_descriptor_ = file->message_type(73);
  static const int MsgQueryRecentListAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryRecentListAck, recentlist_),
  };
  MsgQueryRecentListAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryRecentListAck_descriptor_,
      MsgQueryRecentListAck::default_instance_,
      MsgQueryRecentListAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryRecentListAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryRecentListAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryRecentListAck));
  MsgCompoundDataReq_descriptor_ = file->message_type(74);
  static const int MsgCompoundDataReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCompoundDataReq, dataname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCompoundDataReq, key_),
  };
  MsgCompoundDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCompoundDataReq_descriptor_,
      MsgCompoundDataReq::default_instance_,
      MsgCompoundDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCompoundDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCompoundDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCompoundDataReq));
  MsgQueryRankListReq_descriptor_ = file->message_type(75);
  static const int MsgQueryRankListReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryRankListReq, rankid_),
  };
  MsgQueryRankListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryRankListReq_descriptor_,
      MsgQueryRankListReq::default_instance_,
      MsgQueryRankListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryRankListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryRankListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryRankListReq));
  MsgQueryRankListAck_descriptor_ = file->message_type(76);
  static const int MsgQueryRankListAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryRankListAck, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryRankListAck, rankdatas_),
  };
  MsgQueryRankListAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryRankListAck_descriptor_,
      MsgQueryRankListAck::default_instance_,
      MsgQueryRankListAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryRankListAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryRankListAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryRankListAck));
  MsgQueryFriendRankListReq_descriptor_ = file->message_type(77);
  static const int MsgQueryFriendRankListReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryFriendRankListReq, rankid_),
  };
  MsgQueryFriendRankListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryFriendRankListReq_descriptor_,
      MsgQueryFriendRankListReq::default_instance_,
      MsgQueryFriendRankListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryFriendRankListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryFriendRankListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryFriendRankListReq));
  MsgQueryFriendRankListAck_descriptor_ = file->message_type(78);
  static const int MsgQueryFriendRankListAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryFriendRankListAck, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryFriendRankListAck, rankdatas_),
  };
  MsgQueryFriendRankListAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryFriendRankListAck_descriptor_,
      MsgQueryFriendRankListAck::default_instance_,
      MsgQueryFriendRankListAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryFriendRankListAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryFriendRankListAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryFriendRankListAck));
  MsgSevenSignInRewardReq_descriptor_ = file->message_type(79);
  static const int MsgSevenSignInRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSevenSignInRewardReq, day_),
  };
  MsgSevenSignInRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSevenSignInRewardReq_descriptor_,
      MsgSevenSignInRewardReq::default_instance_,
      MsgSevenSignInRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSevenSignInRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSevenSignInRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSevenSignInRewardReq));
  MsgTellSevenExtendReward_descriptor_ = file->message_type(80);
  static const int MsgTellSevenExtendReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTellSevenExtendReward, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTellSevenExtendReward, reward_),
  };
  MsgTellSevenExtendReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTellSevenExtendReward_descriptor_,
      MsgTellSevenExtendReward::default_instance_,
      MsgTellSevenExtendReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTellSevenExtendReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTellSevenExtendReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTellSevenExtendReward));
  MsgCreateGuildReq_descriptor_ = file->message_type(81);
  static const int MsgCreateGuildReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateGuildReq, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateGuildReq, medal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateGuildReq, manifesto_),
  };
  MsgCreateGuildReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCreateGuildReq_descriptor_,
      MsgCreateGuildReq::default_instance_,
      MsgCreateGuildReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateGuildReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCreateGuildReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCreateGuildReq));
  MsgInviteGuildReq_descriptor_ = file->message_type(82);
  static const int MsgInviteGuildReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInviteGuildReq, inviterid_),
  };
  MsgInviteGuildReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgInviteGuildReq_descriptor_,
      MsgInviteGuildReq::default_instance_,
      MsgInviteGuildReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInviteGuildReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInviteGuildReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgInviteGuildReq));
  MsgApplyGuildReq_descriptor_ = file->message_type(83);
  static const int MsgApplyGuildReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApplyGuildReq, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApplyGuildReq, invitor_),
  };
  MsgApplyGuildReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgApplyGuildReq_descriptor_,
      MsgApplyGuildReq::default_instance_,
      MsgApplyGuildReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApplyGuildReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgApplyGuildReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgApplyGuildReq));
  MsgExitGuildReq_descriptor_ = file->message_type(84);
  static const int MsgExitGuildReq_offsets_[1] = {
  };
  MsgExitGuildReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgExitGuildReq_descriptor_,
      MsgExitGuildReq::default_instance_,
      MsgExitGuildReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExitGuildReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExitGuildReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgExitGuildReq));
  MsgTransferMasterReq_descriptor_ = file->message_type(85);
  static const int MsgTransferMasterReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferMasterReq, newmasterid_),
  };
  MsgTransferMasterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTransferMasterReq_descriptor_,
      MsgTransferMasterReq::default_instance_,
      MsgTransferMasterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferMasterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTransferMasterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTransferMasterReq));
  MsgReviewApplyReq_descriptor_ = file->message_type(86);
  static const int MsgReviewApplyReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReviewApplyReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReviewApplyReq, operatortype_),
  };
  MsgReviewApplyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgReviewApplyReq_descriptor_,
      MsgReviewApplyReq::default_instance_,
      MsgReviewApplyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReviewApplyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReviewApplyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgReviewApplyReq));
  MsgDissolveGuildReq_descriptor_ = file->message_type(87);
  static const int MsgDissolveGuildReq_offsets_[1] = {
  };
  MsgDissolveGuildReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDissolveGuildReq_descriptor_,
      MsgDissolveGuildReq::default_instance_,
      MsgDissolveGuildReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDissolveGuildReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDissolveGuildReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDissolveGuildReq));
  MsgModifyGuildMedalReq_descriptor_ = file->message_type(88);
  static const int MsgModifyGuildMedalReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgModifyGuildMedalReq, newmedal_),
  };
  MsgModifyGuildMedalReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgModifyGuildMedalReq_descriptor_,
      MsgModifyGuildMedalReq::default_instance_,
      MsgModifyGuildMedalReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgModifyGuildMedalReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgModifyGuildMedalReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgModifyGuildMedalReq));
  MsgQueryGuildListReq_descriptor_ = file->message_type(89);
  static const int MsgQueryGuildListReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryGuildListReq, guilds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryGuildListReq, cursor_),
  };
  MsgQueryGuildListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryGuildListReq_descriptor_,
      MsgQueryGuildListReq::default_instance_,
      MsgQueryGuildListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryGuildListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryGuildListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryGuildListReq));
  MsgQueryGuildListAck_descriptor_ = file->message_type(90);
  static const int MsgQueryGuildListAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryGuildListAck, guilddatas_),
  };
  MsgQueryGuildListAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryGuildListAck_descriptor_,
      MsgQueryGuildListAck::default_instance_,
      MsgQueryGuildListAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryGuildListAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryGuildListAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryGuildListAck));
  MsgKickMemberReq_descriptor_ = file->message_type(91);
  static const int MsgKickMemberReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKickMemberReq, toplayerid_),
  };
  MsgKickMemberReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgKickMemberReq_descriptor_,
      MsgKickMemberReq::default_instance_,
      MsgKickMemberReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKickMemberReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKickMemberReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgKickMemberReq));
  MsgUpgradeGuildReq_descriptor_ = file->message_type(92);
  static const int MsgUpgradeGuildReq_offsets_[1] = {
  };
  MsgUpgradeGuildReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUpgradeGuildReq_descriptor_,
      MsgUpgradeGuildReq::default_instance_,
      MsgUpgradeGuildReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpgradeGuildReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUpgradeGuildReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUpgradeGuildReq));
  MsgAppointGuildMemberReq_descriptor_ = file->message_type(93);
  static const int MsgAppointGuildMemberReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAppointGuildMemberReq, toplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAppointGuildMemberReq, title_),
  };
  MsgAppointGuildMemberReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAppointGuildMemberReq_descriptor_,
      MsgAppointGuildMemberReq::default_instance_,
      MsgAppointGuildMemberReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAppointGuildMemberReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAppointGuildMemberReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAppointGuildMemberReq));
  MsgSearchGuildByNameReq_descriptor_ = file->message_type(94);
  static const int MsgSearchGuildByNameReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSearchGuildByNameReq, guildname_),
  };
  MsgSearchGuildByNameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSearchGuildByNameReq_descriptor_,
      MsgSearchGuildByNameReq::default_instance_,
      MsgSearchGuildByNameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSearchGuildByNameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSearchGuildByNameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSearchGuildByNameReq));
  MsgSetGuildSwitchReq_descriptor_ = file->message_type(95);
  static const int MsgSetGuildSwitchReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSetGuildSwitchReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSetGuildSwitchReq, flag_),
  };
  MsgSetGuildSwitchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSetGuildSwitchReq_descriptor_,
      MsgSetGuildSwitchReq::default_instance_,
      MsgSetGuildSwitchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSetGuildSwitchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSetGuildSwitchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSetGuildSwitchReq));
  MsgQueryGuildLogReq_descriptor_ = file->message_type(96);
  static const int MsgQueryGuildLogReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryGuildLogReq, page_),
  };
  MsgQueryGuildLogReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryGuildLogReq_descriptor_,
      MsgQueryGuildLogReq::default_instance_,
      MsgQueryGuildLogReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryGuildLogReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryGuildLogReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryGuildLogReq));
  MsgQueryGuildLogAck_descriptor_ = file->message_type(97);
  static const int MsgQueryGuildLogAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryGuildLogAck, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryGuildLogAck, guildlog_),
  };
  MsgQueryGuildLogAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryGuildLogAck_descriptor_,
      MsgQueryGuildLogAck::default_instance_,
      MsgQueryGuildLogAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryGuildLogAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryGuildLogAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryGuildLogAck));
  MsgTellMarquee_descriptor_ = file->message_type(98);
  static const int MsgTellMarquee_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTellMarquee, content_),
  };
  MsgTellMarquee_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTellMarquee_descriptor_,
      MsgTellMarquee::default_instance_,
      MsgTellMarquee_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTellMarquee, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTellMarquee, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTellMarquee));
  MsgTellSysNotcie_descriptor_ = file->message_type(99);
  static const int MsgTellSysNotcie_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTellSysNotcie, content_),
  };
  MsgTellSysNotcie_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTellSysNotcie_descriptor_,
      MsgTellSysNotcie::default_instance_,
      MsgTellSysNotcie_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTellSysNotcie, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTellSysNotcie, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTellSysNotcie));
  MsgBindAlipayReq_descriptor_ = file->message_type(100);
  static const int MsgBindAlipayReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBindAlipayReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBindAlipayReq, alipay_),
  };
  MsgBindAlipayReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBindAlipayReq_descriptor_,
      MsgBindAlipayReq::default_instance_,
      MsgBindAlipayReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBindAlipayReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBindAlipayReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBindAlipayReq));
  MsgExChangeInviteScoreReq_descriptor_ = file->message_type(101);
  static const int MsgExChangeInviteScoreReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExChangeInviteScoreReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExChangeInviteScoreReq, alipay_),
  };
  MsgExChangeInviteScoreReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgExChangeInviteScoreReq_descriptor_,
      MsgExChangeInviteScoreReq::default_instance_,
      MsgExChangeInviteScoreReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExChangeInviteScoreReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExChangeInviteScoreReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgExChangeInviteScoreReq));
  MsgExChangeInviteScoreAck_descriptor_ = file->message_type(102);
  static const int MsgExChangeInviteScoreAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExChangeInviteScoreAck, exchangescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExChangeInviteScoreAck, leftscore_),
  };
  MsgExChangeInviteScoreAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgExChangeInviteScoreAck_descriptor_,
      MsgExChangeInviteScoreAck::default_instance_,
      MsgExChangeInviteScoreAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExChangeInviteScoreAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExChangeInviteScoreAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgExChangeInviteScoreAck));
  MsgQueryInviteScoreReq_descriptor_ = file->message_type(103);
  static const int MsgQueryInviteScoreReq_offsets_[1] = {
  };
  MsgQueryInviteScoreReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryInviteScoreReq_descriptor_,
      MsgQueryInviteScoreReq::default_instance_,
      MsgQueryInviteScoreReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryInviteScoreReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryInviteScoreReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryInviteScoreReq));
  MsgQueryInviteScoreAck_descriptor_ = file->message_type(104);
  static const int MsgQueryInviteScoreAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryInviteScoreAck, exchangescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryInviteScoreAck, leftscore_),
  };
  MsgQueryInviteScoreAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgQueryInviteScoreAck_descriptor_,
      MsgQueryInviteScoreAck::default_instance_,
      MsgQueryInviteScoreAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryInviteScoreAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgQueryInviteScoreAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgQueryInviteScoreAck));
  MsgExChangeInviteRecordReq_descriptor_ = file->message_type(105);
  static const int MsgExChangeInviteRecordReq_offsets_[1] = {
  };
  MsgExChangeInviteRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgExChangeInviteRecordReq_descriptor_,
      MsgExChangeInviteRecordReq::default_instance_,
      MsgExChangeInviteRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExChangeInviteRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExChangeInviteRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgExChangeInviteRecordReq));
  PBExChangeInviteRecord_descriptor_ = file->message_type(106);
  static const int PBExChangeInviteRecord_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBExChangeInviteRecord, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBExChangeInviteRecord, alipay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBExChangeInviteRecord, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBExChangeInviteRecord, time_),
  };
  PBExChangeInviteRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBExChangeInviteRecord_descriptor_,
      PBExChangeInviteRecord::default_instance_,
      PBExChangeInviteRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBExChangeInviteRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBExChangeInviteRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBExChangeInviteRecord));
  MsgExChangeInviteRecordAck_descriptor_ = file->message_type(107);
  static const int MsgExChangeInviteRecordAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExChangeInviteRecordAck, record_),
  };
  MsgExChangeInviteRecordAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgExChangeInviteRecordAck_descriptor_,
      MsgExChangeInviteRecordAck::default_instance_,
      MsgExChangeInviteRecordAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExChangeInviteRecordAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExChangeInviteRecordAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgExChangeInviteRecordAck));
  ClientProtocol_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_KFClientMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgResultDisplay_descriptor_, &MsgResultDisplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTellBeKick_descriptor_, &MsgTellBeKick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLoginVerifyReq_descriptor_, &MsgLoginVerifyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLoginVerifyAck_descriptor_, &MsgLoginVerifyAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLoginGameReq_descriptor_, &MsgLoginGameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLoginOutReq_descriptor_, &MsgLoginOutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCreateRoleReq_descriptor_, &MsgCreateRoleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgChangeNameReq_descriptor_, &MsgChangeNameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgChangeSexReq_descriptor_, &MsgChangeSexReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgChangeIconReq_descriptor_, &MsgChangeIconReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgChangeIconBoxReq_descriptor_, &MsgChangeIconBoxReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgChangeMottoReq_descriptor_, &MsgChangeMottoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryBasicReq_descriptor_, &MsgQueryBasicReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryPlayerReq_descriptor_, &MsgQueryPlayerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgReceiveTaskRewardReq_descriptor_, &MsgReceiveTaskRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgReceiveActivityRewardReq_descriptor_, &MsgReceiveActivityRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgReceiveAchieveRewardReq_descriptor_, &MsgReceiveAchieveRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgReceiveGiftRewardReq_descriptor_, &MsgReceiveGiftRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgReceiveMailRewardReq_descriptor_, &MsgReceiveMailRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgViewMailReq_descriptor_, &MsgViewMailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDeleteMailReq_descriptor_, &MsgDeleteMailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryMailReq_descriptor_, &MsgQueryMailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStartMatchReq_descriptor_, &MsgStartMatchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStartMatchAck_descriptor_, &MsgStartMatchAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCancelMatchReq_descriptor_, &MsgCancelMatchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCancelMatchAck_descriptor_, &MsgCancelMatchAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMatchResultAck_descriptor_, &MsgMatchResultAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTellMatchWaitTime_descriptor_, &MsgTellMatchWaitTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTellMatchPlayerCount_descriptor_, &MsgTellMatchPlayerCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAddFriendInviteReq_descriptor_, &MsgAddFriendInviteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgReplyFriendInviteReq_descriptor_, &MsgReplyFriendInviteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDelFriendReq_descriptor_, &MsgDelFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSetRefuseFriendInviteReq_descriptor_, &MsgSetRefuseFriendInviteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgEnterChatReq_descriptor_, &MsgEnterChatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSendChatReq_descriptor_, &MsgSendChatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSendChatInfo_descriptor_, &MsgSendChatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLeaveChatReq_descriptor_, &MsgLeaveChatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSendOneByOneChatReq_descriptor_, &MsgSendOneByOneChatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSendOneByOneChatInfo_descriptor_, &MsgSendOneByOneChatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDebugCommandReq_descriptor_, &MsgDebugCommandReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgShowRewardAgent_descriptor_, &MsgShowRewardAgent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSendGroupChatReq_descriptor_, &MsgSendGroupChatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSendGroupChatInfo_descriptor_, &MsgSendGroupChatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBuyStoreReq_descriptor_, &MsgBuyStoreReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgGiveStoreReq_descriptor_, &MsgGiveStoreReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlayerToastReq_descriptor_, &MsgPlayerToastReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryToastCountReq_descriptor_, &MsgQueryToastCountReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryToastCountAck_descriptor_, &MsgQueryToastCountAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgRemoveDataReq_descriptor_, &MsgRemoveDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgChangeModelReq_descriptor_, &MsgChangeModelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSetModelDefaultClothesReq_descriptor_, &MsgSetModelDefaultClothesReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDressClothesReq_descriptor_, &MsgDressClothesReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgInviteMatchGroupReq_descriptor_, &MsgInviteMatchGroupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgReplyInviteMatchGroupReq_descriptor_, &MsgReplyInviteMatchGroupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLeaveMatchGroupReq_descriptor_, &MsgLeaveMatchGroupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgKickMatchGroupReq_descriptor_, &MsgKickMatchGroupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgApplyMatchGroupReq_descriptor_, &MsgApplyMatchGroupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgReplyApplyMatchGroupReq_descriptor_, &MsgReplyApplyMatchGroupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMatchGroupPrepareReq_descriptor_, &MsgMatchGroupPrepareReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUpdateGroupMatchReq_descriptor_, &MsgUpdateGroupMatchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryGuestReq_descriptor_, &MsgQueryGuestReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryGuestAck_descriptor_, &MsgQueryGuestAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUseItemReq_descriptor_, &MsgUseItemReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBStore_descriptor_, &PBStore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBStores_descriptor_, &PBStores::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryStoreInfoReq_descriptor_, &MsgQueryStoreInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryStoreInfoAck_descriptor_, &MsgQueryStoreInfoAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBuyStoreAck_descriptor_, &MsgBuyStoreAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSetWishOrderReq_descriptor_, &MsgSetWishOrderReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQuerySettingReq_descriptor_, &MsgQuerySettingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQuerySettingAck_descriptor_, &MsgQuerySettingAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUpdateSettingReq_descriptor_, &MsgUpdateSettingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryRecentListReq_descriptor_, &MsgQueryRecentListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryRecentListAck_descriptor_, &MsgQueryRecentListAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCompoundDataReq_descriptor_, &MsgCompoundDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryRankListReq_descriptor_, &MsgQueryRankListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryRankListAck_descriptor_, &MsgQueryRankListAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryFriendRankListReq_descriptor_, &MsgQueryFriendRankListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryFriendRankListAck_descriptor_, &MsgQueryFriendRankListAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSevenSignInRewardReq_descriptor_, &MsgSevenSignInRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTellSevenExtendReward_descriptor_, &MsgTellSevenExtendReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCreateGuildReq_descriptor_, &MsgCreateGuildReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgInviteGuildReq_descriptor_, &MsgInviteGuildReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgApplyGuildReq_descriptor_, &MsgApplyGuildReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgExitGuildReq_descriptor_, &MsgExitGuildReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTransferMasterReq_descriptor_, &MsgTransferMasterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgReviewApplyReq_descriptor_, &MsgReviewApplyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDissolveGuildReq_descriptor_, &MsgDissolveGuildReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgModifyGuildMedalReq_descriptor_, &MsgModifyGuildMedalReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryGuildListReq_descriptor_, &MsgQueryGuildListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryGuildListAck_descriptor_, &MsgQueryGuildListAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgKickMemberReq_descriptor_, &MsgKickMemberReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUpgradeGuildReq_descriptor_, &MsgUpgradeGuildReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAppointGuildMemberReq_descriptor_, &MsgAppointGuildMemberReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSearchGuildByNameReq_descriptor_, &MsgSearchGuildByNameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSetGuildSwitchReq_descriptor_, &MsgSetGuildSwitchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryGuildLogReq_descriptor_, &MsgQueryGuildLogReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryGuildLogAck_descriptor_, &MsgQueryGuildLogAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTellMarquee_descriptor_, &MsgTellMarquee::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTellSysNotcie_descriptor_, &MsgTellSysNotcie::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBindAlipayReq_descriptor_, &MsgBindAlipayReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgExChangeInviteScoreReq_descriptor_, &MsgExChangeInviteScoreReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgExChangeInviteScoreAck_descriptor_, &MsgExChangeInviteScoreAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryInviteScoreReq_descriptor_, &MsgQueryInviteScoreReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgQueryInviteScoreAck_descriptor_, &MsgQueryInviteScoreAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgExChangeInviteRecordReq_descriptor_, &MsgExChangeInviteRecordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBExChangeInviteRecord_descriptor_, &PBExChangeInviteRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgExChangeInviteRecordAck_descriptor_, &MsgExChangeInviteRecordAck::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_KFClientMessage_2eproto() {
  delete MsgResultDisplay::default_instance_;
  delete MsgResultDisplay_reflection_;
  delete MsgTellBeKick::default_instance_;
  delete MsgTellBeKick_reflection_;
  delete MsgLoginVerifyReq::default_instance_;
  delete MsgLoginVerifyReq_reflection_;
  delete MsgLoginVerifyAck::default_instance_;
  delete MsgLoginVerifyAck_reflection_;
  delete MsgLoginGameReq::default_instance_;
  delete MsgLoginGameReq_reflection_;
  delete MsgLoginOutReq::default_instance_;
  delete MsgLoginOutReq_reflection_;
  delete MsgCreateRoleReq::default_instance_;
  delete MsgCreateRoleReq_reflection_;
  delete MsgChangeNameReq::default_instance_;
  delete MsgChangeNameReq_reflection_;
  delete MsgChangeSexReq::default_instance_;
  delete MsgChangeSexReq_reflection_;
  delete MsgChangeIconReq::default_instance_;
  delete MsgChangeIconReq_reflection_;
  delete MsgChangeIconBoxReq::default_instance_;
  delete MsgChangeIconBoxReq_reflection_;
  delete MsgChangeMottoReq::default_instance_;
  delete MsgChangeMottoReq_reflection_;
  delete MsgQueryBasicReq::default_instance_;
  delete MsgQueryBasicReq_reflection_;
  delete MsgQueryPlayerReq::default_instance_;
  delete MsgQueryPlayerReq_reflection_;
  delete MsgReceiveTaskRewardReq::default_instance_;
  delete MsgReceiveTaskRewardReq_reflection_;
  delete MsgReceiveActivityRewardReq::default_instance_;
  delete MsgReceiveActivityRewardReq_reflection_;
  delete MsgReceiveAchieveRewardReq::default_instance_;
  delete MsgReceiveAchieveRewardReq_reflection_;
  delete MsgReceiveGiftRewardReq::default_instance_;
  delete MsgReceiveGiftRewardReq_reflection_;
  delete MsgReceiveMailRewardReq::default_instance_;
  delete MsgReceiveMailRewardReq_reflection_;
  delete MsgViewMailReq::default_instance_;
  delete MsgViewMailReq_reflection_;
  delete MsgDeleteMailReq::default_instance_;
  delete MsgDeleteMailReq_reflection_;
  delete MsgQueryMailReq::default_instance_;
  delete MsgQueryMailReq_reflection_;
  delete MsgStartMatchReq::default_instance_;
  delete MsgStartMatchReq_reflection_;
  delete MsgStartMatchAck::default_instance_;
  delete MsgStartMatchAck_reflection_;
  delete MsgCancelMatchReq::default_instance_;
  delete MsgCancelMatchReq_reflection_;
  delete MsgCancelMatchAck::default_instance_;
  delete MsgCancelMatchAck_reflection_;
  delete MsgMatchResultAck::default_instance_;
  delete MsgMatchResultAck_reflection_;
  delete MsgTellMatchWaitTime::default_instance_;
  delete MsgTellMatchWaitTime_reflection_;
  delete MsgTellMatchPlayerCount::default_instance_;
  delete MsgTellMatchPlayerCount_reflection_;
  delete MsgAddFriendInviteReq::default_instance_;
  delete MsgAddFriendInviteReq_reflection_;
  delete MsgReplyFriendInviteReq::default_instance_;
  delete MsgReplyFriendInviteReq_reflection_;
  delete MsgDelFriendReq::default_instance_;
  delete MsgDelFriendReq_reflection_;
  delete MsgSetRefuseFriendInviteReq::default_instance_;
  delete MsgSetRefuseFriendInviteReq_reflection_;
  delete MsgEnterChatReq::default_instance_;
  delete MsgEnterChatReq_reflection_;
  delete MsgSendChatReq::default_instance_;
  delete MsgSendChatReq_reflection_;
  delete MsgSendChatInfo::default_instance_;
  delete MsgSendChatInfo_reflection_;
  delete MsgLeaveChatReq::default_instance_;
  delete MsgLeaveChatReq_reflection_;
  delete MsgSendOneByOneChatReq::default_instance_;
  delete MsgSendOneByOneChatReq_reflection_;
  delete MsgSendOneByOneChatInfo::default_instance_;
  delete MsgSendOneByOneChatInfo_reflection_;
  delete MsgDebugCommandReq::default_instance_;
  delete MsgDebugCommandReq_reflection_;
  delete MsgShowRewardAgent::default_instance_;
  delete MsgShowRewardAgent_reflection_;
  delete MsgSendGroupChatReq::default_instance_;
  delete MsgSendGroupChatReq_reflection_;
  delete MsgSendGroupChatInfo::default_instance_;
  delete MsgSendGroupChatInfo_reflection_;
  delete MsgBuyStoreReq::default_instance_;
  delete MsgBuyStoreReq_reflection_;
  delete MsgGiveStoreReq::default_instance_;
  delete MsgGiveStoreReq_reflection_;
  delete MsgPlayerToastReq::default_instance_;
  delete MsgPlayerToastReq_reflection_;
  delete MsgQueryToastCountReq::default_instance_;
  delete MsgQueryToastCountReq_reflection_;
  delete MsgQueryToastCountAck::default_instance_;
  delete MsgQueryToastCountAck_reflection_;
  delete MsgRemoveDataReq::default_instance_;
  delete MsgRemoveDataReq_reflection_;
  delete MsgChangeModelReq::default_instance_;
  delete MsgChangeModelReq_reflection_;
  delete MsgSetModelDefaultClothesReq::default_instance_;
  delete MsgSetModelDefaultClothesReq_reflection_;
  delete MsgDressClothesReq::default_instance_;
  delete MsgDressClothesReq_reflection_;
  delete MsgInviteMatchGroupReq::default_instance_;
  delete MsgInviteMatchGroupReq_reflection_;
  delete MsgReplyInviteMatchGroupReq::default_instance_;
  delete MsgReplyInviteMatchGroupReq_reflection_;
  delete MsgLeaveMatchGroupReq::default_instance_;
  delete MsgLeaveMatchGroupReq_reflection_;
  delete MsgKickMatchGroupReq::default_instance_;
  delete MsgKickMatchGroupReq_reflection_;
  delete MsgApplyMatchGroupReq::default_instance_;
  delete MsgApplyMatchGroupReq_reflection_;
  delete MsgReplyApplyMatchGroupReq::default_instance_;
  delete MsgReplyApplyMatchGroupReq_reflection_;
  delete MsgMatchGroupPrepareReq::default_instance_;
  delete MsgMatchGroupPrepareReq_reflection_;
  delete MsgUpdateGroupMatchReq::default_instance_;
  delete MsgUpdateGroupMatchReq_reflection_;
  delete MsgQueryGuestReq::default_instance_;
  delete MsgQueryGuestReq_reflection_;
  delete MsgQueryGuestAck::default_instance_;
  delete MsgQueryGuestAck_reflection_;
  delete MsgUseItemReq::default_instance_;
  delete MsgUseItemReq_reflection_;
  delete PBStore::default_instance_;
  delete PBStore_reflection_;
  delete PBStores::default_instance_;
  delete PBStores_reflection_;
  delete MsgQueryStoreInfoReq::default_instance_;
  delete MsgQueryStoreInfoReq_reflection_;
  delete MsgQueryStoreInfoAck::default_instance_;
  delete MsgQueryStoreInfoAck_reflection_;
  delete MsgBuyStoreAck::default_instance_;
  delete MsgBuyStoreAck_reflection_;
  delete MsgSetWishOrderReq::default_instance_;
  delete MsgSetWishOrderReq_reflection_;
  delete MsgQuerySettingReq::default_instance_;
  delete MsgQuerySettingReq_reflection_;
  delete MsgQuerySettingAck::default_instance_;
  delete MsgQuerySettingAck_reflection_;
  delete MsgUpdateSettingReq::default_instance_;
  delete MsgUpdateSettingReq_reflection_;
  delete MsgQueryRecentListReq::default_instance_;
  delete MsgQueryRecentListReq_reflection_;
  delete MsgQueryRecentListAck::default_instance_;
  delete MsgQueryRecentListAck_reflection_;
  delete MsgCompoundDataReq::default_instance_;
  delete MsgCompoundDataReq_reflection_;
  delete MsgQueryRankListReq::default_instance_;
  delete MsgQueryRankListReq_reflection_;
  delete MsgQueryRankListAck::default_instance_;
  delete MsgQueryRankListAck_reflection_;
  delete MsgQueryFriendRankListReq::default_instance_;
  delete MsgQueryFriendRankListReq_reflection_;
  delete MsgQueryFriendRankListAck::default_instance_;
  delete MsgQueryFriendRankListAck_reflection_;
  delete MsgSevenSignInRewardReq::default_instance_;
  delete MsgSevenSignInRewardReq_reflection_;
  delete MsgTellSevenExtendReward::default_instance_;
  delete MsgTellSevenExtendReward_reflection_;
  delete MsgCreateGuildReq::default_instance_;
  delete MsgCreateGuildReq_reflection_;
  delete MsgInviteGuildReq::default_instance_;
  delete MsgInviteGuildReq_reflection_;
  delete MsgApplyGuildReq::default_instance_;
  delete MsgApplyGuildReq_reflection_;
  delete MsgExitGuildReq::default_instance_;
  delete MsgExitGuildReq_reflection_;
  delete MsgTransferMasterReq::default_instance_;
  delete MsgTransferMasterReq_reflection_;
  delete MsgReviewApplyReq::default_instance_;
  delete MsgReviewApplyReq_reflection_;
  delete MsgDissolveGuildReq::default_instance_;
  delete MsgDissolveGuildReq_reflection_;
  delete MsgModifyGuildMedalReq::default_instance_;
  delete MsgModifyGuildMedalReq_reflection_;
  delete MsgQueryGuildListReq::default_instance_;
  delete MsgQueryGuildListReq_reflection_;
  delete MsgQueryGuildListAck::default_instance_;
  delete MsgQueryGuildListAck_reflection_;
  delete MsgKickMemberReq::default_instance_;
  delete MsgKickMemberReq_reflection_;
  delete MsgUpgradeGuildReq::default_instance_;
  delete MsgUpgradeGuildReq_reflection_;
  delete MsgAppointGuildMemberReq::default_instance_;
  delete MsgAppointGuildMemberReq_reflection_;
  delete MsgSearchGuildByNameReq::default_instance_;
  delete MsgSearchGuildByNameReq_reflection_;
  delete MsgSetGuildSwitchReq::default_instance_;
  delete MsgSetGuildSwitchReq_reflection_;
  delete MsgQueryGuildLogReq::default_instance_;
  delete MsgQueryGuildLogReq_reflection_;
  delete MsgQueryGuildLogAck::default_instance_;
  delete MsgQueryGuildLogAck_reflection_;
  delete MsgTellMarquee::default_instance_;
  delete MsgTellMarquee_reflection_;
  delete MsgTellSysNotcie::default_instance_;
  delete MsgTellSysNotcie_reflection_;
  delete MsgBindAlipayReq::default_instance_;
  delete MsgBindAlipayReq_reflection_;
  delete MsgExChangeInviteScoreReq::default_instance_;
  delete MsgExChangeInviteScoreReq_reflection_;
  delete MsgExChangeInviteScoreAck::default_instance_;
  delete MsgExChangeInviteScoreAck_reflection_;
  delete MsgQueryInviteScoreReq::default_instance_;
  delete MsgQueryInviteScoreReq_reflection_;
  delete MsgQueryInviteScoreAck::default_instance_;
  delete MsgQueryInviteScoreAck_reflection_;
  delete MsgExChangeInviteRecordReq::default_instance_;
  delete MsgExChangeInviteRecordReq_reflection_;
  delete PBExChangeInviteRecord::default_instance_;
  delete PBExChangeInviteRecord_reflection_;
  delete MsgExChangeInviteRecordAck::default_instance_;
  delete MsgExChangeInviteRecordAck_reflection_;
}

void protobuf_AddDesc_KFClientMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::KFMsg::protobuf_AddDesc_KFCommonMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025KFClientMessage.proto\022\005KFMsg\032\025KFCommon"
    "Message.proto\"1\n\020MsgResultDisplay\022\016\n\006res"
    "ult\030\001 \002(\r\022\r\n\005param\030\002 \003(\t\"\035\n\rMsgTellBeKic"
    "k\022\014\n\004type\030\001 \002(\r\"F\n\021MsgLoginVerifyReq\022\021\n\t"
    "accountid\030\001 \002(\r\022\r\n\005token\030\002 \002(\t\022\017\n\007versio"
    "n\030\003 \001(\t\"N\n\021MsgLoginVerifyAck\022\020\n\010playerid"
    "\030\001 \002(\r\022\r\n\005token\030\002 \002(\t\022\n\n\002ip\030\003 \002(\t\022\014\n\004por"
    "t\030\004 \002(\r\"2\n\017MsgLoginGameReq\022\020\n\010playerid\030\001"
    " \002(\r\022\r\n\005token\030\002 \002(\t\"\020\n\016MsgLoginOutReq\"R\n"
    "\020MsgCreateRoleReq\022\014\n\004name\030\001 \002(\t\022\013\n\003sex\030\002"
    " \002(\r\022\r\n\005model\030\003 \002(\r\022\024\n\tinviterid\030\004 \001(\r:\001"
    "0\" \n\020MsgChangeNameReq\022\014\n\004name\030\001 \002(\t\"\036\n\017M"
    "sgChangeSexReq\022\013\n\003sex\030\001 \002(\r\" \n\020MsgChange"
    "IconReq\022\014\n\004icon\030\001 \002(\t\"&\n\023MsgChangeIconBo"
    "xReq\022\017\n\007iconbox\030\001 \002(\t\"\"\n\021MsgChangeMottoR"
    "eq\022\r\n\005motto\030\001 \002(\t\" \n\020MsgQueryBasicReq\022\014\n"
    "\004name\030\001 \002(\t\"%\n\021MsgQueryPlayerReq\022\020\n\010play"
    "erid\030\001 \002(\r\")\n\027MsgReceiveTaskRewardReq\022\016\n"
    "\006taskid\030\001 \002(\r\"7\n\033MsgReceiveActivityRewar"
    "dReq\022\014\n\004type\030\001 \002(\r\022\n\n\002id\030\002 \002(\r\"/\n\032MsgRec"
    "eiveAchieveRewardReq\022\021\n\tachieveid\030\001 \002(\r\""
    "*\n\027MsgReceiveGiftRewardReq\022\017\n\007giftkey\030\001 "
    "\002(\t\")\n\027MsgReceiveMailRewardReq\022\016\n\006mailid"
    "\030\001 \002(\004\" \n\016MsgViewMailReq\022\016\n\006mailid\030\001 \002(\004"
    "\"\"\n\020MsgDeleteMailReq\022\016\n\006mailid\030\001 \002(\004\"#\n\017"
    "MsgQueryMailReq\022\020\n\010mailtype\030\001 \002(\r\"`\n\020Msg"
    "StartMatchReq\022\017\n\007matchid\030\001 \002(\r\022\022\n\nallowg"
    "roup\030\002 \001(\010\022\026\n\016battleserverid\030\003 \001(\r\022\017\n\007ve"
    "rsion\030\004 \002(\t\"#\n\020MsgStartMatchAck\022\017\n\007match"
    "id\030\001 \002(\r\"\023\n\021MsgCancelMatchReq\"$\n\021MsgCanc"
    "elMatchAck\022\017\n\007matchid\030\001 \002(\r\"o\n\021MsgMatchR"
    "esultAck\022\017\n\007matchid\030\001 \002(\r\022\016\n\006roomid\030\002 \002("
    "\004\022\020\n\010serverid\030\003 \002(\r\022\n\n\002ip\030\004 \002(\t\022\014\n\004port\030"
    "\005 \002(\r\022\r\n\005token\030\006 \002(\t\"(\n\024MsgTellMatchWait"
    "Time\022\020\n\010waittime\030\001 \002(\r\"(\n\027MsgTellMatchPl"
    "ayerCount\022\r\n\005count\030\001 \002(\r\"H\n\025MsgAddFriend"
    "InviteReq\022\020\n\010playerid\030\001 \002(\r\022\017\n\007message\030\002"
    " \002(\t\022\014\n\004name\030\003 \002(\t\"<\n\027MsgReplyFriendInvi"
    "teReq\022\020\n\010playerid\030\001 \002(\r\022\017\n\007operate\030\002 \002(\r"
    "\"#\n\017MsgDelFriendReq\022\020\n\010playerid\030\001 \002(\r\"-\n"
    "\033MsgSetRefuseFriendInviteReq\022\016\n\006refuse\030\001"
    " \002(\r\"\021\n\017MsgEnterChatReq\"3\n\016MsgSendChatRe"
    "q\022\020\n\010chatinfo\030\001 \002(\t\022\017\n\007isvoice\030\002 \002(\r\"\305\001\n"
    "\017MsgSendChatInfo\022\020\n\010chatinfo\030\001 \002(\t\022\017\n\007is"
    "voice\030\002 \002(\r\022\022\n\nplayername\030\003 \002(\t\022\020\n\010playe"
    "rid\030\004 \002(\r\022\022\n\nplayericon\030\005 \002(\t\022\023\n\013playerg"
    "rade\030\006 \002(\r\022\021\n\tplayersex\030\007 \002(\r\022\025\n\rplayeri"
    "conbox\030\010 \002(\t\022\026\n\016playerserverid\030\t \002(\r\"\021\n\017"
    "MsgLeaveChatReq\"\203\001\n\026MsgSendOneByOneChatR"
    "eq\022\020\n\010chatinfo\030\001 \002(\t\022\017\n\007isvoice\030\002 \002(\r\022\020\n"
    "\010playerid\030\003 \002(\r\022\020\n\010chattype\030\004 \002(\t\022\020\n\010sel"
    "finfo\030\005 \002(\t\022\020\n\010serverid\030\006 \002(\r\"\206\001\n\027MsgSen"
    "dOneByOneChatInfo\022\020\n\010chatinfo\030\001 \002(\t\022\017\n\007i"
    "svoice\030\002 \002(\r\022\020\n\010playerid\030\003 \002(\r\022\020\n\010chatty"
    "pe\030\004 \002(\t\022\022\n\nplayerinfo\030\005 \002(\t\022\020\n\010serverid"
    "\030\006 \002(\r\"5\n\022MsgDebugCommandReq\022\017\n\007command\030"
    "\001 \002(\t\022\016\n\006params\030\002 \003(\t\"$\n\022MsgShowRewardAg"
    "ent\022\016\n\006reward\030\001 \002(\t\"8\n\023MsgSendGroupChatR"
    "eq\022\020\n\010chatinfo\030\001 \002(\t\022\017\n\007isvoice\030\002 \002(\r\"K\n"
    "\024MsgSendGroupChatInfo\022\020\n\010chatinfo\030\001 \002(\t\022"
    "\017\n\007isvoice\030\002 \002(\r\022\020\n\010playerid\030\003 \002(\r\">\n\016Ms"
    "gBuyStoreReq\022\017\n\007buytype\030\001 \002(\t\022\016\n\006shopid\030"
    "\002 \002(\r\022\013\n\003num\030\003 \002(\r\"5\n\017MsgGiveStoreReq\022\022\n"
    "\ntoplayerid\030\001 \002(\r\022\016\n\006shopid\030\002 \002(\r\"%\n\021Msg"
    "PlayerToastReq\022\020\n\010playerid\030\001 \002(\r\")\n\025MsgQ"
    "ueryToastCountReq\022\020\n\010playerid\030\001 \002(\r\"=\n\025M"
    "sgQueryToastCountAck\022\020\n\010playerid\030\001 \002(\r\022\022"
    "\n\ntoastcount\030\002 \002(\r\"@\n\020MsgRemoveDataReq\022\020"
    "\n\010dataname\030\001 \002(\t\022\013\n\003key\030\002 \002(\004\022\r\n\005count\030\003"
    " \002(\r\"$\n\021MsgChangeModelReq\022\017\n\007modelid\030\001 \002"
    "(\r\"B\n\034MsgSetModelDefaultClothesReq\022\017\n\007mo"
    "delid\030\001 \002(\r\022\021\n\tclothesid\030\002 \002(\r\"\'\n\022MsgDre"
    "ssClothesReq\022\021\n\tclothesid\030\001 \002(\r\"q\n\026MsgIn"
    "viteMatchGroupReq\022\020\n\010serverid\030\001 \002(\r\022\020\n\010p"
    "layerid\030\002 \002(\r\022\016\n\006source\030\003 \002(\t\022\017\n\007matchid"
    "\030\004 \002(\r\022\022\n\nplayername\030\005 \002(\t\"R\n\033MsgReplyIn"
    "viteMatchGroupReq\022\017\n\007groupid\030\001 \002(\004\022\021\n\tin"
    "viterid\030\002 \002(\r\022\017\n\007operate\030\003 \002(\r\"\027\n\025MsgLea"
    "veMatchGroupReq\"(\n\024MsgKickMatchGroupReq\022"
    "\020\n\010memberid\030\001 \002(\r\"(\n\025MsgApplyMatchGroupR"
    "eq\022\017\n\007groupid\030\001 \002(\004\">\n\032MsgReplyApplyMatc"
    "hGroupReq\022\017\n\007applyid\030\001 \002(\r\022\017\n\007operate\030\003 "
    "\002(\r\"*\n\027MsgMatchGroupPrepareReq\022\017\n\007prepar"
    "e\030\001 \002(\r\")\n\026MsgUpdateGroupMatchReq\022\017\n\007mat"
    "chid\030\001 \002(\r\"$\n\020MsgQueryGuestReq\022\020\n\010player"
    "id\030\001 \002(\r\"_\n\020MsgQueryGuestAck\022\020\n\010playerid"
    "\030\001 \002(\r\022\022\n\nguestcount\030\002 \002(\r\022%\n\tguestdata\030"
    "\003 \003(\0132\022.KFMsg.PBGuestData\"!\n\rMsgUseItemR"
    "eq\022\020\n\010itemguid\030\001 \002(\004\"(\n\007PBStore\022\035\n\004data\030"
    "\001 \003(\0132\017.KFMsg.PBString\")\n\010PBStores\022\035\n\005st"
    "ore\030\001 \003(\0132\016.KFMsg.PBStore\"\'\n\024MsgQuerySto"
    "reInfoReq\022\017\n\007version\030\001 \002(\r\"H\n\024MsgQuerySt"
    "oreInfoAck\022\017\n\007version\030\001 \002(\r\022\037\n\006stores\030\002 "
    "\001(\0132\017.KFMsg.PBStores\"/\n\016MsgBuyStoreAck\022\017"
    "\n\007storeid\030\001 \002(\r\022\014\n\004code\030\002 \002(\r\"C\n\022MsgSetW"
    "ishOrderReq\022\014\n\004type\030\001 \002(\r\022\017\n\007storeid\030\002 \002"
    "(\r\022\016\n\006status\030\003 \001(\r\"\024\n\022MsgQuerySettingReq"
    "\"8\n\022MsgQuerySettingAck\022\"\n\tpbsetting\030\001 \002("
    "\0132\017.KFMsg.PBObject\"\?\n\023MsgUpdateSettingRe"
    "q\022\022\n\nsettingkey\030\001 \002(\t\022\024\n\014settingvalue\030\002 "
    "\002(\t\"\027\n\025MsgQueryRecentListReq\"<\n\025MsgQuery"
    "RecentListAck\022#\n\nrecentlist\030\001 \002(\0132\017.KFMs"
    "g.PBRecord\"3\n\022MsgCompoundDataReq\022\020\n\010data"
    "name\030\001 \002(\t\022\013\n\003key\030\002 \002(\r\"%\n\023MsgQueryRankL"
    "istReq\022\016\n\006rankid\030\001 \002(\r\"L\n\023MsgQueryRankLi"
    "stAck\022\016\n\006rankid\030\001 \002(\r\022%\n\trankdatas\030\002 \002(\013"
    "2\022.KFMsg.PBRankDatas\"+\n\031MsgQueryFriendRa"
    "nkListReq\022\016\n\006rankid\030\001 \002(\r\"R\n\031MsgQueryFri"
    "endRankListAck\022\016\n\006rankid\030\001 \002(\r\022%\n\trankda"
    "tas\030\002 \002(\0132\022.KFMsg.PBRankDatas\"&\n\027MsgSeve"
    "nSignInRewardReq\022\013\n\003day\030\001 \002(\r\">\n\030MsgTell"
    "SevenExtendReward\022\022\n\nplayername\030\001 \002(\t\022\016\n"
    "\006reward\030\002 \002(\t\"H\n\021MsgCreateGuildReq\022\021\n\tgu"
    "ildname\030\001 \002(\t\022\r\n\005medal\030\002 \002(\r\022\021\n\tmanifest"
    "o\030\003 \001(\t\"&\n\021MsgInviteGuildReq\022\021\n\tinviteri"
    "d\030\001 \002(\r\"4\n\020MsgApplyGuildReq\022\017\n\007guildid\030\001"
    " \002(\004\022\017\n\007invitor\030\002 \002(\004\"\021\n\017MsgExitGuildReq"
    "\"+\n\024MsgTransferMasterReq\022\023\n\013newmasterid\030"
    "\001 \002(\r\";\n\021MsgReviewApplyReq\022\020\n\010playerid\030\001"
    " \001(\r\022\024\n\014operatortype\030\002 \002(\r\"\025\n\023MsgDissolv"
    "eGuildReq\"*\n\026MsgModifyGuildMedalReq\022\020\n\010n"
    "ewmedal\030\001 \002(\r\"M\n\024MsgQueryGuildListReq\022%\n"
    "\006guilds\030\001 \001(\0132\025.KFMsg.PBGuildIdArray\022\016\n\006"
    "cursor\030\002 \002(\r\"<\n\024MsgQueryGuildListAck\022$\n\n"
    "guilddatas\030\001 \003(\0132\020.KFMsg.PBStrings\"&\n\020Ms"
    "gKickMemberReq\022\022\n\ntoplayerid\030\001 \002(\r\"\024\n\022Ms"
    "gUpgradeGuildReq\"=\n\030MsgAppointGuildMembe"
    "rReq\022\022\n\ntoplayerid\030\001 \002(\r\022\r\n\005title\030\002 \002(\r\""
    ",\n\027MsgSearchGuildByNameReq\022\021\n\tguildname\030"
    "\001 \002(\t\"2\n\024MsgSetGuildSwitchReq\022\014\n\004type\030\001 "
    "\002(\t\022\014\n\004flag\030\002 \002(\r\"#\n\023MsgQueryGuildLogReq"
    "\022\014\n\004page\030\001 \002(\r\"5\n\023MsgQueryGuildLogAck\022\014\n"
    "\004page\030\001 \002(\r\022\020\n\010guildlog\030\002 \003(\t\"!\n\016MsgTell"
    "Marquee\022\017\n\007content\030\001 \002(\t\"#\n\020MsgTellSysNo"
    "tcie\022\017\n\007content\030\001 \002(\t\"0\n\020MsgBindAlipayRe"
    "q\022\014\n\004name\030\001 \002(\t\022\016\n\006alipay\030\002 \002(\t\"9\n\031MsgEx"
    "ChangeInviteScoreReq\022\014\n\004name\030\001 \002(\t\022\016\n\006al"
    "ipay\030\002 \002(\t\"E\n\031MsgExChangeInviteScoreAck\022"
    "\025\n\rexchangescore\030\001 \002(\r\022\021\n\tleftscore\030\002 \002("
    "\r\"\030\n\026MsgQueryInviteScoreReq\"B\n\026MsgQueryI"
    "nviteScoreAck\022\025\n\rexchangescore\030\001 \002(\r\022\021\n\t"
    "leftscore\030\002 \002(\r\"\034\n\032MsgExChangeInviteReco"
    "rdReq\"S\n\026PBExChangeInviteRecord\022\014\n\004name\030"
    "\001 \002(\t\022\016\n\006alipay\030\002 \002(\t\022\r\n\005score\030\003 \002(\r\022\014\n\004"
    "time\030\004 \002(\004\"K\n\032MsgExChangeInviteRecordAck"
    "\022-\n\006record\030\001 \003(\0132\035.KFMsg.PBExChangeInvit"
    "eRecord*\242\030\n\016ClientProtocol\022\024\n\020MSG_TELL_B"
    "E_KICK\020d\022\030\n\024MSG_LOGIN_VERIFY_REQ\020e\022\030\n\024MS"
    "G_LOGIN_VERIFY_ACK\020f\022\026\n\022MSG_LOGIN_GAME_R"
    "EQ\020g\022\025\n\021MSG_LOGIN_OUT_REQ\020i\022\026\n\022MSG_RESUL"
    "T_DISPLAY\020j\022\027\n\023MSG_CREATE_ROLE_REQ\020k\022\027\n\023"
    "MSG_CHANGE_NAME_REQ\020l\022\026\n\022MSG_CHANGE_SEX_"
    "REQ\020m\022#\n\037MSG_RECEIVE_ACTIVITY_REWARD_REQ"
    "\020n\022\037\n\033MSG_RECEIVE_TASK_REWARD_REQ\020o\022\"\n\036M"
    "SG_RECEIVE_ACHIEVE_REWARD_REQ\020p\022\037\n\033MSG_R"
    "ECEIVE_GIFT_REWARD_REQ\020q\022\037\n\033MSG_RECEIVE_"
    "MAIL_REWARD_REQ\020r\022\025\n\021MSG_VIEW_MAIL_REQ\020s"
    "\022\027\n\023MSG_DELETE_MAIL_REQ\020t\022\026\n\022MSG_QUERY_M"
    "AIL_REQ\020u\022\027\n\023MSG_START_MATCH_REQ\020v\022\027\n\023MS"
    "G_START_MATCH_ACK\020w\022\030\n\024MSG_CANCEL_MATCH_"
    "REQ\020x\022\030\n\024MSG_MATCH_RESULT_ACK\020y\022\035\n\031MSG_A"
    "DD_FRIEND_INVITE_REQ\020z\022\037\n\033MSG_REPLY_FRIE"
    "ND_INVITE_REQ\020{\022\026\n\022MSG_DEL_FRIEND_REQ\020|\022"
    "\026\n\022MSG_ENTER_CHAT_REQ\020~\022\025\n\021MSG_SEND_CHAT"
    "_REQ\020\177\022\027\n\022MSG_SEND_CHAT_INFO\020\200\001\022\027\n\022MSG_L"
    "EAVE_CHAT_REQ\020\201\001\022%\n MSG_SET_REFUSE_FRIEN"
    "D_INVITE_REQ\020\202\001\022\030\n\023MSG_QUERY_BASIC_REQ\020\203"
    "\001\022\031\n\024MSG_QUERY_PLAYER_REQ\020\204\001\022\026\n\021MSG_BUY_"
    "STORE_REQ\020\205\001\022\027\n\022MSG_GIVE_STORE_REQ\020\206\001\022\037\n"
    "\032MSG_SEND_ONEBYONE_CHAT_REQ\020\207\001\022 \n\033MSG_SE"
    "ND_ONEBYONE_CHAT_INFO\020\210\001\022\030\n\023MSG_CHANGE_I"
    "CON_REQ\020\211\001\022\032\n\025MSG_DEBUG_COMMAND_REQ\020\217\001\022\031"
    "\n\024MSG_CHANGE_MOTTO_REQ\020\220\001\022&\n!MSG_SET_MOD"
    "EL_DEFAULT_CLOTHES_REQ\020\221\001\022\031\n\024MSG_PLAYER_"
    "TOAST_REQ\020\222\001\022\030\n\023MSG_REMOVE_DATA_REQ\020\223\001\022\032"
    "\n\025MSG_DRESS_CLOTHES_REQ\020\224\001\022\031\n\024MSG_CHANGE"
    "_MODEL_REQ\020\225\001\022\032\n\025MSG_SHOW_REWARD_AGENT\020\226"
    "\001\022\037\n\032MSG_INVITE_MATCH_GROUP_REQ\020\227\001\022%\n MS"
    "G_REPLY_INVITE_MATCH_GROUP_REQ\020\231\001\022\036\n\031MSG"
    "_LEAVE_MATCH_GROUP_REQ\020\232\001\022\035\n\030MSG_KICK_MA"
    "TCH_GROUP_REQ\020\233\001\022\036\n\031MSG_APPLY_MATCH_GROU"
    "P_REQ\020\234\001\022$\n\037MSG_REPLY_APPLY_MATCH_GROUP_"
    "REQ\020\235\001\022 \n\033MSG_MATCH_GROUP_PREPARE_REQ\020\240\001"
    "\022\034\n\027MSG_CHANGE_ICON_BOX_REQ\020\241\001\022\030\n\023MSG_QU"
    "ERY_GUEST_REQ\020\242\001\022\030\n\023MSG_QUERY_GUEST_ACK\020"
    "\243\001\022\031\n\024MSG_CANCEL_MATCH_ACK\020\244\001\022\025\n\020MSG_USE"
    "_ITEM_REQ\020\245\001\022\036\n\031MSG_QUERY_TOAST_COUNT_RE"
    "Q\020\246\001\022\036\n\031MSG_QUERY_TOAST_COUNT_ACK\020\247\001\022\035\n\030"
    "MSG_QUERY_STORE_INFO_REQ\020\252\001\022\035\n\030MSG_QUERY"
    "_STORE_INFO_ACK\020\253\001\022\026\n\021MSG_BUY_STORE_ACK\020"
    "\255\001\022\037\n\032MSG_UPDATE_GROUP_MATCH_REQ\020\256\001\022\033\n\026M"
    "SG_SEND_GROUPCHAT_REQ\020\257\001\022\034\n\027MSG_SEND_GRO"
    "UPCHAT_INFO\020\260\001\022\033\n\026MSG_SET_WISH_ORDER_REQ"
    "\020\261\001\022\032\n\025MSG_QUERY_SETTING_REQ\020\262\001\022\032\n\025MSG_Q"
    "UERY_SETTING_ACK\020\263\001\022\033\n\026MSG_UPDATE_SETTIN"
    "G_REQ\020\264\001\022\036\n\031MSG_QUERY_RECENT_LIST_REQ\020\265\001"
    "\022\036\n\031MSG_QUERY_RECENT_LIST_ACK\020\266\001\022\034\n\027MSG_"
    "QUERY_RANK_LIST_REQ\020\267\001\022\034\n\027MSG_QUERY_RANK"
    "_LIST_ACK\020\270\001\022#\n\036MSG_QUERY_FRIEND_RANK_LI"
    "ST_REQ\020\271\001\022#\n\036MSG_QUERY_FRIEND_RANK_LIST_"
    "ACK\020\272\001\022\032\n\025MSG_COMPOUND_DATA_REQ\020\273\001\022 \n\033MS"
    "G_SEVEN_SIGNIN_REWARD_REQ\020\306\001\022!\n\034MSG_TELL"
    "_SEVEN_EXTEND_REWARD\020\307\001\022\031\n\024MSG_CREATE_GU"
    "ILD_REQ\020\310\001\022\031\n\024MSG_INVITE_GUILD_REQ\020\311\001\022\030\n"
    "\023MSG_APPLY_GUILD_REQ\020\312\001\022\035\n\030MSG_TELL_MATC"
    "H_WAIT_TIME\020\313\001\022\027\n\022MSG_EXIT_GUILD_REQ\020\314\001\022"
    "\034\n\027MSG_TRANSFER_MASTER_REQ\020\315\001\022\031\n\024MSG_REV"
    "IEW_APPLY_REQ\020\316\001\022\033\n\026MSG_DISSOLVE_GUILD_R"
    "EQ\020\317\001\022\037\n\032MSG_MODIFY_GUILD_MEDAL_REQ\020\320\001\022\035"
    "\n\030MSG_QUERY_GUILD_LIST_REQ\020\321\001\022\035\n\030MSG_QUE"
    "RY_GUILD_LIST_ACK\020\322\001\022\030\n\023MSG_KICK_MEMBER_"
    "REQ\020\323\001\022\032\n\025MSG_UPGRADE_GUILD_REQ\020\324\001\022!\n\034MS"
    "G_APPOINT_GUILD_MEMBER_REQ\020\325\001\022!\n\034MSG_SEA"
    "RCH_GUILD_BY_NAME_REQ\020\326\001\022\035\n\030MSG_SET_GUIL"
    "D_SWITCH_REQ\020\327\001\022\034\n\027MSG_QUERY_GUILD_LOG_R"
    "EQ\020\330\001\022\034\n\027MSG_QUERY_GUILD_LOG_ACK\020\331\001\022\025\n\020M"
    "SG_TELL_MARQUEE\020\254\002\022\030\n\023MSG_TELL_SYS_NOTIC"
    "E\020\255\002\022\030\n\023MSG_BIND_ALIPAY_REQ\020\256\002\022\037\n\032MSG_QU"
    "ERY_INVITE_SCORE_REQ\020\257\002\022\037\n\032MSG_QUERY_INV"
    "ITE_SCORE_ACK\020\260\002\022\"\n\035MSG_EXCHANGE_INVITE_"
    "SCORE_REQ\020\261\002\022\"\n\035MSG_EXCHANGE_INVITE_SCOR"
    "E_ACK\020\262\002\022#\n\036MSG_EXCHANGE_INVITE_RECORD_R"
    "EQ\020\263\002\022#\n\036MSG_EXCHANGE_INVITE_RECORD_ACK\020"
    "\264\002\022 \n\033MSG_TELL_MATCH_PLAYER_COUNT\020\265\002", 8956);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KFClientMessage.proto", &protobuf_RegisterTypes);
  MsgResultDisplay::default_instance_ = new MsgResultDisplay();
  MsgTellBeKick::default_instance_ = new MsgTellBeKick();
  MsgLoginVerifyReq::default_instance_ = new MsgLoginVerifyReq();
  MsgLoginVerifyAck::default_instance_ = new MsgLoginVerifyAck();
  MsgLoginGameReq::default_instance_ = new MsgLoginGameReq();
  MsgLoginOutReq::default_instance_ = new MsgLoginOutReq();
  MsgCreateRoleReq::default_instance_ = new MsgCreateRoleReq();
  MsgChangeNameReq::default_instance_ = new MsgChangeNameReq();
  MsgChangeSexReq::default_instance_ = new MsgChangeSexReq();
  MsgChangeIconReq::default_instance_ = new MsgChangeIconReq();
  MsgChangeIconBoxReq::default_instance_ = new MsgChangeIconBoxReq();
  MsgChangeMottoReq::default_instance_ = new MsgChangeMottoReq();
  MsgQueryBasicReq::default_instance_ = new MsgQueryBasicReq();
  MsgQueryPlayerReq::default_instance_ = new MsgQueryPlayerReq();
  MsgReceiveTaskRewardReq::default_instance_ = new MsgReceiveTaskRewardReq();
  MsgReceiveActivityRewardReq::default_instance_ = new MsgReceiveActivityRewardReq();
  MsgReceiveAchieveRewardReq::default_instance_ = new MsgReceiveAchieveRewardReq();
  MsgReceiveGiftRewardReq::default_instance_ = new MsgReceiveGiftRewardReq();
  MsgReceiveMailRewardReq::default_instance_ = new MsgReceiveMailRewardReq();
  MsgViewMailReq::default_instance_ = new MsgViewMailReq();
  MsgDeleteMailReq::default_instance_ = new MsgDeleteMailReq();
  MsgQueryMailReq::default_instance_ = new MsgQueryMailReq();
  MsgStartMatchReq::default_instance_ = new MsgStartMatchReq();
  MsgStartMatchAck::default_instance_ = new MsgStartMatchAck();
  MsgCancelMatchReq::default_instance_ = new MsgCancelMatchReq();
  MsgCancelMatchAck::default_instance_ = new MsgCancelMatchAck();
  MsgMatchResultAck::default_instance_ = new MsgMatchResultAck();
  MsgTellMatchWaitTime::default_instance_ = new MsgTellMatchWaitTime();
  MsgTellMatchPlayerCount::default_instance_ = new MsgTellMatchPlayerCount();
  MsgAddFriendInviteReq::default_instance_ = new MsgAddFriendInviteReq();
  MsgReplyFriendInviteReq::default_instance_ = new MsgReplyFriendInviteReq();
  MsgDelFriendReq::default_instance_ = new MsgDelFriendReq();
  MsgSetRefuseFriendInviteReq::default_instance_ = new MsgSetRefuseFriendInviteReq();
  MsgEnterChatReq::default_instance_ = new MsgEnterChatReq();
  MsgSendChatReq::default_instance_ = new MsgSendChatReq();
  MsgSendChatInfo::default_instance_ = new MsgSendChatInfo();
  MsgLeaveChatReq::default_instance_ = new MsgLeaveChatReq();
  MsgSendOneByOneChatReq::default_instance_ = new MsgSendOneByOneChatReq();
  MsgSendOneByOneChatInfo::default_instance_ = new MsgSendOneByOneChatInfo();
  MsgDebugCommandReq::default_instance_ = new MsgDebugCommandReq();
  MsgShowRewardAgent::default_instance_ = new MsgShowRewardAgent();
  MsgSendGroupChatReq::default_instance_ = new MsgSendGroupChatReq();
  MsgSendGroupChatInfo::default_instance_ = new MsgSendGroupChatInfo();
  MsgBuyStoreReq::default_instance_ = new MsgBuyStoreReq();
  MsgGiveStoreReq::default_instance_ = new MsgGiveStoreReq();
  MsgPlayerToastReq::default_instance_ = new MsgPlayerToastReq();
  MsgQueryToastCountReq::default_instance_ = new MsgQueryToastCountReq();
  MsgQueryToastCountAck::default_instance_ = new MsgQueryToastCountAck();
  MsgRemoveDataReq::default_instance_ = new MsgRemoveDataReq();
  MsgChangeModelReq::default_instance_ = new MsgChangeModelReq();
  MsgSetModelDefaultClothesReq::default_instance_ = new MsgSetModelDefaultClothesReq();
  MsgDressClothesReq::default_instance_ = new MsgDressClothesReq();
  MsgInviteMatchGroupReq::default_instance_ = new MsgInviteMatchGroupReq();
  MsgReplyInviteMatchGroupReq::default_instance_ = new MsgReplyInviteMatchGroupReq();
  MsgLeaveMatchGroupReq::default_instance_ = new MsgLeaveMatchGroupReq();
  MsgKickMatchGroupReq::default_instance_ = new MsgKickMatchGroupReq();
  MsgApplyMatchGroupReq::default_instance_ = new MsgApplyMatchGroupReq();
  MsgReplyApplyMatchGroupReq::default_instance_ = new MsgReplyApplyMatchGroupReq();
  MsgMatchGroupPrepareReq::default_instance_ = new MsgMatchGroupPrepareReq();
  MsgUpdateGroupMatchReq::default_instance_ = new MsgUpdateGroupMatchReq();
  MsgQueryGuestReq::default_instance_ = new MsgQueryGuestReq();
  MsgQueryGuestAck::default_instance_ = new MsgQueryGuestAck();
  MsgUseItemReq::default_instance_ = new MsgUseItemReq();
  PBStore::default_instance_ = new PBStore();
  PBStores::default_instance_ = new PBStores();
  MsgQueryStoreInfoReq::default_instance_ = new MsgQueryStoreInfoReq();
  MsgQueryStoreInfoAck::default_instance_ = new MsgQueryStoreInfoAck();
  MsgBuyStoreAck::default_instance_ = new MsgBuyStoreAck();
  MsgSetWishOrderReq::default_instance_ = new MsgSetWishOrderReq();
  MsgQuerySettingReq::default_instance_ = new MsgQuerySettingReq();
  MsgQuerySettingAck::default_instance_ = new MsgQuerySettingAck();
  MsgUpdateSettingReq::default_instance_ = new MsgUpdateSettingReq();
  MsgQueryRecentListReq::default_instance_ = new MsgQueryRecentListReq();
  MsgQueryRecentListAck::default_instance_ = new MsgQueryRecentListAck();
  MsgCompoundDataReq::default_instance_ = new MsgCompoundDataReq();
  MsgQueryRankListReq::default_instance_ = new MsgQueryRankListReq();
  MsgQueryRankListAck::default_instance_ = new MsgQueryRankListAck();
  MsgQueryFriendRankListReq::default_instance_ = new MsgQueryFriendRankListReq();
  MsgQueryFriendRankListAck::default_instance_ = new MsgQueryFriendRankListAck();
  MsgSevenSignInRewardReq::default_instance_ = new MsgSevenSignInRewardReq();
  MsgTellSevenExtendReward::default_instance_ = new MsgTellSevenExtendReward();
  MsgCreateGuildReq::default_instance_ = new MsgCreateGuildReq();
  MsgInviteGuildReq::default_instance_ = new MsgInviteGuildReq();
  MsgApplyGuildReq::default_instance_ = new MsgApplyGuildReq();
  MsgExitGuildReq::default_instance_ = new MsgExitGuildReq();
  MsgTransferMasterReq::default_instance_ = new MsgTransferMasterReq();
  MsgReviewApplyReq::default_instance_ = new MsgReviewApplyReq();
  MsgDissolveGuildReq::default_instance_ = new MsgDissolveGuildReq();
  MsgModifyGuildMedalReq::default_instance_ = new MsgModifyGuildMedalReq();
  MsgQueryGuildListReq::default_instance_ = new MsgQueryGuildListReq();
  MsgQueryGuildListAck::default_instance_ = new MsgQueryGuildListAck();
  MsgKickMemberReq::default_instance_ = new MsgKickMemberReq();
  MsgUpgradeGuildReq::default_instance_ = new MsgUpgradeGuildReq();
  MsgAppointGuildMemberReq::default_instance_ = new MsgAppointGuildMemberReq();
  MsgSearchGuildByNameReq::default_instance_ = new MsgSearchGuildByNameReq();
  MsgSetGuildSwitchReq::default_instance_ = new MsgSetGuildSwitchReq();
  MsgQueryGuildLogReq::default_instance_ = new MsgQueryGuildLogReq();
  MsgQueryGuildLogAck::default_instance_ = new MsgQueryGuildLogAck();
  MsgTellMarquee::default_instance_ = new MsgTellMarquee();
  MsgTellSysNotcie::default_instance_ = new MsgTellSysNotcie();
  MsgBindAlipayReq::default_instance_ = new MsgBindAlipayReq();
  MsgExChangeInviteScoreReq::default_instance_ = new MsgExChangeInviteScoreReq();
  MsgExChangeInviteScoreAck::default_instance_ = new MsgExChangeInviteScoreAck();
  MsgQueryInviteScoreReq::default_instance_ = new MsgQueryInviteScoreReq();
  MsgQueryInviteScoreAck::default_instance_ = new MsgQueryInviteScoreAck();
  MsgExChangeInviteRecordReq::default_instance_ = new MsgExChangeInviteRecordReq();
  PBExChangeInviteRecord::default_instance_ = new PBExChangeInviteRecord();
  MsgExChangeInviteRecordAck::default_instance_ = new MsgExChangeInviteRecordAck();
  MsgResultDisplay::default_instance_->InitAsDefaultInstance();
  MsgTellBeKick::default_instance_->InitAsDefaultInstance();
  MsgLoginVerifyReq::default_instance_->InitAsDefaultInstance();
  MsgLoginVerifyAck::default_instance_->InitAsDefaultInstance();
  MsgLoginGameReq::default_instance_->InitAsDefaultInstance();
  MsgLoginOutReq::default_instance_->InitAsDefaultInstance();
  MsgCreateRoleReq::default_instance_->InitAsDefaultInstance();
  MsgChangeNameReq::default_instance_->InitAsDefaultInstance();
  MsgChangeSexReq::default_instance_->InitAsDefaultInstance();
  MsgChangeIconReq::default_instance_->InitAsDefaultInstance();
  MsgChangeIconBoxReq::default_instance_->InitAsDefaultInstance();
  MsgChangeMottoReq::default_instance_->InitAsDefaultInstance();
  MsgQueryBasicReq::default_instance_->InitAsDefaultInstance();
  MsgQueryPlayerReq::default_instance_->InitAsDefaultInstance();
  MsgReceiveTaskRewardReq::default_instance_->InitAsDefaultInstance();
  MsgReceiveActivityRewardReq::default_instance_->InitAsDefaultInstance();
  MsgReceiveAchieveRewardReq::default_instance_->InitAsDefaultInstance();
  MsgReceiveGiftRewardReq::default_instance_->InitAsDefaultInstance();
  MsgReceiveMailRewardReq::default_instance_->InitAsDefaultInstance();
  MsgViewMailReq::default_instance_->InitAsDefaultInstance();
  MsgDeleteMailReq::default_instance_->InitAsDefaultInstance();
  MsgQueryMailReq::default_instance_->InitAsDefaultInstance();
  MsgStartMatchReq::default_instance_->InitAsDefaultInstance();
  MsgStartMatchAck::default_instance_->InitAsDefaultInstance();
  MsgCancelMatchReq::default_instance_->InitAsDefaultInstance();
  MsgCancelMatchAck::default_instance_->InitAsDefaultInstance();
  MsgMatchResultAck::default_instance_->InitAsDefaultInstance();
  MsgTellMatchWaitTime::default_instance_->InitAsDefaultInstance();
  MsgTellMatchPlayerCount::default_instance_->InitAsDefaultInstance();
  MsgAddFriendInviteReq::default_instance_->InitAsDefaultInstance();
  MsgReplyFriendInviteReq::default_instance_->InitAsDefaultInstance();
  MsgDelFriendReq::default_instance_->InitAsDefaultInstance();
  MsgSetRefuseFriendInviteReq::default_instance_->InitAsDefaultInstance();
  MsgEnterChatReq::default_instance_->InitAsDefaultInstance();
  MsgSendChatReq::default_instance_->InitAsDefaultInstance();
  MsgSendChatInfo::default_instance_->InitAsDefaultInstance();
  MsgLeaveChatReq::default_instance_->InitAsDefaultInstance();
  MsgSendOneByOneChatReq::default_instance_->InitAsDefaultInstance();
  MsgSendOneByOneChatInfo::default_instance_->InitAsDefaultInstance();
  MsgDebugCommandReq::default_instance_->InitAsDefaultInstance();
  MsgShowRewardAgent::default_instance_->InitAsDefaultInstance();
  MsgSendGroupChatReq::default_instance_->InitAsDefaultInstance();
  MsgSendGroupChatInfo::default_instance_->InitAsDefaultInstance();
  MsgBuyStoreReq::default_instance_->InitAsDefaultInstance();
  MsgGiveStoreReq::default_instance_->InitAsDefaultInstance();
  MsgPlayerToastReq::default_instance_->InitAsDefaultInstance();
  MsgQueryToastCountReq::default_instance_->InitAsDefaultInstance();
  MsgQueryToastCountAck::default_instance_->InitAsDefaultInstance();
  MsgRemoveDataReq::default_instance_->InitAsDefaultInstance();
  MsgChangeModelReq::default_instance_->InitAsDefaultInstance();
  MsgSetModelDefaultClothesReq::default_instance_->InitAsDefaultInstance();
  MsgDressClothesReq::default_instance_->InitAsDefaultInstance();
  MsgInviteMatchGroupReq::default_instance_->InitAsDefaultInstance();
  MsgReplyInviteMatchGroupReq::default_instance_->InitAsDefaultInstance();
  MsgLeaveMatchGroupReq::default_instance_->InitAsDefaultInstance();
  MsgKickMatchGroupReq::default_instance_->InitAsDefaultInstance();
  MsgApplyMatchGroupReq::default_instance_->InitAsDefaultInstance();
  MsgReplyApplyMatchGroupReq::default_instance_->InitAsDefaultInstance();
  MsgMatchGroupPrepareReq::default_instance_->InitAsDefaultInstance();
  MsgUpdateGroupMatchReq::default_instance_->InitAsDefaultInstance();
  MsgQueryGuestReq::default_instance_->InitAsDefaultInstance();
  MsgQueryGuestAck::default_instance_->InitAsDefaultInstance();
  MsgUseItemReq::default_instance_->InitAsDefaultInstance();
  PBStore::default_instance_->InitAsDefaultInstance();
  PBStores::default_instance_->InitAsDefaultInstance();
  MsgQueryStoreInfoReq::default_instance_->InitAsDefaultInstance();
  MsgQueryStoreInfoAck::default_instance_->InitAsDefaultInstance();
  MsgBuyStoreAck::default_instance_->InitAsDefaultInstance();
  MsgSetWishOrderReq::default_instance_->InitAsDefaultInstance();
  MsgQuerySettingReq::default_instance_->InitAsDefaultInstance();
  MsgQuerySettingAck::default_instance_->InitAsDefaultInstance();
  MsgUpdateSettingReq::default_instance_->InitAsDefaultInstance();
  MsgQueryRecentListReq::default_instance_->InitAsDefaultInstance();
  MsgQueryRecentListAck::default_instance_->InitAsDefaultInstance();
  MsgCompoundDataReq::default_instance_->InitAsDefaultInstance();
  MsgQueryRankListReq::default_instance_->InitAsDefaultInstance();
  MsgQueryRankListAck::default_instance_->InitAsDefaultInstance();
  MsgQueryFriendRankListReq::default_instance_->InitAsDefaultInstance();
  MsgQueryFriendRankListAck::default_instance_->InitAsDefaultInstance();
  MsgSevenSignInRewardReq::default_instance_->InitAsDefaultInstance();
  MsgTellSevenExtendReward::default_instance_->InitAsDefaultInstance();
  MsgCreateGuildReq::default_instance_->InitAsDefaultInstance();
  MsgInviteGuildReq::default_instance_->InitAsDefaultInstance();
  MsgApplyGuildReq::default_instance_->InitAsDefaultInstance();
  MsgExitGuildReq::default_instance_->InitAsDefaultInstance();
  MsgTransferMasterReq::default_instance_->InitAsDefaultInstance();
  MsgReviewApplyReq::default_instance_->InitAsDefaultInstance();
  MsgDissolveGuildReq::default_instance_->InitAsDefaultInstance();
  MsgModifyGuildMedalReq::default_instance_->InitAsDefaultInstance();
  MsgQueryGuildListReq::default_instance_->InitAsDefaultInstance();
  MsgQueryGuildListAck::default_instance_->InitAsDefaultInstance();
  MsgKickMemberReq::default_instance_->InitAsDefaultInstance();
  MsgUpgradeGuildReq::default_instance_->InitAsDefaultInstance();
  MsgAppointGuildMemberReq::default_instance_->InitAsDefaultInstance();
  MsgSearchGuildByNameReq::default_instance_->InitAsDefaultInstance();
  MsgSetGuildSwitchReq::default_instance_->InitAsDefaultInstance();
  MsgQueryGuildLogReq::default_instance_->InitAsDefaultInstance();
  MsgQueryGuildLogAck::default_instance_->InitAsDefaultInstance();
  MsgTellMarquee::default_instance_->InitAsDefaultInstance();
  MsgTellSysNotcie::default_instance_->InitAsDefaultInstance();
  MsgBindAlipayReq::default_instance_->InitAsDefaultInstance();
  MsgExChangeInviteScoreReq::default_instance_->InitAsDefaultInstance();
  MsgExChangeInviteScoreAck::default_instance_->InitAsDefaultInstance();
  MsgQueryInviteScoreReq::default_instance_->InitAsDefaultInstance();
  MsgQueryInviteScoreAck::default_instance_->InitAsDefaultInstance();
  MsgExChangeInviteRecordReq::default_instance_->InitAsDefaultInstance();
  PBExChangeInviteRecord::default_instance_->InitAsDefaultInstance();
  MsgExChangeInviteRecordAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_KFClientMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_KFClientMessage_2eproto {
  StaticDescriptorInitializer_KFClientMessage_2eproto() {
    protobuf_AddDesc_KFClientMessage_2eproto();
  }
} static_descriptor_initializer_KFClientMessage_2eproto_;
const ::google::protobuf::EnumDescriptor* ClientProtocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientProtocol_descriptor_;
}
bool ClientProtocol_IsValid(int value) {
  switch(value) {
    case 100:
    case 101:
    case 102:
    case 103:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 170:
    case 171:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgResultDisplay::kResultFieldNumber;
const int MsgResultDisplay::kParamFieldNumber;
#endif  // !_MSC_VER

MsgResultDisplay::MsgResultDisplay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgResultDisplay::InitAsDefaultInstance() {
}

MsgResultDisplay::MsgResultDisplay(const MsgResultDisplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgResultDisplay::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgResultDisplay::~MsgResultDisplay() {
  SharedDtor();
}

void MsgResultDisplay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgResultDisplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgResultDisplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgResultDisplay_descriptor_;
}

const MsgResultDisplay& MsgResultDisplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgResultDisplay* MsgResultDisplay::default_instance_ = NULL;

MsgResultDisplay* MsgResultDisplay::New() const {
  return new MsgResultDisplay;
}

void MsgResultDisplay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgResultDisplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_param;
        break;
      }

      // repeated string param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param(this->param_size() - 1).data(),
            this->param(this->param_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgResultDisplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // repeated string param = 2;
  for (int i = 0; i < this->param_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->param(i).data(), this->param(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgResultDisplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // repeated string param = 2;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param(i).data(), this->param(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgResultDisplay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  // repeated string param = 2;
  total_size += 1 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgResultDisplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgResultDisplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgResultDisplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgResultDisplay::MergeFrom(const MsgResultDisplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_.MergeFrom(from.param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgResultDisplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgResultDisplay::CopyFrom(const MsgResultDisplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgResultDisplay::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgResultDisplay::Swap(MsgResultDisplay* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    param_.Swap(&other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgResultDisplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgResultDisplay_descriptor_;
  metadata.reflection = MsgResultDisplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTellBeKick::kTypeFieldNumber;
#endif  // !_MSC_VER

MsgTellBeKick::MsgTellBeKick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgTellBeKick::InitAsDefaultInstance() {
}

MsgTellBeKick::MsgTellBeKick(const MsgTellBeKick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgTellBeKick::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTellBeKick::~MsgTellBeKick() {
  SharedDtor();
}

void MsgTellBeKick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTellBeKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTellBeKick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTellBeKick_descriptor_;
}

const MsgTellBeKick& MsgTellBeKick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgTellBeKick* MsgTellBeKick::default_instance_ = NULL;

MsgTellBeKick* MsgTellBeKick::New() const {
  return new MsgTellBeKick;
}

void MsgTellBeKick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTellBeKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgTellBeKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgTellBeKick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgTellBeKick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTellBeKick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTellBeKick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTellBeKick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTellBeKick::MergeFrom(const MsgTellBeKick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTellBeKick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTellBeKick::CopyFrom(const MsgTellBeKick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTellBeKick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgTellBeKick::Swap(MsgTellBeKick* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTellBeKick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTellBeKick_descriptor_;
  metadata.reflection = MsgTellBeKick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLoginVerifyReq::kAccountidFieldNumber;
const int MsgLoginVerifyReq::kTokenFieldNumber;
const int MsgLoginVerifyReq::kVersionFieldNumber;
#endif  // !_MSC_VER

MsgLoginVerifyReq::MsgLoginVerifyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgLoginVerifyReq::InitAsDefaultInstance() {
}

MsgLoginVerifyReq::MsgLoginVerifyReq(const MsgLoginVerifyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgLoginVerifyReq::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLoginVerifyReq::~MsgLoginVerifyReq() {
  SharedDtor();
}

void MsgLoginVerifyReq::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void MsgLoginVerifyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLoginVerifyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLoginVerifyReq_descriptor_;
}

const MsgLoginVerifyReq& MsgLoginVerifyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgLoginVerifyReq* MsgLoginVerifyReq::default_instance_ = NULL;

MsgLoginVerifyReq* MsgLoginVerifyReq::New() const {
  return new MsgLoginVerifyReq;
}

void MsgLoginVerifyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLoginVerifyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // optional string version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLoginVerifyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLoginVerifyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLoginVerifyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLoginVerifyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLoginVerifyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLoginVerifyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLoginVerifyReq::MergeFrom(const MsgLoginVerifyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLoginVerifyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLoginVerifyReq::CopyFrom(const MsgLoginVerifyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLoginVerifyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgLoginVerifyReq::Swap(MsgLoginVerifyReq* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(token_, other->token_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLoginVerifyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLoginVerifyReq_descriptor_;
  metadata.reflection = MsgLoginVerifyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLoginVerifyAck::kPlayeridFieldNumber;
const int MsgLoginVerifyAck::kTokenFieldNumber;
const int MsgLoginVerifyAck::kIpFieldNumber;
const int MsgLoginVerifyAck::kPortFieldNumber;
#endif  // !_MSC_VER

MsgLoginVerifyAck::MsgLoginVerifyAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgLoginVerifyAck::InitAsDefaultInstance() {
}

MsgLoginVerifyAck::MsgLoginVerifyAck(const MsgLoginVerifyAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgLoginVerifyAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLoginVerifyAck::~MsgLoginVerifyAck() {
  SharedDtor();
}

void MsgLoginVerifyAck::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void MsgLoginVerifyAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLoginVerifyAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLoginVerifyAck_descriptor_;
}

const MsgLoginVerifyAck& MsgLoginVerifyAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgLoginVerifyAck* MsgLoginVerifyAck::default_instance_ = NULL;

MsgLoginVerifyAck* MsgLoginVerifyAck::New() const {
  return new MsgLoginVerifyAck;
}

void MsgLoginVerifyAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLoginVerifyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // required string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // required uint32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLoginVerifyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // required uint32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLoginVerifyAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // required uint32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLoginVerifyAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required uint32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLoginVerifyAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLoginVerifyAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLoginVerifyAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLoginVerifyAck::MergeFrom(const MsgLoginVerifyAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLoginVerifyAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLoginVerifyAck::CopyFrom(const MsgLoginVerifyAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLoginVerifyAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MsgLoginVerifyAck::Swap(MsgLoginVerifyAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(token_, other->token_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLoginVerifyAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLoginVerifyAck_descriptor_;
  metadata.reflection = MsgLoginVerifyAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLoginGameReq::kPlayeridFieldNumber;
const int MsgLoginGameReq::kTokenFieldNumber;
#endif  // !_MSC_VER

MsgLoginGameReq::MsgLoginGameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgLoginGameReq::InitAsDefaultInstance() {
}

MsgLoginGameReq::MsgLoginGameReq(const MsgLoginGameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgLoginGameReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLoginGameReq::~MsgLoginGameReq() {
  SharedDtor();
}

void MsgLoginGameReq::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void MsgLoginGameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLoginGameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLoginGameReq_descriptor_;
}

const MsgLoginGameReq& MsgLoginGameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgLoginGameReq* MsgLoginGameReq::default_instance_ = NULL;

MsgLoginGameReq* MsgLoginGameReq::New() const {
  return new MsgLoginGameReq;
}

void MsgLoginGameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLoginGameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLoginGameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLoginGameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLoginGameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLoginGameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLoginGameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLoginGameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLoginGameReq::MergeFrom(const MsgLoginGameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLoginGameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLoginGameReq::CopyFrom(const MsgLoginGameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLoginGameReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgLoginGameReq::Swap(MsgLoginGameReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLoginGameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLoginGameReq_descriptor_;
  metadata.reflection = MsgLoginGameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgLoginOutReq::MsgLoginOutReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgLoginOutReq::InitAsDefaultInstance() {
}

MsgLoginOutReq::MsgLoginOutReq(const MsgLoginOutReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgLoginOutReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLoginOutReq::~MsgLoginOutReq() {
  SharedDtor();
}

void MsgLoginOutReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgLoginOutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLoginOutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLoginOutReq_descriptor_;
}

const MsgLoginOutReq& MsgLoginOutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgLoginOutReq* MsgLoginOutReq::default_instance_ = NULL;

MsgLoginOutReq* MsgLoginOutReq::New() const {
  return new MsgLoginOutReq;
}

void MsgLoginOutReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLoginOutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgLoginOutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLoginOutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLoginOutReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLoginOutReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLoginOutReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLoginOutReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLoginOutReq::MergeFrom(const MsgLoginOutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLoginOutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLoginOutReq::CopyFrom(const MsgLoginOutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLoginOutReq::IsInitialized() const {

  return true;
}

void MsgLoginOutReq::Swap(MsgLoginOutReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLoginOutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLoginOutReq_descriptor_;
  metadata.reflection = MsgLoginOutReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCreateRoleReq::kNameFieldNumber;
const int MsgCreateRoleReq::kSexFieldNumber;
const int MsgCreateRoleReq::kModelFieldNumber;
const int MsgCreateRoleReq::kInviteridFieldNumber;
#endif  // !_MSC_VER

MsgCreateRoleReq::MsgCreateRoleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCreateRoleReq::InitAsDefaultInstance() {
}

MsgCreateRoleReq::MsgCreateRoleReq(const MsgCreateRoleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCreateRoleReq::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0u;
  model_ = 0u;
  inviterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCreateRoleReq::~MsgCreateRoleReq() {
  SharedDtor();
}

void MsgCreateRoleReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MsgCreateRoleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCreateRoleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCreateRoleReq_descriptor_;
}

const MsgCreateRoleReq& MsgCreateRoleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgCreateRoleReq* MsgCreateRoleReq::default_instance_ = NULL;

MsgCreateRoleReq* MsgCreateRoleReq::New() const {
  return new MsgCreateRoleReq;
}

void MsgCreateRoleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0u;
    model_ = 0u;
    inviterid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCreateRoleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sex;
        break;
      }

      // required uint32 sex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_model;
        break;
      }

      // required uint32 model = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_model:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &model_)));
          set_has_model();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_inviterid;
        break;
      }

      // optional uint32 inviterid = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviterid_)));
          set_has_inviterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCreateRoleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required uint32 sex = 2;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sex(), output);
  }

  // required uint32 model = 3;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->model(), output);
  }

  // optional uint32 inviterid = 4 [default = 0];
  if (has_inviterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->inviterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCreateRoleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 sex = 2;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sex(), target);
  }

  // required uint32 model = 3;
  if (has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->model(), target);
  }

  // optional uint32 inviterid = 4 [default = 0];
  if (has_inviterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->inviterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCreateRoleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 sex = 2;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // required uint32 model = 3;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->model());
    }

    // optional uint32 inviterid = 4 [default = 0];
    if (has_inviterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inviterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCreateRoleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCreateRoleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCreateRoleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCreateRoleReq::MergeFrom(const MsgCreateRoleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_inviterid()) {
      set_inviterid(from.inviterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCreateRoleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCreateRoleReq::CopyFrom(const MsgCreateRoleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreateRoleReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MsgCreateRoleReq::Swap(MsgCreateRoleReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(model_, other->model_);
    std::swap(inviterid_, other->inviterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCreateRoleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCreateRoleReq_descriptor_;
  metadata.reflection = MsgCreateRoleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgChangeNameReq::kNameFieldNumber;
#endif  // !_MSC_VER

MsgChangeNameReq::MsgChangeNameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgChangeNameReq::InitAsDefaultInstance() {
}

MsgChangeNameReq::MsgChangeNameReq(const MsgChangeNameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgChangeNameReq::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgChangeNameReq::~MsgChangeNameReq() {
  SharedDtor();
}

void MsgChangeNameReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MsgChangeNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgChangeNameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgChangeNameReq_descriptor_;
}

const MsgChangeNameReq& MsgChangeNameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgChangeNameReq* MsgChangeNameReq::default_instance_ = NULL;

MsgChangeNameReq* MsgChangeNameReq::New() const {
  return new MsgChangeNameReq;
}

void MsgChangeNameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgChangeNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgChangeNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgChangeNameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgChangeNameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgChangeNameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgChangeNameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgChangeNameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgChangeNameReq::MergeFrom(const MsgChangeNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgChangeNameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgChangeNameReq::CopyFrom(const MsgChangeNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChangeNameReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgChangeNameReq::Swap(MsgChangeNameReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgChangeNameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgChangeNameReq_descriptor_;
  metadata.reflection = MsgChangeNameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgChangeSexReq::kSexFieldNumber;
#endif  // !_MSC_VER

MsgChangeSexReq::MsgChangeSexReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgChangeSexReq::InitAsDefaultInstance() {
}

MsgChangeSexReq::MsgChangeSexReq(const MsgChangeSexReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgChangeSexReq::SharedCtor() {
  _cached_size_ = 0;
  sex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgChangeSexReq::~MsgChangeSexReq() {
  SharedDtor();
}

void MsgChangeSexReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgChangeSexReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgChangeSexReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgChangeSexReq_descriptor_;
}

const MsgChangeSexReq& MsgChangeSexReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgChangeSexReq* MsgChangeSexReq::default_instance_ = NULL;

MsgChangeSexReq* MsgChangeSexReq::New() const {
  return new MsgChangeSexReq;
}

void MsgChangeSexReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgChangeSexReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgChangeSexReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 sex = 1;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgChangeSexReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 sex = 1;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgChangeSexReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sex = 1;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgChangeSexReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgChangeSexReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgChangeSexReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgChangeSexReq::MergeFrom(const MsgChangeSexReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgChangeSexReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgChangeSexReq::CopyFrom(const MsgChangeSexReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChangeSexReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgChangeSexReq::Swap(MsgChangeSexReq* other) {
  if (other != this) {
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgChangeSexReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgChangeSexReq_descriptor_;
  metadata.reflection = MsgChangeSexReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgChangeIconReq::kIconFieldNumber;
#endif  // !_MSC_VER

MsgChangeIconReq::MsgChangeIconReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgChangeIconReq::InitAsDefaultInstance() {
}

MsgChangeIconReq::MsgChangeIconReq(const MsgChangeIconReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgChangeIconReq::SharedCtor() {
  _cached_size_ = 0;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgChangeIconReq::~MsgChangeIconReq() {
  SharedDtor();
}

void MsgChangeIconReq::SharedDtor() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void MsgChangeIconReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgChangeIconReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgChangeIconReq_descriptor_;
}

const MsgChangeIconReq& MsgChangeIconReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgChangeIconReq* MsgChangeIconReq::default_instance_ = NULL;

MsgChangeIconReq* MsgChangeIconReq::New() const {
  return new MsgChangeIconReq;
}

void MsgChangeIconReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgChangeIconReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string icon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgChangeIconReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string icon = 1;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->icon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgChangeIconReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string icon = 1;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->icon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgChangeIconReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string icon = 1;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgChangeIconReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgChangeIconReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgChangeIconReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgChangeIconReq::MergeFrom(const MsgChangeIconReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_icon()) {
      set_icon(from.icon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgChangeIconReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgChangeIconReq::CopyFrom(const MsgChangeIconReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChangeIconReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgChangeIconReq::Swap(MsgChangeIconReq* other) {
  if (other != this) {
    std::swap(icon_, other->icon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgChangeIconReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgChangeIconReq_descriptor_;
  metadata.reflection = MsgChangeIconReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgChangeIconBoxReq::kIconboxFieldNumber;
#endif  // !_MSC_VER

MsgChangeIconBoxReq::MsgChangeIconBoxReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgChangeIconBoxReq::InitAsDefaultInstance() {
}

MsgChangeIconBoxReq::MsgChangeIconBoxReq(const MsgChangeIconBoxReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgChangeIconBoxReq::SharedCtor() {
  _cached_size_ = 0;
  iconbox_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgChangeIconBoxReq::~MsgChangeIconBoxReq() {
  SharedDtor();
}

void MsgChangeIconBoxReq::SharedDtor() {
  if (iconbox_ != &::google::protobuf::internal::kEmptyString) {
    delete iconbox_;
  }
  if (this != default_instance_) {
  }
}

void MsgChangeIconBoxReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgChangeIconBoxReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgChangeIconBoxReq_descriptor_;
}

const MsgChangeIconBoxReq& MsgChangeIconBoxReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgChangeIconBoxReq* MsgChangeIconBoxReq::default_instance_ = NULL;

MsgChangeIconBoxReq* MsgChangeIconBoxReq::New() const {
  return new MsgChangeIconBoxReq;
}

void MsgChangeIconBoxReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_iconbox()) {
      if (iconbox_ != &::google::protobuf::internal::kEmptyString) {
        iconbox_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgChangeIconBoxReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string iconbox = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iconbox()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->iconbox().data(), this->iconbox().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgChangeIconBoxReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string iconbox = 1;
  if (has_iconbox()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iconbox().data(), this->iconbox().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->iconbox(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgChangeIconBoxReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string iconbox = 1;
  if (has_iconbox()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iconbox().data(), this->iconbox().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->iconbox(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgChangeIconBoxReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string iconbox = 1;
    if (has_iconbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iconbox());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgChangeIconBoxReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgChangeIconBoxReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgChangeIconBoxReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgChangeIconBoxReq::MergeFrom(const MsgChangeIconBoxReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iconbox()) {
      set_iconbox(from.iconbox());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgChangeIconBoxReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgChangeIconBoxReq::CopyFrom(const MsgChangeIconBoxReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChangeIconBoxReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgChangeIconBoxReq::Swap(MsgChangeIconBoxReq* other) {
  if (other != this) {
    std::swap(iconbox_, other->iconbox_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgChangeIconBoxReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgChangeIconBoxReq_descriptor_;
  metadata.reflection = MsgChangeIconBoxReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgChangeMottoReq::kMottoFieldNumber;
#endif  // !_MSC_VER

MsgChangeMottoReq::MsgChangeMottoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgChangeMottoReq::InitAsDefaultInstance() {
}

MsgChangeMottoReq::MsgChangeMottoReq(const MsgChangeMottoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgChangeMottoReq::SharedCtor() {
  _cached_size_ = 0;
  motto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgChangeMottoReq::~MsgChangeMottoReq() {
  SharedDtor();
}

void MsgChangeMottoReq::SharedDtor() {
  if (motto_ != &::google::protobuf::internal::kEmptyString) {
    delete motto_;
  }
  if (this != default_instance_) {
  }
}

void MsgChangeMottoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgChangeMottoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgChangeMottoReq_descriptor_;
}

const MsgChangeMottoReq& MsgChangeMottoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgChangeMottoReq* MsgChangeMottoReq::default_instance_ = NULL;

MsgChangeMottoReq* MsgChangeMottoReq::New() const {
  return new MsgChangeMottoReq;
}

void MsgChangeMottoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_motto()) {
      if (motto_ != &::google::protobuf::internal::kEmptyString) {
        motto_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgChangeMottoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string motto = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_motto()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->motto().data(), this->motto().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgChangeMottoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string motto = 1;
  if (has_motto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->motto().data(), this->motto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->motto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgChangeMottoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string motto = 1;
  if (has_motto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->motto().data(), this->motto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->motto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgChangeMottoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string motto = 1;
    if (has_motto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->motto());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgChangeMottoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgChangeMottoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgChangeMottoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgChangeMottoReq::MergeFrom(const MsgChangeMottoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_motto()) {
      set_motto(from.motto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgChangeMottoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgChangeMottoReq::CopyFrom(const MsgChangeMottoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChangeMottoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgChangeMottoReq::Swap(MsgChangeMottoReq* other) {
  if (other != this) {
    std::swap(motto_, other->motto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgChangeMottoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgChangeMottoReq_descriptor_;
  metadata.reflection = MsgChangeMottoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryBasicReq::kNameFieldNumber;
#endif  // !_MSC_VER

MsgQueryBasicReq::MsgQueryBasicReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgQueryBasicReq::InitAsDefaultInstance() {
}

MsgQueryBasicReq::MsgQueryBasicReq(const MsgQueryBasicReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgQueryBasicReq::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryBasicReq::~MsgQueryBasicReq() {
  SharedDtor();
}

void MsgQueryBasicReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MsgQueryBasicReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryBasicReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryBasicReq_descriptor_;
}

const MsgQueryBasicReq& MsgQueryBasicReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgQueryBasicReq* MsgQueryBasicReq::default_instance_ = NULL;

MsgQueryBasicReq* MsgQueryBasicReq::New() const {
  return new MsgQueryBasicReq;
}

void MsgQueryBasicReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryBasicReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgQueryBasicReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgQueryBasicReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgQueryBasicReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryBasicReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryBasicReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryBasicReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryBasicReq::MergeFrom(const MsgQueryBasicReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryBasicReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryBasicReq::CopyFrom(const MsgQueryBasicReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryBasicReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgQueryBasicReq::Swap(MsgQueryBasicReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryBasicReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryBasicReq_descriptor_;
  metadata.reflection = MsgQueryBasicReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryPlayerReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

MsgQueryPlayerReq::MsgQueryPlayerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgQueryPlayerReq::InitAsDefaultInstance() {
}

MsgQueryPlayerReq::MsgQueryPlayerReq(const MsgQueryPlayerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgQueryPlayerReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryPlayerReq::~MsgQueryPlayerReq() {
  SharedDtor();
}

void MsgQueryPlayerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQueryPlayerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryPlayerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryPlayerReq_descriptor_;
}

const MsgQueryPlayerReq& MsgQueryPlayerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgQueryPlayerReq* MsgQueryPlayerReq::default_instance_ = NULL;

MsgQueryPlayerReq* MsgQueryPlayerReq::New() const {
  return new MsgQueryPlayerReq;
}

void MsgQueryPlayerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryPlayerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgQueryPlayerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgQueryPlayerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgQueryPlayerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryPlayerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryPlayerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryPlayerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryPlayerReq::MergeFrom(const MsgQueryPlayerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryPlayerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryPlayerReq::CopyFrom(const MsgQueryPlayerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryPlayerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgQueryPlayerReq::Swap(MsgQueryPlayerReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryPlayerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryPlayerReq_descriptor_;
  metadata.reflection = MsgQueryPlayerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgReceiveTaskRewardReq::kTaskidFieldNumber;
#endif  // !_MSC_VER

MsgReceiveTaskRewardReq::MsgReceiveTaskRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgReceiveTaskRewardReq::InitAsDefaultInstance() {
}

MsgReceiveTaskRewardReq::MsgReceiveTaskRewardReq(const MsgReceiveTaskRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgReceiveTaskRewardReq::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgReceiveTaskRewardReq::~MsgReceiveTaskRewardReq() {
  SharedDtor();
}

void MsgReceiveTaskRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgReceiveTaskRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgReceiveTaskRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgReceiveTaskRewardReq_descriptor_;
}

const MsgReceiveTaskRewardReq& MsgReceiveTaskRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgReceiveTaskRewardReq* MsgReceiveTaskRewardReq::default_instance_ = NULL;

MsgReceiveTaskRewardReq* MsgReceiveTaskRewardReq::New() const {
  return new MsgReceiveTaskRewardReq;
}

void MsgReceiveTaskRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgReceiveTaskRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgReceiveTaskRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgReceiveTaskRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 taskid = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgReceiveTaskRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgReceiveTaskRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgReceiveTaskRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgReceiveTaskRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgReceiveTaskRewardReq::MergeFrom(const MsgReceiveTaskRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgReceiveTaskRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgReceiveTaskRewardReq::CopyFrom(const MsgReceiveTaskRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgReceiveTaskRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgReceiveTaskRewardReq::Swap(MsgReceiveTaskRewardReq* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgReceiveTaskRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgReceiveTaskRewardReq_descriptor_;
  metadata.reflection = MsgReceiveTaskRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgReceiveActivityRewardReq::kTypeFieldNumber;
const int MsgReceiveActivityRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

MsgReceiveActivityRewardReq::MsgReceiveActivityRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgReceiveActivityRewardReq::InitAsDefaultInstance() {
}

MsgReceiveActivityRewardReq::MsgReceiveActivityRewardReq(const MsgReceiveActivityRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgReceiveActivityRewardReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgReceiveActivityRewardReq::~MsgReceiveActivityRewardReq() {
  SharedDtor();
}

void MsgReceiveActivityRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgReceiveActivityRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgReceiveActivityRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgReceiveActivityRewardReq_descriptor_;
}

const MsgReceiveActivityRewardReq& MsgReceiveActivityRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgReceiveActivityRewardReq* MsgReceiveActivityRewardReq::default_instance_ = NULL;

MsgReceiveActivityRewardReq* MsgReceiveActivityRewardReq::New() const {
  return new MsgReceiveActivityRewardReq;
}

void MsgReceiveActivityRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgReceiveActivityRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgReceiveActivityRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgReceiveActivityRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgReceiveActivityRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgReceiveActivityRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgReceiveActivityRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgReceiveActivityRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgReceiveActivityRewardReq::MergeFrom(const MsgReceiveActivityRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgReceiveActivityRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgReceiveActivityRewardReq::CopyFrom(const MsgReceiveActivityRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgReceiveActivityRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgReceiveActivityRewardReq::Swap(MsgReceiveActivityRewardReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgReceiveActivityRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgReceiveActivityRewardReq_descriptor_;
  metadata.reflection = MsgReceiveActivityRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgReceiveAchieveRewardReq::kAchieveidFieldNumber;
#endif  // !_MSC_VER

MsgReceiveAchieveRewardReq::MsgReceiveAchieveRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgReceiveAchieveRewardReq::InitAsDefaultInstance() {
}

MsgReceiveAchieveRewardReq::MsgReceiveAchieveRewardReq(const MsgReceiveAchieveRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgReceiveAchieveRewardReq::SharedCtor() {
  _cached_size_ = 0;
  achieveid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgReceiveAchieveRewardReq::~MsgReceiveAchieveRewardReq() {
  SharedDtor();
}

void MsgReceiveAchieveRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgReceiveAchieveRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgReceiveAchieveRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgReceiveAchieveRewardReq_descriptor_;
}

const MsgReceiveAchieveRewardReq& MsgReceiveAchieveRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgReceiveAchieveRewardReq* MsgReceiveAchieveRewardReq::default_instance_ = NULL;

MsgReceiveAchieveRewardReq* MsgReceiveAchieveRewardReq::New() const {
  return new MsgReceiveAchieveRewardReq;
}

void MsgReceiveAchieveRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    achieveid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgReceiveAchieveRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 achieveid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achieveid_)));
          set_has_achieveid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgReceiveAchieveRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 achieveid = 1;
  if (has_achieveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->achieveid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgReceiveAchieveRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 achieveid = 1;
  if (has_achieveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->achieveid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgReceiveAchieveRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 achieveid = 1;
    if (has_achieveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achieveid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgReceiveAchieveRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgReceiveAchieveRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgReceiveAchieveRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgReceiveAchieveRewardReq::MergeFrom(const MsgReceiveAchieveRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achieveid()) {
      set_achieveid(from.achieveid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgReceiveAchieveRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgReceiveAchieveRewardReq::CopyFrom(const MsgReceiveAchieveRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgReceiveAchieveRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgReceiveAchieveRewardReq::Swap(MsgReceiveAchieveRewardReq* other) {
  if (other != this) {
    std::swap(achieveid_, other->achieveid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgReceiveAchieveRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgReceiveAchieveRewardReq_descriptor_;
  metadata.reflection = MsgReceiveAchieveRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgReceiveGiftRewardReq::kGiftkeyFieldNumber;
#endif  // !_MSC_VER

MsgReceiveGiftRewardReq::MsgReceiveGiftRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgReceiveGiftRewardReq::InitAsDefaultInstance() {
}

MsgReceiveGiftRewardReq::MsgReceiveGiftRewardReq(const MsgReceiveGiftRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgReceiveGiftRewardReq::SharedCtor() {
  _cached_size_ = 0;
  giftkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgReceiveGiftRewardReq::~MsgReceiveGiftRewardReq() {
  SharedDtor();
}

void MsgReceiveGiftRewardReq::SharedDtor() {
  if (giftkey_ != &::google::protobuf::internal::kEmptyString) {
    delete giftkey_;
  }
  if (this != default_instance_) {
  }
}

void MsgReceiveGiftRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgReceiveGiftRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgReceiveGiftRewardReq_descriptor_;
}

const MsgReceiveGiftRewardReq& MsgReceiveGiftRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgReceiveGiftRewardReq* MsgReceiveGiftRewardReq::default_instance_ = NULL;

MsgReceiveGiftRewardReq* MsgReceiveGiftRewardReq::New() const {
  return new MsgReceiveGiftRewardReq;
}

void MsgReceiveGiftRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_giftkey()) {
      if (giftkey_ != &::google::protobuf::internal::kEmptyString) {
        giftkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgReceiveGiftRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string giftkey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_giftkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->giftkey().data(), this->giftkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgReceiveGiftRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string giftkey = 1;
  if (has_giftkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->giftkey().data(), this->giftkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->giftkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgReceiveGiftRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string giftkey = 1;
  if (has_giftkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->giftkey().data(), this->giftkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->giftkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgReceiveGiftRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string giftkey = 1;
    if (has_giftkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->giftkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgReceiveGiftRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgReceiveGiftRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgReceiveGiftRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgReceiveGiftRewardReq::MergeFrom(const MsgReceiveGiftRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_giftkey()) {
      set_giftkey(from.giftkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgReceiveGiftRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgReceiveGiftRewardReq::CopyFrom(const MsgReceiveGiftRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgReceiveGiftRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgReceiveGiftRewardReq::Swap(MsgReceiveGiftRewardReq* other) {
  if (other != this) {
    std::swap(giftkey_, other->giftkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgReceiveGiftRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgReceiveGiftRewardReq_descriptor_;
  metadata.reflection = MsgReceiveGiftRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgReceiveMailRewardReq::kMailidFieldNumber;
#endif  // !_MSC_VER

MsgReceiveMailRewardReq::MsgReceiveMailRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgReceiveMailRewardReq::InitAsDefaultInstance() {
}

MsgReceiveMailRewardReq::MsgReceiveMailRewardReq(const MsgReceiveMailRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgReceiveMailRewardReq::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgReceiveMailRewardReq::~MsgReceiveMailRewardReq() {
  SharedDtor();
}

void MsgReceiveMailRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgReceiveMailRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgReceiveMailRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgReceiveMailRewardReq_descriptor_;
}

const MsgReceiveMailRewardReq& MsgReceiveMailRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgReceiveMailRewardReq* MsgReceiveMailRewardReq::default_instance_ = NULL;

MsgReceiveMailRewardReq* MsgReceiveMailRewardReq::New() const {
  return new MsgReceiveMailRewardReq;
}

void MsgReceiveMailRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgReceiveMailRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mailid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgReceiveMailRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 mailid = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgReceiveMailRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 mailid = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgReceiveMailRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mailid = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgReceiveMailRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgReceiveMailRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgReceiveMailRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgReceiveMailRewardReq::MergeFrom(const MsgReceiveMailRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgReceiveMailRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgReceiveMailRewardReq::CopyFrom(const MsgReceiveMailRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgReceiveMailRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgReceiveMailRewardReq::Swap(MsgReceiveMailRewardReq* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgReceiveMailRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgReceiveMailRewardReq_descriptor_;
  metadata.reflection = MsgReceiveMailRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgViewMailReq::kMailidFieldNumber;
#endif  // !_MSC_VER

MsgViewMailReq::MsgViewMailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgViewMailReq::InitAsDefaultInstance() {
}

MsgViewMailReq::MsgViewMailReq(const MsgViewMailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgViewMailReq::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgViewMailReq::~MsgViewMailReq() {
  SharedDtor();
}

void MsgViewMailReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgViewMailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgViewMailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgViewMailReq_descriptor_;
}

const MsgViewMailReq& MsgViewMailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgViewMailReq* MsgViewMailReq::default_instance_ = NULL;

MsgViewMailReq* MsgViewMailReq::New() const {
  return new MsgViewMailReq;
}

void MsgViewMailReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgViewMailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mailid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgViewMailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 mailid = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgViewMailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 mailid = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgViewMailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mailid = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgViewMailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgViewMailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgViewMailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgViewMailReq::MergeFrom(const MsgViewMailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgViewMailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgViewMailReq::CopyFrom(const MsgViewMailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgViewMailReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgViewMailReq::Swap(MsgViewMailReq* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgViewMailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgViewMailReq_descriptor_;
  metadata.reflection = MsgViewMailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDeleteMailReq::kMailidFieldNumber;
#endif  // !_MSC_VER

MsgDeleteMailReq::MsgDeleteMailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgDeleteMailReq::InitAsDefaultInstance() {
}

MsgDeleteMailReq::MsgDeleteMailReq(const MsgDeleteMailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgDeleteMailReq::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDeleteMailReq::~MsgDeleteMailReq() {
  SharedDtor();
}

void MsgDeleteMailReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgDeleteMailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDeleteMailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDeleteMailReq_descriptor_;
}

const MsgDeleteMailReq& MsgDeleteMailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgDeleteMailReq* MsgDeleteMailReq::default_instance_ = NULL;

MsgDeleteMailReq* MsgDeleteMailReq::New() const {
  return new MsgDeleteMailReq;
}

void MsgDeleteMailReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDeleteMailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mailid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgDeleteMailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 mailid = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgDeleteMailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 mailid = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgDeleteMailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mailid = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDeleteMailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDeleteMailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDeleteMailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDeleteMailReq::MergeFrom(const MsgDeleteMailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDeleteMailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDeleteMailReq::CopyFrom(const MsgDeleteMailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDeleteMailReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgDeleteMailReq::Swap(MsgDeleteMailReq* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDeleteMailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDeleteMailReq_descriptor_;
  metadata.reflection = MsgDeleteMailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryMailReq::kMailtypeFieldNumber;
#endif  // !_MSC_VER

MsgQueryMailReq::MsgQueryMailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgQueryMailReq::InitAsDefaultInstance() {
}

MsgQueryMailReq::MsgQueryMailReq(const MsgQueryMailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgQueryMailReq::SharedCtor() {
  _cached_size_ = 0;
  mailtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryMailReq::~MsgQueryMailReq() {
  SharedDtor();
}

void MsgQueryMailReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQueryMailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryMailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryMailReq_descriptor_;
}

const MsgQueryMailReq& MsgQueryMailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgQueryMailReq* MsgQueryMailReq::default_instance_ = NULL;

MsgQueryMailReq* MsgQueryMailReq::New() const {
  return new MsgQueryMailReq;
}

void MsgQueryMailReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryMailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mailtype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailtype_)));
          set_has_mailtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgQueryMailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mailtype = 1;
  if (has_mailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgQueryMailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mailtype = 1;
  if (has_mailtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgQueryMailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mailtype = 1;
    if (has_mailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryMailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryMailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryMailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryMailReq::MergeFrom(const MsgQueryMailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailtype()) {
      set_mailtype(from.mailtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryMailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryMailReq::CopyFrom(const MsgQueryMailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryMailReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgQueryMailReq::Swap(MsgQueryMailReq* other) {
  if (other != this) {
    std::swap(mailtype_, other->mailtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryMailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryMailReq_descriptor_;
  metadata.reflection = MsgQueryMailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgStartMatchReq::kMatchidFieldNumber;
const int MsgStartMatchReq::kAllowgroupFieldNumber;
const int MsgStartMatchReq::kBattleserveridFieldNumber;
const int MsgStartMatchReq::kVersionFieldNumber;
#endif  // !_MSC_VER

MsgStartMatchReq::MsgStartMatchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgStartMatchReq::InitAsDefaultInstance() {
}

MsgStartMatchReq::MsgStartMatchReq(const MsgStartMatchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgStartMatchReq::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  allowgroup_ = false;
  battleserverid_ = 0u;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStartMatchReq::~MsgStartMatchReq() {
  SharedDtor();
}

void MsgStartMatchReq::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void MsgStartMatchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgStartMatchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStartMatchReq_descriptor_;
}

const MsgStartMatchReq& MsgStartMatchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgStartMatchReq* MsgStartMatchReq::default_instance_ = NULL;

MsgStartMatchReq* MsgStartMatchReq::New() const {
  return new MsgStartMatchReq;
}

void MsgStartMatchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0u;
    allowgroup_ = false;
    battleserverid_ = 0u;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStartMatchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_allowgroup;
        break;
      }

      // optional bool allowgroup = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allowgroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowgroup_)));
          set_has_allowgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battleserverid;
        break;
      }

      // optional uint32 battleserverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleserverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleserverid_)));
          set_has_battleserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }

      // required string version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgStartMatchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // optional bool allowgroup = 2;
  if (has_allowgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->allowgroup(), output);
  }

  // optional uint32 battleserverid = 3;
  if (has_battleserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->battleserverid(), output);
  }

  // required string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgStartMatchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // optional bool allowgroup = 2;
  if (has_allowgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->allowgroup(), target);
  }

  // optional uint32 battleserverid = 3;
  if (has_battleserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->battleserverid(), target);
  }

  // required string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgStartMatchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // optional bool allowgroup = 2;
    if (has_allowgroup()) {
      total_size += 1 + 1;
    }

    // optional uint32 battleserverid = 3;
    if (has_battleserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleserverid());
    }

    // required string version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgStartMatchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStartMatchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStartMatchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStartMatchReq::MergeFrom(const MsgStartMatchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_allowgroup()) {
      set_allowgroup(from.allowgroup());
    }
    if (from.has_battleserverid()) {
      set_battleserverid(from.battleserverid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStartMatchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStartMatchReq::CopyFrom(const MsgStartMatchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStartMatchReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void MsgStartMatchReq::Swap(MsgStartMatchReq* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(allowgroup_, other->allowgroup_);
    std::swap(battleserverid_, other->battleserverid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStartMatchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStartMatchReq_descriptor_;
  metadata.reflection = MsgStartMatchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgStartMatchAck::kMatchidFieldNumber;
#endif  // !_MSC_VER

MsgStartMatchAck::MsgStartMatchAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgStartMatchAck::InitAsDefaultInstance() {
}

MsgStartMatchAck::MsgStartMatchAck(const MsgStartMatchAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgStartMatchAck::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStartMatchAck::~MsgStartMatchAck() {
  SharedDtor();
}

void MsgStartMatchAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgStartMatchAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgStartMatchAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStartMatchAck_descriptor_;
}

const MsgStartMatchAck& MsgStartMatchAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgStartMatchAck* MsgStartMatchAck::default_instance_ = NULL;

MsgStartMatchAck* MsgStartMatchAck::New() const {
  return new MsgStartMatchAck;
}

void MsgStartMatchAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStartMatchAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgStartMatchAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgStartMatchAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgStartMatchAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgStartMatchAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStartMatchAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStartMatchAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStartMatchAck::MergeFrom(const MsgStartMatchAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStartMatchAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStartMatchAck::CopyFrom(const MsgStartMatchAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStartMatchAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgStartMatchAck::Swap(MsgStartMatchAck* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStartMatchAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStartMatchAck_descriptor_;
  metadata.reflection = MsgStartMatchAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgCancelMatchReq::MsgCancelMatchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCancelMatchReq::InitAsDefaultInstance() {
}

MsgCancelMatchReq::MsgCancelMatchReq(const MsgCancelMatchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCancelMatchReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCancelMatchReq::~MsgCancelMatchReq() {
  SharedDtor();
}

void MsgCancelMatchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCancelMatchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCancelMatchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCancelMatchReq_descriptor_;
}

const MsgCancelMatchReq& MsgCancelMatchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgCancelMatchReq* MsgCancelMatchReq::default_instance_ = NULL;

MsgCancelMatchReq* MsgCancelMatchReq::New() const {
  return new MsgCancelMatchReq;
}

void MsgCancelMatchReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCancelMatchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgCancelMatchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCancelMatchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCancelMatchReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCancelMatchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCancelMatchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCancelMatchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCancelMatchReq::MergeFrom(const MsgCancelMatchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCancelMatchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCancelMatchReq::CopyFrom(const MsgCancelMatchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCancelMatchReq::IsInitialized() const {

  return true;
}

void MsgCancelMatchReq::Swap(MsgCancelMatchReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCancelMatchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCancelMatchReq_descriptor_;
  metadata.reflection = MsgCancelMatchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCancelMatchAck::kMatchidFieldNumber;
#endif  // !_MSC_VER

MsgCancelMatchAck::MsgCancelMatchAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCancelMatchAck::InitAsDefaultInstance() {
}

MsgCancelMatchAck::MsgCancelMatchAck(const MsgCancelMatchAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCancelMatchAck::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCancelMatchAck::~MsgCancelMatchAck() {
  SharedDtor();
}

void MsgCancelMatchAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgCancelMatchAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCancelMatchAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCancelMatchAck_descriptor_;
}

const MsgCancelMatchAck& MsgCancelMatchAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgCancelMatchAck* MsgCancelMatchAck::default_instance_ = NULL;

MsgCancelMatchAck* MsgCancelMatchAck::New() const {
  return new MsgCancelMatchAck;
}

void MsgCancelMatchAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCancelMatchAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCancelMatchAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCancelMatchAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCancelMatchAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCancelMatchAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCancelMatchAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCancelMatchAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCancelMatchAck::MergeFrom(const MsgCancelMatchAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCancelMatchAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCancelMatchAck::CopyFrom(const MsgCancelMatchAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCancelMatchAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgCancelMatchAck::Swap(MsgCancelMatchAck* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCancelMatchAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCancelMatchAck_descriptor_;
  metadata.reflection = MsgCancelMatchAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMatchResultAck::kMatchidFieldNumber;
const int MsgMatchResultAck::kRoomidFieldNumber;
const int MsgMatchResultAck::kServeridFieldNumber;
const int MsgMatchResultAck::kIpFieldNumber;
const int MsgMatchResultAck::kPortFieldNumber;
const int MsgMatchResultAck::kTokenFieldNumber;
#endif  // !_MSC_VER

MsgMatchResultAck::MsgMatchResultAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgMatchResultAck::InitAsDefaultInstance() {
}

MsgMatchResultAck::MsgMatchResultAck(const MsgMatchResultAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgMatchResultAck::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  roomid_ = GOOGLE_ULONGLONG(0);
  serverid_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMatchResultAck::~MsgMatchResultAck() {
  SharedDtor();
}

void MsgMatchResultAck::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void MsgMatchResultAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMatchResultAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMatchResultAck_descriptor_;
}

const MsgMatchResultAck& MsgMatchResultAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgMatchResultAck* MsgMatchResultAck::default_instance_ = NULL;

MsgMatchResultAck* MsgMatchResultAck::New() const {
  return new MsgMatchResultAck;
}

void MsgMatchResultAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0u;
    roomid_ = GOOGLE_ULONGLONG(0);
    serverid_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMatchResultAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // required uint64 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // required string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }

      // required uint32 port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_token;
        break;
      }

      // required string token = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgMatchResultAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  // required string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }

  // required uint32 port = 5;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->port(), output);
  }

  // required string token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgMatchResultAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  // required string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // required uint32 port = 5;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->port(), target);
  }

  // required string token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgMatchResultAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // required uint64 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required uint32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required string token = 6;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMatchResultAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMatchResultAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMatchResultAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMatchResultAck::MergeFrom(const MsgMatchResultAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMatchResultAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMatchResultAck::CopyFrom(const MsgMatchResultAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMatchResultAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void MsgMatchResultAck::Swap(MsgMatchResultAck* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(roomid_, other->roomid_);
    std::swap(serverid_, other->serverid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMatchResultAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMatchResultAck_descriptor_;
  metadata.reflection = MsgMatchResultAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTellMatchWaitTime::kWaittimeFieldNumber;
#endif  // !_MSC_VER

MsgTellMatchWaitTime::MsgTellMatchWaitTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgTellMatchWaitTime::InitAsDefaultInstance() {
}

MsgTellMatchWaitTime::MsgTellMatchWaitTime(const MsgTellMatchWaitTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgTellMatchWaitTime::SharedCtor() {
  _cached_size_ = 0;
  waittime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTellMatchWaitTime::~MsgTellMatchWaitTime() {
  SharedDtor();
}

void MsgTellMatchWaitTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTellMatchWaitTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTellMatchWaitTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTellMatchWaitTime_descriptor_;
}

const MsgTellMatchWaitTime& MsgTellMatchWaitTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgTellMatchWaitTime* MsgTellMatchWaitTime::default_instance_ = NULL;

MsgTellMatchWaitTime* MsgTellMatchWaitTime::New() const {
  return new MsgTellMatchWaitTime;
}

void MsgTellMatchWaitTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    waittime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTellMatchWaitTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 waittime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &waittime_)));
          set_has_waittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgTellMatchWaitTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 waittime = 1;
  if (has_waittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->waittime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgTellMatchWaitTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 waittime = 1;
  if (has_waittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->waittime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgTellMatchWaitTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 waittime = 1;
    if (has_waittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->waittime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTellMatchWaitTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTellMatchWaitTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTellMatchWaitTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTellMatchWaitTime::MergeFrom(const MsgTellMatchWaitTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_waittime()) {
      set_waittime(from.waittime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTellMatchWaitTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTellMatchWaitTime::CopyFrom(const MsgTellMatchWaitTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTellMatchWaitTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgTellMatchWaitTime::Swap(MsgTellMatchWaitTime* other) {
  if (other != this) {
    std::swap(waittime_, other->waittime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTellMatchWaitTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTellMatchWaitTime_descriptor_;
  metadata.reflection = MsgTellMatchWaitTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTellMatchPlayerCount::kCountFieldNumber;
#endif  // !_MSC_VER

MsgTellMatchPlayerCount::MsgTellMatchPlayerCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgTellMatchPlayerCount::InitAsDefaultInstance() {
}

MsgTellMatchPlayerCount::MsgTellMatchPlayerCount(const MsgTellMatchPlayerCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgTellMatchPlayerCount::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTellMatchPlayerCount::~MsgTellMatchPlayerCount() {
  SharedDtor();
}

void MsgTellMatchPlayerCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTellMatchPlayerCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTellMatchPlayerCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTellMatchPlayerCount_descriptor_;
}

const MsgTellMatchPlayerCount& MsgTellMatchPlayerCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgTellMatchPlayerCount* MsgTellMatchPlayerCount::default_instance_ = NULL;

MsgTellMatchPlayerCount* MsgTellMatchPlayerCount::New() const {
  return new MsgTellMatchPlayerCount;
}

void MsgTellMatchPlayerCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTellMatchPlayerCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgTellMatchPlayerCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgTellMatchPlayerCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgTellMatchPlayerCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTellMatchPlayerCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTellMatchPlayerCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTellMatchPlayerCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTellMatchPlayerCount::MergeFrom(const MsgTellMatchPlayerCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTellMatchPlayerCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTellMatchPlayerCount::CopyFrom(const MsgTellMatchPlayerCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTellMatchPlayerCount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgTellMatchPlayerCount::Swap(MsgTellMatchPlayerCount* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTellMatchPlayerCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTellMatchPlayerCount_descriptor_;
  metadata.reflection = MsgTellMatchPlayerCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAddFriendInviteReq::kPlayeridFieldNumber;
const int MsgAddFriendInviteReq::kMessageFieldNumber;
const int MsgAddFriendInviteReq::kNameFieldNumber;
#endif  // !_MSC_VER

MsgAddFriendInviteReq::MsgAddFriendInviteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgAddFriendInviteReq::InitAsDefaultInstance() {
}

MsgAddFriendInviteReq::MsgAddFriendInviteReq(const MsgAddFriendInviteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgAddFriendInviteReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAddFriendInviteReq::~MsgAddFriendInviteReq() {
  SharedDtor();
}

void MsgAddFriendInviteReq::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MsgAddFriendInviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgAddFriendInviteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAddFriendInviteReq_descriptor_;
}

const MsgAddFriendInviteReq& MsgAddFriendInviteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgAddFriendInviteReq* MsgAddFriendInviteReq::default_instance_ = NULL;

MsgAddFriendInviteReq* MsgAddFriendInviteReq::New() const {
  return new MsgAddFriendInviteReq;
}

void MsgAddFriendInviteReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAddFriendInviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // required string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAddFriendInviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAddFriendInviteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAddFriendInviteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAddFriendInviteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAddFriendInviteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAddFriendInviteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAddFriendInviteReq::MergeFrom(const MsgAddFriendInviteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAddFriendInviteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAddFriendInviteReq::CopyFrom(const MsgAddFriendInviteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAddFriendInviteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MsgAddFriendInviteReq::Swap(MsgAddFriendInviteReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(message_, other->message_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAddFriendInviteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAddFriendInviteReq_descriptor_;
  metadata.reflection = MsgAddFriendInviteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgReplyFriendInviteReq::kPlayeridFieldNumber;
const int MsgReplyFriendInviteReq::kOperateFieldNumber;
#endif  // !_MSC_VER

MsgReplyFriendInviteReq::MsgReplyFriendInviteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgReplyFriendInviteReq::InitAsDefaultInstance() {
}

MsgReplyFriendInviteReq::MsgReplyFriendInviteReq(const MsgReplyFriendInviteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgReplyFriendInviteReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  operate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgReplyFriendInviteReq::~MsgReplyFriendInviteReq() {
  SharedDtor();
}

void MsgReplyFriendInviteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgReplyFriendInviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgReplyFriendInviteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgReplyFriendInviteReq_descriptor_;
}

const MsgReplyFriendInviteReq& MsgReplyFriendInviteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgReplyFriendInviteReq* MsgReplyFriendInviteReq::default_instance_ = NULL;

MsgReplyFriendInviteReq* MsgReplyFriendInviteReq::New() const {
  return new MsgReplyFriendInviteReq;
}

void MsgReplyFriendInviteReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    operate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgReplyFriendInviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operate;
        break;
      }

      // required uint32 operate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgReplyFriendInviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 operate = 2;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->operate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgReplyFriendInviteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 operate = 2;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->operate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgReplyFriendInviteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 operate = 2;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgReplyFriendInviteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgReplyFriendInviteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgReplyFriendInviteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgReplyFriendInviteReq::MergeFrom(const MsgReplyFriendInviteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgReplyFriendInviteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgReplyFriendInviteReq::CopyFrom(const MsgReplyFriendInviteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgReplyFriendInviteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgReplyFriendInviteReq::Swap(MsgReplyFriendInviteReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(operate_, other->operate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgReplyFriendInviteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgReplyFriendInviteReq_descriptor_;
  metadata.reflection = MsgReplyFriendInviteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDelFriendReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

MsgDelFriendReq::MsgDelFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgDelFriendReq::InitAsDefaultInstance() {
}

MsgDelFriendReq::MsgDelFriendReq(const MsgDelFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgDelFriendReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDelFriendReq::~MsgDelFriendReq() {
  SharedDtor();
}

void MsgDelFriendReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgDelFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDelFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDelFriendReq_descriptor_;
}

const MsgDelFriendReq& MsgDelFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgDelFriendReq* MsgDelFriendReq::default_instance_ = NULL;

MsgDelFriendReq* MsgDelFriendReq::New() const {
  return new MsgDelFriendReq;
}

void MsgDelFriendReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDelFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgDelFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgDelFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgDelFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDelFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDelFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDelFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDelFriendReq::MergeFrom(const MsgDelFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDelFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDelFriendReq::CopyFrom(const MsgDelFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDelFriendReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgDelFriendReq::Swap(MsgDelFriendReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDelFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDelFriendReq_descriptor_;
  metadata.reflection = MsgDelFriendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSetRefuseFriendInviteReq::kRefuseFieldNumber;
#endif  // !_MSC_VER

MsgSetRefuseFriendInviteReq::MsgSetRefuseFriendInviteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSetRefuseFriendInviteReq::InitAsDefaultInstance() {
}

MsgSetRefuseFriendInviteReq::MsgSetRefuseFriendInviteReq(const MsgSetRefuseFriendInviteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSetRefuseFriendInviteReq::SharedCtor() {
  _cached_size_ = 0;
  refuse_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSetRefuseFriendInviteReq::~MsgSetRefuseFriendInviteReq() {
  SharedDtor();
}

void MsgSetRefuseFriendInviteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSetRefuseFriendInviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSetRefuseFriendInviteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSetRefuseFriendInviteReq_descriptor_;
}

const MsgSetRefuseFriendInviteReq& MsgSetRefuseFriendInviteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgSetRefuseFriendInviteReq* MsgSetRefuseFriendInviteReq::default_instance_ = NULL;

MsgSetRefuseFriendInviteReq* MsgSetRefuseFriendInviteReq::New() const {
  return new MsgSetRefuseFriendInviteReq;
}

void MsgSetRefuseFriendInviteReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refuse_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSetRefuseFriendInviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 refuse = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refuse_)));
          set_has_refuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSetRefuseFriendInviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 refuse = 1;
  if (has_refuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->refuse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSetRefuseFriendInviteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 refuse = 1;
  if (has_refuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->refuse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSetRefuseFriendInviteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 refuse = 1;
    if (has_refuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refuse());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSetRefuseFriendInviteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSetRefuseFriendInviteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSetRefuseFriendInviteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSetRefuseFriendInviteReq::MergeFrom(const MsgSetRefuseFriendInviteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refuse()) {
      set_refuse(from.refuse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSetRefuseFriendInviteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSetRefuseFriendInviteReq::CopyFrom(const MsgSetRefuseFriendInviteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSetRefuseFriendInviteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgSetRefuseFriendInviteReq::Swap(MsgSetRefuseFriendInviteReq* other) {
  if (other != this) {
    std::swap(refuse_, other->refuse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSetRefuseFriendInviteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSetRefuseFriendInviteReq_descriptor_;
  metadata.reflection = MsgSetRefuseFriendInviteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgEnterChatReq::MsgEnterChatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgEnterChatReq::InitAsDefaultInstance() {
}

MsgEnterChatReq::MsgEnterChatReq(const MsgEnterChatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgEnterChatReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgEnterChatReq::~MsgEnterChatReq() {
  SharedDtor();
}

void MsgEnterChatReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgEnterChatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgEnterChatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgEnterChatReq_descriptor_;
}

const MsgEnterChatReq& MsgEnterChatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgEnterChatReq* MsgEnterChatReq::default_instance_ = NULL;

MsgEnterChatReq* MsgEnterChatReq::New() const {
  return new MsgEnterChatReq;
}

void MsgEnterChatReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgEnterChatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgEnterChatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgEnterChatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgEnterChatReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgEnterChatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgEnterChatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgEnterChatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgEnterChatReq::MergeFrom(const MsgEnterChatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgEnterChatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgEnterChatReq::CopyFrom(const MsgEnterChatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgEnterChatReq::IsInitialized() const {

  return true;
}

void MsgEnterChatReq::Swap(MsgEnterChatReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgEnterChatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgEnterChatReq_descriptor_;
  metadata.reflection = MsgEnterChatReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSendChatReq::kChatinfoFieldNumber;
const int MsgSendChatReq::kIsvoiceFieldNumber;
#endif  // !_MSC_VER

MsgSendChatReq::MsgSendChatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSendChatReq::InitAsDefaultInstance() {
}

MsgSendChatReq::MsgSendChatReq(const MsgSendChatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSendChatReq::SharedCtor() {
  _cached_size_ = 0;
  chatinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isvoice_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSendChatReq::~MsgSendChatReq() {
  SharedDtor();
}

void MsgSendChatReq::SharedDtor() {
  if (chatinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete chatinfo_;
  }
  if (this != default_instance_) {
  }
}

void MsgSendChatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSendChatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSendChatReq_descriptor_;
}

const MsgSendChatReq& MsgSendChatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgSendChatReq* MsgSendChatReq::default_instance_ = NULL;

MsgSendChatReq* MsgSendChatReq::New() const {
  return new MsgSendChatReq;
}

void MsgSendChatReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chatinfo()) {
      if (chatinfo_ != &::google::protobuf::internal::kEmptyString) {
        chatinfo_->clear();
      }
    }
    isvoice_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSendChatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string chatinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chatinfo().data(), this->chatinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isvoice;
        break;
      }

      // required uint32 isvoice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isvoice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isvoice_)));
          set_has_isvoice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSendChatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string chatinfo = 1;
  if (has_chatinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatinfo().data(), this->chatinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->chatinfo(), output);
  }

  // required uint32 isvoice = 2;
  if (has_isvoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->isvoice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSendChatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string chatinfo = 1;
  if (has_chatinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatinfo().data(), this->chatinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chatinfo(), target);
  }

  // required uint32 isvoice = 2;
  if (has_isvoice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->isvoice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSendChatReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string chatinfo = 1;
    if (has_chatinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatinfo());
    }

    // required uint32 isvoice = 2;
    if (has_isvoice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isvoice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSendChatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSendChatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSendChatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSendChatReq::MergeFrom(const MsgSendChatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chatinfo()) {
      set_chatinfo(from.chatinfo());
    }
    if (from.has_isvoice()) {
      set_isvoice(from.isvoice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSendChatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSendChatReq::CopyFrom(const MsgSendChatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSendChatReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgSendChatReq::Swap(MsgSendChatReq* other) {
  if (other != this) {
    std::swap(chatinfo_, other->chatinfo_);
    std::swap(isvoice_, other->isvoice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSendChatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSendChatReq_descriptor_;
  metadata.reflection = MsgSendChatReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSendChatInfo::kChatinfoFieldNumber;
const int MsgSendChatInfo::kIsvoiceFieldNumber;
const int MsgSendChatInfo::kPlayernameFieldNumber;
const int MsgSendChatInfo::kPlayeridFieldNumber;
const int MsgSendChatInfo::kPlayericonFieldNumber;
const int MsgSendChatInfo::kPlayergradeFieldNumber;
const int MsgSendChatInfo::kPlayersexFieldNumber;
const int MsgSendChatInfo::kPlayericonboxFieldNumber;
const int MsgSendChatInfo::kPlayerserveridFieldNumber;
#endif  // !_MSC_VER

MsgSendChatInfo::MsgSendChatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSendChatInfo::InitAsDefaultInstance() {
}

MsgSendChatInfo::MsgSendChatInfo(const MsgSendChatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSendChatInfo::SharedCtor() {
  _cached_size_ = 0;
  chatinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isvoice_ = 0u;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerid_ = 0u;
  playericon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playergrade_ = 0u;
  playersex_ = 0u;
  playericonbox_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerserverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSendChatInfo::~MsgSendChatInfo() {
  SharedDtor();
}

void MsgSendChatInfo::SharedDtor() {
  if (chatinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete chatinfo_;
  }
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playericon_ != &::google::protobuf::internal::kEmptyString) {
    delete playericon_;
  }
  if (playericonbox_ != &::google::protobuf::internal::kEmptyString) {
    delete playericonbox_;
  }
  if (this != default_instance_) {
  }
}

void MsgSendChatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSendChatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSendChatInfo_descriptor_;
}

const MsgSendChatInfo& MsgSendChatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgSendChatInfo* MsgSendChatInfo::default_instance_ = NULL;

MsgSendChatInfo* MsgSendChatInfo::New() const {
  return new MsgSendChatInfo;
}

void MsgSendChatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chatinfo()) {
      if (chatinfo_ != &::google::protobuf::internal::kEmptyString) {
        chatinfo_->clear();
      }
    }
    isvoice_ = 0u;
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    playerid_ = 0u;
    if (has_playericon()) {
      if (playericon_ != &::google::protobuf::internal::kEmptyString) {
        playericon_->clear();
      }
    }
    playergrade_ = 0u;
    playersex_ = 0u;
    if (has_playericonbox()) {
      if (playericonbox_ != &::google::protobuf::internal::kEmptyString) {
        playericonbox_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    playerserverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSendChatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string chatinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chatinfo().data(), this->chatinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isvoice;
        break;
      }

      // required uint32 isvoice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isvoice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isvoice_)));
          set_has_isvoice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playername;
        break;
      }

      // required string playername = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_playericon;
        break;
      }

      // required string playericon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playericon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playericon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playericon().data(), this->playericon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_playergrade;
        break;
      }

      // required uint32 playergrade = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playergrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playergrade_)));
          set_has_playergrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_playersex;
        break;
      }

      // required uint32 playersex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playersex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playersex_)));
          set_has_playersex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_playericonbox;
        break;
      }

      // required string playericonbox = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playericonbox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playericonbox()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playericonbox().data(), this->playericonbox().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_playerserverid;
        break;
      }

      // required uint32 playerserverid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerserverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerserverid_)));
          set_has_playerserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSendChatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string chatinfo = 1;
  if (has_chatinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatinfo().data(), this->chatinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->chatinfo(), output);
  }

  // required uint32 isvoice = 2;
  if (has_isvoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->isvoice(), output);
  }

  // required string playername = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->playername(), output);
  }

  // required uint32 playerid = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->playerid(), output);
  }

  // required string playericon = 5;
  if (has_playericon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playericon().data(), this->playericon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->playericon(), output);
  }

  // required uint32 playergrade = 6;
  if (has_playergrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->playergrade(), output);
  }

  // required uint32 playersex = 7;
  if (has_playersex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->playersex(), output);
  }

  // required string playericonbox = 8;
  if (has_playericonbox()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playericonbox().data(), this->playericonbox().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->playericonbox(), output);
  }

  // required uint32 playerserverid = 9;
  if (has_playerserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->playerserverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSendChatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string chatinfo = 1;
  if (has_chatinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatinfo().data(), this->chatinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chatinfo(), target);
  }

  // required uint32 isvoice = 2;
  if (has_isvoice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->isvoice(), target);
  }

  // required string playername = 3;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playername(), target);
  }

  // required uint32 playerid = 4;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->playerid(), target);
  }

  // required string playericon = 5;
  if (has_playericon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playericon().data(), this->playericon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->playericon(), target);
  }

  // required uint32 playergrade = 6;
  if (has_playergrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->playergrade(), target);
  }

  // required uint32 playersex = 7;
  if (has_playersex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->playersex(), target);
  }

  // required string playericonbox = 8;
  if (has_playericonbox()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playericonbox().data(), this->playericonbox().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->playericonbox(), target);
  }

  // required uint32 playerserverid = 9;
  if (has_playerserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->playerserverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSendChatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string chatinfo = 1;
    if (has_chatinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatinfo());
    }

    // required uint32 isvoice = 2;
    if (has_isvoice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isvoice());
    }

    // required string playername = 3;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // required uint32 playerid = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required string playericon = 5;
    if (has_playericon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playericon());
    }

    // required uint32 playergrade = 6;
    if (has_playergrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playergrade());
    }

    // required uint32 playersex = 7;
    if (has_playersex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playersex());
    }

    // required string playericonbox = 8;
    if (has_playericonbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playericonbox());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 playerserverid = 9;
    if (has_playerserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerserverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSendChatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSendChatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSendChatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSendChatInfo::MergeFrom(const MsgSendChatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chatinfo()) {
      set_chatinfo(from.chatinfo());
    }
    if (from.has_isvoice()) {
      set_isvoice(from.isvoice());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playericon()) {
      set_playericon(from.playericon());
    }
    if (from.has_playergrade()) {
      set_playergrade(from.playergrade());
    }
    if (from.has_playersex()) {
      set_playersex(from.playersex());
    }
    if (from.has_playericonbox()) {
      set_playericonbox(from.playericonbox());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_playerserverid()) {
      set_playerserverid(from.playerserverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSendChatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSendChatInfo::CopyFrom(const MsgSendChatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSendChatInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void MsgSendChatInfo::Swap(MsgSendChatInfo* other) {
  if (other != this) {
    std::swap(chatinfo_, other->chatinfo_);
    std::swap(isvoice_, other->isvoice_);
    std::swap(playername_, other->playername_);
    std::swap(playerid_, other->playerid_);
    std::swap(playericon_, other->playericon_);
    std::swap(playergrade_, other->playergrade_);
    std::swap(playersex_, other->playersex_);
    std::swap(playericonbox_, other->playericonbox_);
    std::swap(playerserverid_, other->playerserverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSendChatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSendChatInfo_descriptor_;
  metadata.reflection = MsgSendChatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgLeaveChatReq::MsgLeaveChatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgLeaveChatReq::InitAsDefaultInstance() {
}

MsgLeaveChatReq::MsgLeaveChatReq(const MsgLeaveChatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgLeaveChatReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLeaveChatReq::~MsgLeaveChatReq() {
  SharedDtor();
}

void MsgLeaveChatReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgLeaveChatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLeaveChatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLeaveChatReq_descriptor_;
}

const MsgLeaveChatReq& MsgLeaveChatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgLeaveChatReq* MsgLeaveChatReq::default_instance_ = NULL;

MsgLeaveChatReq* MsgLeaveChatReq::New() const {
  return new MsgLeaveChatReq;
}

void MsgLeaveChatReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLeaveChatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgLeaveChatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLeaveChatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLeaveChatReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLeaveChatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLeaveChatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLeaveChatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLeaveChatReq::MergeFrom(const MsgLeaveChatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLeaveChatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLeaveChatReq::CopyFrom(const MsgLeaveChatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLeaveChatReq::IsInitialized() const {

  return true;
}

void MsgLeaveChatReq::Swap(MsgLeaveChatReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLeaveChatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLeaveChatReq_descriptor_;
  metadata.reflection = MsgLeaveChatReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSendOneByOneChatReq::kChatinfoFieldNumber;
const int MsgSendOneByOneChatReq::kIsvoiceFieldNumber;
const int MsgSendOneByOneChatReq::kPlayeridFieldNumber;
const int MsgSendOneByOneChatReq::kChattypeFieldNumber;
const int MsgSendOneByOneChatReq::kSelfinfoFieldNumber;
const int MsgSendOneByOneChatReq::kServeridFieldNumber;
#endif  // !_MSC_VER

MsgSendOneByOneChatReq::MsgSendOneByOneChatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSendOneByOneChatReq::InitAsDefaultInstance() {
}

MsgSendOneByOneChatReq::MsgSendOneByOneChatReq(const MsgSendOneByOneChatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSendOneByOneChatReq::SharedCtor() {
  _cached_size_ = 0;
  chatinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isvoice_ = 0u;
  playerid_ = 0u;
  chattype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  selfinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSendOneByOneChatReq::~MsgSendOneByOneChatReq() {
  SharedDtor();
}

void MsgSendOneByOneChatReq::SharedDtor() {
  if (chatinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete chatinfo_;
  }
  if (chattype_ != &::google::protobuf::internal::kEmptyString) {
    delete chattype_;
  }
  if (selfinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete selfinfo_;
  }
  if (this != default_instance_) {
  }
}

void MsgSendOneByOneChatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSendOneByOneChatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSendOneByOneChatReq_descriptor_;
}

const MsgSendOneByOneChatReq& MsgSendOneByOneChatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgSendOneByOneChatReq* MsgSendOneByOneChatReq::default_instance_ = NULL;

MsgSendOneByOneChatReq* MsgSendOneByOneChatReq::New() const {
  return new MsgSendOneByOneChatReq;
}

void MsgSendOneByOneChatReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chatinfo()) {
      if (chatinfo_ != &::google::protobuf::internal::kEmptyString) {
        chatinfo_->clear();
      }
    }
    isvoice_ = 0u;
    playerid_ = 0u;
    if (has_chattype()) {
      if (chattype_ != &::google::protobuf::internal::kEmptyString) {
        chattype_->clear();
      }
    }
    if (has_selfinfo()) {
      if (selfinfo_ != &::google::protobuf::internal::kEmptyString) {
        selfinfo_->clear();
      }
    }
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSendOneByOneChatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string chatinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chatinfo().data(), this->chatinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isvoice;
        break;
      }

      // required uint32 isvoice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isvoice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isvoice_)));
          set_has_isvoice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_chattype;
        break;
      }

      // required string chattype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chattype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chattype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chattype().data(), this->chattype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_selfinfo;
        break;
      }

      // required string selfinfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selfinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->selfinfo().data(), this->selfinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSendOneByOneChatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string chatinfo = 1;
  if (has_chatinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatinfo().data(), this->chatinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->chatinfo(), output);
  }

  // required uint32 isvoice = 2;
  if (has_isvoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->isvoice(), output);
  }

  // required uint32 playerid = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerid(), output);
  }

  // required string chattype = 4;
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chattype().data(), this->chattype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->chattype(), output);
  }

  // required string selfinfo = 5;
  if (has_selfinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfinfo().data(), this->selfinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->selfinfo(), output);
  }

  // required uint32 serverid = 6;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSendOneByOneChatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string chatinfo = 1;
  if (has_chatinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatinfo().data(), this->chatinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chatinfo(), target);
  }

  // required uint32 isvoice = 2;
  if (has_isvoice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->isvoice(), target);
  }

  // required uint32 playerid = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerid(), target);
  }

  // required string chattype = 4;
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chattype().data(), this->chattype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->chattype(), target);
  }

  // required string selfinfo = 5;
  if (has_selfinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->selfinfo().data(), this->selfinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->selfinfo(), target);
  }

  // required uint32 serverid = 6;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSendOneByOneChatReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string chatinfo = 1;
    if (has_chatinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatinfo());
    }

    // required uint32 isvoice = 2;
    if (has_isvoice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isvoice());
    }

    // required uint32 playerid = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required string chattype = 4;
    if (has_chattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chattype());
    }

    // required string selfinfo = 5;
    if (has_selfinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->selfinfo());
    }

    // required uint32 serverid = 6;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSendOneByOneChatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSendOneByOneChatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSendOneByOneChatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSendOneByOneChatReq::MergeFrom(const MsgSendOneByOneChatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chatinfo()) {
      set_chatinfo(from.chatinfo());
    }
    if (from.has_isvoice()) {
      set_isvoice(from.isvoice());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_selfinfo()) {
      set_selfinfo(from.selfinfo());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSendOneByOneChatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSendOneByOneChatReq::CopyFrom(const MsgSendOneByOneChatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSendOneByOneChatReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void MsgSendOneByOneChatReq::Swap(MsgSendOneByOneChatReq* other) {
  if (other != this) {
    std::swap(chatinfo_, other->chatinfo_);
    std::swap(isvoice_, other->isvoice_);
    std::swap(playerid_, other->playerid_);
    std::swap(chattype_, other->chattype_);
    std::swap(selfinfo_, other->selfinfo_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSendOneByOneChatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSendOneByOneChatReq_descriptor_;
  metadata.reflection = MsgSendOneByOneChatReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSendOneByOneChatInfo::kChatinfoFieldNumber;
const int MsgSendOneByOneChatInfo::kIsvoiceFieldNumber;
const int MsgSendOneByOneChatInfo::kPlayeridFieldNumber;
const int MsgSendOneByOneChatInfo::kChattypeFieldNumber;
const int MsgSendOneByOneChatInfo::kPlayerinfoFieldNumber;
const int MsgSendOneByOneChatInfo::kServeridFieldNumber;
#endif  // !_MSC_VER

MsgSendOneByOneChatInfo::MsgSendOneByOneChatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSendOneByOneChatInfo::InitAsDefaultInstance() {
}

MsgSendOneByOneChatInfo::MsgSendOneByOneChatInfo(const MsgSendOneByOneChatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSendOneByOneChatInfo::SharedCtor() {
  _cached_size_ = 0;
  chatinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isvoice_ = 0u;
  playerid_ = 0u;
  chattype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playerinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSendOneByOneChatInfo::~MsgSendOneByOneChatInfo() {
  SharedDtor();
}

void MsgSendOneByOneChatInfo::SharedDtor() {
  if (chatinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete chatinfo_;
  }
  if (chattype_ != &::google::protobuf::internal::kEmptyString) {
    delete chattype_;
  }
  if (playerinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete playerinfo_;
  }
  if (this != default_instance_) {
  }
}

void MsgSendOneByOneChatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSendOneByOneChatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSendOneByOneChatInfo_descriptor_;
}

const MsgSendOneByOneChatInfo& MsgSendOneByOneChatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgSendOneByOneChatInfo* MsgSendOneByOneChatInfo::default_instance_ = NULL;

MsgSendOneByOneChatInfo* MsgSendOneByOneChatInfo::New() const {
  return new MsgSendOneByOneChatInfo;
}

void MsgSendOneByOneChatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chatinfo()) {
      if (chatinfo_ != &::google::protobuf::internal::kEmptyString) {
        chatinfo_->clear();
      }
    }
    isvoice_ = 0u;
    playerid_ = 0u;
    if (has_chattype()) {
      if (chattype_ != &::google::protobuf::internal::kEmptyString) {
        chattype_->clear();
      }
    }
    if (has_playerinfo()) {
      if (playerinfo_ != &::google::protobuf::internal::kEmptyString) {
        playerinfo_->clear();
      }
    }
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSendOneByOneChatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string chatinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chatinfo().data(), this->chatinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isvoice;
        break;
      }

      // required uint32 isvoice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isvoice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isvoice_)));
          set_has_isvoice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_chattype;
        break;
      }

      // required string chattype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chattype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chattype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chattype().data(), this->chattype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_playerinfo;
        break;
      }

      // required string playerinfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playerinfo().data(), this->playerinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSendOneByOneChatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string chatinfo = 1;
  if (has_chatinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatinfo().data(), this->chatinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->chatinfo(), output);
  }

  // required uint32 isvoice = 2;
  if (has_isvoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->isvoice(), output);
  }

  // required uint32 playerid = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerid(), output);
  }

  // required string chattype = 4;
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chattype().data(), this->chattype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->chattype(), output);
  }

  // required string playerinfo = 5;
  if (has_playerinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerinfo().data(), this->playerinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->playerinfo(), output);
  }

  // required uint32 serverid = 6;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSendOneByOneChatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string chatinfo = 1;
  if (has_chatinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatinfo().data(), this->chatinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chatinfo(), target);
  }

  // required uint32 isvoice = 2;
  if (has_isvoice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->isvoice(), target);
  }

  // required uint32 playerid = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerid(), target);
  }

  // required string chattype = 4;
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chattype().data(), this->chattype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->chattype(), target);
  }

  // required string playerinfo = 5;
  if (has_playerinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playerinfo().data(), this->playerinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->playerinfo(), target);
  }

  // required uint32 serverid = 6;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSendOneByOneChatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string chatinfo = 1;
    if (has_chatinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatinfo());
    }

    // required uint32 isvoice = 2;
    if (has_isvoice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isvoice());
    }

    // required uint32 playerid = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required string chattype = 4;
    if (has_chattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chattype());
    }

    // required string playerinfo = 5;
    if (has_playerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playerinfo());
    }

    // required uint32 serverid = 6;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSendOneByOneChatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSendOneByOneChatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSendOneByOneChatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSendOneByOneChatInfo::MergeFrom(const MsgSendOneByOneChatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chatinfo()) {
      set_chatinfo(from.chatinfo());
    }
    if (from.has_isvoice()) {
      set_isvoice(from.isvoice());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
    if (from.has_playerinfo()) {
      set_playerinfo(from.playerinfo());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSendOneByOneChatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSendOneByOneChatInfo::CopyFrom(const MsgSendOneByOneChatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSendOneByOneChatInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void MsgSendOneByOneChatInfo::Swap(MsgSendOneByOneChatInfo* other) {
  if (other != this) {
    std::swap(chatinfo_, other->chatinfo_);
    std::swap(isvoice_, other->isvoice_);
    std::swap(playerid_, other->playerid_);
    std::swap(chattype_, other->chattype_);
    std::swap(playerinfo_, other->playerinfo_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSendOneByOneChatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSendOneByOneChatInfo_descriptor_;
  metadata.reflection = MsgSendOneByOneChatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDebugCommandReq::kCommandFieldNumber;
const int MsgDebugCommandReq::kParamsFieldNumber;
#endif  // !_MSC_VER

MsgDebugCommandReq::MsgDebugCommandReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgDebugCommandReq::InitAsDefaultInstance() {
}

MsgDebugCommandReq::MsgDebugCommandReq(const MsgDebugCommandReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgDebugCommandReq::SharedCtor() {
  _cached_size_ = 0;
  command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDebugCommandReq::~MsgDebugCommandReq() {
  SharedDtor();
}

void MsgDebugCommandReq::SharedDtor() {
  if (command_ != &::google::protobuf::internal::kEmptyString) {
    delete command_;
  }
  if (this != default_instance_) {
  }
}

void MsgDebugCommandReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDebugCommandReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDebugCommandReq_descriptor_;
}

const MsgDebugCommandReq& MsgDebugCommandReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgDebugCommandReq* MsgDebugCommandReq::default_instance_ = NULL;

MsgDebugCommandReq* MsgDebugCommandReq::New() const {
  return new MsgDebugCommandReq;
}

void MsgDebugCommandReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_command()) {
      if (command_ != &::google::protobuf::internal::kEmptyString) {
        command_->clear();
      }
    }
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDebugCommandReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_params;
        break;
      }

      // repeated string params = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->params(this->params_size() - 1).data(),
            this->params(this->params_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_params;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgDebugCommandReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->command(), output);
  }

  // repeated string params = 2;
  for (int i = 0; i < this->params_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->params(i).data(), this->params(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgDebugCommandReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }

  // repeated string params = 2;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->params(i).data(), this->params(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgDebugCommandReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }

  }
  // repeated string params = 2;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDebugCommandReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDebugCommandReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDebugCommandReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDebugCommandReq::MergeFrom(const MsgDebugCommandReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDebugCommandReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDebugCommandReq::CopyFrom(const MsgDebugCommandReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDebugCommandReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgDebugCommandReq::Swap(MsgDebugCommandReq* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDebugCommandReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDebugCommandReq_descriptor_;
  metadata.reflection = MsgDebugCommandReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgShowRewardAgent::kRewardFieldNumber;
#endif  // !_MSC_VER

MsgShowRewardAgent::MsgShowRewardAgent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgShowRewardAgent::InitAsDefaultInstance() {
}

MsgShowRewardAgent::MsgShowRewardAgent(const MsgShowRewardAgent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgShowRewardAgent::SharedCtor() {
  _cached_size_ = 0;
  reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgShowRewardAgent::~MsgShowRewardAgent() {
  SharedDtor();
}

void MsgShowRewardAgent::SharedDtor() {
  if (reward_ != &::google::protobuf::internal::kEmptyString) {
    delete reward_;
  }
  if (this != default_instance_) {
  }
}

void MsgShowRewardAgent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgShowRewardAgent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgShowRewardAgent_descriptor_;
}

const MsgShowRewardAgent& MsgShowRewardAgent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgShowRewardAgent* MsgShowRewardAgent::default_instance_ = NULL;

MsgShowRewardAgent* MsgShowRewardAgent::New() const {
  return new MsgShowRewardAgent;
}

void MsgShowRewardAgent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reward()) {
      if (reward_ != &::google::protobuf::internal::kEmptyString) {
        reward_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgShowRewardAgent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reward().data(), this->reward().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgShowRewardAgent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string reward = 1;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reward().data(), this->reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgShowRewardAgent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string reward = 1;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reward().data(), this->reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgShowRewardAgent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string reward = 1;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgShowRewardAgent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgShowRewardAgent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgShowRewardAgent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgShowRewardAgent::MergeFrom(const MsgShowRewardAgent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgShowRewardAgent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgShowRewardAgent::CopyFrom(const MsgShowRewardAgent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgShowRewardAgent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgShowRewardAgent::Swap(MsgShowRewardAgent* other) {
  if (other != this) {
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgShowRewardAgent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgShowRewardAgent_descriptor_;
  metadata.reflection = MsgShowRewardAgent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSendGroupChatReq::kChatinfoFieldNumber;
const int MsgSendGroupChatReq::kIsvoiceFieldNumber;
#endif  // !_MSC_VER

MsgSendGroupChatReq::MsgSendGroupChatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSendGroupChatReq::InitAsDefaultInstance() {
}

MsgSendGroupChatReq::MsgSendGroupChatReq(const MsgSendGroupChatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSendGroupChatReq::SharedCtor() {
  _cached_size_ = 0;
  chatinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isvoice_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSendGroupChatReq::~MsgSendGroupChatReq() {
  SharedDtor();
}

void MsgSendGroupChatReq::SharedDtor() {
  if (chatinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete chatinfo_;
  }
  if (this != default_instance_) {
  }
}

void MsgSendGroupChatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSendGroupChatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSendGroupChatReq_descriptor_;
}

const MsgSendGroupChatReq& MsgSendGroupChatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgSendGroupChatReq* MsgSendGroupChatReq::default_instance_ = NULL;

MsgSendGroupChatReq* MsgSendGroupChatReq::New() const {
  return new MsgSendGroupChatReq;
}

void MsgSendGroupChatReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chatinfo()) {
      if (chatinfo_ != &::google::protobuf::internal::kEmptyString) {
        chatinfo_->clear();
      }
    }
    isvoice_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSendGroupChatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string chatinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chatinfo().data(), this->chatinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isvoice;
        break;
      }

      // required uint32 isvoice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isvoice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isvoice_)));
          set_has_isvoice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSendGroupChatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string chatinfo = 1;
  if (has_chatinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatinfo().data(), this->chatinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->chatinfo(), output);
  }

  // required uint32 isvoice = 2;
  if (has_isvoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->isvoice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSendGroupChatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string chatinfo = 1;
  if (has_chatinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatinfo().data(), this->chatinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chatinfo(), target);
  }

  // required uint32 isvoice = 2;
  if (has_isvoice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->isvoice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSendGroupChatReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string chatinfo = 1;
    if (has_chatinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatinfo());
    }

    // required uint32 isvoice = 2;
    if (has_isvoice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isvoice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSendGroupChatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSendGroupChatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSendGroupChatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSendGroupChatReq::MergeFrom(const MsgSendGroupChatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chatinfo()) {
      set_chatinfo(from.chatinfo());
    }
    if (from.has_isvoice()) {
      set_isvoice(from.isvoice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSendGroupChatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSendGroupChatReq::CopyFrom(const MsgSendGroupChatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSendGroupChatReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgSendGroupChatReq::Swap(MsgSendGroupChatReq* other) {
  if (other != this) {
    std::swap(chatinfo_, other->chatinfo_);
    std::swap(isvoice_, other->isvoice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSendGroupChatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSendGroupChatReq_descriptor_;
  metadata.reflection = MsgSendGroupChatReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSendGroupChatInfo::kChatinfoFieldNumber;
const int MsgSendGroupChatInfo::kIsvoiceFieldNumber;
const int MsgSendGroupChatInfo::kPlayeridFieldNumber;
#endif  // !_MSC_VER

MsgSendGroupChatInfo::MsgSendGroupChatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSendGroupChatInfo::InitAsDefaultInstance() {
}

MsgSendGroupChatInfo::MsgSendGroupChatInfo(const MsgSendGroupChatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSendGroupChatInfo::SharedCtor() {
  _cached_size_ = 0;
  chatinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isvoice_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSendGroupChatInfo::~MsgSendGroupChatInfo() {
  SharedDtor();
}

void MsgSendGroupChatInfo::SharedDtor() {
  if (chatinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete chatinfo_;
  }
  if (this != default_instance_) {
  }
}

void MsgSendGroupChatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSendGroupChatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSendGroupChatInfo_descriptor_;
}

const MsgSendGroupChatInfo& MsgSendGroupChatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgSendGroupChatInfo* MsgSendGroupChatInfo::default_instance_ = NULL;

MsgSendGroupChatInfo* MsgSendGroupChatInfo::New() const {
  return new MsgSendGroupChatInfo;
}

void MsgSendGroupChatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chatinfo()) {
      if (chatinfo_ != &::google::protobuf::internal::kEmptyString) {
        chatinfo_->clear();
      }
    }
    isvoice_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSendGroupChatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string chatinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chatinfo().data(), this->chatinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isvoice;
        break;
      }

      // required uint32 isvoice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isvoice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isvoice_)));
          set_has_isvoice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSendGroupChatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string chatinfo = 1;
  if (has_chatinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatinfo().data(), this->chatinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->chatinfo(), output);
  }

  // required uint32 isvoice = 2;
  if (has_isvoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->isvoice(), output);
  }

  // required uint32 playerid = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSendGroupChatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string chatinfo = 1;
  if (has_chatinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatinfo().data(), this->chatinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chatinfo(), target);
  }

  // required uint32 isvoice = 2;
  if (has_isvoice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->isvoice(), target);
  }

  // required uint32 playerid = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSendGroupChatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string chatinfo = 1;
    if (has_chatinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatinfo());
    }

    // required uint32 isvoice = 2;
    if (has_isvoice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isvoice());
    }

    // required uint32 playerid = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSendGroupChatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSendGroupChatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSendGroupChatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSendGroupChatInfo::MergeFrom(const MsgSendGroupChatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chatinfo()) {
      set_chatinfo(from.chatinfo());
    }
    if (from.has_isvoice()) {
      set_isvoice(from.isvoice());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSendGroupChatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSendGroupChatInfo::CopyFrom(const MsgSendGroupChatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSendGroupChatInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MsgSendGroupChatInfo::Swap(MsgSendGroupChatInfo* other) {
  if (other != this) {
    std::swap(chatinfo_, other->chatinfo_);
    std::swap(isvoice_, other->isvoice_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSendGroupChatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSendGroupChatInfo_descriptor_;
  metadata.reflection = MsgSendGroupChatInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBuyStoreReq::kBuytypeFieldNumber;
const int MsgBuyStoreReq::kShopidFieldNumber;
const int MsgBuyStoreReq::kNumFieldNumber;
#endif  // !_MSC_VER

MsgBuyStoreReq::MsgBuyStoreReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgBuyStoreReq::InitAsDefaultInstance() {
}

MsgBuyStoreReq::MsgBuyStoreReq(const MsgBuyStoreReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgBuyStoreReq::SharedCtor() {
  _cached_size_ = 0;
  buytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shopid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBuyStoreReq::~MsgBuyStoreReq() {
  SharedDtor();
}

void MsgBuyStoreReq::SharedDtor() {
  if (buytype_ != &::google::protobuf::internal::kEmptyString) {
    delete buytype_;
  }
  if (this != default_instance_) {
  }
}

void MsgBuyStoreReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBuyStoreReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBuyStoreReq_descriptor_;
}

const MsgBuyStoreReq& MsgBuyStoreReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgBuyStoreReq* MsgBuyStoreReq::default_instance_ = NULL;

MsgBuyStoreReq* MsgBuyStoreReq::New() const {
  return new MsgBuyStoreReq;
}

void MsgBuyStoreReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_buytype()) {
      if (buytype_ != &::google::protobuf::internal::kEmptyString) {
        buytype_->clear();
      }
    }
    shopid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBuyStoreReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string buytype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buytype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->buytype().data(), this->buytype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shopid;
        break;
      }

      // required uint32 shopid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shopid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgBuyStoreReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string buytype = 1;
  if (has_buytype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buytype().data(), this->buytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->buytype(), output);
  }

  // required uint32 shopid = 2;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shopid(), output);
  }

  // required uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgBuyStoreReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string buytype = 1;
  if (has_buytype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buytype().data(), this->buytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->buytype(), target);
  }

  // required uint32 shopid = 2;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shopid(), target);
  }

  // required uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgBuyStoreReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string buytype = 1;
    if (has_buytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buytype());
    }

    // required uint32 shopid = 2;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shopid());
    }

    // required uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBuyStoreReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBuyStoreReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBuyStoreReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBuyStoreReq::MergeFrom(const MsgBuyStoreReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buytype()) {
      set_buytype(from.buytype());
    }
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBuyStoreReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBuyStoreReq::CopyFrom(const MsgBuyStoreReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBuyStoreReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MsgBuyStoreReq::Swap(MsgBuyStoreReq* other) {
  if (other != this) {
    std::swap(buytype_, other->buytype_);
    std::swap(shopid_, other->shopid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBuyStoreReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBuyStoreReq_descriptor_;
  metadata.reflection = MsgBuyStoreReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgGiveStoreReq::kToplayeridFieldNumber;
const int MsgGiveStoreReq::kShopidFieldNumber;
#endif  // !_MSC_VER

MsgGiveStoreReq::MsgGiveStoreReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgGiveStoreReq::InitAsDefaultInstance() {
}

MsgGiveStoreReq::MsgGiveStoreReq(const MsgGiveStoreReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgGiveStoreReq::SharedCtor() {
  _cached_size_ = 0;
  toplayerid_ = 0u;
  shopid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgGiveStoreReq::~MsgGiveStoreReq() {
  SharedDtor();
}

void MsgGiveStoreReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgGiveStoreReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgGiveStoreReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgGiveStoreReq_descriptor_;
}

const MsgGiveStoreReq& MsgGiveStoreReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgGiveStoreReq* MsgGiveStoreReq::default_instance_ = NULL;

MsgGiveStoreReq* MsgGiveStoreReq::New() const {
  return new MsgGiveStoreReq;
}

void MsgGiveStoreReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    toplayerid_ = 0u;
    shopid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgGiveStoreReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 toplayerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &toplayerid_)));
          set_has_toplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shopid;
        break;
      }

      // required uint32 shopid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shopid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgGiveStoreReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 toplayerid = 1;
  if (has_toplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->toplayerid(), output);
  }

  // required uint32 shopid = 2;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shopid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgGiveStoreReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 toplayerid = 1;
  if (has_toplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->toplayerid(), target);
  }

  // required uint32 shopid = 2;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shopid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgGiveStoreReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 toplayerid = 1;
    if (has_toplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->toplayerid());
    }

    // required uint32 shopid = 2;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shopid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgGiveStoreReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgGiveStoreReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgGiveStoreReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgGiveStoreReq::MergeFrom(const MsgGiveStoreReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_toplayerid()) {
      set_toplayerid(from.toplayerid());
    }
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgGiveStoreReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgGiveStoreReq::CopyFrom(const MsgGiveStoreReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGiveStoreReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgGiveStoreReq::Swap(MsgGiveStoreReq* other) {
  if (other != this) {
    std::swap(toplayerid_, other->toplayerid_);
    std::swap(shopid_, other->shopid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgGiveStoreReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgGiveStoreReq_descriptor_;
  metadata.reflection = MsgGiveStoreReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlayerToastReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

MsgPlayerToastReq::MsgPlayerToastReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgPlayerToastReq::InitAsDefaultInstance() {
}

MsgPlayerToastReq::MsgPlayerToastReq(const MsgPlayerToastReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgPlayerToastReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlayerToastReq::~MsgPlayerToastReq() {
  SharedDtor();
}

void MsgPlayerToastReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgPlayerToastReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPlayerToastReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlayerToastReq_descriptor_;
}

const MsgPlayerToastReq& MsgPlayerToastReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgPlayerToastReq* MsgPlayerToastReq::default_instance_ = NULL;

MsgPlayerToastReq* MsgPlayerToastReq::New() const {
  return new MsgPlayerToastReq;
}

void MsgPlayerToastReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlayerToastReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPlayerToastReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPlayerToastReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPlayerToastReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPlayerToastReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlayerToastReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlayerToastReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlayerToastReq::MergeFrom(const MsgPlayerToastReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlayerToastReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlayerToastReq::CopyFrom(const MsgPlayerToastReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlayerToastReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgPlayerToastReq::Swap(MsgPlayerToastReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlayerToastReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlayerToastReq_descriptor_;
  metadata.reflection = MsgPlayerToastReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryToastCountReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

MsgQueryToastCountReq::MsgQueryToastCountReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgQueryToastCountReq::InitAsDefaultInstance() {
}

MsgQueryToastCountReq::MsgQueryToastCountReq(const MsgQueryToastCountReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgQueryToastCountReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryToastCountReq::~MsgQueryToastCountReq() {
  SharedDtor();
}

void MsgQueryToastCountReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQueryToastCountReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryToastCountReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryToastCountReq_descriptor_;
}

const MsgQueryToastCountReq& MsgQueryToastCountReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgQueryToastCountReq* MsgQueryToastCountReq::default_instance_ = NULL;

MsgQueryToastCountReq* MsgQueryToastCountReq::New() const {
  return new MsgQueryToastCountReq;
}

void MsgQueryToastCountReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryToastCountReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgQueryToastCountReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgQueryToastCountReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgQueryToastCountReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryToastCountReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryToastCountReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryToastCountReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryToastCountReq::MergeFrom(const MsgQueryToastCountReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryToastCountReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryToastCountReq::CopyFrom(const MsgQueryToastCountReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryToastCountReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgQueryToastCountReq::Swap(MsgQueryToastCountReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryToastCountReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryToastCountReq_descriptor_;
  metadata.reflection = MsgQueryToastCountReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryToastCountAck::kPlayeridFieldNumber;
const int MsgQueryToastCountAck::kToastcountFieldNumber;
#endif  // !_MSC_VER

MsgQueryToastCountAck::MsgQueryToastCountAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgQueryToastCountAck::InitAsDefaultInstance() {
}

MsgQueryToastCountAck::MsgQueryToastCountAck(const MsgQueryToastCountAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgQueryToastCountAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  toastcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryToastCountAck::~MsgQueryToastCountAck() {
  SharedDtor();
}

void MsgQueryToastCountAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQueryToastCountAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryToastCountAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryToastCountAck_descriptor_;
}

const MsgQueryToastCountAck& MsgQueryToastCountAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgQueryToastCountAck* MsgQueryToastCountAck::default_instance_ = NULL;

MsgQueryToastCountAck* MsgQueryToastCountAck::New() const {
  return new MsgQueryToastCountAck;
}

void MsgQueryToastCountAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    toastcount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryToastCountAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_toastcount;
        break;
      }

      // required uint32 toastcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toastcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &toastcount_)));
          set_has_toastcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgQueryToastCountAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 toastcount = 2;
  if (has_toastcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->toastcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgQueryToastCountAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 toastcount = 2;
  if (has_toastcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->toastcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgQueryToastCountAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 toastcount = 2;
    if (has_toastcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->toastcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryToastCountAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryToastCountAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryToastCountAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryToastCountAck::MergeFrom(const MsgQueryToastCountAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_toastcount()) {
      set_toastcount(from.toastcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryToastCountAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryToastCountAck::CopyFrom(const MsgQueryToastCountAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryToastCountAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgQueryToastCountAck::Swap(MsgQueryToastCountAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(toastcount_, other->toastcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryToastCountAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryToastCountAck_descriptor_;
  metadata.reflection = MsgQueryToastCountAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgRemoveDataReq::kDatanameFieldNumber;
const int MsgRemoveDataReq::kKeyFieldNumber;
const int MsgRemoveDataReq::kCountFieldNumber;
#endif  // !_MSC_VER

MsgRemoveDataReq::MsgRemoveDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgRemoveDataReq::InitAsDefaultInstance() {
}

MsgRemoveDataReq::MsgRemoveDataReq(const MsgRemoveDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgRemoveDataReq::SharedCtor() {
  _cached_size_ = 0;
  dataname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = GOOGLE_ULONGLONG(0);
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgRemoveDataReq::~MsgRemoveDataReq() {
  SharedDtor();
}

void MsgRemoveDataReq::SharedDtor() {
  if (dataname_ != &::google::protobuf::internal::kEmptyString) {
    delete dataname_;
  }
  if (this != default_instance_) {
  }
}

void MsgRemoveDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgRemoveDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgRemoveDataReq_descriptor_;
}

const MsgRemoveDataReq& MsgRemoveDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgRemoveDataReq* MsgRemoveDataReq::default_instance_ = NULL;

MsgRemoveDataReq* MsgRemoveDataReq::New() const {
  return new MsgRemoveDataReq;
}

void MsgRemoveDataReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dataname()) {
      if (dataname_ != &::google::protobuf::internal::kEmptyString) {
        dataname_->clear();
      }
    }
    key_ = GOOGLE_ULONGLONG(0);
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgRemoveDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dataname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dataname().data(), this->dataname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_key;
        break;
      }

      // required uint64 key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgRemoveDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string dataname = 1;
  if (has_dataname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataname().data(), this->dataname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dataname(), output);
  }

  // required uint64 key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->key(), output);
  }

  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgRemoveDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string dataname = 1;
  if (has_dataname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataname().data(), this->dataname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dataname(), target);
  }

  // required uint64 key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->key(), target);
  }

  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgRemoveDataReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dataname = 1;
    if (has_dataname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataname());
    }

    // required uint64 key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key());
    }

    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgRemoveDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgRemoveDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgRemoveDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgRemoveDataReq::MergeFrom(const MsgRemoveDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dataname()) {
      set_dataname(from.dataname());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgRemoveDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgRemoveDataReq::CopyFrom(const MsgRemoveDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRemoveDataReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MsgRemoveDataReq::Swap(MsgRemoveDataReq* other) {
  if (other != this) {
    std::swap(dataname_, other->dataname_);
    std::swap(key_, other->key_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgRemoveDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgRemoveDataReq_descriptor_;
  metadata.reflection = MsgRemoveDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgChangeModelReq::kModelidFieldNumber;
#endif  // !_MSC_VER

MsgChangeModelReq::MsgChangeModelReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgChangeModelReq::InitAsDefaultInstance() {
}

MsgChangeModelReq::MsgChangeModelReq(const MsgChangeModelReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgChangeModelReq::SharedCtor() {
  _cached_size_ = 0;
  modelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgChangeModelReq::~MsgChangeModelReq() {
  SharedDtor();
}

void MsgChangeModelReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgChangeModelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgChangeModelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgChangeModelReq_descriptor_;
}

const MsgChangeModelReq& MsgChangeModelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgChangeModelReq* MsgChangeModelReq::default_instance_ = NULL;

MsgChangeModelReq* MsgChangeModelReq::New() const {
  return new MsgChangeModelReq;
}

void MsgChangeModelReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    modelid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgChangeModelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 modelid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modelid_)));
          set_has_modelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgChangeModelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 modelid = 1;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->modelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgChangeModelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 modelid = 1;
  if (has_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->modelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgChangeModelReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 modelid = 1;
    if (has_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgChangeModelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgChangeModelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgChangeModelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgChangeModelReq::MergeFrom(const MsgChangeModelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgChangeModelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgChangeModelReq::CopyFrom(const MsgChangeModelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChangeModelReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgChangeModelReq::Swap(MsgChangeModelReq* other) {
  if (other != this) {
    std::swap(modelid_, other->modelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgChangeModelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgChangeModelReq_descriptor_;
  metadata.reflection = MsgChangeModelReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSetModelDefaultClothesReq::kModelidFieldNumber;
const int MsgSetModelDefaultClothesReq::kClothesidFieldNumber;
#endif  // !_MSC_VER

MsgSetModelDefaultClothesReq::MsgSetModelDefaultClothesReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSetModelDefaultClothesReq::InitAsDefaultInstance() {
}

MsgSetModelDefaultClothesReq::MsgSetModelDefaultClothesReq(const MsgSetModelDefaultClothesReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSetModelDefaultClothesReq::SharedCtor() {
  _cached_size_ = 0;
  modelid_ = 0u;
  clothesid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSetModelDefaultClothesReq::~MsgSetModelDefaultClothesReq() {
  SharedDtor();
}

void MsgSetModelDefaultClothesReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSetModelDefaultClothesReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSetModelDefaultClothesReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSetModelDefaultClothesReq_descriptor_;
}

const MsgSetModelDefaultClothesReq& MsgSetModelDefaultClothesReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgSetModelDefaultClothesReq* MsgSetModelDefaultClothesReq::default_instance_ = NULL;

MsgSetModelDefaultClothesReq* MsgSetModelDefaultClothesReq::New() const {
  return new MsgSetModelDefaultClothesReq;
}

void MsgSetModelDefaultClothesReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    modelid_ = 0u;
    clothesid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSetModelDefaultClothesReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 modelid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modelid_)));
          set_has_modelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clothesid;
        break;
      }

      // required uint32 clothesid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clothesid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clothesid_)));
          set_has_clothesid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSetModelDefaultClothesReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 modelid = 1;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->modelid(), output);
  }

  // required uint32 clothesid = 2;
  if (has_clothesid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->clothesid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSetModelDefaultClothesReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 modelid = 1;
  if (has_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->modelid(), target);
  }

  // required uint32 clothesid = 2;
  if (has_clothesid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->clothesid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSetModelDefaultClothesReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 modelid = 1;
    if (has_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modelid());
    }

    // required uint32 clothesid = 2;
    if (has_clothesid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clothesid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSetModelDefaultClothesReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSetModelDefaultClothesReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSetModelDefaultClothesReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSetModelDefaultClothesReq::MergeFrom(const MsgSetModelDefaultClothesReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
    if (from.has_clothesid()) {
      set_clothesid(from.clothesid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSetModelDefaultClothesReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSetModelDefaultClothesReq::CopyFrom(const MsgSetModelDefaultClothesReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSetModelDefaultClothesReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgSetModelDefaultClothesReq::Swap(MsgSetModelDefaultClothesReq* other) {
  if (other != this) {
    std::swap(modelid_, other->modelid_);
    std::swap(clothesid_, other->clothesid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSetModelDefaultClothesReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSetModelDefaultClothesReq_descriptor_;
  metadata.reflection = MsgSetModelDefaultClothesReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDressClothesReq::kClothesidFieldNumber;
#endif  // !_MSC_VER

MsgDressClothesReq::MsgDressClothesReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgDressClothesReq::InitAsDefaultInstance() {
}

MsgDressClothesReq::MsgDressClothesReq(const MsgDressClothesReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgDressClothesReq::SharedCtor() {
  _cached_size_ = 0;
  clothesid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDressClothesReq::~MsgDressClothesReq() {
  SharedDtor();
}

void MsgDressClothesReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgDressClothesReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDressClothesReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDressClothesReq_descriptor_;
}

const MsgDressClothesReq& MsgDressClothesReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgDressClothesReq* MsgDressClothesReq::default_instance_ = NULL;

MsgDressClothesReq* MsgDressClothesReq::New() const {
  return new MsgDressClothesReq;
}

void MsgDressClothesReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clothesid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDressClothesReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 clothesid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clothesid_)));
          set_has_clothesid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgDressClothesReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 clothesid = 1;
  if (has_clothesid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clothesid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgDressClothesReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 clothesid = 1;
  if (has_clothesid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clothesid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgDressClothesReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 clothesid = 1;
    if (has_clothesid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clothesid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDressClothesReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDressClothesReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDressClothesReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDressClothesReq::MergeFrom(const MsgDressClothesReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clothesid()) {
      set_clothesid(from.clothesid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDressClothesReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDressClothesReq::CopyFrom(const MsgDressClothesReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDressClothesReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgDressClothesReq::Swap(MsgDressClothesReq* other) {
  if (other != this) {
    std::swap(clothesid_, other->clothesid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDressClothesReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDressClothesReq_descriptor_;
  metadata.reflection = MsgDressClothesReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgInviteMatchGroupReq::kServeridFieldNumber;
const int MsgInviteMatchGroupReq::kPlayeridFieldNumber;
const int MsgInviteMatchGroupReq::kSourceFieldNumber;
const int MsgInviteMatchGroupReq::kMatchidFieldNumber;
const int MsgInviteMatchGroupReq::kPlayernameFieldNumber;
#endif  // !_MSC_VER

MsgInviteMatchGroupReq::MsgInviteMatchGroupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgInviteMatchGroupReq::InitAsDefaultInstance() {
}

MsgInviteMatchGroupReq::MsgInviteMatchGroupReq(const MsgInviteMatchGroupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgInviteMatchGroupReq::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0u;
  playerid_ = 0u;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  matchid_ = 0u;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgInviteMatchGroupReq::~MsgInviteMatchGroupReq() {
  SharedDtor();
}

void MsgInviteMatchGroupReq::SharedDtor() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void MsgInviteMatchGroupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgInviteMatchGroupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgInviteMatchGroupReq_descriptor_;
}

const MsgInviteMatchGroupReq& MsgInviteMatchGroupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgInviteMatchGroupReq* MsgInviteMatchGroupReq::default_instance_ = NULL;

MsgInviteMatchGroupReq* MsgInviteMatchGroupReq::New() const {
  return new MsgInviteMatchGroupReq;
}

void MsgInviteMatchGroupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = 0u;
    playerid_ = 0u;
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::kEmptyString) {
        source_->clear();
      }
    }
    matchid_ = 0u;
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgInviteMatchGroupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 serverid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_source;
        break;
      }

      // required string source = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_matchid;
        break;
      }

      // required uint32 matchid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_playername;
        break;
      }

      // required string playername = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgInviteMatchGroupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 serverid = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serverid(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required string source = 3;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->source(), output);
  }

  // required uint32 matchid = 4;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->matchid(), output);
  }

  // required string playername = 5;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->playername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgInviteMatchGroupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 serverid = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serverid(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // required string source = 3;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->source(), target);
  }

  // required uint32 matchid = 4;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->matchid(), target);
  }

  // required string playername = 5;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->playername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgInviteMatchGroupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 serverid = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required string source = 3;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // required uint32 matchid = 4;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // required string playername = 5;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgInviteMatchGroupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgInviteMatchGroupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgInviteMatchGroupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgInviteMatchGroupReq::MergeFrom(const MsgInviteMatchGroupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgInviteMatchGroupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgInviteMatchGroupReq::CopyFrom(const MsgInviteMatchGroupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInviteMatchGroupReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void MsgInviteMatchGroupReq::Swap(MsgInviteMatchGroupReq* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(playerid_, other->playerid_);
    std::swap(source_, other->source_);
    std::swap(matchid_, other->matchid_);
    std::swap(playername_, other->playername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgInviteMatchGroupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgInviteMatchGroupReq_descriptor_;
  metadata.reflection = MsgInviteMatchGroupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgReplyInviteMatchGroupReq::kGroupidFieldNumber;
const int MsgReplyInviteMatchGroupReq::kInviteridFieldNumber;
const int MsgReplyInviteMatchGroupReq::kOperateFieldNumber;
#endif  // !_MSC_VER

MsgReplyInviteMatchGroupReq::MsgReplyInviteMatchGroupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgReplyInviteMatchGroupReq::InitAsDefaultInstance() {
}

MsgReplyInviteMatchGroupReq::MsgReplyInviteMatchGroupReq(const MsgReplyInviteMatchGroupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgReplyInviteMatchGroupReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  inviterid_ = 0u;
  operate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgReplyInviteMatchGroupReq::~MsgReplyInviteMatchGroupReq() {
  SharedDtor();
}

void MsgReplyInviteMatchGroupReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgReplyInviteMatchGroupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgReplyInviteMatchGroupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgReplyInviteMatchGroupReq_descriptor_;
}

const MsgReplyInviteMatchGroupReq& MsgReplyInviteMatchGroupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgReplyInviteMatchGroupReq* MsgReplyInviteMatchGroupReq::default_instance_ = NULL;

MsgReplyInviteMatchGroupReq* MsgReplyInviteMatchGroupReq::New() const {
  return new MsgReplyInviteMatchGroupReq;
}

void MsgReplyInviteMatchGroupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    inviterid_ = 0u;
    operate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgReplyInviteMatchGroupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inviterid;
        break;
      }

      // required uint32 inviterid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviterid_)));
          set_has_inviterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_operate;
        break;
      }

      // required uint32 operate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgReplyInviteMatchGroupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required uint32 inviterid = 2;
  if (has_inviterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->inviterid(), output);
  }

  // required uint32 operate = 3;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->operate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgReplyInviteMatchGroupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required uint32 inviterid = 2;
  if (has_inviterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->inviterid(), target);
  }

  // required uint32 operate = 3;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->operate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgReplyInviteMatchGroupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required uint32 inviterid = 2;
    if (has_inviterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inviterid());
    }

    // required uint32 operate = 3;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgReplyInviteMatchGroupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgReplyInviteMatchGroupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgReplyInviteMatchGroupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgReplyInviteMatchGroupReq::MergeFrom(const MsgReplyInviteMatchGroupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_inviterid()) {
      set_inviterid(from.inviterid());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgReplyInviteMatchGroupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgReplyInviteMatchGroupReq::CopyFrom(const MsgReplyInviteMatchGroupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgReplyInviteMatchGroupReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MsgReplyInviteMatchGroupReq::Swap(MsgReplyInviteMatchGroupReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(inviterid_, other->inviterid_);
    std::swap(operate_, other->operate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgReplyInviteMatchGroupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgReplyInviteMatchGroupReq_descriptor_;
  metadata.reflection = MsgReplyInviteMatchGroupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgLeaveMatchGroupReq::MsgLeaveMatchGroupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgLeaveMatchGroupReq::InitAsDefaultInstance() {
}

MsgLeaveMatchGroupReq::MsgLeaveMatchGroupReq(const MsgLeaveMatchGroupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgLeaveMatchGroupReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLeaveMatchGroupReq::~MsgLeaveMatchGroupReq() {
  SharedDtor();
}

void MsgLeaveMatchGroupReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgLeaveMatchGroupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLeaveMatchGroupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLeaveMatchGroupReq_descriptor_;
}

const MsgLeaveMatchGroupReq& MsgLeaveMatchGroupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgLeaveMatchGroupReq* MsgLeaveMatchGroupReq::default_instance_ = NULL;

MsgLeaveMatchGroupReq* MsgLeaveMatchGroupReq::New() const {
  return new MsgLeaveMatchGroupReq;
}

void MsgLeaveMatchGroupReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLeaveMatchGroupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgLeaveMatchGroupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLeaveMatchGroupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLeaveMatchGroupReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLeaveMatchGroupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLeaveMatchGroupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLeaveMatchGroupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLeaveMatchGroupReq::MergeFrom(const MsgLeaveMatchGroupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLeaveMatchGroupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLeaveMatchGroupReq::CopyFrom(const MsgLeaveMatchGroupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLeaveMatchGroupReq::IsInitialized() const {

  return true;
}

void MsgLeaveMatchGroupReq::Swap(MsgLeaveMatchGroupReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLeaveMatchGroupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLeaveMatchGroupReq_descriptor_;
  metadata.reflection = MsgLeaveMatchGroupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgKickMatchGroupReq::kMemberidFieldNumber;
#endif  // !_MSC_VER

MsgKickMatchGroupReq::MsgKickMatchGroupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgKickMatchGroupReq::InitAsDefaultInstance() {
}

MsgKickMatchGroupReq::MsgKickMatchGroupReq(const MsgKickMatchGroupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgKickMatchGroupReq::SharedCtor() {
  _cached_size_ = 0;
  memberid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgKickMatchGroupReq::~MsgKickMatchGroupReq() {
  SharedDtor();
}

void MsgKickMatchGroupReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgKickMatchGroupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgKickMatchGroupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgKickMatchGroupReq_descriptor_;
}

const MsgKickMatchGroupReq& MsgKickMatchGroupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgKickMatchGroupReq* MsgKickMatchGroupReq::default_instance_ = NULL;

MsgKickMatchGroupReq* MsgKickMatchGroupReq::New() const {
  return new MsgKickMatchGroupReq;
}

void MsgKickMatchGroupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    memberid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgKickMatchGroupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 memberid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memberid_)));
          set_has_memberid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgKickMatchGroupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 memberid = 1;
  if (has_memberid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->memberid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgKickMatchGroupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 memberid = 1;
  if (has_memberid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->memberid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgKickMatchGroupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 memberid = 1;
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memberid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgKickMatchGroupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgKickMatchGroupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgKickMatchGroupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgKickMatchGroupReq::MergeFrom(const MsgKickMatchGroupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memberid()) {
      set_memberid(from.memberid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgKickMatchGroupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgKickMatchGroupReq::CopyFrom(const MsgKickMatchGroupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgKickMatchGroupReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgKickMatchGroupReq::Swap(MsgKickMatchGroupReq* other) {
  if (other != this) {
    std::swap(memberid_, other->memberid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgKickMatchGroupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgKickMatchGroupReq_descriptor_;
  metadata.reflection = MsgKickMatchGroupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgApplyMatchGroupReq::kGroupidFieldNumber;
#endif  // !_MSC_VER

MsgApplyMatchGroupReq::MsgApplyMatchGroupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgApplyMatchGroupReq::InitAsDefaultInstance() {
}

MsgApplyMatchGroupReq::MsgApplyMatchGroupReq(const MsgApplyMatchGroupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgApplyMatchGroupReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgApplyMatchGroupReq::~MsgApplyMatchGroupReq() {
  SharedDtor();
}

void MsgApplyMatchGroupReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgApplyMatchGroupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgApplyMatchGroupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgApplyMatchGroupReq_descriptor_;
}

const MsgApplyMatchGroupReq& MsgApplyMatchGroupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgApplyMatchGroupReq* MsgApplyMatchGroupReq::default_instance_ = NULL;

MsgApplyMatchGroupReq* MsgApplyMatchGroupReq::New() const {
  return new MsgApplyMatchGroupReq;
}

void MsgApplyMatchGroupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgApplyMatchGroupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgApplyMatchGroupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgApplyMatchGroupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgApplyMatchGroupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgApplyMatchGroupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgApplyMatchGroupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgApplyMatchGroupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgApplyMatchGroupReq::MergeFrom(const MsgApplyMatchGroupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgApplyMatchGroupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgApplyMatchGroupReq::CopyFrom(const MsgApplyMatchGroupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgApplyMatchGroupReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgApplyMatchGroupReq::Swap(MsgApplyMatchGroupReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgApplyMatchGroupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgApplyMatchGroupReq_descriptor_;
  metadata.reflection = MsgApplyMatchGroupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgReplyApplyMatchGroupReq::kApplyidFieldNumber;
const int MsgReplyApplyMatchGroupReq::kOperateFieldNumber;
#endif  // !_MSC_VER

MsgReplyApplyMatchGroupReq::MsgReplyApplyMatchGroupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgReplyApplyMatchGroupReq::InitAsDefaultInstance() {
}

MsgReplyApplyMatchGroupReq::MsgReplyApplyMatchGroupReq(const MsgReplyApplyMatchGroupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgReplyApplyMatchGroupReq::SharedCtor() {
  _cached_size_ = 0;
  applyid_ = 0u;
  operate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgReplyApplyMatchGroupReq::~MsgReplyApplyMatchGroupReq() {
  SharedDtor();
}

void MsgReplyApplyMatchGroupReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgReplyApplyMatchGroupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgReplyApplyMatchGroupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgReplyApplyMatchGroupReq_descriptor_;
}

const MsgReplyApplyMatchGroupReq& MsgReplyApplyMatchGroupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgReplyApplyMatchGroupReq* MsgReplyApplyMatchGroupReq::default_instance_ = NULL;

MsgReplyApplyMatchGroupReq* MsgReplyApplyMatchGroupReq::New() const {
  return new MsgReplyApplyMatchGroupReq;
}

void MsgReplyApplyMatchGroupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    applyid_ = 0u;
    operate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgReplyApplyMatchGroupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 applyid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applyid_)));
          set_has_applyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_operate;
        break;
      }

      // required uint32 operate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_)));
          set_has_operate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgReplyApplyMatchGroupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 applyid = 1;
  if (has_applyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->applyid(), output);
  }

  // required uint32 operate = 3;
  if (has_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->operate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgReplyApplyMatchGroupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 applyid = 1;
  if (has_applyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->applyid(), target);
  }

  // required uint32 operate = 3;
  if (has_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->operate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgReplyApplyMatchGroupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 applyid = 1;
    if (has_applyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applyid());
    }

    // required uint32 operate = 3;
    if (has_operate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgReplyApplyMatchGroupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgReplyApplyMatchGroupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgReplyApplyMatchGroupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgReplyApplyMatchGroupReq::MergeFrom(const MsgReplyApplyMatchGroupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_applyid()) {
      set_applyid(from.applyid());
    }
    if (from.has_operate()) {
      set_operate(from.operate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgReplyApplyMatchGroupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgReplyApplyMatchGroupReq::CopyFrom(const MsgReplyApplyMatchGroupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgReplyApplyMatchGroupReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgReplyApplyMatchGroupReq::Swap(MsgReplyApplyMatchGroupReq* other) {
  if (other != this) {
    std::swap(applyid_, other->applyid_);
    std::swap(operate_, other->operate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgReplyApplyMatchGroupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgReplyApplyMatchGroupReq_descriptor_;
  metadata.reflection = MsgReplyApplyMatchGroupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMatchGroupPrepareReq::kPrepareFieldNumber;
#endif  // !_MSC_VER

MsgMatchGroupPrepareReq::MsgMatchGroupPrepareReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgMatchGroupPrepareReq::InitAsDefaultInstance() {
}

MsgMatchGroupPrepareReq::MsgMatchGroupPrepareReq(const MsgMatchGroupPrepareReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgMatchGroupPrepareReq::SharedCtor() {
  _cached_size_ = 0;
  prepare_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMatchGroupPrepareReq::~MsgMatchGroupPrepareReq() {
  SharedDtor();
}

void MsgMatchGroupPrepareReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgMatchGroupPrepareReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMatchGroupPrepareReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMatchGroupPrepareReq_descriptor_;
}

const MsgMatchGroupPrepareReq& MsgMatchGroupPrepareReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgMatchGroupPrepareReq* MsgMatchGroupPrepareReq::default_instance_ = NULL;

MsgMatchGroupPrepareReq* MsgMatchGroupPrepareReq::New() const {
  return new MsgMatchGroupPrepareReq;
}

void MsgMatchGroupPrepareReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prepare_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMatchGroupPrepareReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 prepare = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prepare_)));
          set_has_prepare();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgMatchGroupPrepareReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 prepare = 1;
  if (has_prepare()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prepare(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgMatchGroupPrepareReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 prepare = 1;
  if (has_prepare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prepare(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgMatchGroupPrepareReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 prepare = 1;
    if (has_prepare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prepare());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMatchGroupPrepareReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMatchGroupPrepareReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMatchGroupPrepareReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMatchGroupPrepareReq::MergeFrom(const MsgMatchGroupPrepareReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prepare()) {
      set_prepare(from.prepare());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMatchGroupPrepareReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMatchGroupPrepareReq::CopyFrom(const MsgMatchGroupPrepareReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMatchGroupPrepareReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgMatchGroupPrepareReq::Swap(MsgMatchGroupPrepareReq* other) {
  if (other != this) {
    std::swap(prepare_, other->prepare_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMatchGroupPrepareReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMatchGroupPrepareReq_descriptor_;
  metadata.reflection = MsgMatchGroupPrepareReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUpdateGroupMatchReq::kMatchidFieldNumber;
#endif  // !_MSC_VER

MsgUpdateGroupMatchReq::MsgUpdateGroupMatchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgUpdateGroupMatchReq::InitAsDefaultInstance() {
}

MsgUpdateGroupMatchReq::MsgUpdateGroupMatchReq(const MsgUpdateGroupMatchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgUpdateGroupMatchReq::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUpdateGroupMatchReq::~MsgUpdateGroupMatchReq() {
  SharedDtor();
}

void MsgUpdateGroupMatchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgUpdateGroupMatchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgUpdateGroupMatchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUpdateGroupMatchReq_descriptor_;
}

const MsgUpdateGroupMatchReq& MsgUpdateGroupMatchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgUpdateGroupMatchReq* MsgUpdateGroupMatchReq::default_instance_ = NULL;

MsgUpdateGroupMatchReq* MsgUpdateGroupMatchReq::New() const {
  return new MsgUpdateGroupMatchReq;
}

void MsgUpdateGroupMatchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUpdateGroupMatchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUpdateGroupMatchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUpdateGroupMatchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUpdateGroupMatchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUpdateGroupMatchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUpdateGroupMatchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUpdateGroupMatchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUpdateGroupMatchReq::MergeFrom(const MsgUpdateGroupMatchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUpdateGroupMatchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUpdateGroupMatchReq::CopyFrom(const MsgUpdateGroupMatchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUpdateGroupMatchReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgUpdateGroupMatchReq::Swap(MsgUpdateGroupMatchReq* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUpdateGroupMatchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUpdateGroupMatchReq_descriptor_;
  metadata.reflection = MsgUpdateGroupMatchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryGuestReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

MsgQueryGuestReq::MsgQueryGuestReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgQueryGuestReq::InitAsDefaultInstance() {
}

MsgQueryGuestReq::MsgQueryGuestReq(const MsgQueryGuestReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgQueryGuestReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryGuestReq::~MsgQueryGuestReq() {
  SharedDtor();
}

void MsgQueryGuestReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQueryGuestReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryGuestReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryGuestReq_descriptor_;
}

const MsgQueryGuestReq& MsgQueryGuestReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgQueryGuestReq* MsgQueryGuestReq::default_instance_ = NULL;

MsgQueryGuestReq* MsgQueryGuestReq::New() const {
  return new MsgQueryGuestReq;
}

void MsgQueryGuestReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryGuestReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgQueryGuestReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgQueryGuestReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgQueryGuestReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryGuestReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryGuestReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryGuestReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryGuestReq::MergeFrom(const MsgQueryGuestReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryGuestReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryGuestReq::CopyFrom(const MsgQueryGuestReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryGuestReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgQueryGuestReq::Swap(MsgQueryGuestReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryGuestReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryGuestReq_descriptor_;
  metadata.reflection = MsgQueryGuestReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryGuestAck::kPlayeridFieldNumber;
const int MsgQueryGuestAck::kGuestcountFieldNumber;
const int MsgQueryGuestAck::kGuestdataFieldNumber;
#endif  // !_MSC_VER

MsgQueryGuestAck::MsgQueryGuestAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgQueryGuestAck::InitAsDefaultInstance() {
}

MsgQueryGuestAck::MsgQueryGuestAck(const MsgQueryGuestAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgQueryGuestAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  guestcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryGuestAck::~MsgQueryGuestAck() {
  SharedDtor();
}

void MsgQueryGuestAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQueryGuestAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryGuestAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryGuestAck_descriptor_;
}

const MsgQueryGuestAck& MsgQueryGuestAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgQueryGuestAck* MsgQueryGuestAck::default_instance_ = NULL;

MsgQueryGuestAck* MsgQueryGuestAck::New() const {
  return new MsgQueryGuestAck;
}

void MsgQueryGuestAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    guestcount_ = 0u;
  }
  guestdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryGuestAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guestcount;
        break;
      }

      // required uint32 guestcount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guestcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guestcount_)));
          set_has_guestcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guestdata;
        break;
      }

      // repeated .KFMsg.PBGuestData guestdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guestdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guestdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guestdata;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgQueryGuestAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 guestcount = 2;
  if (has_guestcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guestcount(), output);
  }

  // repeated .KFMsg.PBGuestData guestdata = 3;
  for (int i = 0; i < this->guestdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->guestdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgQueryGuestAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 guestcount = 2;
  if (has_guestcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guestcount(), target);
  }

  // repeated .KFMsg.PBGuestData guestdata = 3;
  for (int i = 0; i < this->guestdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->guestdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgQueryGuestAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 guestcount = 2;
    if (has_guestcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guestcount());
    }

  }
  // repeated .KFMsg.PBGuestData guestdata = 3;
  total_size += 1 * this->guestdata_size();
  for (int i = 0; i < this->guestdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guestdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryGuestAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryGuestAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryGuestAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryGuestAck::MergeFrom(const MsgQueryGuestAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  guestdata_.MergeFrom(from.guestdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_guestcount()) {
      set_guestcount(from.guestcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryGuestAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryGuestAck::CopyFrom(const MsgQueryGuestAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryGuestAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < guestdata_size(); i++) {
    if (!this->guestdata(i).IsInitialized()) return false;
  }
  return true;
}

void MsgQueryGuestAck::Swap(MsgQueryGuestAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(guestcount_, other->guestcount_);
    guestdata_.Swap(&other->guestdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryGuestAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryGuestAck_descriptor_;
  metadata.reflection = MsgQueryGuestAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUseItemReq::kItemguidFieldNumber;
#endif  // !_MSC_VER

MsgUseItemReq::MsgUseItemReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgUseItemReq::InitAsDefaultInstance() {
}

MsgUseItemReq::MsgUseItemReq(const MsgUseItemReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgUseItemReq::SharedCtor() {
  _cached_size_ = 0;
  itemguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUseItemReq::~MsgUseItemReq() {
  SharedDtor();
}

void MsgUseItemReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgUseItemReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgUseItemReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUseItemReq_descriptor_;
}

const MsgUseItemReq& MsgUseItemReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgUseItemReq* MsgUseItemReq::default_instance_ = NULL;

MsgUseItemReq* MsgUseItemReq::New() const {
  return new MsgUseItemReq;
}

void MsgUseItemReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemguid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUseItemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 itemguid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemguid_)));
          set_has_itemguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUseItemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 itemguid = 1;
  if (has_itemguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUseItemReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 itemguid = 1;
  if (has_itemguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUseItemReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 itemguid = 1;
    if (has_itemguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUseItemReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUseItemReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUseItemReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUseItemReq::MergeFrom(const MsgUseItemReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemguid()) {
      set_itemguid(from.itemguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUseItemReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUseItemReq::CopyFrom(const MsgUseItemReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUseItemReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgUseItemReq::Swap(MsgUseItemReq* other) {
  if (other != this) {
    std::swap(itemguid_, other->itemguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUseItemReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUseItemReq_descriptor_;
  metadata.reflection = MsgUseItemReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBStore::kDataFieldNumber;
#endif  // !_MSC_VER

PBStore::PBStore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBStore::InitAsDefaultInstance() {
}

PBStore::PBStore(const PBStore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBStore::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBStore::~PBStore() {
  SharedDtor();
}

void PBStore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBStore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBStore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBStore_descriptor_;
}

const PBStore& PBStore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

PBStore* PBStore::default_instance_ = NULL;

PBStore* PBStore::New() const {
  return new PBStore;
}

void PBStore::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBStore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .KFMsg.PBString data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBStore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .KFMsg.PBString data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBStore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .KFMsg.PBString data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBStore::ByteSize() const {
  int total_size = 0;

  // repeated .KFMsg.PBString data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBStore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBStore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBStore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBStore::MergeFrom(const PBStore& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBStore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBStore::CopyFrom(const PBStore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBStore::IsInitialized() const {

  return true;
}

void PBStore::Swap(PBStore* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBStore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBStore_descriptor_;
  metadata.reflection = PBStore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBStores::kStoreFieldNumber;
#endif  // !_MSC_VER

PBStores::PBStores()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBStores::InitAsDefaultInstance() {
}

PBStores::PBStores(const PBStores& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBStores::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBStores::~PBStores() {
  SharedDtor();
}

void PBStores::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBStores::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBStores::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBStores_descriptor_;
}

const PBStores& PBStores::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

PBStores* PBStores::default_instance_ = NULL;

PBStores* PBStores::New() const {
  return new PBStores;
}

void PBStores::Clear() {
  store_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBStores::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .KFMsg.PBStore store = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_store:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_store()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_store;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBStores::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .KFMsg.PBStore store = 1;
  for (int i = 0; i < this->store_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->store(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBStores::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .KFMsg.PBStore store = 1;
  for (int i = 0; i < this->store_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->store(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBStores::ByteSize() const {
  int total_size = 0;

  // repeated .KFMsg.PBStore store = 1;
  total_size += 1 * this->store_size();
  for (int i = 0; i < this->store_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->store(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBStores::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBStores* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBStores*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBStores::MergeFrom(const PBStores& from) {
  GOOGLE_CHECK_NE(&from, this);
  store_.MergeFrom(from.store_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBStores::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBStores::CopyFrom(const PBStores& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBStores::IsInitialized() const {

  return true;
}

void PBStores::Swap(PBStores* other) {
  if (other != this) {
    store_.Swap(&other->store_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBStores::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBStores_descriptor_;
  metadata.reflection = PBStores_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryStoreInfoReq::kVersionFieldNumber;
#endif  // !_MSC_VER

MsgQueryStoreInfoReq::MsgQueryStoreInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgQueryStoreInfoReq::InitAsDefaultInstance() {
}

MsgQueryStoreInfoReq::MsgQueryStoreInfoReq(const MsgQueryStoreInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgQueryStoreInfoReq::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryStoreInfoReq::~MsgQueryStoreInfoReq() {
  SharedDtor();
}

void MsgQueryStoreInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQueryStoreInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryStoreInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryStoreInfoReq_descriptor_;
}

const MsgQueryStoreInfoReq& MsgQueryStoreInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgQueryStoreInfoReq* MsgQueryStoreInfoReq::default_instance_ = NULL;

MsgQueryStoreInfoReq* MsgQueryStoreInfoReq::New() const {
  return new MsgQueryStoreInfoReq;
}

void MsgQueryStoreInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryStoreInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgQueryStoreInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgQueryStoreInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgQueryStoreInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryStoreInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryStoreInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryStoreInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryStoreInfoReq::MergeFrom(const MsgQueryStoreInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryStoreInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryStoreInfoReq::CopyFrom(const MsgQueryStoreInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryStoreInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgQueryStoreInfoReq::Swap(MsgQueryStoreInfoReq* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryStoreInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryStoreInfoReq_descriptor_;
  metadata.reflection = MsgQueryStoreInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryStoreInfoAck::kVersionFieldNumber;
const int MsgQueryStoreInfoAck::kStoresFieldNumber;
#endif  // !_MSC_VER

MsgQueryStoreInfoAck::MsgQueryStoreInfoAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgQueryStoreInfoAck::InitAsDefaultInstance() {
  stores_ = const_cast< ::KFMsg::PBStores*>(&::KFMsg::PBStores::default_instance());
}

MsgQueryStoreInfoAck::MsgQueryStoreInfoAck(const MsgQueryStoreInfoAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgQueryStoreInfoAck::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  stores_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryStoreInfoAck::~MsgQueryStoreInfoAck() {
  SharedDtor();
}

void MsgQueryStoreInfoAck::SharedDtor() {
  if (this != default_instance_) {
    delete stores_;
  }
}

void MsgQueryStoreInfoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryStoreInfoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryStoreInfoAck_descriptor_;
}

const MsgQueryStoreInfoAck& MsgQueryStoreInfoAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgQueryStoreInfoAck* MsgQueryStoreInfoAck::default_instance_ = NULL;

MsgQueryStoreInfoAck* MsgQueryStoreInfoAck::New() const {
  return new MsgQueryStoreInfoAck;
}

void MsgQueryStoreInfoAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    if (has_stores()) {
      if (stores_ != NULL) stores_->::KFMsg::PBStores::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryStoreInfoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stores;
        break;
      }

      // optional .KFMsg.PBStores stores = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgQueryStoreInfoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional .KFMsg.PBStores stores = 2;
  if (has_stores()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stores(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgQueryStoreInfoAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional .KFMsg.PBStores stores = 2;
  if (has_stores()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stores(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgQueryStoreInfoAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional .KFMsg.PBStores stores = 2;
    if (has_stores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stores());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryStoreInfoAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryStoreInfoAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryStoreInfoAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryStoreInfoAck::MergeFrom(const MsgQueryStoreInfoAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_stores()) {
      mutable_stores()->::KFMsg::PBStores::MergeFrom(from.stores());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryStoreInfoAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryStoreInfoAck::CopyFrom(const MsgQueryStoreInfoAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryStoreInfoAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgQueryStoreInfoAck::Swap(MsgQueryStoreInfoAck* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(stores_, other->stores_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryStoreInfoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryStoreInfoAck_descriptor_;
  metadata.reflection = MsgQueryStoreInfoAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBuyStoreAck::kStoreidFieldNumber;
const int MsgBuyStoreAck::kCodeFieldNumber;
#endif  // !_MSC_VER

MsgBuyStoreAck::MsgBuyStoreAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgBuyStoreAck::InitAsDefaultInstance() {
}

MsgBuyStoreAck::MsgBuyStoreAck(const MsgBuyStoreAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgBuyStoreAck::SharedCtor() {
  _cached_size_ = 0;
  storeid_ = 0u;
  code_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBuyStoreAck::~MsgBuyStoreAck() {
  SharedDtor();
}

void MsgBuyStoreAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgBuyStoreAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBuyStoreAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBuyStoreAck_descriptor_;
}

const MsgBuyStoreAck& MsgBuyStoreAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgBuyStoreAck* MsgBuyStoreAck::default_instance_ = NULL;

MsgBuyStoreAck* MsgBuyStoreAck::New() const {
  return new MsgBuyStoreAck;
}

void MsgBuyStoreAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    storeid_ = 0u;
    code_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBuyStoreAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 storeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storeid_)));
          set_has_storeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // required uint32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgBuyStoreAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 storeid = 1;
  if (has_storeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->storeid(), output);
  }

  // required uint32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgBuyStoreAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 storeid = 1;
  if (has_storeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->storeid(), target);
  }

  // required uint32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgBuyStoreAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 storeid = 1;
    if (has_storeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storeid());
    }

    // required uint32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBuyStoreAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBuyStoreAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBuyStoreAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBuyStoreAck::MergeFrom(const MsgBuyStoreAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storeid()) {
      set_storeid(from.storeid());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBuyStoreAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBuyStoreAck::CopyFrom(const MsgBuyStoreAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBuyStoreAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgBuyStoreAck::Swap(MsgBuyStoreAck* other) {
  if (other != this) {
    std::swap(storeid_, other->storeid_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBuyStoreAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBuyStoreAck_descriptor_;
  metadata.reflection = MsgBuyStoreAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSetWishOrderReq::kTypeFieldNumber;
const int MsgSetWishOrderReq::kStoreidFieldNumber;
const int MsgSetWishOrderReq::kStatusFieldNumber;
#endif  // !_MSC_VER

MsgSetWishOrderReq::MsgSetWishOrderReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSetWishOrderReq::InitAsDefaultInstance() {
}

MsgSetWishOrderReq::MsgSetWishOrderReq(const MsgSetWishOrderReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSetWishOrderReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  storeid_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSetWishOrderReq::~MsgSetWishOrderReq() {
  SharedDtor();
}

void MsgSetWishOrderReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSetWishOrderReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSetWishOrderReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSetWishOrderReq_descriptor_;
}

const MsgSetWishOrderReq& MsgSetWishOrderReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgSetWishOrderReq* MsgSetWishOrderReq::default_instance_ = NULL;

MsgSetWishOrderReq* MsgSetWishOrderReq::New() const {
  return new MsgSetWishOrderReq;
}

void MsgSetWishOrderReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    storeid_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSetWishOrderReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_storeid;
        break;
      }

      // required uint32 storeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storeid_)));
          set_has_storeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional uint32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSetWishOrderReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 storeid = 2;
  if (has_storeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->storeid(), output);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSetWishOrderReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 storeid = 2;
  if (has_storeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->storeid(), target);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSetWishOrderReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 storeid = 2;
    if (has_storeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storeid());
    }

    // optional uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSetWishOrderReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSetWishOrderReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSetWishOrderReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSetWishOrderReq::MergeFrom(const MsgSetWishOrderReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_storeid()) {
      set_storeid(from.storeid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSetWishOrderReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSetWishOrderReq::CopyFrom(const MsgSetWishOrderReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSetWishOrderReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgSetWishOrderReq::Swap(MsgSetWishOrderReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(storeid_, other->storeid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSetWishOrderReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSetWishOrderReq_descriptor_;
  metadata.reflection = MsgSetWishOrderReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgQuerySettingReq::MsgQuerySettingReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgQuerySettingReq::InitAsDefaultInstance() {
}

MsgQuerySettingReq::MsgQuerySettingReq(const MsgQuerySettingReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgQuerySettingReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQuerySettingReq::~MsgQuerySettingReq() {
  SharedDtor();
}

void MsgQuerySettingReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQuerySettingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQuerySettingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQuerySettingReq_descriptor_;
}

const MsgQuerySettingReq& MsgQuerySettingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgQuerySettingReq* MsgQuerySettingReq::default_instance_ = NULL;

MsgQuerySettingReq* MsgQuerySettingReq::New() const {
  return new MsgQuerySettingReq;
}

void MsgQuerySettingReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQuerySettingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgQuerySettingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgQuerySettingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgQuerySettingReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQuerySettingReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQuerySettingReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQuerySettingReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQuerySettingReq::MergeFrom(const MsgQuerySettingReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQuerySettingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQuerySettingReq::CopyFrom(const MsgQuerySettingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQuerySettingReq::IsInitialized() const {

  return true;
}

void MsgQuerySettingReq::Swap(MsgQuerySettingReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQuerySettingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQuerySettingReq_descriptor_;
  metadata.reflection = MsgQuerySettingReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQuerySettingAck::kPbsettingFieldNumber;
#endif  // !_MSC_VER

MsgQuerySettingAck::MsgQuerySettingAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgQuerySettingAck::InitAsDefaultInstance() {
  pbsetting_ = const_cast< ::KFMsg::PBObject*>(&::KFMsg::PBObject::default_instance());
}

MsgQuerySettingAck::MsgQuerySettingAck(const MsgQuerySettingAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgQuerySettingAck::SharedCtor() {
  _cached_size_ = 0;
  pbsetting_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQuerySettingAck::~MsgQuerySettingAck() {
  SharedDtor();
}

void MsgQuerySettingAck::SharedDtor() {
  if (this != default_instance_) {
    delete pbsetting_;
  }
}

void MsgQuerySettingAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQuerySettingAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQuerySettingAck_descriptor_;
}

const MsgQuerySettingAck& MsgQuerySettingAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgQuerySettingAck* MsgQuerySettingAck::default_instance_ = NULL;

MsgQuerySettingAck* MsgQuerySettingAck::New() const {
  return new MsgQuerySettingAck;
}

void MsgQuerySettingAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pbsetting()) {
      if (pbsetting_ != NULL) pbsetting_->::KFMsg::PBObject::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQuerySettingAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KFMsg.PBObject pbsetting = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbsetting()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgQuerySettingAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KFMsg.PBObject pbsetting = 1;
  if (has_pbsetting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pbsetting(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgQuerySettingAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KFMsg.PBObject pbsetting = 1;
  if (has_pbsetting()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pbsetting(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgQuerySettingAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KFMsg.PBObject pbsetting = 1;
    if (has_pbsetting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbsetting());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQuerySettingAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQuerySettingAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQuerySettingAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQuerySettingAck::MergeFrom(const MsgQuerySettingAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pbsetting()) {
      mutable_pbsetting()->::KFMsg::PBObject::MergeFrom(from.pbsetting());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQuerySettingAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQuerySettingAck::CopyFrom(const MsgQuerySettingAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQuerySettingAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgQuerySettingAck::Swap(MsgQuerySettingAck* other) {
  if (other != this) {
    std::swap(pbsetting_, other->pbsetting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQuerySettingAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQuerySettingAck_descriptor_;
  metadata.reflection = MsgQuerySettingAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUpdateSettingReq::kSettingkeyFieldNumber;
const int MsgUpdateSettingReq::kSettingvalueFieldNumber;
#endif  // !_MSC_VER

MsgUpdateSettingReq::MsgUpdateSettingReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgUpdateSettingReq::InitAsDefaultInstance() {
}

MsgUpdateSettingReq::MsgUpdateSettingReq(const MsgUpdateSettingReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgUpdateSettingReq::SharedCtor() {
  _cached_size_ = 0;
  settingkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  settingvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUpdateSettingReq::~MsgUpdateSettingReq() {
  SharedDtor();
}

void MsgUpdateSettingReq::SharedDtor() {
  if (settingkey_ != &::google::protobuf::internal::kEmptyString) {
    delete settingkey_;
  }
  if (settingvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete settingvalue_;
  }
  if (this != default_instance_) {
  }
}

void MsgUpdateSettingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgUpdateSettingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUpdateSettingReq_descriptor_;
}

const MsgUpdateSettingReq& MsgUpdateSettingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgUpdateSettingReq* MsgUpdateSettingReq::default_instance_ = NULL;

MsgUpdateSettingReq* MsgUpdateSettingReq::New() const {
  return new MsgUpdateSettingReq;
}

void MsgUpdateSettingReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_settingkey()) {
      if (settingkey_ != &::google::protobuf::internal::kEmptyString) {
        settingkey_->clear();
      }
    }
    if (has_settingvalue()) {
      if (settingvalue_ != &::google::protobuf::internal::kEmptyString) {
        settingvalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUpdateSettingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string settingkey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_settingkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->settingkey().data(), this->settingkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_settingvalue;
        break;
      }

      // required string settingvalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_settingvalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_settingvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->settingvalue().data(), this->settingvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUpdateSettingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string settingkey = 1;
  if (has_settingkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->settingkey().data(), this->settingkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->settingkey(), output);
  }

  // required string settingvalue = 2;
  if (has_settingvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->settingvalue().data(), this->settingvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->settingvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUpdateSettingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string settingkey = 1;
  if (has_settingkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->settingkey().data(), this->settingkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->settingkey(), target);
  }

  // required string settingvalue = 2;
  if (has_settingvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->settingvalue().data(), this->settingvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->settingvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUpdateSettingReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string settingkey = 1;
    if (has_settingkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->settingkey());
    }

    // required string settingvalue = 2;
    if (has_settingvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->settingvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUpdateSettingReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUpdateSettingReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUpdateSettingReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUpdateSettingReq::MergeFrom(const MsgUpdateSettingReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_settingkey()) {
      set_settingkey(from.settingkey());
    }
    if (from.has_settingvalue()) {
      set_settingvalue(from.settingvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUpdateSettingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUpdateSettingReq::CopyFrom(const MsgUpdateSettingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUpdateSettingReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgUpdateSettingReq::Swap(MsgUpdateSettingReq* other) {
  if (other != this) {
    std::swap(settingkey_, other->settingkey_);
    std::swap(settingvalue_, other->settingvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUpdateSettingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUpdateSettingReq_descriptor_;
  metadata.reflection = MsgUpdateSettingReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgQueryRecentListReq::MsgQueryRecentListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgQueryRecentListReq::InitAsDefaultInstance() {
}

MsgQueryRecentListReq::MsgQueryRecentListReq(const MsgQueryRecentListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgQueryRecentListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryRecentListReq::~MsgQueryRecentListReq() {
  SharedDtor();
}

void MsgQueryRecentListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQueryRecentListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryRecentListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryRecentListReq_descriptor_;
}

const MsgQueryRecentListReq& MsgQueryRecentListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgQueryRecentListReq* MsgQueryRecentListReq::default_instance_ = NULL;

MsgQueryRecentListReq* MsgQueryRecentListReq::New() const {
  return new MsgQueryRecentListReq;
}

void MsgQueryRecentListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryRecentListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgQueryRecentListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgQueryRecentListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgQueryRecentListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryRecentListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryRecentListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryRecentListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryRecentListReq::MergeFrom(const MsgQueryRecentListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryRecentListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryRecentListReq::CopyFrom(const MsgQueryRecentListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryRecentListReq::IsInitialized() const {

  return true;
}

void MsgQueryRecentListReq::Swap(MsgQueryRecentListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryRecentListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryRecentListReq_descriptor_;
  metadata.reflection = MsgQueryRecentListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryRecentListAck::kRecentlistFieldNumber;
#endif  // !_MSC_VER

MsgQueryRecentListAck::MsgQueryRecentListAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgQueryRecentListAck::InitAsDefaultInstance() {
  recentlist_ = const_cast< ::KFMsg::PBRecord*>(&::KFMsg::PBRecord::default_instance());
}

MsgQueryRecentListAck::MsgQueryRecentListAck(const MsgQueryRecentListAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgQueryRecentListAck::SharedCtor() {
  _cached_size_ = 0;
  recentlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryRecentListAck::~MsgQueryRecentListAck() {
  SharedDtor();
}

void MsgQueryRecentListAck::SharedDtor() {
  if (this != default_instance_) {
    delete recentlist_;
  }
}

void MsgQueryRecentListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryRecentListAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryRecentListAck_descriptor_;
}

const MsgQueryRecentListAck& MsgQueryRecentListAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgQueryRecentListAck* MsgQueryRecentListAck::default_instance_ = NULL;

MsgQueryRecentListAck* MsgQueryRecentListAck::New() const {
  return new MsgQueryRecentListAck;
}

void MsgQueryRecentListAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_recentlist()) {
      if (recentlist_ != NULL) recentlist_->::KFMsg::PBRecord::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryRecentListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KFMsg.PBRecord recentlist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recentlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgQueryRecentListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KFMsg.PBRecord recentlist = 1;
  if (has_recentlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recentlist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgQueryRecentListAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KFMsg.PBRecord recentlist = 1;
  if (has_recentlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recentlist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgQueryRecentListAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KFMsg.PBRecord recentlist = 1;
    if (has_recentlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recentlist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryRecentListAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryRecentListAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryRecentListAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryRecentListAck::MergeFrom(const MsgQueryRecentListAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recentlist()) {
      mutable_recentlist()->::KFMsg::PBRecord::MergeFrom(from.recentlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryRecentListAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryRecentListAck::CopyFrom(const MsgQueryRecentListAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryRecentListAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgQueryRecentListAck::Swap(MsgQueryRecentListAck* other) {
  if (other != this) {
    std::swap(recentlist_, other->recentlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryRecentListAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryRecentListAck_descriptor_;
  metadata.reflection = MsgQueryRecentListAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCompoundDataReq::kDatanameFieldNumber;
const int MsgCompoundDataReq::kKeyFieldNumber;
#endif  // !_MSC_VER

MsgCompoundDataReq::MsgCompoundDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCompoundDataReq::InitAsDefaultInstance() {
}

MsgCompoundDataReq::MsgCompoundDataReq(const MsgCompoundDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCompoundDataReq::SharedCtor() {
  _cached_size_ = 0;
  dataname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCompoundDataReq::~MsgCompoundDataReq() {
  SharedDtor();
}

void MsgCompoundDataReq::SharedDtor() {
  if (dataname_ != &::google::protobuf::internal::kEmptyString) {
    delete dataname_;
  }
  if (this != default_instance_) {
  }
}

void MsgCompoundDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCompoundDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCompoundDataReq_descriptor_;
}

const MsgCompoundDataReq& MsgCompoundDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgCompoundDataReq* MsgCompoundDataReq::default_instance_ = NULL;

MsgCompoundDataReq* MsgCompoundDataReq::New() const {
  return new MsgCompoundDataReq;
}

void MsgCompoundDataReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dataname()) {
      if (dataname_ != &::google::protobuf::internal::kEmptyString) {
        dataname_->clear();
      }
    }
    key_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCompoundDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string dataname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dataname().data(), this->dataname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_key;
        break;
      }

      // required uint32 key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCompoundDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string dataname = 1;
  if (has_dataname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataname().data(), this->dataname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dataname(), output);
  }

  // required uint32 key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCompoundDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string dataname = 1;
  if (has_dataname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataname().data(), this->dataname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dataname(), target);
  }

  // required uint32 key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCompoundDataReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string dataname = 1;
    if (has_dataname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataname());
    }

    // required uint32 key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCompoundDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCompoundDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCompoundDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCompoundDataReq::MergeFrom(const MsgCompoundDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dataname()) {
      set_dataname(from.dataname());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCompoundDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCompoundDataReq::CopyFrom(const MsgCompoundDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCompoundDataReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgCompoundDataReq::Swap(MsgCompoundDataReq* other) {
  if (other != this) {
    std::swap(dataname_, other->dataname_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCompoundDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCompoundDataReq_descriptor_;
  metadata.reflection = MsgCompoundDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryRankListReq::kRankidFieldNumber;
#endif  // !_MSC_VER

MsgQueryRankListReq::MsgQueryRankListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgQueryRankListReq::InitAsDefaultInstance() {
}

MsgQueryRankListReq::MsgQueryRankListReq(const MsgQueryRankListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgQueryRankListReq::SharedCtor() {
  _cached_size_ = 0;
  rankid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryRankListReq::~MsgQueryRankListReq() {
  SharedDtor();
}

void MsgQueryRankListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQueryRankListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryRankListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryRankListReq_descriptor_;
}

const MsgQueryRankListReq& MsgQueryRankListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgQueryRankListReq* MsgQueryRankListReq::default_instance_ = NULL;

MsgQueryRankListReq* MsgQueryRankListReq::New() const {
  return new MsgQueryRankListReq;
}

void MsgQueryRankListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rankid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryRankListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rankid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgQueryRankListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rankid = 1;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rankid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgQueryRankListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rankid = 1;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rankid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgQueryRankListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rankid = 1;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryRankListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryRankListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryRankListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryRankListReq::MergeFrom(const MsgQueryRankListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryRankListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryRankListReq::CopyFrom(const MsgQueryRankListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryRankListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgQueryRankListReq::Swap(MsgQueryRankListReq* other) {
  if (other != this) {
    std::swap(rankid_, other->rankid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryRankListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryRankListReq_descriptor_;
  metadata.reflection = MsgQueryRankListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryRankListAck::kRankidFieldNumber;
const int MsgQueryRankListAck::kRankdatasFieldNumber;
#endif  // !_MSC_VER

MsgQueryRankListAck::MsgQueryRankListAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgQueryRankListAck::InitAsDefaultInstance() {
  rankdatas_ = const_cast< ::KFMsg::PBRankDatas*>(&::KFMsg::PBRankDatas::default_instance());
}

MsgQueryRankListAck::MsgQueryRankListAck(const MsgQueryRankListAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgQueryRankListAck::SharedCtor() {
  _cached_size_ = 0;
  rankid_ = 0u;
  rankdatas_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryRankListAck::~MsgQueryRankListAck() {
  SharedDtor();
}

void MsgQueryRankListAck::SharedDtor() {
  if (this != default_instance_) {
    delete rankdatas_;
  }
}

void MsgQueryRankListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryRankListAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryRankListAck_descriptor_;
}

const MsgQueryRankListAck& MsgQueryRankListAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgQueryRankListAck* MsgQueryRankListAck::default_instance_ = NULL;

MsgQueryRankListAck* MsgQueryRankListAck::New() const {
  return new MsgQueryRankListAck;
}

void MsgQueryRankListAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rankid_ = 0u;
    if (has_rankdatas()) {
      if (rankdatas_ != NULL) rankdatas_->::KFMsg::PBRankDatas::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryRankListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rankid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rankdatas;
        break;
      }

      // required .KFMsg.PBRankDatas rankdatas = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankdatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rankdatas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgQueryRankListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rankid = 1;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rankid(), output);
  }

  // required .KFMsg.PBRankDatas rankdatas = 2;
  if (has_rankdatas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rankdatas(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgQueryRankListAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rankid = 1;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rankid(), target);
  }

  // required .KFMsg.PBRankDatas rankdatas = 2;
  if (has_rankdatas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rankdatas(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgQueryRankListAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rankid = 1;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

    // required .KFMsg.PBRankDatas rankdatas = 2;
    if (has_rankdatas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rankdatas());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryRankListAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryRankListAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryRankListAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryRankListAck::MergeFrom(const MsgQueryRankListAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_rankdatas()) {
      mutable_rankdatas()->::KFMsg::PBRankDatas::MergeFrom(from.rankdatas());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryRankListAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryRankListAck::CopyFrom(const MsgQueryRankListAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryRankListAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgQueryRankListAck::Swap(MsgQueryRankListAck* other) {
  if (other != this) {
    std::swap(rankid_, other->rankid_);
    std::swap(rankdatas_, other->rankdatas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryRankListAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryRankListAck_descriptor_;
  metadata.reflection = MsgQueryRankListAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryFriendRankListReq::kRankidFieldNumber;
#endif  // !_MSC_VER

MsgQueryFriendRankListReq::MsgQueryFriendRankListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgQueryFriendRankListReq::InitAsDefaultInstance() {
}

MsgQueryFriendRankListReq::MsgQueryFriendRankListReq(const MsgQueryFriendRankListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgQueryFriendRankListReq::SharedCtor() {
  _cached_size_ = 0;
  rankid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryFriendRankListReq::~MsgQueryFriendRankListReq() {
  SharedDtor();
}

void MsgQueryFriendRankListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQueryFriendRankListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryFriendRankListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryFriendRankListReq_descriptor_;
}

const MsgQueryFriendRankListReq& MsgQueryFriendRankListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgQueryFriendRankListReq* MsgQueryFriendRankListReq::default_instance_ = NULL;

MsgQueryFriendRankListReq* MsgQueryFriendRankListReq::New() const {
  return new MsgQueryFriendRankListReq;
}

void MsgQueryFriendRankListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rankid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryFriendRankListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rankid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgQueryFriendRankListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rankid = 1;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rankid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgQueryFriendRankListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rankid = 1;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rankid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgQueryFriendRankListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rankid = 1;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryFriendRankListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryFriendRankListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryFriendRankListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryFriendRankListReq::MergeFrom(const MsgQueryFriendRankListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryFriendRankListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryFriendRankListReq::CopyFrom(const MsgQueryFriendRankListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryFriendRankListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgQueryFriendRankListReq::Swap(MsgQueryFriendRankListReq* other) {
  if (other != this) {
    std::swap(rankid_, other->rankid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryFriendRankListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryFriendRankListReq_descriptor_;
  metadata.reflection = MsgQueryFriendRankListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryFriendRankListAck::kRankidFieldNumber;
const int MsgQueryFriendRankListAck::kRankdatasFieldNumber;
#endif  // !_MSC_VER

MsgQueryFriendRankListAck::MsgQueryFriendRankListAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgQueryFriendRankListAck::InitAsDefaultInstance() {
  rankdatas_ = const_cast< ::KFMsg::PBRankDatas*>(&::KFMsg::PBRankDatas::default_instance());
}

MsgQueryFriendRankListAck::MsgQueryFriendRankListAck(const MsgQueryFriendRankListAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgQueryFriendRankListAck::SharedCtor() {
  _cached_size_ = 0;
  rankid_ = 0u;
  rankdatas_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryFriendRankListAck::~MsgQueryFriendRankListAck() {
  SharedDtor();
}

void MsgQueryFriendRankListAck::SharedDtor() {
  if (this != default_instance_) {
    delete rankdatas_;
  }
}

void MsgQueryFriendRankListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryFriendRankListAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryFriendRankListAck_descriptor_;
}

const MsgQueryFriendRankListAck& MsgQueryFriendRankListAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgQueryFriendRankListAck* MsgQueryFriendRankListAck::default_instance_ = NULL;

MsgQueryFriendRankListAck* MsgQueryFriendRankListAck::New() const {
  return new MsgQueryFriendRankListAck;
}

void MsgQueryFriendRankListAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rankid_ = 0u;
    if (has_rankdatas()) {
      if (rankdatas_ != NULL) rankdatas_->::KFMsg::PBRankDatas::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryFriendRankListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rankid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rankdatas;
        break;
      }

      // required .KFMsg.PBRankDatas rankdatas = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankdatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rankdatas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgQueryFriendRankListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rankid = 1;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rankid(), output);
  }

  // required .KFMsg.PBRankDatas rankdatas = 2;
  if (has_rankdatas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rankdatas(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgQueryFriendRankListAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rankid = 1;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rankid(), target);
  }

  // required .KFMsg.PBRankDatas rankdatas = 2;
  if (has_rankdatas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rankdatas(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgQueryFriendRankListAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rankid = 1;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

    // required .KFMsg.PBRankDatas rankdatas = 2;
    if (has_rankdatas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rankdatas());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryFriendRankListAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryFriendRankListAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryFriendRankListAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryFriendRankListAck::MergeFrom(const MsgQueryFriendRankListAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_rankdatas()) {
      mutable_rankdatas()->::KFMsg::PBRankDatas::MergeFrom(from.rankdatas());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryFriendRankListAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryFriendRankListAck::CopyFrom(const MsgQueryFriendRankListAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryFriendRankListAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgQueryFriendRankListAck::Swap(MsgQueryFriendRankListAck* other) {
  if (other != this) {
    std::swap(rankid_, other->rankid_);
    std::swap(rankdatas_, other->rankdatas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryFriendRankListAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryFriendRankListAck_descriptor_;
  metadata.reflection = MsgQueryFriendRankListAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSevenSignInRewardReq::kDayFieldNumber;
#endif  // !_MSC_VER

MsgSevenSignInRewardReq::MsgSevenSignInRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSevenSignInRewardReq::InitAsDefaultInstance() {
}

MsgSevenSignInRewardReq::MsgSevenSignInRewardReq(const MsgSevenSignInRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSevenSignInRewardReq::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSevenSignInRewardReq::~MsgSevenSignInRewardReq() {
  SharedDtor();
}

void MsgSevenSignInRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSevenSignInRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSevenSignInRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSevenSignInRewardReq_descriptor_;
}

const MsgSevenSignInRewardReq& MsgSevenSignInRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgSevenSignInRewardReq* MsgSevenSignInRewardReq::default_instance_ = NULL;

MsgSevenSignInRewardReq* MsgSevenSignInRewardReq::New() const {
  return new MsgSevenSignInRewardReq;
}

void MsgSevenSignInRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSevenSignInRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSevenSignInRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSevenSignInRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSevenSignInRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSevenSignInRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSevenSignInRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSevenSignInRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSevenSignInRewardReq::MergeFrom(const MsgSevenSignInRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSevenSignInRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSevenSignInRewardReq::CopyFrom(const MsgSevenSignInRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSevenSignInRewardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgSevenSignInRewardReq::Swap(MsgSevenSignInRewardReq* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSevenSignInRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSevenSignInRewardReq_descriptor_;
  metadata.reflection = MsgSevenSignInRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTellSevenExtendReward::kPlayernameFieldNumber;
const int MsgTellSevenExtendReward::kRewardFieldNumber;
#endif  // !_MSC_VER

MsgTellSevenExtendReward::MsgTellSevenExtendReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgTellSevenExtendReward::InitAsDefaultInstance() {
}

MsgTellSevenExtendReward::MsgTellSevenExtendReward(const MsgTellSevenExtendReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgTellSevenExtendReward::SharedCtor() {
  _cached_size_ = 0;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTellSevenExtendReward::~MsgTellSevenExtendReward() {
  SharedDtor();
}

void MsgTellSevenExtendReward::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (reward_ != &::google::protobuf::internal::kEmptyString) {
    delete reward_;
  }
  if (this != default_instance_) {
  }
}

void MsgTellSevenExtendReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTellSevenExtendReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTellSevenExtendReward_descriptor_;
}

const MsgTellSevenExtendReward& MsgTellSevenExtendReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgTellSevenExtendReward* MsgTellSevenExtendReward::default_instance_ = NULL;

MsgTellSevenExtendReward* MsgTellSevenExtendReward::New() const {
  return new MsgTellSevenExtendReward;
}

void MsgTellSevenExtendReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    if (has_reward()) {
      if (reward_ != &::google::protobuf::internal::kEmptyString) {
        reward_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTellSevenExtendReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playername = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // required string reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reward().data(), this->reward().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgTellSevenExtendReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playername = 1;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playername(), output);
  }

  // required string reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reward().data(), this->reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgTellSevenExtendReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playername = 1;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playername(), target);
  }

  // required string reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reward().data(), this->reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgTellSevenExtendReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playername = 1;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // required string reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTellSevenExtendReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTellSevenExtendReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTellSevenExtendReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTellSevenExtendReward::MergeFrom(const MsgTellSevenExtendReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTellSevenExtendReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTellSevenExtendReward::CopyFrom(const MsgTellSevenExtendReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTellSevenExtendReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgTellSevenExtendReward::Swap(MsgTellSevenExtendReward* other) {
  if (other != this) {
    std::swap(playername_, other->playername_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTellSevenExtendReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTellSevenExtendReward_descriptor_;
  metadata.reflection = MsgTellSevenExtendReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCreateGuildReq::kGuildnameFieldNumber;
const int MsgCreateGuildReq::kMedalFieldNumber;
const int MsgCreateGuildReq::kManifestoFieldNumber;
#endif  // !_MSC_VER

MsgCreateGuildReq::MsgCreateGuildReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCreateGuildReq::InitAsDefaultInstance() {
}

MsgCreateGuildReq::MsgCreateGuildReq(const MsgCreateGuildReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCreateGuildReq::SharedCtor() {
  _cached_size_ = 0;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  medal_ = 0u;
  manifesto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCreateGuildReq::~MsgCreateGuildReq() {
  SharedDtor();
}

void MsgCreateGuildReq::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (manifesto_ != &::google::protobuf::internal::kEmptyString) {
    delete manifesto_;
  }
  if (this != default_instance_) {
  }
}

void MsgCreateGuildReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCreateGuildReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCreateGuildReq_descriptor_;
}

const MsgCreateGuildReq& MsgCreateGuildReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgCreateGuildReq* MsgCreateGuildReq::default_instance_ = NULL;

MsgCreateGuildReq* MsgCreateGuildReq::New() const {
  return new MsgCreateGuildReq;
}

void MsgCreateGuildReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    medal_ = 0u;
    if (has_manifesto()) {
      if (manifesto_ != &::google::protobuf::internal::kEmptyString) {
        manifesto_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCreateGuildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string guildname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_medal;
        break;
      }

      // required uint32 medal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_medal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &medal_)));
          set_has_medal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_manifesto;
        break;
      }

      // optional string manifesto = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manifesto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manifesto()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->manifesto().data(), this->manifesto().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCreateGuildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string guildname = 1;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guildname(), output);
  }

  // required uint32 medal = 2;
  if (has_medal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->medal(), output);
  }

  // optional string manifesto = 3;
  if (has_manifesto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manifesto().data(), this->manifesto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->manifesto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCreateGuildReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string guildname = 1;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guildname(), target);
  }

  // required uint32 medal = 2;
  if (has_medal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->medal(), target);
  }

  // optional string manifesto = 3;
  if (has_manifesto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manifesto().data(), this->manifesto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->manifesto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCreateGuildReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string guildname = 1;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // required uint32 medal = 2;
    if (has_medal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->medal());
    }

    // optional string manifesto = 3;
    if (has_manifesto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manifesto());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCreateGuildReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCreateGuildReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCreateGuildReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCreateGuildReq::MergeFrom(const MsgCreateGuildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_medal()) {
      set_medal(from.medal());
    }
    if (from.has_manifesto()) {
      set_manifesto(from.manifesto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCreateGuildReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCreateGuildReq::CopyFrom(const MsgCreateGuildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreateGuildReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgCreateGuildReq::Swap(MsgCreateGuildReq* other) {
  if (other != this) {
    std::swap(guildname_, other->guildname_);
    std::swap(medal_, other->medal_);
    std::swap(manifesto_, other->manifesto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCreateGuildReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCreateGuildReq_descriptor_;
  metadata.reflection = MsgCreateGuildReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgInviteGuildReq::kInviteridFieldNumber;
#endif  // !_MSC_VER

MsgInviteGuildReq::MsgInviteGuildReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgInviteGuildReq::InitAsDefaultInstance() {
}

MsgInviteGuildReq::MsgInviteGuildReq(const MsgInviteGuildReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgInviteGuildReq::SharedCtor() {
  _cached_size_ = 0;
  inviterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgInviteGuildReq::~MsgInviteGuildReq() {
  SharedDtor();
}

void MsgInviteGuildReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgInviteGuildReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgInviteGuildReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgInviteGuildReq_descriptor_;
}

const MsgInviteGuildReq& MsgInviteGuildReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgInviteGuildReq* MsgInviteGuildReq::default_instance_ = NULL;

MsgInviteGuildReq* MsgInviteGuildReq::New() const {
  return new MsgInviteGuildReq;
}

void MsgInviteGuildReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    inviterid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgInviteGuildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 inviterid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviterid_)));
          set_has_inviterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgInviteGuildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 inviterid = 1;
  if (has_inviterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->inviterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgInviteGuildReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 inviterid = 1;
  if (has_inviterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->inviterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgInviteGuildReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 inviterid = 1;
    if (has_inviterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inviterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgInviteGuildReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgInviteGuildReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgInviteGuildReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgInviteGuildReq::MergeFrom(const MsgInviteGuildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inviterid()) {
      set_inviterid(from.inviterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgInviteGuildReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgInviteGuildReq::CopyFrom(const MsgInviteGuildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInviteGuildReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgInviteGuildReq::Swap(MsgInviteGuildReq* other) {
  if (other != this) {
    std::swap(inviterid_, other->inviterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgInviteGuildReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgInviteGuildReq_descriptor_;
  metadata.reflection = MsgInviteGuildReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgApplyGuildReq::kGuildidFieldNumber;
const int MsgApplyGuildReq::kInvitorFieldNumber;
#endif  // !_MSC_VER

MsgApplyGuildReq::MsgApplyGuildReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgApplyGuildReq::InitAsDefaultInstance() {
}

MsgApplyGuildReq::MsgApplyGuildReq(const MsgApplyGuildReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgApplyGuildReq::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  invitor_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgApplyGuildReq::~MsgApplyGuildReq() {
  SharedDtor();
}

void MsgApplyGuildReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgApplyGuildReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgApplyGuildReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgApplyGuildReq_descriptor_;
}

const MsgApplyGuildReq& MsgApplyGuildReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgApplyGuildReq* MsgApplyGuildReq::default_instance_ = NULL;

MsgApplyGuildReq* MsgApplyGuildReq::New() const {
  return new MsgApplyGuildReq;
}

void MsgApplyGuildReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    invitor_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgApplyGuildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 guildid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_invitor;
        break;
      }

      // required uint64 invitor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invitor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invitor_)));
          set_has_invitor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgApplyGuildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 guildid = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // required uint64 invitor = 2;
  if (has_invitor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->invitor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgApplyGuildReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 guildid = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // required uint64 invitor = 2;
  if (has_invitor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->invitor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgApplyGuildReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 guildid = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required uint64 invitor = 2;
    if (has_invitor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invitor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgApplyGuildReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgApplyGuildReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgApplyGuildReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgApplyGuildReq::MergeFrom(const MsgApplyGuildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_invitor()) {
      set_invitor(from.invitor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgApplyGuildReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgApplyGuildReq::CopyFrom(const MsgApplyGuildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgApplyGuildReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgApplyGuildReq::Swap(MsgApplyGuildReq* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(invitor_, other->invitor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgApplyGuildReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgApplyGuildReq_descriptor_;
  metadata.reflection = MsgApplyGuildReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgExitGuildReq::MsgExitGuildReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgExitGuildReq::InitAsDefaultInstance() {
}

MsgExitGuildReq::MsgExitGuildReq(const MsgExitGuildReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgExitGuildReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgExitGuildReq::~MsgExitGuildReq() {
  SharedDtor();
}

void MsgExitGuildReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgExitGuildReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgExitGuildReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgExitGuildReq_descriptor_;
}

const MsgExitGuildReq& MsgExitGuildReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgExitGuildReq* MsgExitGuildReq::default_instance_ = NULL;

MsgExitGuildReq* MsgExitGuildReq::New() const {
  return new MsgExitGuildReq;
}

void MsgExitGuildReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgExitGuildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgExitGuildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgExitGuildReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgExitGuildReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgExitGuildReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgExitGuildReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgExitGuildReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgExitGuildReq::MergeFrom(const MsgExitGuildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgExitGuildReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgExitGuildReq::CopyFrom(const MsgExitGuildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgExitGuildReq::IsInitialized() const {

  return true;
}

void MsgExitGuildReq::Swap(MsgExitGuildReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgExitGuildReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgExitGuildReq_descriptor_;
  metadata.reflection = MsgExitGuildReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTransferMasterReq::kNewmasteridFieldNumber;
#endif  // !_MSC_VER

MsgTransferMasterReq::MsgTransferMasterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgTransferMasterReq::InitAsDefaultInstance() {
}

MsgTransferMasterReq::MsgTransferMasterReq(const MsgTransferMasterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgTransferMasterReq::SharedCtor() {
  _cached_size_ = 0;
  newmasterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTransferMasterReq::~MsgTransferMasterReq() {
  SharedDtor();
}

void MsgTransferMasterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgTransferMasterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTransferMasterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTransferMasterReq_descriptor_;
}

const MsgTransferMasterReq& MsgTransferMasterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgTransferMasterReq* MsgTransferMasterReq::default_instance_ = NULL;

MsgTransferMasterReq* MsgTransferMasterReq::New() const {
  return new MsgTransferMasterReq;
}

void MsgTransferMasterReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    newmasterid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTransferMasterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 newmasterid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newmasterid_)));
          set_has_newmasterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgTransferMasterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 newmasterid = 1;
  if (has_newmasterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->newmasterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgTransferMasterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 newmasterid = 1;
  if (has_newmasterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->newmasterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgTransferMasterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 newmasterid = 1;
    if (has_newmasterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newmasterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTransferMasterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTransferMasterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTransferMasterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTransferMasterReq::MergeFrom(const MsgTransferMasterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newmasterid()) {
      set_newmasterid(from.newmasterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTransferMasterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTransferMasterReq::CopyFrom(const MsgTransferMasterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTransferMasterReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgTransferMasterReq::Swap(MsgTransferMasterReq* other) {
  if (other != this) {
    std::swap(newmasterid_, other->newmasterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTransferMasterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTransferMasterReq_descriptor_;
  metadata.reflection = MsgTransferMasterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgReviewApplyReq::kPlayeridFieldNumber;
const int MsgReviewApplyReq::kOperatortypeFieldNumber;
#endif  // !_MSC_VER

MsgReviewApplyReq::MsgReviewApplyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgReviewApplyReq::InitAsDefaultInstance() {
}

MsgReviewApplyReq::MsgReviewApplyReq(const MsgReviewApplyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgReviewApplyReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  operatortype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgReviewApplyReq::~MsgReviewApplyReq() {
  SharedDtor();
}

void MsgReviewApplyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgReviewApplyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgReviewApplyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgReviewApplyReq_descriptor_;
}

const MsgReviewApplyReq& MsgReviewApplyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgReviewApplyReq* MsgReviewApplyReq::default_instance_ = NULL;

MsgReviewApplyReq* MsgReviewApplyReq::New() const {
  return new MsgReviewApplyReq;
}

void MsgReviewApplyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    operatortype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgReviewApplyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operatortype;
        break;
      }

      // required uint32 operatortype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operatortype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operatortype_)));
          set_has_operatortype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgReviewApplyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 operatortype = 2;
  if (has_operatortype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->operatortype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgReviewApplyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 operatortype = 2;
  if (has_operatortype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->operatortype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgReviewApplyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 operatortype = 2;
    if (has_operatortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operatortype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgReviewApplyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgReviewApplyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgReviewApplyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgReviewApplyReq::MergeFrom(const MsgReviewApplyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_operatortype()) {
      set_operatortype(from.operatortype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgReviewApplyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgReviewApplyReq::CopyFrom(const MsgReviewApplyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgReviewApplyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void MsgReviewApplyReq::Swap(MsgReviewApplyReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(operatortype_, other->operatortype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgReviewApplyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgReviewApplyReq_descriptor_;
  metadata.reflection = MsgReviewApplyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgDissolveGuildReq::MsgDissolveGuildReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgDissolveGuildReq::InitAsDefaultInstance() {
}

MsgDissolveGuildReq::MsgDissolveGuildReq(const MsgDissolveGuildReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgDissolveGuildReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDissolveGuildReq::~MsgDissolveGuildReq() {
  SharedDtor();
}

void MsgDissolveGuildReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgDissolveGuildReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDissolveGuildReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDissolveGuildReq_descriptor_;
}

const MsgDissolveGuildReq& MsgDissolveGuildReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgDissolveGuildReq* MsgDissolveGuildReq::default_instance_ = NULL;

MsgDissolveGuildReq* MsgDissolveGuildReq::New() const {
  return new MsgDissolveGuildReq;
}

void MsgDissolveGuildReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDissolveGuildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgDissolveGuildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgDissolveGuildReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgDissolveGuildReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDissolveGuildReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDissolveGuildReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDissolveGuildReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDissolveGuildReq::MergeFrom(const MsgDissolveGuildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDissolveGuildReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDissolveGuildReq::CopyFrom(const MsgDissolveGuildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDissolveGuildReq::IsInitialized() const {

  return true;
}

void MsgDissolveGuildReq::Swap(MsgDissolveGuildReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDissolveGuildReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDissolveGuildReq_descriptor_;
  metadata.reflection = MsgDissolveGuildReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgModifyGuildMedalReq::kNewmedalFieldNumber;
#endif  // !_MSC_VER

MsgModifyGuildMedalReq::MsgModifyGuildMedalReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgModifyGuildMedalReq::InitAsDefaultInstance() {
}

MsgModifyGuildMedalReq::MsgModifyGuildMedalReq(const MsgModifyGuildMedalReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgModifyGuildMedalReq::SharedCtor() {
  _cached_size_ = 0;
  newmedal_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgModifyGuildMedalReq::~MsgModifyGuildMedalReq() {
  SharedDtor();
}

void MsgModifyGuildMedalReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgModifyGuildMedalReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgModifyGuildMedalReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgModifyGuildMedalReq_descriptor_;
}

const MsgModifyGuildMedalReq& MsgModifyGuildMedalReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgModifyGuildMedalReq* MsgModifyGuildMedalReq::default_instance_ = NULL;

MsgModifyGuildMedalReq* MsgModifyGuildMedalReq::New() const {
  return new MsgModifyGuildMedalReq;
}

void MsgModifyGuildMedalReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    newmedal_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgModifyGuildMedalReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 newmedal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newmedal_)));
          set_has_newmedal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgModifyGuildMedalReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 newmedal = 1;
  if (has_newmedal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->newmedal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgModifyGuildMedalReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 newmedal = 1;
  if (has_newmedal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->newmedal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgModifyGuildMedalReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 newmedal = 1;
    if (has_newmedal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newmedal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgModifyGuildMedalReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgModifyGuildMedalReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgModifyGuildMedalReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgModifyGuildMedalReq::MergeFrom(const MsgModifyGuildMedalReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newmedal()) {
      set_newmedal(from.newmedal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgModifyGuildMedalReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgModifyGuildMedalReq::CopyFrom(const MsgModifyGuildMedalReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgModifyGuildMedalReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgModifyGuildMedalReq::Swap(MsgModifyGuildMedalReq* other) {
  if (other != this) {
    std::swap(newmedal_, other->newmedal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgModifyGuildMedalReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgModifyGuildMedalReq_descriptor_;
  metadata.reflection = MsgModifyGuildMedalReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryGuildListReq::kGuildsFieldNumber;
const int MsgQueryGuildListReq::kCursorFieldNumber;
#endif  // !_MSC_VER

MsgQueryGuildListReq::MsgQueryGuildListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgQueryGuildListReq::InitAsDefaultInstance() {
  guilds_ = const_cast< ::KFMsg::PBGuildIdArray*>(&::KFMsg::PBGuildIdArray::default_instance());
}

MsgQueryGuildListReq::MsgQueryGuildListReq(const MsgQueryGuildListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgQueryGuildListReq::SharedCtor() {
  _cached_size_ = 0;
  guilds_ = NULL;
  cursor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryGuildListReq::~MsgQueryGuildListReq() {
  SharedDtor();
}

void MsgQueryGuildListReq::SharedDtor() {
  if (this != default_instance_) {
    delete guilds_;
  }
}

void MsgQueryGuildListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryGuildListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryGuildListReq_descriptor_;
}

const MsgQueryGuildListReq& MsgQueryGuildListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgQueryGuildListReq* MsgQueryGuildListReq::default_instance_ = NULL;

MsgQueryGuildListReq* MsgQueryGuildListReq::New() const {
  return new MsgQueryGuildListReq;
}

void MsgQueryGuildListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guilds()) {
      if (guilds_ != NULL) guilds_->::KFMsg::PBGuildIdArray::Clear();
    }
    cursor_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryGuildListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .KFMsg.PBGuildIdArray guilds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guilds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cursor;
        break;
      }

      // required uint32 cursor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cursor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cursor_)));
          set_has_cursor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgQueryGuildListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .KFMsg.PBGuildIdArray guilds = 1;
  if (has_guilds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guilds(), output);
  }

  // required uint32 cursor = 2;
  if (has_cursor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cursor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgQueryGuildListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .KFMsg.PBGuildIdArray guilds = 1;
  if (has_guilds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guilds(), target);
  }

  // required uint32 cursor = 2;
  if (has_cursor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cursor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgQueryGuildListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .KFMsg.PBGuildIdArray guilds = 1;
    if (has_guilds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guilds());
    }

    // required uint32 cursor = 2;
    if (has_cursor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cursor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryGuildListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryGuildListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryGuildListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryGuildListReq::MergeFrom(const MsgQueryGuildListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guilds()) {
      mutable_guilds()->::KFMsg::PBGuildIdArray::MergeFrom(from.guilds());
    }
    if (from.has_cursor()) {
      set_cursor(from.cursor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryGuildListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryGuildListReq::CopyFrom(const MsgQueryGuildListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryGuildListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void MsgQueryGuildListReq::Swap(MsgQueryGuildListReq* other) {
  if (other != this) {
    std::swap(guilds_, other->guilds_);
    std::swap(cursor_, other->cursor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryGuildListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryGuildListReq_descriptor_;
  metadata.reflection = MsgQueryGuildListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryGuildListAck::kGuilddatasFieldNumber;
#endif  // !_MSC_VER

MsgQueryGuildListAck::MsgQueryGuildListAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgQueryGuildListAck::InitAsDefaultInstance() {
}

MsgQueryGuildListAck::MsgQueryGuildListAck(const MsgQueryGuildListAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgQueryGuildListAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryGuildListAck::~MsgQueryGuildListAck() {
  SharedDtor();
}

void MsgQueryGuildListAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQueryGuildListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryGuildListAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryGuildListAck_descriptor_;
}

const MsgQueryGuildListAck& MsgQueryGuildListAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgQueryGuildListAck* MsgQueryGuildListAck::default_instance_ = NULL;

MsgQueryGuildListAck* MsgQueryGuildListAck::New() const {
  return new MsgQueryGuildListAck;
}

void MsgQueryGuildListAck::Clear() {
  guilddatas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryGuildListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .KFMsg.PBStrings guilddatas = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guilddatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guilddatas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guilddatas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgQueryGuildListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .KFMsg.PBStrings guilddatas = 1;
  for (int i = 0; i < this->guilddatas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guilddatas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgQueryGuildListAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .KFMsg.PBStrings guilddatas = 1;
  for (int i = 0; i < this->guilddatas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guilddatas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgQueryGuildListAck::ByteSize() const {
  int total_size = 0;

  // repeated .KFMsg.PBStrings guilddatas = 1;
  total_size += 1 * this->guilddatas_size();
  for (int i = 0; i < this->guilddatas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guilddatas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryGuildListAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryGuildListAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryGuildListAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryGuildListAck::MergeFrom(const MsgQueryGuildListAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  guilddatas_.MergeFrom(from.guilddatas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryGuildListAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryGuildListAck::CopyFrom(const MsgQueryGuildListAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryGuildListAck::IsInitialized() const {

  return true;
}

void MsgQueryGuildListAck::Swap(MsgQueryGuildListAck* other) {
  if (other != this) {
    guilddatas_.Swap(&other->guilddatas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryGuildListAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryGuildListAck_descriptor_;
  metadata.reflection = MsgQueryGuildListAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgKickMemberReq::kToplayeridFieldNumber;
#endif  // !_MSC_VER

MsgKickMemberReq::MsgKickMemberReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgKickMemberReq::InitAsDefaultInstance() {
}

MsgKickMemberReq::MsgKickMemberReq(const MsgKickMemberReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgKickMemberReq::SharedCtor() {
  _cached_size_ = 0;
  toplayerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgKickMemberReq::~MsgKickMemberReq() {
  SharedDtor();
}

void MsgKickMemberReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgKickMemberReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgKickMemberReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgKickMemberReq_descriptor_;
}

const MsgKickMemberReq& MsgKickMemberReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgKickMemberReq* MsgKickMemberReq::default_instance_ = NULL;

MsgKickMemberReq* MsgKickMemberReq::New() const {
  return new MsgKickMemberReq;
}

void MsgKickMemberReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    toplayerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgKickMemberReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 toplayerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &toplayerid_)));
          set_has_toplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgKickMemberReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 toplayerid = 1;
  if (has_toplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->toplayerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgKickMemberReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 toplayerid = 1;
  if (has_toplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->toplayerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgKickMemberReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 toplayerid = 1;
    if (has_toplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->toplayerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgKickMemberReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgKickMemberReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgKickMemberReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgKickMemberReq::MergeFrom(const MsgKickMemberReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_toplayerid()) {
      set_toplayerid(from.toplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgKickMemberReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgKickMemberReq::CopyFrom(const MsgKickMemberReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgKickMemberReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgKickMemberReq::Swap(MsgKickMemberReq* other) {
  if (other != this) {
    std::swap(toplayerid_, other->toplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgKickMemberReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgKickMemberReq_descriptor_;
  metadata.reflection = MsgKickMemberReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgUpgradeGuildReq::MsgUpgradeGuildReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgUpgradeGuildReq::InitAsDefaultInstance() {
}

MsgUpgradeGuildReq::MsgUpgradeGuildReq(const MsgUpgradeGuildReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgUpgradeGuildReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUpgradeGuildReq::~MsgUpgradeGuildReq() {
  SharedDtor();
}

void MsgUpgradeGuildReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgUpgradeGuildReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgUpgradeGuildReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUpgradeGuildReq_descriptor_;
}

const MsgUpgradeGuildReq& MsgUpgradeGuildReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgUpgradeGuildReq* MsgUpgradeGuildReq::default_instance_ = NULL;

MsgUpgradeGuildReq* MsgUpgradeGuildReq::New() const {
  return new MsgUpgradeGuildReq;
}

void MsgUpgradeGuildReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUpgradeGuildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgUpgradeGuildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUpgradeGuildReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUpgradeGuildReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgUpgradeGuildReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUpgradeGuildReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUpgradeGuildReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUpgradeGuildReq::MergeFrom(const MsgUpgradeGuildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUpgradeGuildReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUpgradeGuildReq::CopyFrom(const MsgUpgradeGuildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUpgradeGuildReq::IsInitialized() const {

  return true;
}

void MsgUpgradeGuildReq::Swap(MsgUpgradeGuildReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUpgradeGuildReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUpgradeGuildReq_descriptor_;
  metadata.reflection = MsgUpgradeGuildReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAppointGuildMemberReq::kToplayeridFieldNumber;
const int MsgAppointGuildMemberReq::kTitleFieldNumber;
#endif  // !_MSC_VER

MsgAppointGuildMemberReq::MsgAppointGuildMemberReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgAppointGuildMemberReq::InitAsDefaultInstance() {
}

MsgAppointGuildMemberReq::MsgAppointGuildMemberReq(const MsgAppointGuildMemberReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgAppointGuildMemberReq::SharedCtor() {
  _cached_size_ = 0;
  toplayerid_ = 0u;
  title_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAppointGuildMemberReq::~MsgAppointGuildMemberReq() {
  SharedDtor();
}

void MsgAppointGuildMemberReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgAppointGuildMemberReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgAppointGuildMemberReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAppointGuildMemberReq_descriptor_;
}

const MsgAppointGuildMemberReq& MsgAppointGuildMemberReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgAppointGuildMemberReq* MsgAppointGuildMemberReq::default_instance_ = NULL;

MsgAppointGuildMemberReq* MsgAppointGuildMemberReq::New() const {
  return new MsgAppointGuildMemberReq;
}

void MsgAppointGuildMemberReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    toplayerid_ = 0u;
    title_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAppointGuildMemberReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 toplayerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &toplayerid_)));
          set_has_toplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_title;
        break;
      }

      // required uint32 title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAppointGuildMemberReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 toplayerid = 1;
  if (has_toplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->toplayerid(), output);
  }

  // required uint32 title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->title(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAppointGuildMemberReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 toplayerid = 1;
  if (has_toplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->toplayerid(), target);
  }

  // required uint32 title = 2;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->title(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAppointGuildMemberReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 toplayerid = 1;
    if (has_toplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->toplayerid());
    }

    // required uint32 title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->title());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgAppointGuildMemberReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAppointGuildMemberReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAppointGuildMemberReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAppointGuildMemberReq::MergeFrom(const MsgAppointGuildMemberReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_toplayerid()) {
      set_toplayerid(from.toplayerid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAppointGuildMemberReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAppointGuildMemberReq::CopyFrom(const MsgAppointGuildMemberReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAppointGuildMemberReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgAppointGuildMemberReq::Swap(MsgAppointGuildMemberReq* other) {
  if (other != this) {
    std::swap(toplayerid_, other->toplayerid_);
    std::swap(title_, other->title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAppointGuildMemberReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAppointGuildMemberReq_descriptor_;
  metadata.reflection = MsgAppointGuildMemberReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSearchGuildByNameReq::kGuildnameFieldNumber;
#endif  // !_MSC_VER

MsgSearchGuildByNameReq::MsgSearchGuildByNameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSearchGuildByNameReq::InitAsDefaultInstance() {
}

MsgSearchGuildByNameReq::MsgSearchGuildByNameReq(const MsgSearchGuildByNameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSearchGuildByNameReq::SharedCtor() {
  _cached_size_ = 0;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSearchGuildByNameReq::~MsgSearchGuildByNameReq() {
  SharedDtor();
}

void MsgSearchGuildByNameReq::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void MsgSearchGuildByNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSearchGuildByNameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSearchGuildByNameReq_descriptor_;
}

const MsgSearchGuildByNameReq& MsgSearchGuildByNameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgSearchGuildByNameReq* MsgSearchGuildByNameReq::default_instance_ = NULL;

MsgSearchGuildByNameReq* MsgSearchGuildByNameReq::New() const {
  return new MsgSearchGuildByNameReq;
}

void MsgSearchGuildByNameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSearchGuildByNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string guildname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSearchGuildByNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string guildname = 1;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guildname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSearchGuildByNameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string guildname = 1;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guildname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSearchGuildByNameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string guildname = 1;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSearchGuildByNameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSearchGuildByNameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSearchGuildByNameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSearchGuildByNameReq::MergeFrom(const MsgSearchGuildByNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSearchGuildByNameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSearchGuildByNameReq::CopyFrom(const MsgSearchGuildByNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSearchGuildByNameReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgSearchGuildByNameReq::Swap(MsgSearchGuildByNameReq* other) {
  if (other != this) {
    std::swap(guildname_, other->guildname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSearchGuildByNameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSearchGuildByNameReq_descriptor_;
  metadata.reflection = MsgSearchGuildByNameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSetGuildSwitchReq::kTypeFieldNumber;
const int MsgSetGuildSwitchReq::kFlagFieldNumber;
#endif  // !_MSC_VER

MsgSetGuildSwitchReq::MsgSetGuildSwitchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSetGuildSwitchReq::InitAsDefaultInstance() {
}

MsgSetGuildSwitchReq::MsgSetGuildSwitchReq(const MsgSetGuildSwitchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSetGuildSwitchReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSetGuildSwitchReq::~MsgSetGuildSwitchReq() {
  SharedDtor();
}

void MsgSetGuildSwitchReq::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void MsgSetGuildSwitchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSetGuildSwitchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSetGuildSwitchReq_descriptor_;
}

const MsgSetGuildSwitchReq& MsgSetGuildSwitchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgSetGuildSwitchReq* MsgSetGuildSwitchReq::default_instance_ = NULL;

MsgSetGuildSwitchReq* MsgSetGuildSwitchReq::New() const {
  return new MsgSetGuildSwitchReq;
}

void MsgSetGuildSwitchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSetGuildSwitchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // required uint32 flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSetGuildSwitchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }

  // required uint32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSetGuildSwitchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // required uint32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSetGuildSwitchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required uint32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSetGuildSwitchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSetGuildSwitchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSetGuildSwitchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSetGuildSwitchReq::MergeFrom(const MsgSetGuildSwitchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSetGuildSwitchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSetGuildSwitchReq::CopyFrom(const MsgSetGuildSwitchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSetGuildSwitchReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgSetGuildSwitchReq::Swap(MsgSetGuildSwitchReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSetGuildSwitchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSetGuildSwitchReq_descriptor_;
  metadata.reflection = MsgSetGuildSwitchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryGuildLogReq::kPageFieldNumber;
#endif  // !_MSC_VER

MsgQueryGuildLogReq::MsgQueryGuildLogReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgQueryGuildLogReq::InitAsDefaultInstance() {
}

MsgQueryGuildLogReq::MsgQueryGuildLogReq(const MsgQueryGuildLogReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgQueryGuildLogReq::SharedCtor() {
  _cached_size_ = 0;
  page_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryGuildLogReq::~MsgQueryGuildLogReq() {
  SharedDtor();
}

void MsgQueryGuildLogReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQueryGuildLogReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryGuildLogReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryGuildLogReq_descriptor_;
}

const MsgQueryGuildLogReq& MsgQueryGuildLogReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgQueryGuildLogReq* MsgQueryGuildLogReq::default_instance_ = NULL;

MsgQueryGuildLogReq* MsgQueryGuildLogReq::New() const {
  return new MsgQueryGuildLogReq;
}

void MsgQueryGuildLogReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    page_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryGuildLogReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 page = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgQueryGuildLogReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 page = 1;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->page(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgQueryGuildLogReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 page = 1;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->page(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgQueryGuildLogReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 page = 1;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryGuildLogReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryGuildLogReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryGuildLogReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryGuildLogReq::MergeFrom(const MsgQueryGuildLogReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page()) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryGuildLogReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryGuildLogReq::CopyFrom(const MsgQueryGuildLogReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryGuildLogReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgQueryGuildLogReq::Swap(MsgQueryGuildLogReq* other) {
  if (other != this) {
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryGuildLogReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryGuildLogReq_descriptor_;
  metadata.reflection = MsgQueryGuildLogReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryGuildLogAck::kPageFieldNumber;
const int MsgQueryGuildLogAck::kGuildlogFieldNumber;
#endif  // !_MSC_VER

MsgQueryGuildLogAck::MsgQueryGuildLogAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgQueryGuildLogAck::InitAsDefaultInstance() {
}

MsgQueryGuildLogAck::MsgQueryGuildLogAck(const MsgQueryGuildLogAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgQueryGuildLogAck::SharedCtor() {
  _cached_size_ = 0;
  page_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryGuildLogAck::~MsgQueryGuildLogAck() {
  SharedDtor();
}

void MsgQueryGuildLogAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQueryGuildLogAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryGuildLogAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryGuildLogAck_descriptor_;
}

const MsgQueryGuildLogAck& MsgQueryGuildLogAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgQueryGuildLogAck* MsgQueryGuildLogAck::default_instance_ = NULL;

MsgQueryGuildLogAck* MsgQueryGuildLogAck::New() const {
  return new MsgQueryGuildLogAck;
}

void MsgQueryGuildLogAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    page_ = 0u;
  }
  guildlog_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryGuildLogAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 page = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guildlog;
        break;
      }

      // repeated string guildlog = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildlog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_guildlog()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildlog(this->guildlog_size() - 1).data(),
            this->guildlog(this->guildlog_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guildlog;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgQueryGuildLogAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 page = 1;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->page(), output);
  }

  // repeated string guildlog = 2;
  for (int i = 0; i < this->guildlog_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->guildlog(i).data(), this->guildlog(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guildlog(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgQueryGuildLogAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 page = 1;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->page(), target);
  }

  // repeated string guildlog = 2;
  for (int i = 0; i < this->guildlog_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildlog(i).data(), this->guildlog(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->guildlog(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgQueryGuildLogAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 page = 1;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page());
    }

  }
  // repeated string guildlog = 2;
  total_size += 1 * this->guildlog_size();
  for (int i = 0; i < this->guildlog_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->guildlog(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryGuildLogAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryGuildLogAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryGuildLogAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryGuildLogAck::MergeFrom(const MsgQueryGuildLogAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildlog_.MergeFrom(from.guildlog_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page()) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryGuildLogAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryGuildLogAck::CopyFrom(const MsgQueryGuildLogAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryGuildLogAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgQueryGuildLogAck::Swap(MsgQueryGuildLogAck* other) {
  if (other != this) {
    std::swap(page_, other->page_);
    guildlog_.Swap(&other->guildlog_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryGuildLogAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryGuildLogAck_descriptor_;
  metadata.reflection = MsgQueryGuildLogAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTellMarquee::kContentFieldNumber;
#endif  // !_MSC_VER

MsgTellMarquee::MsgTellMarquee()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgTellMarquee::InitAsDefaultInstance() {
}

MsgTellMarquee::MsgTellMarquee(const MsgTellMarquee& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgTellMarquee::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTellMarquee::~MsgTellMarquee() {
  SharedDtor();
}

void MsgTellMarquee::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void MsgTellMarquee::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTellMarquee::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTellMarquee_descriptor_;
}

const MsgTellMarquee& MsgTellMarquee::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgTellMarquee* MsgTellMarquee::default_instance_ = NULL;

MsgTellMarquee* MsgTellMarquee::New() const {
  return new MsgTellMarquee;
}

void MsgTellMarquee::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTellMarquee::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgTellMarquee::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgTellMarquee::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgTellMarquee::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTellMarquee::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTellMarquee* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTellMarquee*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTellMarquee::MergeFrom(const MsgTellMarquee& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTellMarquee::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTellMarquee::CopyFrom(const MsgTellMarquee& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTellMarquee::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgTellMarquee::Swap(MsgTellMarquee* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTellMarquee::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTellMarquee_descriptor_;
  metadata.reflection = MsgTellMarquee_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTellSysNotcie::kContentFieldNumber;
#endif  // !_MSC_VER

MsgTellSysNotcie::MsgTellSysNotcie()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgTellSysNotcie::InitAsDefaultInstance() {
}

MsgTellSysNotcie::MsgTellSysNotcie(const MsgTellSysNotcie& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgTellSysNotcie::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTellSysNotcie::~MsgTellSysNotcie() {
  SharedDtor();
}

void MsgTellSysNotcie::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void MsgTellSysNotcie::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgTellSysNotcie::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTellSysNotcie_descriptor_;
}

const MsgTellSysNotcie& MsgTellSysNotcie::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgTellSysNotcie* MsgTellSysNotcie::default_instance_ = NULL;

MsgTellSysNotcie* MsgTellSysNotcie::New() const {
  return new MsgTellSysNotcie;
}

void MsgTellSysNotcie::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTellSysNotcie::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgTellSysNotcie::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgTellSysNotcie::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgTellSysNotcie::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgTellSysNotcie::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTellSysNotcie* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTellSysNotcie*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTellSysNotcie::MergeFrom(const MsgTellSysNotcie& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTellSysNotcie::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTellSysNotcie::CopyFrom(const MsgTellSysNotcie& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTellSysNotcie::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MsgTellSysNotcie::Swap(MsgTellSysNotcie* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTellSysNotcie::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTellSysNotcie_descriptor_;
  metadata.reflection = MsgTellSysNotcie_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBindAlipayReq::kNameFieldNumber;
const int MsgBindAlipayReq::kAlipayFieldNumber;
#endif  // !_MSC_VER

MsgBindAlipayReq::MsgBindAlipayReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgBindAlipayReq::InitAsDefaultInstance() {
}

MsgBindAlipayReq::MsgBindAlipayReq(const MsgBindAlipayReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgBindAlipayReq::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alipay_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBindAlipayReq::~MsgBindAlipayReq() {
  SharedDtor();
}

void MsgBindAlipayReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (alipay_ != &::google::protobuf::internal::kEmptyString) {
    delete alipay_;
  }
  if (this != default_instance_) {
  }
}

void MsgBindAlipayReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBindAlipayReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBindAlipayReq_descriptor_;
}

const MsgBindAlipayReq& MsgBindAlipayReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgBindAlipayReq* MsgBindAlipayReq::default_instance_ = NULL;

MsgBindAlipayReq* MsgBindAlipayReq::New() const {
  return new MsgBindAlipayReq;
}

void MsgBindAlipayReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_alipay()) {
      if (alipay_ != &::google::protobuf::internal::kEmptyString) {
        alipay_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBindAlipayReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_alipay;
        break;
      }

      // required string alipay = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alipay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alipay()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alipay().data(), this->alipay().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgBindAlipayReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string alipay = 2;
  if (has_alipay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alipay().data(), this->alipay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->alipay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgBindAlipayReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string alipay = 2;
  if (has_alipay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alipay().data(), this->alipay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->alipay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgBindAlipayReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string alipay = 2;
    if (has_alipay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alipay());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBindAlipayReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBindAlipayReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBindAlipayReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBindAlipayReq::MergeFrom(const MsgBindAlipayReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_alipay()) {
      set_alipay(from.alipay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBindAlipayReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBindAlipayReq::CopyFrom(const MsgBindAlipayReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBindAlipayReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgBindAlipayReq::Swap(MsgBindAlipayReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(alipay_, other->alipay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBindAlipayReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBindAlipayReq_descriptor_;
  metadata.reflection = MsgBindAlipayReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgExChangeInviteScoreReq::kNameFieldNumber;
const int MsgExChangeInviteScoreReq::kAlipayFieldNumber;
#endif  // !_MSC_VER

MsgExChangeInviteScoreReq::MsgExChangeInviteScoreReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgExChangeInviteScoreReq::InitAsDefaultInstance() {
}

MsgExChangeInviteScoreReq::MsgExChangeInviteScoreReq(const MsgExChangeInviteScoreReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgExChangeInviteScoreReq::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alipay_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgExChangeInviteScoreReq::~MsgExChangeInviteScoreReq() {
  SharedDtor();
}

void MsgExChangeInviteScoreReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (alipay_ != &::google::protobuf::internal::kEmptyString) {
    delete alipay_;
  }
  if (this != default_instance_) {
  }
}

void MsgExChangeInviteScoreReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgExChangeInviteScoreReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgExChangeInviteScoreReq_descriptor_;
}

const MsgExChangeInviteScoreReq& MsgExChangeInviteScoreReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgExChangeInviteScoreReq* MsgExChangeInviteScoreReq::default_instance_ = NULL;

MsgExChangeInviteScoreReq* MsgExChangeInviteScoreReq::New() const {
  return new MsgExChangeInviteScoreReq;
}

void MsgExChangeInviteScoreReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_alipay()) {
      if (alipay_ != &::google::protobuf::internal::kEmptyString) {
        alipay_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgExChangeInviteScoreReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_alipay;
        break;
      }

      // required string alipay = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alipay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alipay()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alipay().data(), this->alipay().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgExChangeInviteScoreReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string alipay = 2;
  if (has_alipay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alipay().data(), this->alipay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->alipay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgExChangeInviteScoreReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string alipay = 2;
  if (has_alipay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alipay().data(), this->alipay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->alipay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgExChangeInviteScoreReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string alipay = 2;
    if (has_alipay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alipay());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgExChangeInviteScoreReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgExChangeInviteScoreReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgExChangeInviteScoreReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgExChangeInviteScoreReq::MergeFrom(const MsgExChangeInviteScoreReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_alipay()) {
      set_alipay(from.alipay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgExChangeInviteScoreReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgExChangeInviteScoreReq::CopyFrom(const MsgExChangeInviteScoreReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgExChangeInviteScoreReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgExChangeInviteScoreReq::Swap(MsgExChangeInviteScoreReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(alipay_, other->alipay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgExChangeInviteScoreReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgExChangeInviteScoreReq_descriptor_;
  metadata.reflection = MsgExChangeInviteScoreReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgExChangeInviteScoreAck::kExchangescoreFieldNumber;
const int MsgExChangeInviteScoreAck::kLeftscoreFieldNumber;
#endif  // !_MSC_VER

MsgExChangeInviteScoreAck::MsgExChangeInviteScoreAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgExChangeInviteScoreAck::InitAsDefaultInstance() {
}

MsgExChangeInviteScoreAck::MsgExChangeInviteScoreAck(const MsgExChangeInviteScoreAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgExChangeInviteScoreAck::SharedCtor() {
  _cached_size_ = 0;
  exchangescore_ = 0u;
  leftscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgExChangeInviteScoreAck::~MsgExChangeInviteScoreAck() {
  SharedDtor();
}

void MsgExChangeInviteScoreAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgExChangeInviteScoreAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgExChangeInviteScoreAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgExChangeInviteScoreAck_descriptor_;
}

const MsgExChangeInviteScoreAck& MsgExChangeInviteScoreAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgExChangeInviteScoreAck* MsgExChangeInviteScoreAck::default_instance_ = NULL;

MsgExChangeInviteScoreAck* MsgExChangeInviteScoreAck::New() const {
  return new MsgExChangeInviteScoreAck;
}

void MsgExChangeInviteScoreAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exchangescore_ = 0u;
    leftscore_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgExChangeInviteScoreAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 exchangescore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exchangescore_)));
          set_has_exchangescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leftscore;
        break;
      }

      // required uint32 leftscore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftscore_)));
          set_has_leftscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgExChangeInviteScoreAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 exchangescore = 1;
  if (has_exchangescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exchangescore(), output);
  }

  // required uint32 leftscore = 2;
  if (has_leftscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->leftscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgExChangeInviteScoreAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 exchangescore = 1;
  if (has_exchangescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exchangescore(), target);
  }

  // required uint32 leftscore = 2;
  if (has_leftscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->leftscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgExChangeInviteScoreAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 exchangescore = 1;
    if (has_exchangescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exchangescore());
    }

    // required uint32 leftscore = 2;
    if (has_leftscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leftscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgExChangeInviteScoreAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgExChangeInviteScoreAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgExChangeInviteScoreAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgExChangeInviteScoreAck::MergeFrom(const MsgExChangeInviteScoreAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchangescore()) {
      set_exchangescore(from.exchangescore());
    }
    if (from.has_leftscore()) {
      set_leftscore(from.leftscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgExChangeInviteScoreAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgExChangeInviteScoreAck::CopyFrom(const MsgExChangeInviteScoreAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgExChangeInviteScoreAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgExChangeInviteScoreAck::Swap(MsgExChangeInviteScoreAck* other) {
  if (other != this) {
    std::swap(exchangescore_, other->exchangescore_);
    std::swap(leftscore_, other->leftscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgExChangeInviteScoreAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgExChangeInviteScoreAck_descriptor_;
  metadata.reflection = MsgExChangeInviteScoreAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgQueryInviteScoreReq::MsgQueryInviteScoreReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgQueryInviteScoreReq::InitAsDefaultInstance() {
}

MsgQueryInviteScoreReq::MsgQueryInviteScoreReq(const MsgQueryInviteScoreReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgQueryInviteScoreReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryInviteScoreReq::~MsgQueryInviteScoreReq() {
  SharedDtor();
}

void MsgQueryInviteScoreReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQueryInviteScoreReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryInviteScoreReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryInviteScoreReq_descriptor_;
}

const MsgQueryInviteScoreReq& MsgQueryInviteScoreReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgQueryInviteScoreReq* MsgQueryInviteScoreReq::default_instance_ = NULL;

MsgQueryInviteScoreReq* MsgQueryInviteScoreReq::New() const {
  return new MsgQueryInviteScoreReq;
}

void MsgQueryInviteScoreReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryInviteScoreReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgQueryInviteScoreReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgQueryInviteScoreReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgQueryInviteScoreReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryInviteScoreReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryInviteScoreReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryInviteScoreReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryInviteScoreReq::MergeFrom(const MsgQueryInviteScoreReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryInviteScoreReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryInviteScoreReq::CopyFrom(const MsgQueryInviteScoreReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryInviteScoreReq::IsInitialized() const {

  return true;
}

void MsgQueryInviteScoreReq::Swap(MsgQueryInviteScoreReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryInviteScoreReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryInviteScoreReq_descriptor_;
  metadata.reflection = MsgQueryInviteScoreReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgQueryInviteScoreAck::kExchangescoreFieldNumber;
const int MsgQueryInviteScoreAck::kLeftscoreFieldNumber;
#endif  // !_MSC_VER

MsgQueryInviteScoreAck::MsgQueryInviteScoreAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgQueryInviteScoreAck::InitAsDefaultInstance() {
}

MsgQueryInviteScoreAck::MsgQueryInviteScoreAck(const MsgQueryInviteScoreAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgQueryInviteScoreAck::SharedCtor() {
  _cached_size_ = 0;
  exchangescore_ = 0u;
  leftscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgQueryInviteScoreAck::~MsgQueryInviteScoreAck() {
  SharedDtor();
}

void MsgQueryInviteScoreAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgQueryInviteScoreAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgQueryInviteScoreAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgQueryInviteScoreAck_descriptor_;
}

const MsgQueryInviteScoreAck& MsgQueryInviteScoreAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgQueryInviteScoreAck* MsgQueryInviteScoreAck::default_instance_ = NULL;

MsgQueryInviteScoreAck* MsgQueryInviteScoreAck::New() const {
  return new MsgQueryInviteScoreAck;
}

void MsgQueryInviteScoreAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exchangescore_ = 0u;
    leftscore_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgQueryInviteScoreAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 exchangescore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exchangescore_)));
          set_has_exchangescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leftscore;
        break;
      }

      // required uint32 leftscore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftscore_)));
          set_has_leftscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgQueryInviteScoreAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 exchangescore = 1;
  if (has_exchangescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exchangescore(), output);
  }

  // required uint32 leftscore = 2;
  if (has_leftscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->leftscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgQueryInviteScoreAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 exchangescore = 1;
  if (has_exchangescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exchangescore(), target);
  }

  // required uint32 leftscore = 2;
  if (has_leftscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->leftscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgQueryInviteScoreAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 exchangescore = 1;
    if (has_exchangescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exchangescore());
    }

    // required uint32 leftscore = 2;
    if (has_leftscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leftscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgQueryInviteScoreAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgQueryInviteScoreAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgQueryInviteScoreAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgQueryInviteScoreAck::MergeFrom(const MsgQueryInviteScoreAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchangescore()) {
      set_exchangescore(from.exchangescore());
    }
    if (from.has_leftscore()) {
      set_leftscore(from.leftscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgQueryInviteScoreAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgQueryInviteScoreAck::CopyFrom(const MsgQueryInviteScoreAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryInviteScoreAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgQueryInviteScoreAck::Swap(MsgQueryInviteScoreAck* other) {
  if (other != this) {
    std::swap(exchangescore_, other->exchangescore_);
    std::swap(leftscore_, other->leftscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgQueryInviteScoreAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgQueryInviteScoreAck_descriptor_;
  metadata.reflection = MsgQueryInviteScoreAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgExChangeInviteRecordReq::MsgExChangeInviteRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgExChangeInviteRecordReq::InitAsDefaultInstance() {
}

MsgExChangeInviteRecordReq::MsgExChangeInviteRecordReq(const MsgExChangeInviteRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgExChangeInviteRecordReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgExChangeInviteRecordReq::~MsgExChangeInviteRecordReq() {
  SharedDtor();
}

void MsgExChangeInviteRecordReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgExChangeInviteRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgExChangeInviteRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgExChangeInviteRecordReq_descriptor_;
}

const MsgExChangeInviteRecordReq& MsgExChangeInviteRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgExChangeInviteRecordReq* MsgExChangeInviteRecordReq::default_instance_ = NULL;

MsgExChangeInviteRecordReq* MsgExChangeInviteRecordReq::New() const {
  return new MsgExChangeInviteRecordReq;
}

void MsgExChangeInviteRecordReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgExChangeInviteRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgExChangeInviteRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgExChangeInviteRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgExChangeInviteRecordReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgExChangeInviteRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgExChangeInviteRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgExChangeInviteRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgExChangeInviteRecordReq::MergeFrom(const MsgExChangeInviteRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgExChangeInviteRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgExChangeInviteRecordReq::CopyFrom(const MsgExChangeInviteRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgExChangeInviteRecordReq::IsInitialized() const {

  return true;
}

void MsgExChangeInviteRecordReq::Swap(MsgExChangeInviteRecordReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgExChangeInviteRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgExChangeInviteRecordReq_descriptor_;
  metadata.reflection = MsgExChangeInviteRecordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBExChangeInviteRecord::kNameFieldNumber;
const int PBExChangeInviteRecord::kAlipayFieldNumber;
const int PBExChangeInviteRecord::kScoreFieldNumber;
const int PBExChangeInviteRecord::kTimeFieldNumber;
#endif  // !_MSC_VER

PBExChangeInviteRecord::PBExChangeInviteRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBExChangeInviteRecord::InitAsDefaultInstance() {
}

PBExChangeInviteRecord::PBExChangeInviteRecord(const PBExChangeInviteRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBExChangeInviteRecord::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alipay_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBExChangeInviteRecord::~PBExChangeInviteRecord() {
  SharedDtor();
}

void PBExChangeInviteRecord::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (alipay_ != &::google::protobuf::internal::kEmptyString) {
    delete alipay_;
  }
  if (this != default_instance_) {
  }
}

void PBExChangeInviteRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBExChangeInviteRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBExChangeInviteRecord_descriptor_;
}

const PBExChangeInviteRecord& PBExChangeInviteRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

PBExChangeInviteRecord* PBExChangeInviteRecord::default_instance_ = NULL;

PBExChangeInviteRecord* PBExChangeInviteRecord::New() const {
  return new PBExChangeInviteRecord;
}

void PBExChangeInviteRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_alipay()) {
      if (alipay_ != &::google::protobuf::internal::kEmptyString) {
        alipay_->clear();
      }
    }
    score_ = 0u;
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBExChangeInviteRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_alipay;
        break;
      }

      // required string alipay = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alipay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alipay()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alipay().data(), this->alipay().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // required uint32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // required uint64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBExChangeInviteRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string alipay = 2;
  if (has_alipay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alipay().data(), this->alipay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->alipay(), output);
  }

  // required uint32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

  // required uint64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBExChangeInviteRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string alipay = 2;
  if (has_alipay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alipay().data(), this->alipay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->alipay(), target);
  }

  // required uint32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }

  // required uint64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBExChangeInviteRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string alipay = 2;
    if (has_alipay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alipay());
    }

    // required uint32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // required uint64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBExChangeInviteRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBExChangeInviteRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBExChangeInviteRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBExChangeInviteRecord::MergeFrom(const PBExChangeInviteRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_alipay()) {
      set_alipay(from.alipay());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBExChangeInviteRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBExChangeInviteRecord::CopyFrom(const PBExChangeInviteRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBExChangeInviteRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PBExChangeInviteRecord::Swap(PBExChangeInviteRecord* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(alipay_, other->alipay_);
    std::swap(score_, other->score_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBExChangeInviteRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBExChangeInviteRecord_descriptor_;
  metadata.reflection = PBExChangeInviteRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgExChangeInviteRecordAck::kRecordFieldNumber;
#endif  // !_MSC_VER

MsgExChangeInviteRecordAck::MsgExChangeInviteRecordAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgExChangeInviteRecordAck::InitAsDefaultInstance() {
}

MsgExChangeInviteRecordAck::MsgExChangeInviteRecordAck(const MsgExChangeInviteRecordAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgExChangeInviteRecordAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgExChangeInviteRecordAck::~MsgExChangeInviteRecordAck() {
  SharedDtor();
}

void MsgExChangeInviteRecordAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgExChangeInviteRecordAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgExChangeInviteRecordAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgExChangeInviteRecordAck_descriptor_;
}

const MsgExChangeInviteRecordAck& MsgExChangeInviteRecordAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFClientMessage_2eproto();
  return *default_instance_;
}

MsgExChangeInviteRecordAck* MsgExChangeInviteRecordAck::default_instance_ = NULL;

MsgExChangeInviteRecordAck* MsgExChangeInviteRecordAck::New() const {
  return new MsgExChangeInviteRecordAck;
}

void MsgExChangeInviteRecordAck::Clear() {
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgExChangeInviteRecordAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .KFMsg.PBExChangeInviteRecord record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgExChangeInviteRecordAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .KFMsg.PBExChangeInviteRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgExChangeInviteRecordAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .KFMsg.PBExChangeInviteRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgExChangeInviteRecordAck::ByteSize() const {
  int total_size = 0;

  // repeated .KFMsg.PBExChangeInviteRecord record = 1;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgExChangeInviteRecordAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgExChangeInviteRecordAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgExChangeInviteRecordAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgExChangeInviteRecordAck::MergeFrom(const MsgExChangeInviteRecordAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgExChangeInviteRecordAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgExChangeInviteRecordAck::CopyFrom(const MsgExChangeInviteRecordAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgExChangeInviteRecordAck::IsInitialized() const {

  for (int i = 0; i < record_size(); i++) {
    if (!this->record(i).IsInitialized()) return false;
  }
  return true;
}

void MsgExChangeInviteRecordAck::Swap(MsgExChangeInviteRecordAck* other) {
  if (other != this) {
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgExChangeInviteRecordAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgExChangeInviteRecordAck_descriptor_;
  metadata.reflection = MsgExChangeInviteRecordAck_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

// @@protoc_insertion_point(global_scope)
