// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFBattleMessage.proto

#ifndef PROTOBUF_KFBattleMessage_2eproto__INCLUDED
#define PROTOBUF_KFBattleMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "KFCommonMessage.pb.h"
// @@protoc_insertion_point(includes)

namespace KFMsg {

// Internal implementation detail -- do not call these.
void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
void protobuf_AssignDesc_KFBattleMessage_2eproto();
void protobuf_ShutdownFile_KFBattleMessage_2eproto();

class S2SRegisterBattleServerReq;
class S2SRegisterBattleServerAck;
class S2SRegisterServerToBattleShardReq;
class S2STellBattleRegisterToShardReq;
class S2SDisconnectServerToBattleShardReq;
class S2SCreateRoomToBattleProxyReq;
class S2SCreateRoomToBattleShardReq;
class S2SCreateRoomToMatchShardAck;
class S2SAddCampToBattleShardReq;
class S2SAddCampToMatchShardAck;
class S2SOpenBattleRoomReq;
class S2SOpenBattleRoomAck;
class S2SOpenBattleRoomToShardAck;
class S2SOpenRoomToMatchShardReq;
class S2SOpenRoomToBattleShardAck;
class S2SPlayerEnterBattleRoomReq;
class S2SPlayerEnterBattleRoomAck;
class S2SPlayerEnterRoomToBattleShardAck;
class S2SPlayerLoginBattleRoomReq;
class S2SPlayerLoginBattleRoomAck;
class S2SPlayerLoginRoomToBattleShardReq;
class S2SPlayerCancelMatchReq;
class S2SPlayerLeaveBattleRoomReq;
class S2SPlayerLeaveBattleRoomAck;
class S2SPlayerLeaveRoomToBattleShardReq;
class S2SPlayerLeaveRoomToMatchShardReq;
class S2SLeaveBattleRoomToClientAck;
class S2STellBattleRoomStartReq;
class S2STellRoomStartToBattleShardReq;
class S2STellBattleRoomStartAck;
class S2STellRoomStartToMatchShardReq;
class S2STellRoomStartToMatchShardAck;
class S2STellBattleRoomFinishReq;
class S2STellBattleRoomFinishAck;
class S2SBattleRoomScoreBalanceReq;
class S2SBattleRoomScoreBalanceAck;
class S2SBattleScoreBalanceToShardReq;
class S2SPlayerBattleScoreReq;
class S2SPlayerBattleScoreAck;
class S2SOnlieQueryBattleScoreReq;
class S2STellRoomFinishToBattleShardReq;
class S2STellRoomCloseToMatchShardReq;

enum BattleProtocol {
  S2S_REGISTER_BATTLE_SERVER_REQ = 11200,
  S2S_REGISTER_BATTLE_SERVER_ACK = 11201,
  S2S_DISCONNECT_SERVER_TO_BATTLE_SHARD_REQ = 11202,
  S2S_REGISTER_SERVER_TO_BATTLE_SHARD_REQ = 11203,
  S2S_CREATE_ROOM_TO_BATTLE_PROXY_REQ = 11204,
  S2S_CREATE_ROOM_TO_BATTLE_SHARD_REQ = 11205,
  S2S_CREATE_ROOM_TO_MATCH_SHARD_ACK = 11206,
  S2S_OPEN_BATTLE_ROOM_REQ = 11207,
  S2S_OPEN_BATTLE_ROOM_ACK = 11208,
  S2S_OPEN_ROOM_TO_BATTLE_SHARD_ACK = 11209,
  S2S_PLAYER_ENTER_BATTLE_ROOM_REQ = 11210,
  S2S_PLAYER_ENTER_BATTLE_ROOM_ACK = 11211,
  S2S_PLAYER_ENTER_ROOM_TO_BATTLE_SHARD_ACK = 11212,
  S2S_PLAYER_LEAVE_BATTLE_ROOM_REQ = 11213,
  S2S_PLAYER_LEAVE_ROOM_TO_MATCH_SHARD_REQ = 11214,
  S2S_TELL_BATTLE_ROOM_START_REQ = 11215,
  S2S_TELL_BATTLE_ROOM_START_ACK = 11216,
  S2S_TELL_ROOM_START_TO_MATCH_SHARD_REQ = 11217,
  S2S_OPEN_ROOM_TO_MATCH_SHARD_REQ = 11218,
  S2S_TELL_BATTLE_ROOM_FINISH_REQ = 11219,
  S2S_LEAVE_BATTLE_ROOM_TO_CLIENT_ACK = 11220,
  S2S_TELL_ROOM_START_TO_BATTLE_SHARD_REQ = 11221,
  S2S_TELL_ROOM_FINISH_TO_BATTLE_SAHRD_REQ = 11222,
  S2S_ADD_CAMP_TO_BATTLE_SHARD_REQ = 11223,
  S2S_ADD_CAMP_TO_MATCH_SHARD_ACK = 11224,
  S2S_REMOVE_CAMP_TO_BATTLE_SHARD_REQ = 11225,
  S2S_PLAYER_CANCEL_MATCH_REQ = 11226,
  S2S_PLAYER_LEAVE_BATTLE_ROOM_ACK = 11227,
  S2S_PLAYER_CANCEL_MATCH_ACK = 11228,
  S2S_TELL_BATTLE_ROOM_FINISH_ACK = 11229,
  S2S_PLAYER_LEAVE_ROOM_TO_BATTLE_SHARD_REQ = 11230,
  S2S_PLAYER_LOGIN_BATTLE_ROOM_REQ = 11231,
  S2S_PLAYER_LOGIN_BATTLE_ROOM_ACK = 11232,
  S2S_PLAYER_LOGIN_ROOM_TO_BATTLE_SHARD_REQ = 11233,
  S2S_TELL_ROOM_START_TO_BATTLE_SHARD_ACK = 11234,
  S2S_TELL_BATTLE_REGISTER_TO_SHARD_REQ = 11235,
  S2S_TELL_ROOM_CLOSE_TO_MATCH_SHARD_REQ = 11236,
  S2S_PLAYER_BATTLE_SCORE_REQ = 11237,
  S2S_PLAYER_BATTLE_SCORE_ACK = 11238,
  S2S_BATTLE_ROOM_SCORE_BALANCE_REQ = 11239,
  S2S_BATTLE_ROOM_SCORE_BALANCE_ACK = 11240,
  S2S_BATTLE_SCORE_BALANCE_TO_SHARD_REQ = 11241,
  S2S_ONLINE_QUERY_BATTLE_SCORE_REQ = 11242,
  S2S_OPEN_BATTLE_ROOM_TO_SHARD_ACK = 11243
};
LIBPROTOC_EXPORT bool BattleProtocol_IsValid(int value);
const BattleProtocol BattleProtocol_MIN = S2S_REGISTER_BATTLE_SERVER_REQ;
const BattleProtocol BattleProtocol_MAX = S2S_OPEN_BATTLE_ROOM_TO_SHARD_ACK;
const int BattleProtocol_ARRAYSIZE = BattleProtocol_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* BattleProtocol_descriptor();
inline const ::std::string& BattleProtocol_Name(BattleProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    BattleProtocol_descriptor(), value);
}
inline bool BattleProtocol_Parse(
    const ::std::string& name, BattleProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BattleProtocol>(
    BattleProtocol_descriptor(), name, value);
}
enum BattleEnum {
  OpenSuccess = 1,
  OpenFailed = 2
};
LIBPROTOC_EXPORT bool BattleEnum_IsValid(int value);
const BattleEnum BattleEnum_MIN = OpenSuccess;
const BattleEnum BattleEnum_MAX = OpenFailed;
const int BattleEnum_ARRAYSIZE = BattleEnum_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* BattleEnum_descriptor();
inline const ::std::string& BattleEnum_Name(BattleEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    BattleEnum_descriptor(), value);
}
inline bool BattleEnum_Parse(
    const ::std::string& name, BattleEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BattleEnum>(
    BattleEnum_descriptor(), name, value);
}
// ===================================================================

class LIBPROTOC_EXPORT S2SRegisterBattleServerReq : public ::google::protobuf::Message {
 public:
  S2SRegisterBattleServerReq();
  virtual ~S2SRegisterBattleServerReq();

  S2SRegisterBattleServerReq(const S2SRegisterBattleServerReq& from);

  inline S2SRegisterBattleServerReq& operator=(const S2SRegisterBattleServerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRegisterBattleServerReq& default_instance();

  void Swap(S2SRegisterBattleServerReq* other);

  // implements Message ----------------------------------------------

  S2SRegisterBattleServerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SRegisterBattleServerReq& from);
  void MergeFrom(const S2SRegisterBattleServerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serverid = 1;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 1;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // required string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // required uint64 roomid = 4;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 4;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 battleshardid = 5;
  inline bool has_battleshardid() const;
  inline void clear_battleshardid();
  static const int kBattleshardidFieldNumber = 5;
  inline ::google::protobuf::uint32 battleshardid() const;
  inline void set_battleshardid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRegisterBattleServerReq)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_battleshardid();
  inline void clear_has_battleshardid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::uint32 serverid_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 battleshardid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SRegisterBattleServerReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRegisterBattleServerAck : public ::google::protobuf::Message {
 public:
  S2SRegisterBattleServerAck();
  virtual ~S2SRegisterBattleServerAck();

  S2SRegisterBattleServerAck(const S2SRegisterBattleServerAck& from);

  inline S2SRegisterBattleServerAck& operator=(const S2SRegisterBattleServerAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRegisterBattleServerAck& default_instance();

  void Swap(S2SRegisterBattleServerAck* other);

  // implements Message ----------------------------------------------

  S2SRegisterBattleServerAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SRegisterBattleServerAck& from);
  void MergeFrom(const S2SRegisterBattleServerAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serverid = 1;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 1;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // required uint32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRegisterBattleServerAck)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 serverid_;
  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SRegisterBattleServerAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRegisterServerToBattleShardReq : public ::google::protobuf::Message {
 public:
  S2SRegisterServerToBattleShardReq();
  virtual ~S2SRegisterServerToBattleShardReq();

  S2SRegisterServerToBattleShardReq(const S2SRegisterServerToBattleShardReq& from);

  inline S2SRegisterServerToBattleShardReq& operator=(const S2SRegisterServerToBattleShardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRegisterServerToBattleShardReq& default_instance();

  void Swap(S2SRegisterServerToBattleShardReq* other);

  // implements Message ----------------------------------------------

  S2SRegisterServerToBattleShardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SRegisterServerToBattleShardReq& from);
  void MergeFrom(const S2SRegisterServerToBattleShardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serverid = 1;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 1;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // required string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required uint32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // required uint64 roomid = 4;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 4;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRegisterServerToBattleShardReq)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::uint32 serverid_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint64 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SRegisterServerToBattleShardReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STellBattleRegisterToShardReq : public ::google::protobuf::Message {
 public:
  S2STellBattleRegisterToShardReq();
  virtual ~S2STellBattleRegisterToShardReq();

  S2STellBattleRegisterToShardReq(const S2STellBattleRegisterToShardReq& from);

  inline S2STellBattleRegisterToShardReq& operator=(const S2STellBattleRegisterToShardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STellBattleRegisterToShardReq& default_instance();

  void Swap(S2STellBattleRegisterToShardReq* other);

  // implements Message ----------------------------------------------

  S2STellBattleRegisterToShardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2STellBattleRegisterToShardReq& from);
  void MergeFrom(const S2STellBattleRegisterToShardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serverid = 1;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 1;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // required uint64 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required uint32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STellBattleRegisterToShardReq)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 serverid_;
  ::google::protobuf::uint32 port_;
  ::std::string* ip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2STellBattleRegisterToShardReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SDisconnectServerToBattleShardReq : public ::google::protobuf::Message {
 public:
  S2SDisconnectServerToBattleShardReq();
  virtual ~S2SDisconnectServerToBattleShardReq();

  S2SDisconnectServerToBattleShardReq(const S2SDisconnectServerToBattleShardReq& from);

  inline S2SDisconnectServerToBattleShardReq& operator=(const S2SDisconnectServerToBattleShardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SDisconnectServerToBattleShardReq& default_instance();

  void Swap(S2SDisconnectServerToBattleShardReq* other);

  // implements Message ----------------------------------------------

  S2SDisconnectServerToBattleShardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SDisconnectServerToBattleShardReq& from);
  void MergeFrom(const S2SDisconnectServerToBattleShardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serverid = 1;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 1;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SDisconnectServerToBattleShardReq)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SDisconnectServerToBattleShardReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SCreateRoomToBattleProxyReq : public ::google::protobuf::Message {
 public:
  S2SCreateRoomToBattleProxyReq();
  virtual ~S2SCreateRoomToBattleProxyReq();

  S2SCreateRoomToBattleProxyReq(const S2SCreateRoomToBattleProxyReq& from);

  inline S2SCreateRoomToBattleProxyReq& operator=(const S2SCreateRoomToBattleProxyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SCreateRoomToBattleProxyReq& default_instance();

  void Swap(S2SCreateRoomToBattleProxyReq* other);

  // implements Message ----------------------------------------------

  S2SCreateRoomToBattleProxyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SCreateRoomToBattleProxyReq& from);
  void MergeFrom(const S2SCreateRoomToBattleProxyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 matchid = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required uint64 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 maxplayercount = 3;
  inline bool has_maxplayercount() const;
  inline void clear_maxplayercount();
  static const int kMaxplayercountFieldNumber = 3;
  inline ::google::protobuf::uint32 maxplayercount() const;
  inline void set_maxplayercount(::google::protobuf::uint32 value);

  // required uint32 battleserverid = 4;
  inline bool has_battleserverid() const;
  inline void clear_battleserverid();
  static const int kBattleserveridFieldNumber = 4;
  inline ::google::protobuf::uint32 battleserverid() const;
  inline void set_battleserverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SCreateRoomToBattleProxyReq)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_maxplayercount();
  inline void clear_has_maxplayercount();
  inline void set_has_battleserverid();
  inline void clear_has_battleserverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 maxplayercount_;
  ::google::protobuf::uint32 battleserverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SCreateRoomToBattleProxyReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SCreateRoomToBattleShardReq : public ::google::protobuf::Message {
 public:
  S2SCreateRoomToBattleShardReq();
  virtual ~S2SCreateRoomToBattleShardReq();

  S2SCreateRoomToBattleShardReq(const S2SCreateRoomToBattleShardReq& from);

  inline S2SCreateRoomToBattleShardReq& operator=(const S2SCreateRoomToBattleShardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SCreateRoomToBattleShardReq& default_instance();

  void Swap(S2SCreateRoomToBattleShardReq* other);

  // implements Message ----------------------------------------------

  S2SCreateRoomToBattleShardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SCreateRoomToBattleShardReq& from);
  void MergeFrom(const S2SCreateRoomToBattleShardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 matchid = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required uint64 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 matchshardid = 3;
  inline bool has_matchshardid() const;
  inline void clear_matchshardid();
  static const int kMatchshardidFieldNumber = 3;
  inline ::google::protobuf::uint32 matchshardid() const;
  inline void set_matchshardid(::google::protobuf::uint32 value);

  // required uint32 maxplayercount = 4;
  inline bool has_maxplayercount() const;
  inline void clear_maxplayercount();
  static const int kMaxplayercountFieldNumber = 4;
  inline ::google::protobuf::uint32 maxplayercount() const;
  inline void set_maxplayercount(::google::protobuf::uint32 value);

  // required uint32 battleserverid = 5;
  inline bool has_battleserverid() const;
  inline void clear_battleserverid();
  static const int kBattleserveridFieldNumber = 5;
  inline ::google::protobuf::uint32 battleserverid() const;
  inline void set_battleserverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SCreateRoomToBattleShardReq)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_matchshardid();
  inline void clear_has_matchshardid();
  inline void set_has_maxplayercount();
  inline void clear_has_maxplayercount();
  inline void set_has_battleserverid();
  inline void clear_has_battleserverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 matchshardid_;
  ::google::protobuf::uint32 maxplayercount_;
  ::google::protobuf::uint32 battleserverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SCreateRoomToBattleShardReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SCreateRoomToMatchShardAck : public ::google::protobuf::Message {
 public:
  S2SCreateRoomToMatchShardAck();
  virtual ~S2SCreateRoomToMatchShardAck();

  S2SCreateRoomToMatchShardAck(const S2SCreateRoomToMatchShardAck& from);

  inline S2SCreateRoomToMatchShardAck& operator=(const S2SCreateRoomToMatchShardAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SCreateRoomToMatchShardAck& default_instance();

  void Swap(S2SCreateRoomToMatchShardAck* other);

  // implements Message ----------------------------------------------

  S2SCreateRoomToMatchShardAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SCreateRoomToMatchShardAck& from);
  void MergeFrom(const S2SCreateRoomToMatchShardAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 matchid = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required uint64 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 battleshardid = 3;
  inline bool has_battleshardid() const;
  inline void clear_battleshardid();
  static const int kBattleshardidFieldNumber = 3;
  inline ::google::protobuf::uint32 battleshardid() const;
  inline void set_battleshardid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SCreateRoomToMatchShardAck)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_battleshardid();
  inline void clear_has_battleshardid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 battleshardid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SCreateRoomToMatchShardAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SAddCampToBattleShardReq : public ::google::protobuf::Message {
 public:
  S2SAddCampToBattleShardReq();
  virtual ~S2SAddCampToBattleShardReq();

  S2SAddCampToBattleShardReq(const S2SAddCampToBattleShardReq& from);

  inline S2SAddCampToBattleShardReq& operator=(const S2SAddCampToBattleShardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SAddCampToBattleShardReq& default_instance();

  void Swap(S2SAddCampToBattleShardReq* other);

  // implements Message ----------------------------------------------

  S2SAddCampToBattleShardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SAddCampToBattleShardReq& from);
  void MergeFrom(const S2SAddCampToBattleShardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required .KFMsg.PBBattleCamp pbcamp = 2;
  inline bool has_pbcamp() const;
  inline void clear_pbcamp();
  static const int kPbcampFieldNumber = 2;
  inline const ::KFMsg::PBBattleCamp& pbcamp() const;
  inline ::KFMsg::PBBattleCamp* mutable_pbcamp();
  inline ::KFMsg::PBBattleCamp* release_pbcamp();
  inline void set_allocated_pbcamp(::KFMsg::PBBattleCamp* pbcamp);

  // required uint32 matchid = 3;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 3;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required uint32 matchshardid = 4;
  inline bool has_matchshardid() const;
  inline void clear_matchshardid();
  static const int kMatchshardidFieldNumber = 4;
  inline ::google::protobuf::uint32 matchshardid() const;
  inline void set_matchshardid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SAddCampToBattleShardReq)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_pbcamp();
  inline void clear_has_pbcamp();
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_matchshardid();
  inline void clear_has_matchshardid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::KFMsg::PBBattleCamp* pbcamp_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 matchshardid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SAddCampToBattleShardReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SAddCampToMatchShardAck : public ::google::protobuf::Message {
 public:
  S2SAddCampToMatchShardAck();
  virtual ~S2SAddCampToMatchShardAck();

  S2SAddCampToMatchShardAck(const S2SAddCampToMatchShardAck& from);

  inline S2SAddCampToMatchShardAck& operator=(const S2SAddCampToMatchShardAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SAddCampToMatchShardAck& default_instance();

  void Swap(S2SAddCampToMatchShardAck* other);

  // implements Message ----------------------------------------------

  S2SAddCampToMatchShardAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SAddCampToMatchShardAck& from);
  void MergeFrom(const S2SAddCampToMatchShardAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 matchid = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required uint64 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 campid = 3;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampidFieldNumber = 3;
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // required bool addok = 4;
  inline bool has_addok() const;
  inline void clear_addok();
  static const int kAddokFieldNumber = 4;
  inline bool addok() const;
  inline void set_addok(bool value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SAddCampToMatchShardAck)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_addok();
  inline void clear_has_addok();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 campid_;
  bool addok_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SAddCampToMatchShardAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SOpenBattleRoomReq : public ::google::protobuf::Message {
 public:
  S2SOpenBattleRoomReq();
  virtual ~S2SOpenBattleRoomReq();

  S2SOpenBattleRoomReq(const S2SOpenBattleRoomReq& from);

  inline S2SOpenBattleRoomReq& operator=(const S2SOpenBattleRoomReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SOpenBattleRoomReq& default_instance();

  void Swap(S2SOpenBattleRoomReq* other);

  // implements Message ----------------------------------------------

  S2SOpenBattleRoomReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SOpenBattleRoomReq& from);
  void MergeFrom(const S2SOpenBattleRoomReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 matchid = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required uint64 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 battleshardid = 3;
  inline bool has_battleshardid() const;
  inline void clear_battleshardid();
  static const int kBattleshardidFieldNumber = 3;
  inline ::google::protobuf::uint32 battleshardid() const;
  inline void set_battleshardid(::google::protobuf::uint32 value);

  // required uint32 maxplayercount = 4;
  inline bool has_maxplayercount() const;
  inline void clear_maxplayercount();
  static const int kMaxplayercountFieldNumber = 4;
  inline ::google::protobuf::uint32 maxplayercount() const;
  inline void set_maxplayercount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SOpenBattleRoomReq)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_battleshardid();
  inline void clear_has_battleshardid();
  inline void set_has_maxplayercount();
  inline void clear_has_maxplayercount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 battleshardid_;
  ::google::protobuf::uint32 maxplayercount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SOpenBattleRoomReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SOpenBattleRoomAck : public ::google::protobuf::Message {
 public:
  S2SOpenBattleRoomAck();
  virtual ~S2SOpenBattleRoomAck();

  S2SOpenBattleRoomAck(const S2SOpenBattleRoomAck& from);

  inline S2SOpenBattleRoomAck& operator=(const S2SOpenBattleRoomAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SOpenBattleRoomAck& default_instance();

  void Swap(S2SOpenBattleRoomAck* other);

  // implements Message ----------------------------------------------

  S2SOpenBattleRoomAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SOpenBattleRoomAck& from);
  void MergeFrom(const S2SOpenBattleRoomAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 battleshardid = 1;
  inline bool has_battleshardid() const;
  inline void clear_battleshardid();
  static const int kBattleshardidFieldNumber = 1;
  inline ::google::protobuf::uint32 battleshardid() const;
  inline void set_battleshardid(::google::protobuf::uint32 value);

  // required uint32 matchid = 2;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 2;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required uint64 roomid = 3;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 3;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // required uint32 waittime = 5;
  inline bool has_waittime() const;
  inline void clear_waittime();
  static const int kWaittimeFieldNumber = 5;
  inline ::google::protobuf::uint32 waittime() const;
  inline void set_waittime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SOpenBattleRoomAck)
 private:
  inline void set_has_battleshardid();
  inline void clear_has_battleshardid();
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_waittime();
  inline void clear_has_waittime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 battleshardid_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 waittime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SOpenBattleRoomAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SOpenBattleRoomToShardAck : public ::google::protobuf::Message {
 public:
  S2SOpenBattleRoomToShardAck();
  virtual ~S2SOpenBattleRoomToShardAck();

  S2SOpenBattleRoomToShardAck(const S2SOpenBattleRoomToShardAck& from);

  inline S2SOpenBattleRoomToShardAck& operator=(const S2SOpenBattleRoomToShardAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SOpenBattleRoomToShardAck& default_instance();

  void Swap(S2SOpenBattleRoomToShardAck* other);

  // implements Message ----------------------------------------------

  S2SOpenBattleRoomToShardAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SOpenBattleRoomToShardAck& from);
  void MergeFrom(const S2SOpenBattleRoomToShardAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 matchid = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required uint64 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // required uint32 waittime = 4;
  inline bool has_waittime() const;
  inline void clear_waittime();
  static const int kWaittimeFieldNumber = 4;
  inline ::google::protobuf::uint32 waittime() const;
  inline void set_waittime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SOpenBattleRoomToShardAck)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_waittime();
  inline void clear_has_waittime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 waittime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SOpenBattleRoomToShardAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SOpenRoomToMatchShardReq : public ::google::protobuf::Message {
 public:
  S2SOpenRoomToMatchShardReq();
  virtual ~S2SOpenRoomToMatchShardReq();

  S2SOpenRoomToMatchShardReq(const S2SOpenRoomToMatchShardReq& from);

  inline S2SOpenRoomToMatchShardReq& operator=(const S2SOpenRoomToMatchShardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SOpenRoomToMatchShardReq& default_instance();

  void Swap(S2SOpenRoomToMatchShardReq* other);

  // implements Message ----------------------------------------------

  S2SOpenRoomToMatchShardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SOpenRoomToMatchShardReq& from);
  void MergeFrom(const S2SOpenRoomToMatchShardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 matchid = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required uint64 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 waittime = 3;
  inline bool has_waittime() const;
  inline void clear_waittime();
  static const int kWaittimeFieldNumber = 3;
  inline ::google::protobuf::uint32 waittime() const;
  inline void set_waittime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SOpenRoomToMatchShardReq)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_waittime();
  inline void clear_has_waittime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 waittime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SOpenRoomToMatchShardReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SOpenRoomToBattleShardAck : public ::google::protobuf::Message {
 public:
  S2SOpenRoomToBattleShardAck();
  virtual ~S2SOpenRoomToBattleShardAck();

  S2SOpenRoomToBattleShardAck(const S2SOpenRoomToBattleShardAck& from);

  inline S2SOpenRoomToBattleShardAck& operator=(const S2SOpenRoomToBattleShardAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SOpenRoomToBattleShardAck& default_instance();

  void Swap(S2SOpenRoomToBattleShardAck* other);

  // implements Message ----------------------------------------------

  S2SOpenRoomToBattleShardAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SOpenRoomToBattleShardAck& from);
  void MergeFrom(const S2SOpenRoomToBattleShardAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SOpenRoomToBattleShardAck)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SOpenRoomToBattleShardAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SPlayerEnterBattleRoomReq : public ::google::protobuf::Message {
 public:
  S2SPlayerEnterBattleRoomReq();
  virtual ~S2SPlayerEnterBattleRoomReq();

  S2SPlayerEnterBattleRoomReq(const S2SPlayerEnterBattleRoomReq& from);

  inline S2SPlayerEnterBattleRoomReq& operator=(const S2SPlayerEnterBattleRoomReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SPlayerEnterBattleRoomReq& default_instance();

  void Swap(S2SPlayerEnterBattleRoomReq* other);

  // implements Message ----------------------------------------------

  S2SPlayerEnterBattleRoomReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SPlayerEnterBattleRoomReq& from);
  void MergeFrom(const S2SPlayerEnterBattleRoomReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required .KFMsg.PBBattlePlayer player = 2;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 2;
  inline const ::KFMsg::PBBattlePlayer& player() const;
  inline ::KFMsg::PBBattlePlayer* mutable_player();
  inline ::KFMsg::PBBattlePlayer* release_player();
  inline void set_allocated_player(::KFMsg::PBBattlePlayer* player);

  // required string token = 3;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 3;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SPlayerEnterBattleRoomReq)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_player();
  inline void clear_has_player();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::KFMsg::PBBattlePlayer* player_;
  ::std::string* token_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SPlayerEnterBattleRoomReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SPlayerEnterBattleRoomAck : public ::google::protobuf::Message {
 public:
  S2SPlayerEnterBattleRoomAck();
  virtual ~S2SPlayerEnterBattleRoomAck();

  S2SPlayerEnterBattleRoomAck(const S2SPlayerEnterBattleRoomAck& from);

  inline S2SPlayerEnterBattleRoomAck& operator=(const S2SPlayerEnterBattleRoomAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SPlayerEnterBattleRoomAck& default_instance();

  void Swap(S2SPlayerEnterBattleRoomAck* other);

  // implements Message ----------------------------------------------

  S2SPlayerEnterBattleRoomAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SPlayerEnterBattleRoomAck& from);
  void MergeFrom(const S2SPlayerEnterBattleRoomAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 battleshardid = 1;
  inline bool has_battleshardid() const;
  inline void clear_battleshardid();
  static const int kBattleshardidFieldNumber = 1;
  inline ::google::protobuf::uint32 battleshardid() const;
  inline void set_battleshardid(::google::protobuf::uint32 value);

  // required uint64 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 campid = 3;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampidFieldNumber = 3;
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // required uint32 playerid = 4;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 4;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SPlayerEnterBattleRoomAck)
 private:
  inline void set_has_battleshardid();
  inline void clear_has_battleshardid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 battleshardid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SPlayerEnterBattleRoomAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SPlayerEnterRoomToBattleShardAck : public ::google::protobuf::Message {
 public:
  S2SPlayerEnterRoomToBattleShardAck();
  virtual ~S2SPlayerEnterRoomToBattleShardAck();

  S2SPlayerEnterRoomToBattleShardAck(const S2SPlayerEnterRoomToBattleShardAck& from);

  inline S2SPlayerEnterRoomToBattleShardAck& operator=(const S2SPlayerEnterRoomToBattleShardAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SPlayerEnterRoomToBattleShardAck& default_instance();

  void Swap(S2SPlayerEnterRoomToBattleShardAck* other);

  // implements Message ----------------------------------------------

  S2SPlayerEnterRoomToBattleShardAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SPlayerEnterRoomToBattleShardAck& from);
  void MergeFrom(const S2SPlayerEnterRoomToBattleShardAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 campid = 2;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampidFieldNumber = 2;
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // required uint32 playerid = 3;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 3;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SPlayerEnterRoomToBattleShardAck)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SPlayerEnterRoomToBattleShardAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SPlayerLoginBattleRoomReq : public ::google::protobuf::Message {
 public:
  S2SPlayerLoginBattleRoomReq();
  virtual ~S2SPlayerLoginBattleRoomReq();

  S2SPlayerLoginBattleRoomReq(const S2SPlayerLoginBattleRoomReq& from);

  inline S2SPlayerLoginBattleRoomReq& operator=(const S2SPlayerLoginBattleRoomReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SPlayerLoginBattleRoomReq& default_instance();

  void Swap(S2SPlayerLoginBattleRoomReq* other);

  // implements Message ----------------------------------------------

  S2SPlayerLoginBattleRoomReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SPlayerLoginBattleRoomReq& from);
  void MergeFrom(const S2SPlayerLoginBattleRoomReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 battleshardid = 1;
  inline bool has_battleshardid() const;
  inline void clear_battleshardid();
  static const int kBattleshardidFieldNumber = 1;
  inline ::google::protobuf::uint32 battleshardid() const;
  inline void set_battleshardid(::google::protobuf::uint32 value);

  // required uint64 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 campid = 3;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampidFieldNumber = 3;
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // required uint32 playerid = 4;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 4;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SPlayerLoginBattleRoomReq)
 private:
  inline void set_has_battleshardid();
  inline void clear_has_battleshardid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 battleshardid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SPlayerLoginBattleRoomReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SPlayerLoginBattleRoomAck : public ::google::protobuf::Message {
 public:
  S2SPlayerLoginBattleRoomAck();
  virtual ~S2SPlayerLoginBattleRoomAck();

  S2SPlayerLoginBattleRoomAck(const S2SPlayerLoginBattleRoomAck& from);

  inline S2SPlayerLoginBattleRoomAck& operator=(const S2SPlayerLoginBattleRoomAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SPlayerLoginBattleRoomAck& default_instance();

  void Swap(S2SPlayerLoginBattleRoomAck* other);

  // implements Message ----------------------------------------------

  S2SPlayerLoginBattleRoomAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SPlayerLoginBattleRoomAck& from);
  void MergeFrom(const S2SPlayerLoginBattleRoomAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 campid = 2;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampidFieldNumber = 2;
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // required uint32 playerid = 3;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 3;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SPlayerLoginBattleRoomAck)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SPlayerLoginBattleRoomAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SPlayerLoginRoomToBattleShardReq : public ::google::protobuf::Message {
 public:
  S2SPlayerLoginRoomToBattleShardReq();
  virtual ~S2SPlayerLoginRoomToBattleShardReq();

  S2SPlayerLoginRoomToBattleShardReq(const S2SPlayerLoginRoomToBattleShardReq& from);

  inline S2SPlayerLoginRoomToBattleShardReq& operator=(const S2SPlayerLoginRoomToBattleShardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SPlayerLoginRoomToBattleShardReq& default_instance();

  void Swap(S2SPlayerLoginRoomToBattleShardReq* other);

  // implements Message ----------------------------------------------

  S2SPlayerLoginRoomToBattleShardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SPlayerLoginRoomToBattleShardReq& from);
  void MergeFrom(const S2SPlayerLoginRoomToBattleShardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 campid = 3;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampidFieldNumber = 3;
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // required uint32 playerid = 4;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 4;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SPlayerLoginRoomToBattleShardReq)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SPlayerLoginRoomToBattleShardReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SPlayerCancelMatchReq : public ::google::protobuf::Message {
 public:
  S2SPlayerCancelMatchReq();
  virtual ~S2SPlayerCancelMatchReq();

  S2SPlayerCancelMatchReq(const S2SPlayerCancelMatchReq& from);

  inline S2SPlayerCancelMatchReq& operator=(const S2SPlayerCancelMatchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SPlayerCancelMatchReq& default_instance();

  void Swap(S2SPlayerCancelMatchReq* other);

  // implements Message ----------------------------------------------

  S2SPlayerCancelMatchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SPlayerCancelMatchReq& from);
  void MergeFrom(const S2SPlayerCancelMatchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 campid = 2;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampidFieldNumber = 2;
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // required uint32 playerid = 3;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 3;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SPlayerCancelMatchReq)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SPlayerCancelMatchReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SPlayerLeaveBattleRoomReq : public ::google::protobuf::Message {
 public:
  S2SPlayerLeaveBattleRoomReq();
  virtual ~S2SPlayerLeaveBattleRoomReq();

  S2SPlayerLeaveBattleRoomReq(const S2SPlayerLeaveBattleRoomReq& from);

  inline S2SPlayerLeaveBattleRoomReq& operator=(const S2SPlayerLeaveBattleRoomReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SPlayerLeaveBattleRoomReq& default_instance();

  void Swap(S2SPlayerLeaveBattleRoomReq* other);

  // implements Message ----------------------------------------------

  S2SPlayerLeaveBattleRoomReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SPlayerLeaveBattleRoomReq& from);
  void MergeFrom(const S2SPlayerLeaveBattleRoomReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 battleshardid = 2;
  inline bool has_battleshardid() const;
  inline void clear_battleshardid();
  static const int kBattleshardidFieldNumber = 2;
  inline ::google::protobuf::uint32 battleshardid() const;
  inline void set_battleshardid(::google::protobuf::uint32 value);

  // required uint32 campid = 3;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampidFieldNumber = 3;
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // required uint32 playerid = 4;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 4;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SPlayerLeaveBattleRoomReq)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_battleshardid();
  inline void clear_has_battleshardid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 battleshardid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SPlayerLeaveBattleRoomReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SPlayerLeaveBattleRoomAck : public ::google::protobuf::Message {
 public:
  S2SPlayerLeaveBattleRoomAck();
  virtual ~S2SPlayerLeaveBattleRoomAck();

  S2SPlayerLeaveBattleRoomAck(const S2SPlayerLeaveBattleRoomAck& from);

  inline S2SPlayerLeaveBattleRoomAck& operator=(const S2SPlayerLeaveBattleRoomAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SPlayerLeaveBattleRoomAck& default_instance();

  void Swap(S2SPlayerLeaveBattleRoomAck* other);

  // implements Message ----------------------------------------------

  S2SPlayerLeaveBattleRoomAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SPlayerLeaveBattleRoomAck& from);
  void MergeFrom(const S2SPlayerLeaveBattleRoomAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 campid = 2;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampidFieldNumber = 2;
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // required uint32 playerid = 3;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 3;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SPlayerLeaveBattleRoomAck)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SPlayerLeaveBattleRoomAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SPlayerLeaveRoomToBattleShardReq : public ::google::protobuf::Message {
 public:
  S2SPlayerLeaveRoomToBattleShardReq();
  virtual ~S2SPlayerLeaveRoomToBattleShardReq();

  S2SPlayerLeaveRoomToBattleShardReq(const S2SPlayerLeaveRoomToBattleShardReq& from);

  inline S2SPlayerLeaveRoomToBattleShardReq& operator=(const S2SPlayerLeaveRoomToBattleShardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SPlayerLeaveRoomToBattleShardReq& default_instance();

  void Swap(S2SPlayerLeaveRoomToBattleShardReq* other);

  // implements Message ----------------------------------------------

  S2SPlayerLeaveRoomToBattleShardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SPlayerLeaveRoomToBattleShardReq& from);
  void MergeFrom(const S2SPlayerLeaveRoomToBattleShardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 campid = 2;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampidFieldNumber = 2;
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // required uint32 playerid = 3;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 3;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SPlayerLeaveRoomToBattleShardReq)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SPlayerLeaveRoomToBattleShardReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SPlayerLeaveRoomToMatchShardReq : public ::google::protobuf::Message {
 public:
  S2SPlayerLeaveRoomToMatchShardReq();
  virtual ~S2SPlayerLeaveRoomToMatchShardReq();

  S2SPlayerLeaveRoomToMatchShardReq(const S2SPlayerLeaveRoomToMatchShardReq& from);

  inline S2SPlayerLeaveRoomToMatchShardReq& operator=(const S2SPlayerLeaveRoomToMatchShardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SPlayerLeaveRoomToMatchShardReq& default_instance();

  void Swap(S2SPlayerLeaveRoomToMatchShardReq* other);

  // implements Message ----------------------------------------------

  S2SPlayerLeaveRoomToMatchShardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SPlayerLeaveRoomToMatchShardReq& from);
  void MergeFrom(const S2SPlayerLeaveRoomToMatchShardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 matchid = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  inline ::google::protobuf::uint64 matchid() const;
  inline void set_matchid(::google::protobuf::uint64 value);

  // required uint64 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 campid = 3;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampidFieldNumber = 3;
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // required uint64 groupid = 4;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 4;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required uint32 playerid = 5;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 5;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SPlayerLeaveRoomToMatchShardReq)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 matchid_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SPlayerLeaveRoomToMatchShardReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SLeaveBattleRoomToClientAck : public ::google::protobuf::Message {
 public:
  S2SLeaveBattleRoomToClientAck();
  virtual ~S2SLeaveBattleRoomToClientAck();

  S2SLeaveBattleRoomToClientAck(const S2SLeaveBattleRoomToClientAck& from);

  inline S2SLeaveBattleRoomToClientAck& operator=(const S2SLeaveBattleRoomToClientAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SLeaveBattleRoomToClientAck& default_instance();

  void Swap(S2SLeaveBattleRoomToClientAck* other);

  // implements Message ----------------------------------------------

  S2SLeaveBattleRoomToClientAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SLeaveBattleRoomToClientAck& from);
  void MergeFrom(const S2SLeaveBattleRoomToClientAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SLeaveBattleRoomToClientAck)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SLeaveBattleRoomToClientAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STellBattleRoomStartReq : public ::google::protobuf::Message {
 public:
  S2STellBattleRoomStartReq();
  virtual ~S2STellBattleRoomStartReq();

  S2STellBattleRoomStartReq(const S2STellBattleRoomStartReq& from);

  inline S2STellBattleRoomStartReq& operator=(const S2STellBattleRoomStartReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STellBattleRoomStartReq& default_instance();

  void Swap(S2STellBattleRoomStartReq* other);

  // implements Message ----------------------------------------------

  S2STellBattleRoomStartReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2STellBattleRoomStartReq& from);
  void MergeFrom(const S2STellBattleRoomStartReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 battleshardid = 1;
  inline bool has_battleshardid() const;
  inline void clear_battleshardid();
  static const int kBattleshardidFieldNumber = 1;
  inline ::google::protobuf::uint32 battleshardid() const;
  inline void set_battleshardid(::google::protobuf::uint32 value);

  // required uint64 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STellBattleRoomStartReq)
 private:
  inline void set_has_battleshardid();
  inline void clear_has_battleshardid();
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 battleshardid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2STellBattleRoomStartReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STellRoomStartToBattleShardReq : public ::google::protobuf::Message {
 public:
  S2STellRoomStartToBattleShardReq();
  virtual ~S2STellRoomStartToBattleShardReq();

  S2STellRoomStartToBattleShardReq(const S2STellRoomStartToBattleShardReq& from);

  inline S2STellRoomStartToBattleShardReq& operator=(const S2STellRoomStartToBattleShardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STellRoomStartToBattleShardReq& default_instance();

  void Swap(S2STellRoomStartToBattleShardReq* other);

  // implements Message ----------------------------------------------

  S2STellRoomStartToBattleShardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2STellRoomStartToBattleShardReq& from);
  void MergeFrom(const S2STellRoomStartToBattleShardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STellRoomStartToBattleShardReq)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2STellRoomStartToBattleShardReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STellBattleRoomStartAck : public ::google::protobuf::Message {
 public:
  S2STellBattleRoomStartAck();
  virtual ~S2STellBattleRoomStartAck();

  S2STellBattleRoomStartAck(const S2STellBattleRoomStartAck& from);

  inline S2STellBattleRoomStartAck& operator=(const S2STellBattleRoomStartAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STellBattleRoomStartAck& default_instance();

  void Swap(S2STellBattleRoomStartAck* other);

  // implements Message ----------------------------------------------

  S2STellBattleRoomStartAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2STellBattleRoomStartAck& from);
  void MergeFrom(const S2STellBattleRoomStartAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STellBattleRoomStartAck)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2STellBattleRoomStartAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STellRoomStartToMatchShardReq : public ::google::protobuf::Message {
 public:
  S2STellRoomStartToMatchShardReq();
  virtual ~S2STellRoomStartToMatchShardReq();

  S2STellRoomStartToMatchShardReq(const S2STellRoomStartToMatchShardReq& from);

  inline S2STellRoomStartToMatchShardReq& operator=(const S2STellRoomStartToMatchShardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STellRoomStartToMatchShardReq& default_instance();

  void Swap(S2STellRoomStartToMatchShardReq* other);

  // implements Message ----------------------------------------------

  S2STellRoomStartToMatchShardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2STellRoomStartToMatchShardReq& from);
  void MergeFrom(const S2STellRoomStartToMatchShardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 matchid = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required uint64 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STellRoomStartToMatchShardReq)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 matchid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2STellRoomStartToMatchShardReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STellRoomStartToMatchShardAck : public ::google::protobuf::Message {
 public:
  S2STellRoomStartToMatchShardAck();
  virtual ~S2STellRoomStartToMatchShardAck();

  S2STellRoomStartToMatchShardAck(const S2STellRoomStartToMatchShardAck& from);

  inline S2STellRoomStartToMatchShardAck& operator=(const S2STellRoomStartToMatchShardAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STellRoomStartToMatchShardAck& default_instance();

  void Swap(S2STellRoomStartToMatchShardAck* other);

  // implements Message ----------------------------------------------

  S2STellRoomStartToMatchShardAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2STellRoomStartToMatchShardAck& from);
  void MergeFrom(const S2STellRoomStartToMatchShardAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STellRoomStartToMatchShardAck)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2STellRoomStartToMatchShardAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STellBattleRoomFinishReq : public ::google::protobuf::Message {
 public:
  S2STellBattleRoomFinishReq();
  virtual ~S2STellBattleRoomFinishReq();

  S2STellBattleRoomFinishReq(const S2STellBattleRoomFinishReq& from);

  inline S2STellBattleRoomFinishReq& operator=(const S2STellBattleRoomFinishReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STellBattleRoomFinishReq& default_instance();

  void Swap(S2STellBattleRoomFinishReq* other);

  // implements Message ----------------------------------------------

  S2STellBattleRoomFinishReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2STellBattleRoomFinishReq& from);
  void MergeFrom(const S2STellBattleRoomFinishReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 battleshardid = 1;
  inline bool has_battleshardid() const;
  inline void clear_battleshardid();
  static const int kBattleshardidFieldNumber = 1;
  inline ::google::protobuf::uint32 battleshardid() const;
  inline void set_battleshardid(::google::protobuf::uint32 value);

  // required uint64 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 serverid = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 3;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // required string ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STellBattleRoomFinishReq)
 private:
  inline void set_has_battleshardid();
  inline void clear_has_battleshardid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_ip();
  inline void clear_has_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 battleshardid_;
  ::google::protobuf::uint32 serverid_;
  ::std::string* ip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2STellBattleRoomFinishReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STellBattleRoomFinishAck : public ::google::protobuf::Message {
 public:
  S2STellBattleRoomFinishAck();
  virtual ~S2STellBattleRoomFinishAck();

  S2STellBattleRoomFinishAck(const S2STellBattleRoomFinishAck& from);

  inline S2STellBattleRoomFinishAck& operator=(const S2STellBattleRoomFinishAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STellBattleRoomFinishAck& default_instance();

  void Swap(S2STellBattleRoomFinishAck* other);

  // implements Message ----------------------------------------------

  S2STellBattleRoomFinishAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2STellBattleRoomFinishAck& from);
  void MergeFrom(const S2STellBattleRoomFinishAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // repeated string pbscore = 2;
  inline int pbscore_size() const;
  inline void clear_pbscore();
  static const int kPbscoreFieldNumber = 2;
  inline const ::std::string& pbscore(int index) const;
  inline ::std::string* mutable_pbscore(int index);
  inline void set_pbscore(int index, const ::std::string& value);
  inline void set_pbscore(int index, const char* value);
  inline void set_pbscore(int index, const char* value, size_t size);
  inline ::std::string* add_pbscore();
  inline void add_pbscore(const ::std::string& value);
  inline void add_pbscore(const char* value);
  inline void add_pbscore(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& pbscore() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pbscore();

  // @@protoc_insertion_point(class_scope:KFMsg.S2STellBattleRoomFinishAck)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pbscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2STellBattleRoomFinishAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SBattleRoomScoreBalanceReq : public ::google::protobuf::Message {
 public:
  S2SBattleRoomScoreBalanceReq();
  virtual ~S2SBattleRoomScoreBalanceReq();

  S2SBattleRoomScoreBalanceReq(const S2SBattleRoomScoreBalanceReq& from);

  inline S2SBattleRoomScoreBalanceReq& operator=(const S2SBattleRoomScoreBalanceReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SBattleRoomScoreBalanceReq& default_instance();

  void Swap(S2SBattleRoomScoreBalanceReq* other);

  // implements Message ----------------------------------------------

  S2SBattleRoomScoreBalanceReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SBattleRoomScoreBalanceReq& from);
  void MergeFrom(const S2SBattleRoomScoreBalanceReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 battleshardid = 2;
  inline bool has_battleshardid() const;
  inline void clear_battleshardid();
  static const int kBattleshardidFieldNumber = 2;
  inline ::google::protobuf::uint32 battleshardid() const;
  inline void set_battleshardid(::google::protobuf::uint32 value);

  // required .KFMsg.PBBattleScore pbscore = 3;
  inline bool has_pbscore() const;
  inline void clear_pbscore();
  static const int kPbscoreFieldNumber = 3;
  inline const ::KFMsg::PBBattleScore& pbscore() const;
  inline ::KFMsg::PBBattleScore* mutable_pbscore();
  inline ::KFMsg::PBBattleScore* release_pbscore();
  inline void set_allocated_pbscore(::KFMsg::PBBattleScore* pbscore);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SBattleRoomScoreBalanceReq)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_battleshardid();
  inline void clear_has_battleshardid();
  inline void set_has_pbscore();
  inline void clear_has_pbscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::KFMsg::PBBattleScore* pbscore_;
  ::google::protobuf::uint32 battleshardid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SBattleRoomScoreBalanceReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SBattleRoomScoreBalanceAck : public ::google::protobuf::Message {
 public:
  S2SBattleRoomScoreBalanceAck();
  virtual ~S2SBattleRoomScoreBalanceAck();

  S2SBattleRoomScoreBalanceAck(const S2SBattleRoomScoreBalanceAck& from);

  inline S2SBattleRoomScoreBalanceAck& operator=(const S2SBattleRoomScoreBalanceAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SBattleRoomScoreBalanceAck& default_instance();

  void Swap(S2SBattleRoomScoreBalanceAck* other);

  // implements Message ----------------------------------------------

  S2SBattleRoomScoreBalanceAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SBattleRoomScoreBalanceAck& from);
  void MergeFrom(const S2SBattleRoomScoreBalanceAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required string reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline const ::std::string& reward() const;
  inline void set_reward(const ::std::string& value);
  inline void set_reward(const char* value);
  inline void set_reward(const char* value, size_t size);
  inline ::std::string* mutable_reward();
  inline ::std::string* release_reward();
  inline void set_allocated_reward(::std::string* reward);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SBattleRoomScoreBalanceAck)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::std::string* reward_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SBattleRoomScoreBalanceAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SBattleScoreBalanceToShardReq : public ::google::protobuf::Message {
 public:
  S2SBattleScoreBalanceToShardReq();
  virtual ~S2SBattleScoreBalanceToShardReq();

  S2SBattleScoreBalanceToShardReq(const S2SBattleScoreBalanceToShardReq& from);

  inline S2SBattleScoreBalanceToShardReq& operator=(const S2SBattleScoreBalanceToShardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SBattleScoreBalanceToShardReq& default_instance();

  void Swap(S2SBattleScoreBalanceToShardReq* other);

  // implements Message ----------------------------------------------

  S2SBattleScoreBalanceToShardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SBattleScoreBalanceToShardReq& from);
  void MergeFrom(const S2SBattleScoreBalanceToShardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required .KFMsg.PBBattleScore pbscore = 2;
  inline bool has_pbscore() const;
  inline void clear_pbscore();
  static const int kPbscoreFieldNumber = 2;
  inline const ::KFMsg::PBBattleScore& pbscore() const;
  inline ::KFMsg::PBBattleScore* mutable_pbscore();
  inline ::KFMsg::PBBattleScore* release_pbscore();
  inline void set_allocated_pbscore(::KFMsg::PBBattleScore* pbscore);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SBattleScoreBalanceToShardReq)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_pbscore();
  inline void clear_has_pbscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::KFMsg::PBBattleScore* pbscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SBattleScoreBalanceToShardReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SPlayerBattleScoreReq : public ::google::protobuf::Message {
 public:
  S2SPlayerBattleScoreReq();
  virtual ~S2SPlayerBattleScoreReq();

  S2SPlayerBattleScoreReq(const S2SPlayerBattleScoreReq& from);

  inline S2SPlayerBattleScoreReq& operator=(const S2SPlayerBattleScoreReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SPlayerBattleScoreReq& default_instance();

  void Swap(S2SPlayerBattleScoreReq* other);

  // implements Message ----------------------------------------------

  S2SPlayerBattleScoreReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SPlayerBattleScoreReq& from);
  void MergeFrom(const S2SPlayerBattleScoreReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint64 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required .KFMsg.PBBattleScore pbscore = 3;
  inline bool has_pbscore() const;
  inline void clear_pbscore();
  static const int kPbscoreFieldNumber = 3;
  inline const ::KFMsg::PBBattleScore& pbscore() const;
  inline ::KFMsg::PBBattleScore* mutable_pbscore();
  inline ::KFMsg::PBBattleScore* release_pbscore();
  inline void set_allocated_pbscore(::KFMsg::PBBattleScore* pbscore);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SPlayerBattleScoreReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_pbscore();
  inline void clear_has_pbscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::KFMsg::PBBattleScore* pbscore_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SPlayerBattleScoreReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SPlayerBattleScoreAck : public ::google::protobuf::Message {
 public:
  S2SPlayerBattleScoreAck();
  virtual ~S2SPlayerBattleScoreAck();

  S2SPlayerBattleScoreAck(const S2SPlayerBattleScoreAck& from);

  inline S2SPlayerBattleScoreAck& operator=(const S2SPlayerBattleScoreAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SPlayerBattleScoreAck& default_instance();

  void Swap(S2SPlayerBattleScoreAck* other);

  // implements Message ----------------------------------------------

  S2SPlayerBattleScoreAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SPlayerBattleScoreAck& from);
  void MergeFrom(const S2SPlayerBattleScoreAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint64 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SPlayerBattleScoreAck)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SPlayerBattleScoreAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SOnlieQueryBattleScoreReq : public ::google::protobuf::Message {
 public:
  S2SOnlieQueryBattleScoreReq();
  virtual ~S2SOnlieQueryBattleScoreReq();

  S2SOnlieQueryBattleScoreReq(const S2SOnlieQueryBattleScoreReq& from);

  inline S2SOnlieQueryBattleScoreReq& operator=(const S2SOnlieQueryBattleScoreReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SOnlieQueryBattleScoreReq& default_instance();

  void Swap(S2SOnlieQueryBattleScoreReq* other);

  // implements Message ----------------------------------------------

  S2SOnlieQueryBattleScoreReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SOnlieQueryBattleScoreReq& from);
  void MergeFrom(const S2SOnlieQueryBattleScoreReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SOnlieQueryBattleScoreReq)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SOnlieQueryBattleScoreReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STellRoomFinishToBattleShardReq : public ::google::protobuf::Message {
 public:
  S2STellRoomFinishToBattleShardReq();
  virtual ~S2STellRoomFinishToBattleShardReq();

  S2STellRoomFinishToBattleShardReq(const S2STellRoomFinishToBattleShardReq& from);

  inline S2STellRoomFinishToBattleShardReq& operator=(const S2STellRoomFinishToBattleShardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STellRoomFinishToBattleShardReq& default_instance();

  void Swap(S2STellRoomFinishToBattleShardReq* other);

  // implements Message ----------------------------------------------

  S2STellRoomFinishToBattleShardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2STellRoomFinishToBattleShardReq& from);
  void MergeFrom(const S2STellRoomFinishToBattleShardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 serverid = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 2;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // required string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STellRoomFinishToBattleShardReq)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_ip();
  inline void clear_has_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::std::string* ip_;
  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2STellRoomFinishToBattleShardReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STellRoomCloseToMatchShardReq : public ::google::protobuf::Message {
 public:
  S2STellRoomCloseToMatchShardReq();
  virtual ~S2STellRoomCloseToMatchShardReq();

  S2STellRoomCloseToMatchShardReq(const S2STellRoomCloseToMatchShardReq& from);

  inline S2STellRoomCloseToMatchShardReq& operator=(const S2STellRoomCloseToMatchShardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STellRoomCloseToMatchShardReq& default_instance();

  void Swap(S2STellRoomCloseToMatchShardReq* other);

  // implements Message ----------------------------------------------

  S2STellRoomCloseToMatchShardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2STellRoomCloseToMatchShardReq& from);
  void MergeFrom(const S2STellRoomCloseToMatchShardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 matchid = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  inline ::google::protobuf::uint64 matchid() const;
  inline void set_matchid(::google::protobuf::uint64 value);

  // required uint64 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STellRoomCloseToMatchShardReq)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 matchid_;
  ::google::protobuf::uint64 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFBattleMessage_2eproto();
  friend void protobuf_AssignDesc_KFBattleMessage_2eproto();
  friend void protobuf_ShutdownFile_KFBattleMessage_2eproto();

  void InitAsDefaultInstance();
  static S2STellRoomCloseToMatchShardReq* default_instance_;
};
// ===================================================================


// ===================================================================

// S2SRegisterBattleServerReq

// required uint32 serverid = 1;
inline bool S2SRegisterBattleServerReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SRegisterBattleServerReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SRegisterBattleServerReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SRegisterBattleServerReq::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2SRegisterBattleServerReq::serverid() const {
  return serverid_;
}
inline void S2SRegisterBattleServerReq::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required string ip = 2;
inline bool S2SRegisterBattleServerReq::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SRegisterBattleServerReq::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SRegisterBattleServerReq::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SRegisterBattleServerReq::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& S2SRegisterBattleServerReq::ip() const {
  return *ip_;
}
inline void S2SRegisterBattleServerReq::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SRegisterBattleServerReq::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SRegisterBattleServerReq::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SRegisterBattleServerReq::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* S2SRegisterBattleServerReq::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SRegisterBattleServerReq::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 port = 3;
inline bool S2SRegisterBattleServerReq::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SRegisterBattleServerReq::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SRegisterBattleServerReq::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SRegisterBattleServerReq::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 S2SRegisterBattleServerReq::port() const {
  return port_;
}
inline void S2SRegisterBattleServerReq::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// required uint64 roomid = 4;
inline bool S2SRegisterBattleServerReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SRegisterBattleServerReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SRegisterBattleServerReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SRegisterBattleServerReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SRegisterBattleServerReq::roomid() const {
  return roomid_;
}
inline void S2SRegisterBattleServerReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 battleshardid = 5;
inline bool S2SRegisterBattleServerReq::has_battleshardid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SRegisterBattleServerReq::set_has_battleshardid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SRegisterBattleServerReq::clear_has_battleshardid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SRegisterBattleServerReq::clear_battleshardid() {
  battleshardid_ = 0u;
  clear_has_battleshardid();
}
inline ::google::protobuf::uint32 S2SRegisterBattleServerReq::battleshardid() const {
  return battleshardid_;
}
inline void S2SRegisterBattleServerReq::set_battleshardid(::google::protobuf::uint32 value) {
  set_has_battleshardid();
  battleshardid_ = value;
}

// -------------------------------------------------------------------

// S2SRegisterBattleServerAck

// required uint32 serverid = 1;
inline bool S2SRegisterBattleServerAck::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SRegisterBattleServerAck::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SRegisterBattleServerAck::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SRegisterBattleServerAck::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2SRegisterBattleServerAck::serverid() const {
  return serverid_;
}
inline void S2SRegisterBattleServerAck::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required uint32 result = 2;
inline bool S2SRegisterBattleServerAck::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SRegisterBattleServerAck::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SRegisterBattleServerAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SRegisterBattleServerAck::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 S2SRegisterBattleServerAck::result() const {
  return result_;
}
inline void S2SRegisterBattleServerAck::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// S2SRegisterServerToBattleShardReq

// required uint32 serverid = 1;
inline bool S2SRegisterServerToBattleShardReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SRegisterServerToBattleShardReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SRegisterServerToBattleShardReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SRegisterServerToBattleShardReq::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2SRegisterServerToBattleShardReq::serverid() const {
  return serverid_;
}
inline void S2SRegisterServerToBattleShardReq::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required string ip = 2;
inline bool S2SRegisterServerToBattleShardReq::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SRegisterServerToBattleShardReq::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SRegisterServerToBattleShardReq::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SRegisterServerToBattleShardReq::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& S2SRegisterServerToBattleShardReq::ip() const {
  return *ip_;
}
inline void S2SRegisterServerToBattleShardReq::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SRegisterServerToBattleShardReq::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SRegisterServerToBattleShardReq::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SRegisterServerToBattleShardReq::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* S2SRegisterServerToBattleShardReq::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SRegisterServerToBattleShardReq::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 port = 3;
inline bool S2SRegisterServerToBattleShardReq::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SRegisterServerToBattleShardReq::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SRegisterServerToBattleShardReq::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SRegisterServerToBattleShardReq::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 S2SRegisterServerToBattleShardReq::port() const {
  return port_;
}
inline void S2SRegisterServerToBattleShardReq::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// required uint64 roomid = 4;
inline bool S2SRegisterServerToBattleShardReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SRegisterServerToBattleShardReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SRegisterServerToBattleShardReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SRegisterServerToBattleShardReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SRegisterServerToBattleShardReq::roomid() const {
  return roomid_;
}
inline void S2SRegisterServerToBattleShardReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// S2STellBattleRegisterToShardReq

// required uint32 serverid = 1;
inline bool S2STellBattleRegisterToShardReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2STellBattleRegisterToShardReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2STellBattleRegisterToShardReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2STellBattleRegisterToShardReq::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2STellBattleRegisterToShardReq::serverid() const {
  return serverid_;
}
inline void S2STellBattleRegisterToShardReq::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required uint64 roomid = 2;
inline bool S2STellBattleRegisterToShardReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2STellBattleRegisterToShardReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2STellBattleRegisterToShardReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2STellBattleRegisterToShardReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2STellBattleRegisterToShardReq::roomid() const {
  return roomid_;
}
inline void S2STellBattleRegisterToShardReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required string ip = 3;
inline bool S2STellBattleRegisterToShardReq::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2STellBattleRegisterToShardReq::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2STellBattleRegisterToShardReq::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2STellBattleRegisterToShardReq::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& S2STellBattleRegisterToShardReq::ip() const {
  return *ip_;
}
inline void S2STellBattleRegisterToShardReq::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2STellBattleRegisterToShardReq::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2STellBattleRegisterToShardReq::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2STellBattleRegisterToShardReq::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* S2STellBattleRegisterToShardReq::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2STellBattleRegisterToShardReq::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 port = 4;
inline bool S2STellBattleRegisterToShardReq::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2STellBattleRegisterToShardReq::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2STellBattleRegisterToShardReq::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2STellBattleRegisterToShardReq::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 S2STellBattleRegisterToShardReq::port() const {
  return port_;
}
inline void S2STellBattleRegisterToShardReq::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// S2SDisconnectServerToBattleShardReq

// required uint32 serverid = 1;
inline bool S2SDisconnectServerToBattleShardReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SDisconnectServerToBattleShardReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SDisconnectServerToBattleShardReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SDisconnectServerToBattleShardReq::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2SDisconnectServerToBattleShardReq::serverid() const {
  return serverid_;
}
inline void S2SDisconnectServerToBattleShardReq::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// S2SCreateRoomToBattleProxyReq

// required uint32 matchid = 1;
inline bool S2SCreateRoomToBattleProxyReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SCreateRoomToBattleProxyReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SCreateRoomToBattleProxyReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SCreateRoomToBattleProxyReq::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SCreateRoomToBattleProxyReq::matchid() const {
  return matchid_;
}
inline void S2SCreateRoomToBattleProxyReq::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required uint64 roomid = 2;
inline bool S2SCreateRoomToBattleProxyReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SCreateRoomToBattleProxyReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SCreateRoomToBattleProxyReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SCreateRoomToBattleProxyReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SCreateRoomToBattleProxyReq::roomid() const {
  return roomid_;
}
inline void S2SCreateRoomToBattleProxyReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 maxplayercount = 3;
inline bool S2SCreateRoomToBattleProxyReq::has_maxplayercount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SCreateRoomToBattleProxyReq::set_has_maxplayercount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SCreateRoomToBattleProxyReq::clear_has_maxplayercount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SCreateRoomToBattleProxyReq::clear_maxplayercount() {
  maxplayercount_ = 0u;
  clear_has_maxplayercount();
}
inline ::google::protobuf::uint32 S2SCreateRoomToBattleProxyReq::maxplayercount() const {
  return maxplayercount_;
}
inline void S2SCreateRoomToBattleProxyReq::set_maxplayercount(::google::protobuf::uint32 value) {
  set_has_maxplayercount();
  maxplayercount_ = value;
}

// required uint32 battleserverid = 4;
inline bool S2SCreateRoomToBattleProxyReq::has_battleserverid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SCreateRoomToBattleProxyReq::set_has_battleserverid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SCreateRoomToBattleProxyReq::clear_has_battleserverid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SCreateRoomToBattleProxyReq::clear_battleserverid() {
  battleserverid_ = 0u;
  clear_has_battleserverid();
}
inline ::google::protobuf::uint32 S2SCreateRoomToBattleProxyReq::battleserverid() const {
  return battleserverid_;
}
inline void S2SCreateRoomToBattleProxyReq::set_battleserverid(::google::protobuf::uint32 value) {
  set_has_battleserverid();
  battleserverid_ = value;
}

// -------------------------------------------------------------------

// S2SCreateRoomToBattleShardReq

// required uint32 matchid = 1;
inline bool S2SCreateRoomToBattleShardReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SCreateRoomToBattleShardReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SCreateRoomToBattleShardReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SCreateRoomToBattleShardReq::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SCreateRoomToBattleShardReq::matchid() const {
  return matchid_;
}
inline void S2SCreateRoomToBattleShardReq::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required uint64 roomid = 2;
inline bool S2SCreateRoomToBattleShardReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SCreateRoomToBattleShardReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SCreateRoomToBattleShardReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SCreateRoomToBattleShardReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SCreateRoomToBattleShardReq::roomid() const {
  return roomid_;
}
inline void S2SCreateRoomToBattleShardReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 matchshardid = 3;
inline bool S2SCreateRoomToBattleShardReq::has_matchshardid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SCreateRoomToBattleShardReq::set_has_matchshardid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SCreateRoomToBattleShardReq::clear_has_matchshardid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SCreateRoomToBattleShardReq::clear_matchshardid() {
  matchshardid_ = 0u;
  clear_has_matchshardid();
}
inline ::google::protobuf::uint32 S2SCreateRoomToBattleShardReq::matchshardid() const {
  return matchshardid_;
}
inline void S2SCreateRoomToBattleShardReq::set_matchshardid(::google::protobuf::uint32 value) {
  set_has_matchshardid();
  matchshardid_ = value;
}

// required uint32 maxplayercount = 4;
inline bool S2SCreateRoomToBattleShardReq::has_maxplayercount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SCreateRoomToBattleShardReq::set_has_maxplayercount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SCreateRoomToBattleShardReq::clear_has_maxplayercount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SCreateRoomToBattleShardReq::clear_maxplayercount() {
  maxplayercount_ = 0u;
  clear_has_maxplayercount();
}
inline ::google::protobuf::uint32 S2SCreateRoomToBattleShardReq::maxplayercount() const {
  return maxplayercount_;
}
inline void S2SCreateRoomToBattleShardReq::set_maxplayercount(::google::protobuf::uint32 value) {
  set_has_maxplayercount();
  maxplayercount_ = value;
}

// required uint32 battleserverid = 5;
inline bool S2SCreateRoomToBattleShardReq::has_battleserverid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SCreateRoomToBattleShardReq::set_has_battleserverid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SCreateRoomToBattleShardReq::clear_has_battleserverid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SCreateRoomToBattleShardReq::clear_battleserverid() {
  battleserverid_ = 0u;
  clear_has_battleserverid();
}
inline ::google::protobuf::uint32 S2SCreateRoomToBattleShardReq::battleserverid() const {
  return battleserverid_;
}
inline void S2SCreateRoomToBattleShardReq::set_battleserverid(::google::protobuf::uint32 value) {
  set_has_battleserverid();
  battleserverid_ = value;
}

// -------------------------------------------------------------------

// S2SCreateRoomToMatchShardAck

// required uint32 matchid = 1;
inline bool S2SCreateRoomToMatchShardAck::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SCreateRoomToMatchShardAck::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SCreateRoomToMatchShardAck::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SCreateRoomToMatchShardAck::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SCreateRoomToMatchShardAck::matchid() const {
  return matchid_;
}
inline void S2SCreateRoomToMatchShardAck::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required uint64 roomid = 2;
inline bool S2SCreateRoomToMatchShardAck::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SCreateRoomToMatchShardAck::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SCreateRoomToMatchShardAck::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SCreateRoomToMatchShardAck::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SCreateRoomToMatchShardAck::roomid() const {
  return roomid_;
}
inline void S2SCreateRoomToMatchShardAck::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 battleshardid = 3;
inline bool S2SCreateRoomToMatchShardAck::has_battleshardid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SCreateRoomToMatchShardAck::set_has_battleshardid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SCreateRoomToMatchShardAck::clear_has_battleshardid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SCreateRoomToMatchShardAck::clear_battleshardid() {
  battleshardid_ = 0u;
  clear_has_battleshardid();
}
inline ::google::protobuf::uint32 S2SCreateRoomToMatchShardAck::battleshardid() const {
  return battleshardid_;
}
inline void S2SCreateRoomToMatchShardAck::set_battleshardid(::google::protobuf::uint32 value) {
  set_has_battleshardid();
  battleshardid_ = value;
}

// -------------------------------------------------------------------

// S2SAddCampToBattleShardReq

// required uint64 roomid = 1;
inline bool S2SAddCampToBattleShardReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SAddCampToBattleShardReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SAddCampToBattleShardReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SAddCampToBattleShardReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SAddCampToBattleShardReq::roomid() const {
  return roomid_;
}
inline void S2SAddCampToBattleShardReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required .KFMsg.PBBattleCamp pbcamp = 2;
inline bool S2SAddCampToBattleShardReq::has_pbcamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SAddCampToBattleShardReq::set_has_pbcamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SAddCampToBattleShardReq::clear_has_pbcamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SAddCampToBattleShardReq::clear_pbcamp() {
  if (pbcamp_ != NULL) pbcamp_->::KFMsg::PBBattleCamp::Clear();
  clear_has_pbcamp();
}
inline const ::KFMsg::PBBattleCamp& S2SAddCampToBattleShardReq::pbcamp() const {
  return pbcamp_ != NULL ? *pbcamp_ : *default_instance_->pbcamp_;
}
inline ::KFMsg::PBBattleCamp* S2SAddCampToBattleShardReq::mutable_pbcamp() {
  set_has_pbcamp();
  if (pbcamp_ == NULL) pbcamp_ = new ::KFMsg::PBBattleCamp;
  return pbcamp_;
}
inline ::KFMsg::PBBattleCamp* S2SAddCampToBattleShardReq::release_pbcamp() {
  clear_has_pbcamp();
  ::KFMsg::PBBattleCamp* temp = pbcamp_;
  pbcamp_ = NULL;
  return temp;
}
inline void S2SAddCampToBattleShardReq::set_allocated_pbcamp(::KFMsg::PBBattleCamp* pbcamp) {
  delete pbcamp_;
  pbcamp_ = pbcamp;
  if (pbcamp) {
    set_has_pbcamp();
  } else {
    clear_has_pbcamp();
  }
}

// required uint32 matchid = 3;
inline bool S2SAddCampToBattleShardReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SAddCampToBattleShardReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SAddCampToBattleShardReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SAddCampToBattleShardReq::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SAddCampToBattleShardReq::matchid() const {
  return matchid_;
}
inline void S2SAddCampToBattleShardReq::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required uint32 matchshardid = 4;
inline bool S2SAddCampToBattleShardReq::has_matchshardid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SAddCampToBattleShardReq::set_has_matchshardid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SAddCampToBattleShardReq::clear_has_matchshardid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SAddCampToBattleShardReq::clear_matchshardid() {
  matchshardid_ = 0u;
  clear_has_matchshardid();
}
inline ::google::protobuf::uint32 S2SAddCampToBattleShardReq::matchshardid() const {
  return matchshardid_;
}
inline void S2SAddCampToBattleShardReq::set_matchshardid(::google::protobuf::uint32 value) {
  set_has_matchshardid();
  matchshardid_ = value;
}

// -------------------------------------------------------------------

// S2SAddCampToMatchShardAck

// required uint32 matchid = 1;
inline bool S2SAddCampToMatchShardAck::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SAddCampToMatchShardAck::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SAddCampToMatchShardAck::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SAddCampToMatchShardAck::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SAddCampToMatchShardAck::matchid() const {
  return matchid_;
}
inline void S2SAddCampToMatchShardAck::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required uint64 roomid = 2;
inline bool S2SAddCampToMatchShardAck::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SAddCampToMatchShardAck::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SAddCampToMatchShardAck::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SAddCampToMatchShardAck::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SAddCampToMatchShardAck::roomid() const {
  return roomid_;
}
inline void S2SAddCampToMatchShardAck::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 campid = 3;
inline bool S2SAddCampToMatchShardAck::has_campid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SAddCampToMatchShardAck::set_has_campid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SAddCampToMatchShardAck::clear_has_campid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SAddCampToMatchShardAck::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 S2SAddCampToMatchShardAck::campid() const {
  return campid_;
}
inline void S2SAddCampToMatchShardAck::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
}

// required bool addok = 4;
inline bool S2SAddCampToMatchShardAck::has_addok() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SAddCampToMatchShardAck::set_has_addok() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SAddCampToMatchShardAck::clear_has_addok() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SAddCampToMatchShardAck::clear_addok() {
  addok_ = false;
  clear_has_addok();
}
inline bool S2SAddCampToMatchShardAck::addok() const {
  return addok_;
}
inline void S2SAddCampToMatchShardAck::set_addok(bool value) {
  set_has_addok();
  addok_ = value;
}

// -------------------------------------------------------------------

// S2SOpenBattleRoomReq

// required uint32 matchid = 1;
inline bool S2SOpenBattleRoomReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SOpenBattleRoomReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SOpenBattleRoomReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SOpenBattleRoomReq::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SOpenBattleRoomReq::matchid() const {
  return matchid_;
}
inline void S2SOpenBattleRoomReq::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required uint64 roomid = 2;
inline bool S2SOpenBattleRoomReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SOpenBattleRoomReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SOpenBattleRoomReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SOpenBattleRoomReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SOpenBattleRoomReq::roomid() const {
  return roomid_;
}
inline void S2SOpenBattleRoomReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 battleshardid = 3;
inline bool S2SOpenBattleRoomReq::has_battleshardid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SOpenBattleRoomReq::set_has_battleshardid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SOpenBattleRoomReq::clear_has_battleshardid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SOpenBattleRoomReq::clear_battleshardid() {
  battleshardid_ = 0u;
  clear_has_battleshardid();
}
inline ::google::protobuf::uint32 S2SOpenBattleRoomReq::battleshardid() const {
  return battleshardid_;
}
inline void S2SOpenBattleRoomReq::set_battleshardid(::google::protobuf::uint32 value) {
  set_has_battleshardid();
  battleshardid_ = value;
}

// required uint32 maxplayercount = 4;
inline bool S2SOpenBattleRoomReq::has_maxplayercount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SOpenBattleRoomReq::set_has_maxplayercount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SOpenBattleRoomReq::clear_has_maxplayercount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SOpenBattleRoomReq::clear_maxplayercount() {
  maxplayercount_ = 0u;
  clear_has_maxplayercount();
}
inline ::google::protobuf::uint32 S2SOpenBattleRoomReq::maxplayercount() const {
  return maxplayercount_;
}
inline void S2SOpenBattleRoomReq::set_maxplayercount(::google::protobuf::uint32 value) {
  set_has_maxplayercount();
  maxplayercount_ = value;
}

// -------------------------------------------------------------------

// S2SOpenBattleRoomAck

// required uint32 battleshardid = 1;
inline bool S2SOpenBattleRoomAck::has_battleshardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SOpenBattleRoomAck::set_has_battleshardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SOpenBattleRoomAck::clear_has_battleshardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SOpenBattleRoomAck::clear_battleshardid() {
  battleshardid_ = 0u;
  clear_has_battleshardid();
}
inline ::google::protobuf::uint32 S2SOpenBattleRoomAck::battleshardid() const {
  return battleshardid_;
}
inline void S2SOpenBattleRoomAck::set_battleshardid(::google::protobuf::uint32 value) {
  set_has_battleshardid();
  battleshardid_ = value;
}

// required uint32 matchid = 2;
inline bool S2SOpenBattleRoomAck::has_matchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SOpenBattleRoomAck::set_has_matchid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SOpenBattleRoomAck::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SOpenBattleRoomAck::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SOpenBattleRoomAck::matchid() const {
  return matchid_;
}
inline void S2SOpenBattleRoomAck::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required uint64 roomid = 3;
inline bool S2SOpenBattleRoomAck::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SOpenBattleRoomAck::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SOpenBattleRoomAck::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SOpenBattleRoomAck::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SOpenBattleRoomAck::roomid() const {
  return roomid_;
}
inline void S2SOpenBattleRoomAck::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 result = 4;
inline bool S2SOpenBattleRoomAck::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SOpenBattleRoomAck::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SOpenBattleRoomAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SOpenBattleRoomAck::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 S2SOpenBattleRoomAck::result() const {
  return result_;
}
inline void S2SOpenBattleRoomAck::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// required uint32 waittime = 5;
inline bool S2SOpenBattleRoomAck::has_waittime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SOpenBattleRoomAck::set_has_waittime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SOpenBattleRoomAck::clear_has_waittime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SOpenBattleRoomAck::clear_waittime() {
  waittime_ = 0u;
  clear_has_waittime();
}
inline ::google::protobuf::uint32 S2SOpenBattleRoomAck::waittime() const {
  return waittime_;
}
inline void S2SOpenBattleRoomAck::set_waittime(::google::protobuf::uint32 value) {
  set_has_waittime();
  waittime_ = value;
}

// -------------------------------------------------------------------

// S2SOpenBattleRoomToShardAck

// required uint32 matchid = 1;
inline bool S2SOpenBattleRoomToShardAck::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SOpenBattleRoomToShardAck::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SOpenBattleRoomToShardAck::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SOpenBattleRoomToShardAck::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SOpenBattleRoomToShardAck::matchid() const {
  return matchid_;
}
inline void S2SOpenBattleRoomToShardAck::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required uint64 roomid = 2;
inline bool S2SOpenBattleRoomToShardAck::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SOpenBattleRoomToShardAck::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SOpenBattleRoomToShardAck::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SOpenBattleRoomToShardAck::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SOpenBattleRoomToShardAck::roomid() const {
  return roomid_;
}
inline void S2SOpenBattleRoomToShardAck::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 result = 3;
inline bool S2SOpenBattleRoomToShardAck::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SOpenBattleRoomToShardAck::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SOpenBattleRoomToShardAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SOpenBattleRoomToShardAck::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 S2SOpenBattleRoomToShardAck::result() const {
  return result_;
}
inline void S2SOpenBattleRoomToShardAck::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// required uint32 waittime = 4;
inline bool S2SOpenBattleRoomToShardAck::has_waittime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SOpenBattleRoomToShardAck::set_has_waittime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SOpenBattleRoomToShardAck::clear_has_waittime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SOpenBattleRoomToShardAck::clear_waittime() {
  waittime_ = 0u;
  clear_has_waittime();
}
inline ::google::protobuf::uint32 S2SOpenBattleRoomToShardAck::waittime() const {
  return waittime_;
}
inline void S2SOpenBattleRoomToShardAck::set_waittime(::google::protobuf::uint32 value) {
  set_has_waittime();
  waittime_ = value;
}

// -------------------------------------------------------------------

// S2SOpenRoomToMatchShardReq

// required uint32 matchid = 1;
inline bool S2SOpenRoomToMatchShardReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SOpenRoomToMatchShardReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SOpenRoomToMatchShardReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SOpenRoomToMatchShardReq::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SOpenRoomToMatchShardReq::matchid() const {
  return matchid_;
}
inline void S2SOpenRoomToMatchShardReq::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required uint64 roomid = 2;
inline bool S2SOpenRoomToMatchShardReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SOpenRoomToMatchShardReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SOpenRoomToMatchShardReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SOpenRoomToMatchShardReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SOpenRoomToMatchShardReq::roomid() const {
  return roomid_;
}
inline void S2SOpenRoomToMatchShardReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 waittime = 3;
inline bool S2SOpenRoomToMatchShardReq::has_waittime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SOpenRoomToMatchShardReq::set_has_waittime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SOpenRoomToMatchShardReq::clear_has_waittime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SOpenRoomToMatchShardReq::clear_waittime() {
  waittime_ = 0u;
  clear_has_waittime();
}
inline ::google::protobuf::uint32 S2SOpenRoomToMatchShardReq::waittime() const {
  return waittime_;
}
inline void S2SOpenRoomToMatchShardReq::set_waittime(::google::protobuf::uint32 value) {
  set_has_waittime();
  waittime_ = value;
}

// -------------------------------------------------------------------

// S2SOpenRoomToBattleShardAck

// required uint64 roomid = 1;
inline bool S2SOpenRoomToBattleShardAck::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SOpenRoomToBattleShardAck::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SOpenRoomToBattleShardAck::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SOpenRoomToBattleShardAck::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SOpenRoomToBattleShardAck::roomid() const {
  return roomid_;
}
inline void S2SOpenRoomToBattleShardAck::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// S2SPlayerEnterBattleRoomReq

// required uint64 roomid = 1;
inline bool S2SPlayerEnterBattleRoomReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SPlayerEnterBattleRoomReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SPlayerEnterBattleRoomReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SPlayerEnterBattleRoomReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SPlayerEnterBattleRoomReq::roomid() const {
  return roomid_;
}
inline void S2SPlayerEnterBattleRoomReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required .KFMsg.PBBattlePlayer player = 2;
inline bool S2SPlayerEnterBattleRoomReq::has_player() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SPlayerEnterBattleRoomReq::set_has_player() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SPlayerEnterBattleRoomReq::clear_has_player() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SPlayerEnterBattleRoomReq::clear_player() {
  if (player_ != NULL) player_->::KFMsg::PBBattlePlayer::Clear();
  clear_has_player();
}
inline const ::KFMsg::PBBattlePlayer& S2SPlayerEnterBattleRoomReq::player() const {
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
inline ::KFMsg::PBBattlePlayer* S2SPlayerEnterBattleRoomReq::mutable_player() {
  set_has_player();
  if (player_ == NULL) player_ = new ::KFMsg::PBBattlePlayer;
  return player_;
}
inline ::KFMsg::PBBattlePlayer* S2SPlayerEnterBattleRoomReq::release_player() {
  clear_has_player();
  ::KFMsg::PBBattlePlayer* temp = player_;
  player_ = NULL;
  return temp;
}
inline void S2SPlayerEnterBattleRoomReq::set_allocated_player(::KFMsg::PBBattlePlayer* player) {
  delete player_;
  player_ = player;
  if (player) {
    set_has_player();
  } else {
    clear_has_player();
  }
}

// required string token = 3;
inline bool S2SPlayerEnterBattleRoomReq::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SPlayerEnterBattleRoomReq::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SPlayerEnterBattleRoomReq::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SPlayerEnterBattleRoomReq::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& S2SPlayerEnterBattleRoomReq::token() const {
  return *token_;
}
inline void S2SPlayerEnterBattleRoomReq::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SPlayerEnterBattleRoomReq::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SPlayerEnterBattleRoomReq::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SPlayerEnterBattleRoomReq::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* S2SPlayerEnterBattleRoomReq::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SPlayerEnterBattleRoomReq::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2SPlayerEnterBattleRoomAck

// required uint32 battleshardid = 1;
inline bool S2SPlayerEnterBattleRoomAck::has_battleshardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SPlayerEnterBattleRoomAck::set_has_battleshardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SPlayerEnterBattleRoomAck::clear_has_battleshardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SPlayerEnterBattleRoomAck::clear_battleshardid() {
  battleshardid_ = 0u;
  clear_has_battleshardid();
}
inline ::google::protobuf::uint32 S2SPlayerEnterBattleRoomAck::battleshardid() const {
  return battleshardid_;
}
inline void S2SPlayerEnterBattleRoomAck::set_battleshardid(::google::protobuf::uint32 value) {
  set_has_battleshardid();
  battleshardid_ = value;
}

// required uint64 roomid = 2;
inline bool S2SPlayerEnterBattleRoomAck::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SPlayerEnterBattleRoomAck::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SPlayerEnterBattleRoomAck::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SPlayerEnterBattleRoomAck::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SPlayerEnterBattleRoomAck::roomid() const {
  return roomid_;
}
inline void S2SPlayerEnterBattleRoomAck::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 campid = 3;
inline bool S2SPlayerEnterBattleRoomAck::has_campid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SPlayerEnterBattleRoomAck::set_has_campid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SPlayerEnterBattleRoomAck::clear_has_campid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SPlayerEnterBattleRoomAck::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 S2SPlayerEnterBattleRoomAck::campid() const {
  return campid_;
}
inline void S2SPlayerEnterBattleRoomAck::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
}

// required uint32 playerid = 4;
inline bool S2SPlayerEnterBattleRoomAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SPlayerEnterBattleRoomAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SPlayerEnterBattleRoomAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SPlayerEnterBattleRoomAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SPlayerEnterBattleRoomAck::playerid() const {
  return playerid_;
}
inline void S2SPlayerEnterBattleRoomAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// S2SPlayerEnterRoomToBattleShardAck

// required uint64 roomid = 1;
inline bool S2SPlayerEnterRoomToBattleShardAck::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SPlayerEnterRoomToBattleShardAck::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SPlayerEnterRoomToBattleShardAck::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SPlayerEnterRoomToBattleShardAck::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SPlayerEnterRoomToBattleShardAck::roomid() const {
  return roomid_;
}
inline void S2SPlayerEnterRoomToBattleShardAck::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 campid = 2;
inline bool S2SPlayerEnterRoomToBattleShardAck::has_campid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SPlayerEnterRoomToBattleShardAck::set_has_campid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SPlayerEnterRoomToBattleShardAck::clear_has_campid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SPlayerEnterRoomToBattleShardAck::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 S2SPlayerEnterRoomToBattleShardAck::campid() const {
  return campid_;
}
inline void S2SPlayerEnterRoomToBattleShardAck::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
}

// required uint32 playerid = 3;
inline bool S2SPlayerEnterRoomToBattleShardAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SPlayerEnterRoomToBattleShardAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SPlayerEnterRoomToBattleShardAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SPlayerEnterRoomToBattleShardAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SPlayerEnterRoomToBattleShardAck::playerid() const {
  return playerid_;
}
inline void S2SPlayerEnterRoomToBattleShardAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// S2SPlayerLoginBattleRoomReq

// required uint32 battleshardid = 1;
inline bool S2SPlayerLoginBattleRoomReq::has_battleshardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SPlayerLoginBattleRoomReq::set_has_battleshardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SPlayerLoginBattleRoomReq::clear_has_battleshardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SPlayerLoginBattleRoomReq::clear_battleshardid() {
  battleshardid_ = 0u;
  clear_has_battleshardid();
}
inline ::google::protobuf::uint32 S2SPlayerLoginBattleRoomReq::battleshardid() const {
  return battleshardid_;
}
inline void S2SPlayerLoginBattleRoomReq::set_battleshardid(::google::protobuf::uint32 value) {
  set_has_battleshardid();
  battleshardid_ = value;
}

// required uint64 roomid = 2;
inline bool S2SPlayerLoginBattleRoomReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SPlayerLoginBattleRoomReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SPlayerLoginBattleRoomReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SPlayerLoginBattleRoomReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SPlayerLoginBattleRoomReq::roomid() const {
  return roomid_;
}
inline void S2SPlayerLoginBattleRoomReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 campid = 3;
inline bool S2SPlayerLoginBattleRoomReq::has_campid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SPlayerLoginBattleRoomReq::set_has_campid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SPlayerLoginBattleRoomReq::clear_has_campid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SPlayerLoginBattleRoomReq::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 S2SPlayerLoginBattleRoomReq::campid() const {
  return campid_;
}
inline void S2SPlayerLoginBattleRoomReq::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
}

// required uint32 playerid = 4;
inline bool S2SPlayerLoginBattleRoomReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SPlayerLoginBattleRoomReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SPlayerLoginBattleRoomReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SPlayerLoginBattleRoomReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SPlayerLoginBattleRoomReq::playerid() const {
  return playerid_;
}
inline void S2SPlayerLoginBattleRoomReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// S2SPlayerLoginBattleRoomAck

// required uint64 roomid = 1;
inline bool S2SPlayerLoginBattleRoomAck::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SPlayerLoginBattleRoomAck::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SPlayerLoginBattleRoomAck::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SPlayerLoginBattleRoomAck::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SPlayerLoginBattleRoomAck::roomid() const {
  return roomid_;
}
inline void S2SPlayerLoginBattleRoomAck::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 campid = 2;
inline bool S2SPlayerLoginBattleRoomAck::has_campid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SPlayerLoginBattleRoomAck::set_has_campid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SPlayerLoginBattleRoomAck::clear_has_campid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SPlayerLoginBattleRoomAck::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 S2SPlayerLoginBattleRoomAck::campid() const {
  return campid_;
}
inline void S2SPlayerLoginBattleRoomAck::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
}

// required uint32 playerid = 3;
inline bool S2SPlayerLoginBattleRoomAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SPlayerLoginBattleRoomAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SPlayerLoginBattleRoomAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SPlayerLoginBattleRoomAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SPlayerLoginBattleRoomAck::playerid() const {
  return playerid_;
}
inline void S2SPlayerLoginBattleRoomAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// S2SPlayerLoginRoomToBattleShardReq

// required uint64 roomid = 2;
inline bool S2SPlayerLoginRoomToBattleShardReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SPlayerLoginRoomToBattleShardReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SPlayerLoginRoomToBattleShardReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SPlayerLoginRoomToBattleShardReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SPlayerLoginRoomToBattleShardReq::roomid() const {
  return roomid_;
}
inline void S2SPlayerLoginRoomToBattleShardReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 campid = 3;
inline bool S2SPlayerLoginRoomToBattleShardReq::has_campid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SPlayerLoginRoomToBattleShardReq::set_has_campid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SPlayerLoginRoomToBattleShardReq::clear_has_campid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SPlayerLoginRoomToBattleShardReq::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 S2SPlayerLoginRoomToBattleShardReq::campid() const {
  return campid_;
}
inline void S2SPlayerLoginRoomToBattleShardReq::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
}

// required uint32 playerid = 4;
inline bool S2SPlayerLoginRoomToBattleShardReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SPlayerLoginRoomToBattleShardReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SPlayerLoginRoomToBattleShardReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SPlayerLoginRoomToBattleShardReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SPlayerLoginRoomToBattleShardReq::playerid() const {
  return playerid_;
}
inline void S2SPlayerLoginRoomToBattleShardReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// S2SPlayerCancelMatchReq

// required uint64 roomid = 1;
inline bool S2SPlayerCancelMatchReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SPlayerCancelMatchReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SPlayerCancelMatchReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SPlayerCancelMatchReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SPlayerCancelMatchReq::roomid() const {
  return roomid_;
}
inline void S2SPlayerCancelMatchReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 campid = 2;
inline bool S2SPlayerCancelMatchReq::has_campid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SPlayerCancelMatchReq::set_has_campid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SPlayerCancelMatchReq::clear_has_campid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SPlayerCancelMatchReq::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 S2SPlayerCancelMatchReq::campid() const {
  return campid_;
}
inline void S2SPlayerCancelMatchReq::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
}

// required uint32 playerid = 3;
inline bool S2SPlayerCancelMatchReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SPlayerCancelMatchReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SPlayerCancelMatchReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SPlayerCancelMatchReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SPlayerCancelMatchReq::playerid() const {
  return playerid_;
}
inline void S2SPlayerCancelMatchReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// S2SPlayerLeaveBattleRoomReq

// required uint64 roomid = 1;
inline bool S2SPlayerLeaveBattleRoomReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SPlayerLeaveBattleRoomReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SPlayerLeaveBattleRoomReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SPlayerLeaveBattleRoomReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SPlayerLeaveBattleRoomReq::roomid() const {
  return roomid_;
}
inline void S2SPlayerLeaveBattleRoomReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 battleshardid = 2;
inline bool S2SPlayerLeaveBattleRoomReq::has_battleshardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SPlayerLeaveBattleRoomReq::set_has_battleshardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SPlayerLeaveBattleRoomReq::clear_has_battleshardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SPlayerLeaveBattleRoomReq::clear_battleshardid() {
  battleshardid_ = 0u;
  clear_has_battleshardid();
}
inline ::google::protobuf::uint32 S2SPlayerLeaveBattleRoomReq::battleshardid() const {
  return battleshardid_;
}
inline void S2SPlayerLeaveBattleRoomReq::set_battleshardid(::google::protobuf::uint32 value) {
  set_has_battleshardid();
  battleshardid_ = value;
}

// required uint32 campid = 3;
inline bool S2SPlayerLeaveBattleRoomReq::has_campid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SPlayerLeaveBattleRoomReq::set_has_campid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SPlayerLeaveBattleRoomReq::clear_has_campid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SPlayerLeaveBattleRoomReq::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 S2SPlayerLeaveBattleRoomReq::campid() const {
  return campid_;
}
inline void S2SPlayerLeaveBattleRoomReq::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
}

// required uint32 playerid = 4;
inline bool S2SPlayerLeaveBattleRoomReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SPlayerLeaveBattleRoomReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SPlayerLeaveBattleRoomReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SPlayerLeaveBattleRoomReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SPlayerLeaveBattleRoomReq::playerid() const {
  return playerid_;
}
inline void S2SPlayerLeaveBattleRoomReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// S2SPlayerLeaveBattleRoomAck

// required uint64 roomid = 1;
inline bool S2SPlayerLeaveBattleRoomAck::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SPlayerLeaveBattleRoomAck::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SPlayerLeaveBattleRoomAck::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SPlayerLeaveBattleRoomAck::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SPlayerLeaveBattleRoomAck::roomid() const {
  return roomid_;
}
inline void S2SPlayerLeaveBattleRoomAck::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 campid = 2;
inline bool S2SPlayerLeaveBattleRoomAck::has_campid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SPlayerLeaveBattleRoomAck::set_has_campid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SPlayerLeaveBattleRoomAck::clear_has_campid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SPlayerLeaveBattleRoomAck::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 S2SPlayerLeaveBattleRoomAck::campid() const {
  return campid_;
}
inline void S2SPlayerLeaveBattleRoomAck::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
}

// required uint32 playerid = 3;
inline bool S2SPlayerLeaveBattleRoomAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SPlayerLeaveBattleRoomAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SPlayerLeaveBattleRoomAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SPlayerLeaveBattleRoomAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SPlayerLeaveBattleRoomAck::playerid() const {
  return playerid_;
}
inline void S2SPlayerLeaveBattleRoomAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// S2SPlayerLeaveRoomToBattleShardReq

// required uint64 roomid = 1;
inline bool S2SPlayerLeaveRoomToBattleShardReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SPlayerLeaveRoomToBattleShardReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SPlayerLeaveRoomToBattleShardReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SPlayerLeaveRoomToBattleShardReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SPlayerLeaveRoomToBattleShardReq::roomid() const {
  return roomid_;
}
inline void S2SPlayerLeaveRoomToBattleShardReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 campid = 2;
inline bool S2SPlayerLeaveRoomToBattleShardReq::has_campid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SPlayerLeaveRoomToBattleShardReq::set_has_campid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SPlayerLeaveRoomToBattleShardReq::clear_has_campid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SPlayerLeaveRoomToBattleShardReq::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 S2SPlayerLeaveRoomToBattleShardReq::campid() const {
  return campid_;
}
inline void S2SPlayerLeaveRoomToBattleShardReq::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
}

// required uint32 playerid = 3;
inline bool S2SPlayerLeaveRoomToBattleShardReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SPlayerLeaveRoomToBattleShardReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SPlayerLeaveRoomToBattleShardReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SPlayerLeaveRoomToBattleShardReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SPlayerLeaveRoomToBattleShardReq::playerid() const {
  return playerid_;
}
inline void S2SPlayerLeaveRoomToBattleShardReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// S2SPlayerLeaveRoomToMatchShardReq

// required uint64 matchid = 1;
inline bool S2SPlayerLeaveRoomToMatchShardReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SPlayerLeaveRoomToMatchShardReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SPlayerLeaveRoomToMatchShardReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SPlayerLeaveRoomToMatchShardReq::clear_matchid() {
  matchid_ = GOOGLE_ULONGLONG(0);
  clear_has_matchid();
}
inline ::google::protobuf::uint64 S2SPlayerLeaveRoomToMatchShardReq::matchid() const {
  return matchid_;
}
inline void S2SPlayerLeaveRoomToMatchShardReq::set_matchid(::google::protobuf::uint64 value) {
  set_has_matchid();
  matchid_ = value;
}

// required uint64 roomid = 2;
inline bool S2SPlayerLeaveRoomToMatchShardReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SPlayerLeaveRoomToMatchShardReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SPlayerLeaveRoomToMatchShardReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SPlayerLeaveRoomToMatchShardReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SPlayerLeaveRoomToMatchShardReq::roomid() const {
  return roomid_;
}
inline void S2SPlayerLeaveRoomToMatchShardReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 campid = 3;
inline bool S2SPlayerLeaveRoomToMatchShardReq::has_campid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SPlayerLeaveRoomToMatchShardReq::set_has_campid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SPlayerLeaveRoomToMatchShardReq::clear_has_campid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SPlayerLeaveRoomToMatchShardReq::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 S2SPlayerLeaveRoomToMatchShardReq::campid() const {
  return campid_;
}
inline void S2SPlayerLeaveRoomToMatchShardReq::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
}

// required uint64 groupid = 4;
inline bool S2SPlayerLeaveRoomToMatchShardReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SPlayerLeaveRoomToMatchShardReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SPlayerLeaveRoomToMatchShardReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SPlayerLeaveRoomToMatchShardReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 S2SPlayerLeaveRoomToMatchShardReq::groupid() const {
  return groupid_;
}
inline void S2SPlayerLeaveRoomToMatchShardReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required uint32 playerid = 5;
inline bool S2SPlayerLeaveRoomToMatchShardReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SPlayerLeaveRoomToMatchShardReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SPlayerLeaveRoomToMatchShardReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SPlayerLeaveRoomToMatchShardReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SPlayerLeaveRoomToMatchShardReq::playerid() const {
  return playerid_;
}
inline void S2SPlayerLeaveRoomToMatchShardReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// S2SLeaveBattleRoomToClientAck

// required uint32 playerid = 1;
inline bool S2SLeaveBattleRoomToClientAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SLeaveBattleRoomToClientAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SLeaveBattleRoomToClientAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SLeaveBattleRoomToClientAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SLeaveBattleRoomToClientAck::playerid() const {
  return playerid_;
}
inline void S2SLeaveBattleRoomToClientAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// S2STellBattleRoomStartReq

// required uint32 battleshardid = 1;
inline bool S2STellBattleRoomStartReq::has_battleshardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2STellBattleRoomStartReq::set_has_battleshardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2STellBattleRoomStartReq::clear_has_battleshardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2STellBattleRoomStartReq::clear_battleshardid() {
  battleshardid_ = 0u;
  clear_has_battleshardid();
}
inline ::google::protobuf::uint32 S2STellBattleRoomStartReq::battleshardid() const {
  return battleshardid_;
}
inline void S2STellBattleRoomStartReq::set_battleshardid(::google::protobuf::uint32 value) {
  set_has_battleshardid();
  battleshardid_ = value;
}

// required uint64 roomid = 2;
inline bool S2STellBattleRoomStartReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2STellBattleRoomStartReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2STellBattleRoomStartReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2STellBattleRoomStartReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2STellBattleRoomStartReq::roomid() const {
  return roomid_;
}
inline void S2STellBattleRoomStartReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// S2STellRoomStartToBattleShardReq

// required uint64 roomid = 1;
inline bool S2STellRoomStartToBattleShardReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2STellRoomStartToBattleShardReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2STellRoomStartToBattleShardReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2STellRoomStartToBattleShardReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2STellRoomStartToBattleShardReq::roomid() const {
  return roomid_;
}
inline void S2STellRoomStartToBattleShardReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// S2STellBattleRoomStartAck

// required uint64 roomid = 1;
inline bool S2STellBattleRoomStartAck::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2STellBattleRoomStartAck::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2STellBattleRoomStartAck::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2STellBattleRoomStartAck::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2STellBattleRoomStartAck::roomid() const {
  return roomid_;
}
inline void S2STellBattleRoomStartAck::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// S2STellRoomStartToMatchShardReq

// required uint32 matchid = 1;
inline bool S2STellRoomStartToMatchShardReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2STellRoomStartToMatchShardReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2STellRoomStartToMatchShardReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2STellRoomStartToMatchShardReq::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2STellRoomStartToMatchShardReq::matchid() const {
  return matchid_;
}
inline void S2STellRoomStartToMatchShardReq::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required uint64 roomid = 2;
inline bool S2STellRoomStartToMatchShardReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2STellRoomStartToMatchShardReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2STellRoomStartToMatchShardReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2STellRoomStartToMatchShardReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2STellRoomStartToMatchShardReq::roomid() const {
  return roomid_;
}
inline void S2STellRoomStartToMatchShardReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// S2STellRoomStartToMatchShardAck

// required uint64 roomid = 1;
inline bool S2STellRoomStartToMatchShardAck::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2STellRoomStartToMatchShardAck::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2STellRoomStartToMatchShardAck::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2STellRoomStartToMatchShardAck::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2STellRoomStartToMatchShardAck::roomid() const {
  return roomid_;
}
inline void S2STellRoomStartToMatchShardAck::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// S2STellBattleRoomFinishReq

// required uint32 battleshardid = 1;
inline bool S2STellBattleRoomFinishReq::has_battleshardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2STellBattleRoomFinishReq::set_has_battleshardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2STellBattleRoomFinishReq::clear_has_battleshardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2STellBattleRoomFinishReq::clear_battleshardid() {
  battleshardid_ = 0u;
  clear_has_battleshardid();
}
inline ::google::protobuf::uint32 S2STellBattleRoomFinishReq::battleshardid() const {
  return battleshardid_;
}
inline void S2STellBattleRoomFinishReq::set_battleshardid(::google::protobuf::uint32 value) {
  set_has_battleshardid();
  battleshardid_ = value;
}

// required uint64 roomid = 2;
inline bool S2STellBattleRoomFinishReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2STellBattleRoomFinishReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2STellBattleRoomFinishReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2STellBattleRoomFinishReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2STellBattleRoomFinishReq::roomid() const {
  return roomid_;
}
inline void S2STellBattleRoomFinishReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 serverid = 3;
inline bool S2STellBattleRoomFinishReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2STellBattleRoomFinishReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2STellBattleRoomFinishReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2STellBattleRoomFinishReq::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2STellBattleRoomFinishReq::serverid() const {
  return serverid_;
}
inline void S2STellBattleRoomFinishReq::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required string ip = 4;
inline bool S2STellBattleRoomFinishReq::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2STellBattleRoomFinishReq::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2STellBattleRoomFinishReq::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2STellBattleRoomFinishReq::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& S2STellBattleRoomFinishReq::ip() const {
  return *ip_;
}
inline void S2STellBattleRoomFinishReq::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2STellBattleRoomFinishReq::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2STellBattleRoomFinishReq::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2STellBattleRoomFinishReq::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* S2STellBattleRoomFinishReq::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2STellBattleRoomFinishReq::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2STellBattleRoomFinishAck

// required uint64 roomid = 1;
inline bool S2STellBattleRoomFinishAck::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2STellBattleRoomFinishAck::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2STellBattleRoomFinishAck::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2STellBattleRoomFinishAck::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2STellBattleRoomFinishAck::roomid() const {
  return roomid_;
}
inline void S2STellBattleRoomFinishAck::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// repeated string pbscore = 2;
inline int S2STellBattleRoomFinishAck::pbscore_size() const {
  return pbscore_.size();
}
inline void S2STellBattleRoomFinishAck::clear_pbscore() {
  pbscore_.Clear();
}
inline const ::std::string& S2STellBattleRoomFinishAck::pbscore(int index) const {
  return pbscore_.Get(index);
}
inline ::std::string* S2STellBattleRoomFinishAck::mutable_pbscore(int index) {
  return pbscore_.Mutable(index);
}
inline void S2STellBattleRoomFinishAck::set_pbscore(int index, const ::std::string& value) {
  pbscore_.Mutable(index)->assign(value);
}
inline void S2STellBattleRoomFinishAck::set_pbscore(int index, const char* value) {
  pbscore_.Mutable(index)->assign(value);
}
inline void S2STellBattleRoomFinishAck::set_pbscore(int index, const char* value, size_t size) {
  pbscore_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2STellBattleRoomFinishAck::add_pbscore() {
  return pbscore_.Add();
}
inline void S2STellBattleRoomFinishAck::add_pbscore(const ::std::string& value) {
  pbscore_.Add()->assign(value);
}
inline void S2STellBattleRoomFinishAck::add_pbscore(const char* value) {
  pbscore_.Add()->assign(value);
}
inline void S2STellBattleRoomFinishAck::add_pbscore(const char* value, size_t size) {
  pbscore_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
S2STellBattleRoomFinishAck::pbscore() const {
  return pbscore_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
S2STellBattleRoomFinishAck::mutable_pbscore() {
  return &pbscore_;
}

// -------------------------------------------------------------------

// S2SBattleRoomScoreBalanceReq

// required uint64 roomid = 1;
inline bool S2SBattleRoomScoreBalanceReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SBattleRoomScoreBalanceReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SBattleRoomScoreBalanceReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SBattleRoomScoreBalanceReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SBattleRoomScoreBalanceReq::roomid() const {
  return roomid_;
}
inline void S2SBattleRoomScoreBalanceReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 battleshardid = 2;
inline bool S2SBattleRoomScoreBalanceReq::has_battleshardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SBattleRoomScoreBalanceReq::set_has_battleshardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SBattleRoomScoreBalanceReq::clear_has_battleshardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SBattleRoomScoreBalanceReq::clear_battleshardid() {
  battleshardid_ = 0u;
  clear_has_battleshardid();
}
inline ::google::protobuf::uint32 S2SBattleRoomScoreBalanceReq::battleshardid() const {
  return battleshardid_;
}
inline void S2SBattleRoomScoreBalanceReq::set_battleshardid(::google::protobuf::uint32 value) {
  set_has_battleshardid();
  battleshardid_ = value;
}

// required .KFMsg.PBBattleScore pbscore = 3;
inline bool S2SBattleRoomScoreBalanceReq::has_pbscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SBattleRoomScoreBalanceReq::set_has_pbscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SBattleRoomScoreBalanceReq::clear_has_pbscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SBattleRoomScoreBalanceReq::clear_pbscore() {
  if (pbscore_ != NULL) pbscore_->::KFMsg::PBBattleScore::Clear();
  clear_has_pbscore();
}
inline const ::KFMsg::PBBattleScore& S2SBattleRoomScoreBalanceReq::pbscore() const {
  return pbscore_ != NULL ? *pbscore_ : *default_instance_->pbscore_;
}
inline ::KFMsg::PBBattleScore* S2SBattleRoomScoreBalanceReq::mutable_pbscore() {
  set_has_pbscore();
  if (pbscore_ == NULL) pbscore_ = new ::KFMsg::PBBattleScore;
  return pbscore_;
}
inline ::KFMsg::PBBattleScore* S2SBattleRoomScoreBalanceReq::release_pbscore() {
  clear_has_pbscore();
  ::KFMsg::PBBattleScore* temp = pbscore_;
  pbscore_ = NULL;
  return temp;
}
inline void S2SBattleRoomScoreBalanceReq::set_allocated_pbscore(::KFMsg::PBBattleScore* pbscore) {
  delete pbscore_;
  pbscore_ = pbscore;
  if (pbscore) {
    set_has_pbscore();
  } else {
    clear_has_pbscore();
  }
}

// -------------------------------------------------------------------

// S2SBattleRoomScoreBalanceAck

// required uint64 roomid = 1;
inline bool S2SBattleRoomScoreBalanceAck::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SBattleRoomScoreBalanceAck::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SBattleRoomScoreBalanceAck::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SBattleRoomScoreBalanceAck::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SBattleRoomScoreBalanceAck::roomid() const {
  return roomid_;
}
inline void S2SBattleRoomScoreBalanceAck::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 playerid = 2;
inline bool S2SBattleRoomScoreBalanceAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SBattleRoomScoreBalanceAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SBattleRoomScoreBalanceAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SBattleRoomScoreBalanceAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SBattleRoomScoreBalanceAck::playerid() const {
  return playerid_;
}
inline void S2SBattleRoomScoreBalanceAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required string reward = 3;
inline bool S2SBattleRoomScoreBalanceAck::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SBattleRoomScoreBalanceAck::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SBattleRoomScoreBalanceAck::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SBattleRoomScoreBalanceAck::clear_reward() {
  if (reward_ != &::google::protobuf::internal::kEmptyString) {
    reward_->clear();
  }
  clear_has_reward();
}
inline const ::std::string& S2SBattleRoomScoreBalanceAck::reward() const {
  return *reward_;
}
inline void S2SBattleRoomScoreBalanceAck::set_reward(const ::std::string& value) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  reward_->assign(value);
}
inline void S2SBattleRoomScoreBalanceAck::set_reward(const char* value) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  reward_->assign(value);
}
inline void S2SBattleRoomScoreBalanceAck::set_reward(const char* value, size_t size) {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  reward_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SBattleRoomScoreBalanceAck::mutable_reward() {
  set_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    reward_ = new ::std::string;
  }
  return reward_;
}
inline ::std::string* S2SBattleRoomScoreBalanceAck::release_reward() {
  clear_has_reward();
  if (reward_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reward_;
    reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SBattleRoomScoreBalanceAck::set_allocated_reward(::std::string* reward) {
  if (reward_ != &::google::protobuf::internal::kEmptyString) {
    delete reward_;
  }
  if (reward) {
    set_has_reward();
    reward_ = reward;
  } else {
    clear_has_reward();
    reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2SBattleScoreBalanceToShardReq

// required uint64 roomid = 1;
inline bool S2SBattleScoreBalanceToShardReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SBattleScoreBalanceToShardReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SBattleScoreBalanceToShardReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SBattleScoreBalanceToShardReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SBattleScoreBalanceToShardReq::roomid() const {
  return roomid_;
}
inline void S2SBattleScoreBalanceToShardReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required .KFMsg.PBBattleScore pbscore = 2;
inline bool S2SBattleScoreBalanceToShardReq::has_pbscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SBattleScoreBalanceToShardReq::set_has_pbscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SBattleScoreBalanceToShardReq::clear_has_pbscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SBattleScoreBalanceToShardReq::clear_pbscore() {
  if (pbscore_ != NULL) pbscore_->::KFMsg::PBBattleScore::Clear();
  clear_has_pbscore();
}
inline const ::KFMsg::PBBattleScore& S2SBattleScoreBalanceToShardReq::pbscore() const {
  return pbscore_ != NULL ? *pbscore_ : *default_instance_->pbscore_;
}
inline ::KFMsg::PBBattleScore* S2SBattleScoreBalanceToShardReq::mutable_pbscore() {
  set_has_pbscore();
  if (pbscore_ == NULL) pbscore_ = new ::KFMsg::PBBattleScore;
  return pbscore_;
}
inline ::KFMsg::PBBattleScore* S2SBattleScoreBalanceToShardReq::release_pbscore() {
  clear_has_pbscore();
  ::KFMsg::PBBattleScore* temp = pbscore_;
  pbscore_ = NULL;
  return temp;
}
inline void S2SBattleScoreBalanceToShardReq::set_allocated_pbscore(::KFMsg::PBBattleScore* pbscore) {
  delete pbscore_;
  pbscore_ = pbscore;
  if (pbscore) {
    set_has_pbscore();
  } else {
    clear_has_pbscore();
  }
}

// -------------------------------------------------------------------

// S2SPlayerBattleScoreReq

// required uint32 playerid = 1;
inline bool S2SPlayerBattleScoreReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SPlayerBattleScoreReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SPlayerBattleScoreReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SPlayerBattleScoreReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SPlayerBattleScoreReq::playerid() const {
  return playerid_;
}
inline void S2SPlayerBattleScoreReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint64 roomid = 2;
inline bool S2SPlayerBattleScoreReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SPlayerBattleScoreReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SPlayerBattleScoreReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SPlayerBattleScoreReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SPlayerBattleScoreReq::roomid() const {
  return roomid_;
}
inline void S2SPlayerBattleScoreReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required .KFMsg.PBBattleScore pbscore = 3;
inline bool S2SPlayerBattleScoreReq::has_pbscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SPlayerBattleScoreReq::set_has_pbscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SPlayerBattleScoreReq::clear_has_pbscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SPlayerBattleScoreReq::clear_pbscore() {
  if (pbscore_ != NULL) pbscore_->::KFMsg::PBBattleScore::Clear();
  clear_has_pbscore();
}
inline const ::KFMsg::PBBattleScore& S2SPlayerBattleScoreReq::pbscore() const {
  return pbscore_ != NULL ? *pbscore_ : *default_instance_->pbscore_;
}
inline ::KFMsg::PBBattleScore* S2SPlayerBattleScoreReq::mutable_pbscore() {
  set_has_pbscore();
  if (pbscore_ == NULL) pbscore_ = new ::KFMsg::PBBattleScore;
  return pbscore_;
}
inline ::KFMsg::PBBattleScore* S2SPlayerBattleScoreReq::release_pbscore() {
  clear_has_pbscore();
  ::KFMsg::PBBattleScore* temp = pbscore_;
  pbscore_ = NULL;
  return temp;
}
inline void S2SPlayerBattleScoreReq::set_allocated_pbscore(::KFMsg::PBBattleScore* pbscore) {
  delete pbscore_;
  pbscore_ = pbscore;
  if (pbscore) {
    set_has_pbscore();
  } else {
    clear_has_pbscore();
  }
}

// -------------------------------------------------------------------

// S2SPlayerBattleScoreAck

// required uint32 playerid = 1;
inline bool S2SPlayerBattleScoreAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SPlayerBattleScoreAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SPlayerBattleScoreAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SPlayerBattleScoreAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SPlayerBattleScoreAck::playerid() const {
  return playerid_;
}
inline void S2SPlayerBattleScoreAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint64 roomid = 2;
inline bool S2SPlayerBattleScoreAck::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SPlayerBattleScoreAck::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SPlayerBattleScoreAck::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SPlayerBattleScoreAck::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SPlayerBattleScoreAck::roomid() const {
  return roomid_;
}
inline void S2SPlayerBattleScoreAck::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// -------------------------------------------------------------------

// S2SOnlieQueryBattleScoreReq

// required uint32 playerid = 1;
inline bool S2SOnlieQueryBattleScoreReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SOnlieQueryBattleScoreReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SOnlieQueryBattleScoreReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SOnlieQueryBattleScoreReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SOnlieQueryBattleScoreReq::playerid() const {
  return playerid_;
}
inline void S2SOnlieQueryBattleScoreReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// S2STellRoomFinishToBattleShardReq

// required uint64 roomid = 1;
inline bool S2STellRoomFinishToBattleShardReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2STellRoomFinishToBattleShardReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2STellRoomFinishToBattleShardReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2STellRoomFinishToBattleShardReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2STellRoomFinishToBattleShardReq::roomid() const {
  return roomid_;
}
inline void S2STellRoomFinishToBattleShardReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 serverid = 2;
inline bool S2STellRoomFinishToBattleShardReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2STellRoomFinishToBattleShardReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2STellRoomFinishToBattleShardReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2STellRoomFinishToBattleShardReq::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2STellRoomFinishToBattleShardReq::serverid() const {
  return serverid_;
}
inline void S2STellRoomFinishToBattleShardReq::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required string ip = 3;
inline bool S2STellRoomFinishToBattleShardReq::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2STellRoomFinishToBattleShardReq::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2STellRoomFinishToBattleShardReq::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2STellRoomFinishToBattleShardReq::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& S2STellRoomFinishToBattleShardReq::ip() const {
  return *ip_;
}
inline void S2STellRoomFinishToBattleShardReq::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2STellRoomFinishToBattleShardReq::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2STellRoomFinishToBattleShardReq::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2STellRoomFinishToBattleShardReq::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* S2STellRoomFinishToBattleShardReq::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2STellRoomFinishToBattleShardReq::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2STellRoomCloseToMatchShardReq

// required uint64 matchid = 1;
inline bool S2STellRoomCloseToMatchShardReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2STellRoomCloseToMatchShardReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2STellRoomCloseToMatchShardReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2STellRoomCloseToMatchShardReq::clear_matchid() {
  matchid_ = GOOGLE_ULONGLONG(0);
  clear_has_matchid();
}
inline ::google::protobuf::uint64 S2STellRoomCloseToMatchShardReq::matchid() const {
  return matchid_;
}
inline void S2STellRoomCloseToMatchShardReq::set_matchid(::google::protobuf::uint64 value) {
  set_has_matchid();
  matchid_ = value;
}

// required uint64 roomid = 2;
inline bool S2STellRoomCloseToMatchShardReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2STellRoomCloseToMatchShardReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2STellRoomCloseToMatchShardReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2STellRoomCloseToMatchShardReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2STellRoomCloseToMatchShardReq::roomid() const {
  return roomid_;
}
inline void S2STellRoomCloseToMatchShardReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::BattleProtocol>() {
  return ::KFMsg::BattleProtocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::BattleEnum>() {
  return ::KFMsg::BattleEnum_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_KFBattleMessage_2eproto__INCLUDED
