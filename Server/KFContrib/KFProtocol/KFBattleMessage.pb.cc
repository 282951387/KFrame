// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFBattleMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "KFBattleMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KFMsg {

namespace {

const ::google::protobuf::Descriptor* S2SAllocBattleIdReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SAllocBattleIdReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SAllocBattleIdAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SAllocBattleIdAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SRegisterBattleServerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SRegisterBattleServerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SRegisterBattleServerAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SRegisterBattleServerAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SRegisterServerToBattleShardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SRegisterServerToBattleShardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2STellBattleRegisterToShardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2STellBattleRegisterToShardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SDisconnectServerToBattleShardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SDisconnectServerToBattleShardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SCreateRoomToBattleProxyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SCreateRoomToBattleProxyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SCreateRoomToBattleShardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SCreateRoomToBattleShardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SCreateRoomToMatchShardAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SCreateRoomToMatchShardAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SAddCampToBattleShardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SAddCampToBattleShardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SAddCampToMatchShardAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SAddCampToMatchShardAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SOpenBattleRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SOpenBattleRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SOpenBattleRoomAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SOpenBattleRoomAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SOpenBattleRoomToShardAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SOpenBattleRoomToShardAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SOpenRoomToMatchShardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SOpenRoomToMatchShardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SOpenRoomToBattleShardAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SOpenRoomToBattleShardAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SPlayerEnterBattleRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SPlayerEnterBattleRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SPlayerEnterBattleRoomAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SPlayerEnterBattleRoomAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SPlayerEnterRoomToBattleShardAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SPlayerEnterRoomToBattleShardAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SPlayerLoginBattleRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SPlayerLoginBattleRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SPlayerLoginBattleRoomAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SPlayerLoginBattleRoomAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SPlayerLoginRoomToBattleShardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SPlayerLoginRoomToBattleShardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SPlayerCancelMatchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SPlayerCancelMatchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SPlayerLeaveBattleRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SPlayerLeaveBattleRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SPlayerLeaveBattleRoomAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SPlayerLeaveBattleRoomAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SPlayerLeaveRoomToBattleShardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SPlayerLeaveRoomToBattleShardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SPlayerLeaveRoomToMatchShardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SPlayerLeaveRoomToMatchShardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SLeaveBattleRoomToClientAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SLeaveBattleRoomToClientAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2STellBattleRoomStartReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2STellBattleRoomStartReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2STellRoomStartToBattleShardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2STellRoomStartToBattleShardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2STellBattleRoomStartAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2STellBattleRoomStartAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2STellRoomStartToMatchShardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2STellRoomStartToMatchShardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2STellRoomStartToMatchShardAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2STellRoomStartToMatchShardAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2STellBattleRoomFinishReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2STellBattleRoomFinishReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2STellBattleRoomFinishAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2STellBattleRoomFinishAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SBattleRoomScoreBalanceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SBattleRoomScoreBalanceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SBattleRoomScoreBalanceAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SBattleRoomScoreBalanceAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SBattleScoreBalanceToShardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SBattleScoreBalanceToShardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SPlayerBattleScoreReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SPlayerBattleScoreReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SPlayerBattleScoreAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SPlayerBattleScoreAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SOnlieQueryBattleScoreReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SOnlieQueryBattleScoreReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2STellRoomFinishToBattleShardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2STellRoomFinishToBattleShardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2STellRoomCloseToMatchShardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2STellRoomCloseToMatchShardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SResetBattleRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SResetBattleRoomReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BattleProtocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BattleEnum_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_KFBattleMessage_2eproto() {
  protobuf_AddDesc_KFBattleMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "KFBattleMessage.proto");
  GOOGLE_CHECK(file != NULL);
  S2SAllocBattleIdReq_descriptor_ = file->message_type(0);
  static const int S2SAllocBattleIdReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAllocBattleIdReq, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAllocBattleIdReq, port_),
  };
  S2SAllocBattleIdReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SAllocBattleIdReq_descriptor_,
      S2SAllocBattleIdReq::default_instance_,
      S2SAllocBattleIdReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAllocBattleIdReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAllocBattleIdReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SAllocBattleIdReq));
  S2SAllocBattleIdAck_descriptor_ = file->message_type(1);
  static const int S2SAllocBattleIdAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAllocBattleIdAck, id_),
  };
  S2SAllocBattleIdAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SAllocBattleIdAck_descriptor_,
      S2SAllocBattleIdAck::default_instance_,
      S2SAllocBattleIdAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAllocBattleIdAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAllocBattleIdAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SAllocBattleIdAck));
  S2SRegisterBattleServerReq_descriptor_ = file->message_type(2);
  static const int S2SRegisterBattleServerReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterBattleServerReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterBattleServerReq, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterBattleServerReq, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterBattleServerReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterBattleServerReq, battleshardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterBattleServerReq, version_),
  };
  S2SRegisterBattleServerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SRegisterBattleServerReq_descriptor_,
      S2SRegisterBattleServerReq::default_instance_,
      S2SRegisterBattleServerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterBattleServerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterBattleServerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SRegisterBattleServerReq));
  S2SRegisterBattleServerAck_descriptor_ = file->message_type(3);
  static const int S2SRegisterBattleServerAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterBattleServerAck, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterBattleServerAck, result_),
  };
  S2SRegisterBattleServerAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SRegisterBattleServerAck_descriptor_,
      S2SRegisterBattleServerAck::default_instance_,
      S2SRegisterBattleServerAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterBattleServerAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterBattleServerAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SRegisterBattleServerAck));
  S2SRegisterServerToBattleShardReq_descriptor_ = file->message_type(4);
  static const int S2SRegisterServerToBattleShardReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterServerToBattleShardReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterServerToBattleShardReq, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterServerToBattleShardReq, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterServerToBattleShardReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterServerToBattleShardReq, version_),
  };
  S2SRegisterServerToBattleShardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SRegisterServerToBattleShardReq_descriptor_,
      S2SRegisterServerToBattleShardReq::default_instance_,
      S2SRegisterServerToBattleShardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterServerToBattleShardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterServerToBattleShardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SRegisterServerToBattleShardReq));
  S2STellBattleRegisterToShardReq_descriptor_ = file->message_type(5);
  static const int S2STellBattleRegisterToShardReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellBattleRegisterToShardReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellBattleRegisterToShardReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellBattleRegisterToShardReq, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellBattleRegisterToShardReq, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellBattleRegisterToShardReq, version_),
  };
  S2STellBattleRegisterToShardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2STellBattleRegisterToShardReq_descriptor_,
      S2STellBattleRegisterToShardReq::default_instance_,
      S2STellBattleRegisterToShardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellBattleRegisterToShardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellBattleRegisterToShardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2STellBattleRegisterToShardReq));
  S2SDisconnectServerToBattleShardReq_descriptor_ = file->message_type(6);
  static const int S2SDisconnectServerToBattleShardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDisconnectServerToBattleShardReq, serverid_),
  };
  S2SDisconnectServerToBattleShardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SDisconnectServerToBattleShardReq_descriptor_,
      S2SDisconnectServerToBattleShardReq::default_instance_,
      S2SDisconnectServerToBattleShardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDisconnectServerToBattleShardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SDisconnectServerToBattleShardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SDisconnectServerToBattleShardReq));
  S2SCreateRoomToBattleProxyReq_descriptor_ = file->message_type(7);
  static const int S2SCreateRoomToBattleProxyReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoomToBattleProxyReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoomToBattleProxyReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoomToBattleProxyReq, maxplayercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoomToBattleProxyReq, battleserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoomToBattleProxyReq, version_),
  };
  S2SCreateRoomToBattleProxyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SCreateRoomToBattleProxyReq_descriptor_,
      S2SCreateRoomToBattleProxyReq::default_instance_,
      S2SCreateRoomToBattleProxyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoomToBattleProxyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoomToBattleProxyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SCreateRoomToBattleProxyReq));
  S2SCreateRoomToBattleShardReq_descriptor_ = file->message_type(8);
  static const int S2SCreateRoomToBattleShardReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoomToBattleShardReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoomToBattleShardReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoomToBattleShardReq, matchshardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoomToBattleShardReq, maxplayercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoomToBattleShardReq, battleserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoomToBattleShardReq, version_),
  };
  S2SCreateRoomToBattleShardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SCreateRoomToBattleShardReq_descriptor_,
      S2SCreateRoomToBattleShardReq::default_instance_,
      S2SCreateRoomToBattleShardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoomToBattleShardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoomToBattleShardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SCreateRoomToBattleShardReq));
  S2SCreateRoomToMatchShardAck_descriptor_ = file->message_type(9);
  static const int S2SCreateRoomToMatchShardAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoomToMatchShardAck, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoomToMatchShardAck, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoomToMatchShardAck, battleshardid_),
  };
  S2SCreateRoomToMatchShardAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SCreateRoomToMatchShardAck_descriptor_,
      S2SCreateRoomToMatchShardAck::default_instance_,
      S2SCreateRoomToMatchShardAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoomToMatchShardAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCreateRoomToMatchShardAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SCreateRoomToMatchShardAck));
  S2SAddCampToBattleShardReq_descriptor_ = file->message_type(10);
  static const int S2SAddCampToBattleShardReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddCampToBattleShardReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddCampToBattleShardReq, pbcamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddCampToBattleShardReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddCampToBattleShardReq, matchshardid_),
  };
  S2SAddCampToBattleShardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SAddCampToBattleShardReq_descriptor_,
      S2SAddCampToBattleShardReq::default_instance_,
      S2SAddCampToBattleShardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddCampToBattleShardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddCampToBattleShardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SAddCampToBattleShardReq));
  S2SAddCampToMatchShardAck_descriptor_ = file->message_type(11);
  static const int S2SAddCampToMatchShardAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddCampToMatchShardAck, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddCampToMatchShardAck, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddCampToMatchShardAck, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddCampToMatchShardAck, addok_),
  };
  S2SAddCampToMatchShardAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SAddCampToMatchShardAck_descriptor_,
      S2SAddCampToMatchShardAck::default_instance_,
      S2SAddCampToMatchShardAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddCampToMatchShardAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SAddCampToMatchShardAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SAddCampToMatchShardAck));
  S2SOpenBattleRoomReq_descriptor_ = file->message_type(12);
  static const int S2SOpenBattleRoomReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenBattleRoomReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenBattleRoomReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenBattleRoomReq, battleshardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenBattleRoomReq, maxplayercount_),
  };
  S2SOpenBattleRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SOpenBattleRoomReq_descriptor_,
      S2SOpenBattleRoomReq::default_instance_,
      S2SOpenBattleRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenBattleRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenBattleRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SOpenBattleRoomReq));
  S2SOpenBattleRoomAck_descriptor_ = file->message_type(13);
  static const int S2SOpenBattleRoomAck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenBattleRoomAck, battleshardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenBattleRoomAck, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenBattleRoomAck, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenBattleRoomAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenBattleRoomAck, waittime_),
  };
  S2SOpenBattleRoomAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SOpenBattleRoomAck_descriptor_,
      S2SOpenBattleRoomAck::default_instance_,
      S2SOpenBattleRoomAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenBattleRoomAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenBattleRoomAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SOpenBattleRoomAck));
  S2SOpenBattleRoomToShardAck_descriptor_ = file->message_type(14);
  static const int S2SOpenBattleRoomToShardAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenBattleRoomToShardAck, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenBattleRoomToShardAck, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenBattleRoomToShardAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenBattleRoomToShardAck, waittime_),
  };
  S2SOpenBattleRoomToShardAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SOpenBattleRoomToShardAck_descriptor_,
      S2SOpenBattleRoomToShardAck::default_instance_,
      S2SOpenBattleRoomToShardAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenBattleRoomToShardAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenBattleRoomToShardAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SOpenBattleRoomToShardAck));
  S2SOpenRoomToMatchShardReq_descriptor_ = file->message_type(15);
  static const int S2SOpenRoomToMatchShardReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenRoomToMatchShardReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenRoomToMatchShardReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenRoomToMatchShardReq, waittime_),
  };
  S2SOpenRoomToMatchShardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SOpenRoomToMatchShardReq_descriptor_,
      S2SOpenRoomToMatchShardReq::default_instance_,
      S2SOpenRoomToMatchShardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenRoomToMatchShardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenRoomToMatchShardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SOpenRoomToMatchShardReq));
  S2SOpenRoomToBattleShardAck_descriptor_ = file->message_type(16);
  static const int S2SOpenRoomToBattleShardAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenRoomToBattleShardAck, roomid_),
  };
  S2SOpenRoomToBattleShardAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SOpenRoomToBattleShardAck_descriptor_,
      S2SOpenRoomToBattleShardAck::default_instance_,
      S2SOpenRoomToBattleShardAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenRoomToBattleShardAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOpenRoomToBattleShardAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SOpenRoomToBattleShardAck));
  S2SPlayerEnterBattleRoomReq_descriptor_ = file->message_type(17);
  static const int S2SPlayerEnterBattleRoomReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerEnterBattleRoomReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerEnterBattleRoomReq, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerEnterBattleRoomReq, token_),
  };
  S2SPlayerEnterBattleRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SPlayerEnterBattleRoomReq_descriptor_,
      S2SPlayerEnterBattleRoomReq::default_instance_,
      S2SPlayerEnterBattleRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerEnterBattleRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerEnterBattleRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SPlayerEnterBattleRoomReq));
  S2SPlayerEnterBattleRoomAck_descriptor_ = file->message_type(18);
  static const int S2SPlayerEnterBattleRoomAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerEnterBattleRoomAck, battleshardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerEnterBattleRoomAck, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerEnterBattleRoomAck, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerEnterBattleRoomAck, playerid_),
  };
  S2SPlayerEnterBattleRoomAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SPlayerEnterBattleRoomAck_descriptor_,
      S2SPlayerEnterBattleRoomAck::default_instance_,
      S2SPlayerEnterBattleRoomAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerEnterBattleRoomAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerEnterBattleRoomAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SPlayerEnterBattleRoomAck));
  S2SPlayerEnterRoomToBattleShardAck_descriptor_ = file->message_type(19);
  static const int S2SPlayerEnterRoomToBattleShardAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerEnterRoomToBattleShardAck, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerEnterRoomToBattleShardAck, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerEnterRoomToBattleShardAck, playerid_),
  };
  S2SPlayerEnterRoomToBattleShardAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SPlayerEnterRoomToBattleShardAck_descriptor_,
      S2SPlayerEnterRoomToBattleShardAck::default_instance_,
      S2SPlayerEnterRoomToBattleShardAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerEnterRoomToBattleShardAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerEnterRoomToBattleShardAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SPlayerEnterRoomToBattleShardAck));
  S2SPlayerLoginBattleRoomReq_descriptor_ = file->message_type(20);
  static const int S2SPlayerLoginBattleRoomReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLoginBattleRoomReq, battleshardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLoginBattleRoomReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLoginBattleRoomReq, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLoginBattleRoomReq, playerid_),
  };
  S2SPlayerLoginBattleRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SPlayerLoginBattleRoomReq_descriptor_,
      S2SPlayerLoginBattleRoomReq::default_instance_,
      S2SPlayerLoginBattleRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLoginBattleRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLoginBattleRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SPlayerLoginBattleRoomReq));
  S2SPlayerLoginBattleRoomAck_descriptor_ = file->message_type(21);
  static const int S2SPlayerLoginBattleRoomAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLoginBattleRoomAck, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLoginBattleRoomAck, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLoginBattleRoomAck, playerid_),
  };
  S2SPlayerLoginBattleRoomAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SPlayerLoginBattleRoomAck_descriptor_,
      S2SPlayerLoginBattleRoomAck::default_instance_,
      S2SPlayerLoginBattleRoomAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLoginBattleRoomAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLoginBattleRoomAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SPlayerLoginBattleRoomAck));
  S2SPlayerLoginRoomToBattleShardReq_descriptor_ = file->message_type(22);
  static const int S2SPlayerLoginRoomToBattleShardReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLoginRoomToBattleShardReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLoginRoomToBattleShardReq, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLoginRoomToBattleShardReq, playerid_),
  };
  S2SPlayerLoginRoomToBattleShardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SPlayerLoginRoomToBattleShardReq_descriptor_,
      S2SPlayerLoginRoomToBattleShardReq::default_instance_,
      S2SPlayerLoginRoomToBattleShardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLoginRoomToBattleShardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLoginRoomToBattleShardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SPlayerLoginRoomToBattleShardReq));
  S2SPlayerCancelMatchReq_descriptor_ = file->message_type(23);
  static const int S2SPlayerCancelMatchReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerCancelMatchReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerCancelMatchReq, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerCancelMatchReq, playerid_),
  };
  S2SPlayerCancelMatchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SPlayerCancelMatchReq_descriptor_,
      S2SPlayerCancelMatchReq::default_instance_,
      S2SPlayerCancelMatchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerCancelMatchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerCancelMatchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SPlayerCancelMatchReq));
  S2SPlayerLeaveBattleRoomReq_descriptor_ = file->message_type(24);
  static const int S2SPlayerLeaveBattleRoomReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveBattleRoomReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveBattleRoomReq, battleshardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveBattleRoomReq, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveBattleRoomReq, playerid_),
  };
  S2SPlayerLeaveBattleRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SPlayerLeaveBattleRoomReq_descriptor_,
      S2SPlayerLeaveBattleRoomReq::default_instance_,
      S2SPlayerLeaveBattleRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveBattleRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveBattleRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SPlayerLeaveBattleRoomReq));
  S2SPlayerLeaveBattleRoomAck_descriptor_ = file->message_type(25);
  static const int S2SPlayerLeaveBattleRoomAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveBattleRoomAck, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveBattleRoomAck, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveBattleRoomAck, playerid_),
  };
  S2SPlayerLeaveBattleRoomAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SPlayerLeaveBattleRoomAck_descriptor_,
      S2SPlayerLeaveBattleRoomAck::default_instance_,
      S2SPlayerLeaveBattleRoomAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveBattleRoomAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveBattleRoomAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SPlayerLeaveBattleRoomAck));
  S2SPlayerLeaveRoomToBattleShardReq_descriptor_ = file->message_type(26);
  static const int S2SPlayerLeaveRoomToBattleShardReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveRoomToBattleShardReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveRoomToBattleShardReq, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveRoomToBattleShardReq, playerid_),
  };
  S2SPlayerLeaveRoomToBattleShardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SPlayerLeaveRoomToBattleShardReq_descriptor_,
      S2SPlayerLeaveRoomToBattleShardReq::default_instance_,
      S2SPlayerLeaveRoomToBattleShardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveRoomToBattleShardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveRoomToBattleShardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SPlayerLeaveRoomToBattleShardReq));
  S2SPlayerLeaveRoomToMatchShardReq_descriptor_ = file->message_type(27);
  static const int S2SPlayerLeaveRoomToMatchShardReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveRoomToMatchShardReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveRoomToMatchShardReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveRoomToMatchShardReq, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveRoomToMatchShardReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveRoomToMatchShardReq, playerid_),
  };
  S2SPlayerLeaveRoomToMatchShardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SPlayerLeaveRoomToMatchShardReq_descriptor_,
      S2SPlayerLeaveRoomToMatchShardReq::default_instance_,
      S2SPlayerLeaveRoomToMatchShardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveRoomToMatchShardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerLeaveRoomToMatchShardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SPlayerLeaveRoomToMatchShardReq));
  S2SLeaveBattleRoomToClientAck_descriptor_ = file->message_type(28);
  static const int S2SLeaveBattleRoomToClientAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLeaveBattleRoomToClientAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLeaveBattleRoomToClientAck, roomid_),
  };
  S2SLeaveBattleRoomToClientAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SLeaveBattleRoomToClientAck_descriptor_,
      S2SLeaveBattleRoomToClientAck::default_instance_,
      S2SLeaveBattleRoomToClientAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLeaveBattleRoomToClientAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SLeaveBattleRoomToClientAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SLeaveBattleRoomToClientAck));
  S2STellBattleRoomStartReq_descriptor_ = file->message_type(29);
  static const int S2STellBattleRoomStartReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellBattleRoomStartReq, battleshardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellBattleRoomStartReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellBattleRoomStartReq, maxtime_),
  };
  S2STellBattleRoomStartReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2STellBattleRoomStartReq_descriptor_,
      S2STellBattleRoomStartReq::default_instance_,
      S2STellBattleRoomStartReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellBattleRoomStartReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellBattleRoomStartReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2STellBattleRoomStartReq));
  S2STellRoomStartToBattleShardReq_descriptor_ = file->message_type(30);
  static const int S2STellRoomStartToBattleShardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellRoomStartToBattleShardReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellRoomStartToBattleShardReq, maxtime_),
  };
  S2STellRoomStartToBattleShardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2STellRoomStartToBattleShardReq_descriptor_,
      S2STellRoomStartToBattleShardReq::default_instance_,
      S2STellRoomStartToBattleShardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellRoomStartToBattleShardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellRoomStartToBattleShardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2STellRoomStartToBattleShardReq));
  S2STellBattleRoomStartAck_descriptor_ = file->message_type(31);
  static const int S2STellBattleRoomStartAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellBattleRoomStartAck, roomid_),
  };
  S2STellBattleRoomStartAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2STellBattleRoomStartAck_descriptor_,
      S2STellBattleRoomStartAck::default_instance_,
      S2STellBattleRoomStartAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellBattleRoomStartAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellBattleRoomStartAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2STellBattleRoomStartAck));
  S2STellRoomStartToMatchShardReq_descriptor_ = file->message_type(32);
  static const int S2STellRoomStartToMatchShardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellRoomStartToMatchShardReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellRoomStartToMatchShardReq, roomid_),
  };
  S2STellRoomStartToMatchShardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2STellRoomStartToMatchShardReq_descriptor_,
      S2STellRoomStartToMatchShardReq::default_instance_,
      S2STellRoomStartToMatchShardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellRoomStartToMatchShardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellRoomStartToMatchShardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2STellRoomStartToMatchShardReq));
  S2STellRoomStartToMatchShardAck_descriptor_ = file->message_type(33);
  static const int S2STellRoomStartToMatchShardAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellRoomStartToMatchShardAck, roomid_),
  };
  S2STellRoomStartToMatchShardAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2STellRoomStartToMatchShardAck_descriptor_,
      S2STellRoomStartToMatchShardAck::default_instance_,
      S2STellRoomStartToMatchShardAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellRoomStartToMatchShardAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellRoomStartToMatchShardAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2STellRoomStartToMatchShardAck));
  S2STellBattleRoomFinishReq_descriptor_ = file->message_type(34);
  static const int S2STellBattleRoomFinishReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellBattleRoomFinishReq, battleshardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellBattleRoomFinishReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellBattleRoomFinishReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellBattleRoomFinishReq, ip_),
  };
  S2STellBattleRoomFinishReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2STellBattleRoomFinishReq_descriptor_,
      S2STellBattleRoomFinishReq::default_instance_,
      S2STellBattleRoomFinishReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellBattleRoomFinishReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellBattleRoomFinishReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2STellBattleRoomFinishReq));
  S2STellBattleRoomFinishAck_descriptor_ = file->message_type(35);
  static const int S2STellBattleRoomFinishAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellBattleRoomFinishAck, roomid_),
  };
  S2STellBattleRoomFinishAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2STellBattleRoomFinishAck_descriptor_,
      S2STellBattleRoomFinishAck::default_instance_,
      S2STellBattleRoomFinishAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellBattleRoomFinishAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellBattleRoomFinishAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2STellBattleRoomFinishAck));
  S2SBattleRoomScoreBalanceReq_descriptor_ = file->message_type(36);
  static const int S2SBattleRoomScoreBalanceReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBattleRoomScoreBalanceReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBattleRoomScoreBalanceReq, battleshardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBattleRoomScoreBalanceReq, pbscore_),
  };
  S2SBattleRoomScoreBalanceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SBattleRoomScoreBalanceReq_descriptor_,
      S2SBattleRoomScoreBalanceReq::default_instance_,
      S2SBattleRoomScoreBalanceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBattleRoomScoreBalanceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBattleRoomScoreBalanceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SBattleRoomScoreBalanceReq));
  S2SBattleRoomScoreBalanceAck_descriptor_ = file->message_type(37);
  static const int S2SBattleRoomScoreBalanceAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBattleRoomScoreBalanceAck, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBattleRoomScoreBalanceAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBattleRoomScoreBalanceAck, reward_),
  };
  S2SBattleRoomScoreBalanceAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SBattleRoomScoreBalanceAck_descriptor_,
      S2SBattleRoomScoreBalanceAck::default_instance_,
      S2SBattleRoomScoreBalanceAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBattleRoomScoreBalanceAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBattleRoomScoreBalanceAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SBattleRoomScoreBalanceAck));
  S2SBattleScoreBalanceToShardReq_descriptor_ = file->message_type(38);
  static const int S2SBattleScoreBalanceToShardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBattleScoreBalanceToShardReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBattleScoreBalanceToShardReq, pbscore_),
  };
  S2SBattleScoreBalanceToShardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SBattleScoreBalanceToShardReq_descriptor_,
      S2SBattleScoreBalanceToShardReq::default_instance_,
      S2SBattleScoreBalanceToShardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBattleScoreBalanceToShardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SBattleScoreBalanceToShardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SBattleScoreBalanceToShardReq));
  S2SPlayerBattleScoreReq_descriptor_ = file->message_type(39);
  static const int S2SPlayerBattleScoreReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerBattleScoreReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerBattleScoreReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerBattleScoreReq, pbscore_),
  };
  S2SPlayerBattleScoreReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SPlayerBattleScoreReq_descriptor_,
      S2SPlayerBattleScoreReq::default_instance_,
      S2SPlayerBattleScoreReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerBattleScoreReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerBattleScoreReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SPlayerBattleScoreReq));
  S2SPlayerBattleScoreAck_descriptor_ = file->message_type(40);
  static const int S2SPlayerBattleScoreAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerBattleScoreAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerBattleScoreAck, roomid_),
  };
  S2SPlayerBattleScoreAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SPlayerBattleScoreAck_descriptor_,
      S2SPlayerBattleScoreAck::default_instance_,
      S2SPlayerBattleScoreAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerBattleScoreAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerBattleScoreAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SPlayerBattleScoreAck));
  S2SOnlieQueryBattleScoreReq_descriptor_ = file->message_type(41);
  static const int S2SOnlieQueryBattleScoreReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOnlieQueryBattleScoreReq, playerid_),
  };
  S2SOnlieQueryBattleScoreReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SOnlieQueryBattleScoreReq_descriptor_,
      S2SOnlieQueryBattleScoreReq::default_instance_,
      S2SOnlieQueryBattleScoreReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOnlieQueryBattleScoreReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SOnlieQueryBattleScoreReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SOnlieQueryBattleScoreReq));
  S2STellRoomFinishToBattleShardReq_descriptor_ = file->message_type(42);
  static const int S2STellRoomFinishToBattleShardReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellRoomFinishToBattleShardReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellRoomFinishToBattleShardReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellRoomFinishToBattleShardReq, ip_),
  };
  S2STellRoomFinishToBattleShardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2STellRoomFinishToBattleShardReq_descriptor_,
      S2STellRoomFinishToBattleShardReq::default_instance_,
      S2STellRoomFinishToBattleShardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellRoomFinishToBattleShardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellRoomFinishToBattleShardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2STellRoomFinishToBattleShardReq));
  S2STellRoomCloseToMatchShardReq_descriptor_ = file->message_type(43);
  static const int S2STellRoomCloseToMatchShardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellRoomCloseToMatchShardReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellRoomCloseToMatchShardReq, roomid_),
  };
  S2STellRoomCloseToMatchShardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2STellRoomCloseToMatchShardReq_descriptor_,
      S2STellRoomCloseToMatchShardReq::default_instance_,
      S2STellRoomCloseToMatchShardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellRoomCloseToMatchShardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2STellRoomCloseToMatchShardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2STellRoomCloseToMatchShardReq));
  S2SResetBattleRoomReq_descriptor_ = file->message_type(44);
  static const int S2SResetBattleRoomReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SResetBattleRoomReq, roomid_),
  };
  S2SResetBattleRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SResetBattleRoomReq_descriptor_,
      S2SResetBattleRoomReq::default_instance_,
      S2SResetBattleRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SResetBattleRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SResetBattleRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SResetBattleRoomReq));
  BattleProtocol_descriptor_ = file->enum_type(0);
  BattleEnum_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_KFBattleMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SAllocBattleIdReq_descriptor_, &S2SAllocBattleIdReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SAllocBattleIdAck_descriptor_, &S2SAllocBattleIdAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SRegisterBattleServerReq_descriptor_, &S2SRegisterBattleServerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SRegisterBattleServerAck_descriptor_, &S2SRegisterBattleServerAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SRegisterServerToBattleShardReq_descriptor_, &S2SRegisterServerToBattleShardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2STellBattleRegisterToShardReq_descriptor_, &S2STellBattleRegisterToShardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SDisconnectServerToBattleShardReq_descriptor_, &S2SDisconnectServerToBattleShardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SCreateRoomToBattleProxyReq_descriptor_, &S2SCreateRoomToBattleProxyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SCreateRoomToBattleShardReq_descriptor_, &S2SCreateRoomToBattleShardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SCreateRoomToMatchShardAck_descriptor_, &S2SCreateRoomToMatchShardAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SAddCampToBattleShardReq_descriptor_, &S2SAddCampToBattleShardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SAddCampToMatchShardAck_descriptor_, &S2SAddCampToMatchShardAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SOpenBattleRoomReq_descriptor_, &S2SOpenBattleRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SOpenBattleRoomAck_descriptor_, &S2SOpenBattleRoomAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SOpenBattleRoomToShardAck_descriptor_, &S2SOpenBattleRoomToShardAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SOpenRoomToMatchShardReq_descriptor_, &S2SOpenRoomToMatchShardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SOpenRoomToBattleShardAck_descriptor_, &S2SOpenRoomToBattleShardAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SPlayerEnterBattleRoomReq_descriptor_, &S2SPlayerEnterBattleRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SPlayerEnterBattleRoomAck_descriptor_, &S2SPlayerEnterBattleRoomAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SPlayerEnterRoomToBattleShardAck_descriptor_, &S2SPlayerEnterRoomToBattleShardAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SPlayerLoginBattleRoomReq_descriptor_, &S2SPlayerLoginBattleRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SPlayerLoginBattleRoomAck_descriptor_, &S2SPlayerLoginBattleRoomAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SPlayerLoginRoomToBattleShardReq_descriptor_, &S2SPlayerLoginRoomToBattleShardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SPlayerCancelMatchReq_descriptor_, &S2SPlayerCancelMatchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SPlayerLeaveBattleRoomReq_descriptor_, &S2SPlayerLeaveBattleRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SPlayerLeaveBattleRoomAck_descriptor_, &S2SPlayerLeaveBattleRoomAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SPlayerLeaveRoomToBattleShardReq_descriptor_, &S2SPlayerLeaveRoomToBattleShardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SPlayerLeaveRoomToMatchShardReq_descriptor_, &S2SPlayerLeaveRoomToMatchShardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SLeaveBattleRoomToClientAck_descriptor_, &S2SLeaveBattleRoomToClientAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2STellBattleRoomStartReq_descriptor_, &S2STellBattleRoomStartReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2STellRoomStartToBattleShardReq_descriptor_, &S2STellRoomStartToBattleShardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2STellBattleRoomStartAck_descriptor_, &S2STellBattleRoomStartAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2STellRoomStartToMatchShardReq_descriptor_, &S2STellRoomStartToMatchShardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2STellRoomStartToMatchShardAck_descriptor_, &S2STellRoomStartToMatchShardAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2STellBattleRoomFinishReq_descriptor_, &S2STellBattleRoomFinishReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2STellBattleRoomFinishAck_descriptor_, &S2STellBattleRoomFinishAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SBattleRoomScoreBalanceReq_descriptor_, &S2SBattleRoomScoreBalanceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SBattleRoomScoreBalanceAck_descriptor_, &S2SBattleRoomScoreBalanceAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SBattleScoreBalanceToShardReq_descriptor_, &S2SBattleScoreBalanceToShardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SPlayerBattleScoreReq_descriptor_, &S2SPlayerBattleScoreReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SPlayerBattleScoreAck_descriptor_, &S2SPlayerBattleScoreAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SOnlieQueryBattleScoreReq_descriptor_, &S2SOnlieQueryBattleScoreReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2STellRoomFinishToBattleShardReq_descriptor_, &S2STellRoomFinishToBattleShardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2STellRoomCloseToMatchShardReq_descriptor_, &S2STellRoomCloseToMatchShardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SResetBattleRoomReq_descriptor_, &S2SResetBattleRoomReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_KFBattleMessage_2eproto() {
  delete S2SAllocBattleIdReq::default_instance_;
  delete S2SAllocBattleIdReq_reflection_;
  delete S2SAllocBattleIdAck::default_instance_;
  delete S2SAllocBattleIdAck_reflection_;
  delete S2SRegisterBattleServerReq::default_instance_;
  delete S2SRegisterBattleServerReq_reflection_;
  delete S2SRegisterBattleServerAck::default_instance_;
  delete S2SRegisterBattleServerAck_reflection_;
  delete S2SRegisterServerToBattleShardReq::default_instance_;
  delete S2SRegisterServerToBattleShardReq_reflection_;
  delete S2STellBattleRegisterToShardReq::default_instance_;
  delete S2STellBattleRegisterToShardReq_reflection_;
  delete S2SDisconnectServerToBattleShardReq::default_instance_;
  delete S2SDisconnectServerToBattleShardReq_reflection_;
  delete S2SCreateRoomToBattleProxyReq::default_instance_;
  delete S2SCreateRoomToBattleProxyReq_reflection_;
  delete S2SCreateRoomToBattleShardReq::default_instance_;
  delete S2SCreateRoomToBattleShardReq_reflection_;
  delete S2SCreateRoomToMatchShardAck::default_instance_;
  delete S2SCreateRoomToMatchShardAck_reflection_;
  delete S2SAddCampToBattleShardReq::default_instance_;
  delete S2SAddCampToBattleShardReq_reflection_;
  delete S2SAddCampToMatchShardAck::default_instance_;
  delete S2SAddCampToMatchShardAck_reflection_;
  delete S2SOpenBattleRoomReq::default_instance_;
  delete S2SOpenBattleRoomReq_reflection_;
  delete S2SOpenBattleRoomAck::default_instance_;
  delete S2SOpenBattleRoomAck_reflection_;
  delete S2SOpenBattleRoomToShardAck::default_instance_;
  delete S2SOpenBattleRoomToShardAck_reflection_;
  delete S2SOpenRoomToMatchShardReq::default_instance_;
  delete S2SOpenRoomToMatchShardReq_reflection_;
  delete S2SOpenRoomToBattleShardAck::default_instance_;
  delete S2SOpenRoomToBattleShardAck_reflection_;
  delete S2SPlayerEnterBattleRoomReq::default_instance_;
  delete S2SPlayerEnterBattleRoomReq_reflection_;
  delete S2SPlayerEnterBattleRoomAck::default_instance_;
  delete S2SPlayerEnterBattleRoomAck_reflection_;
  delete S2SPlayerEnterRoomToBattleShardAck::default_instance_;
  delete S2SPlayerEnterRoomToBattleShardAck_reflection_;
  delete S2SPlayerLoginBattleRoomReq::default_instance_;
  delete S2SPlayerLoginBattleRoomReq_reflection_;
  delete S2SPlayerLoginBattleRoomAck::default_instance_;
  delete S2SPlayerLoginBattleRoomAck_reflection_;
  delete S2SPlayerLoginRoomToBattleShardReq::default_instance_;
  delete S2SPlayerLoginRoomToBattleShardReq_reflection_;
  delete S2SPlayerCancelMatchReq::default_instance_;
  delete S2SPlayerCancelMatchReq_reflection_;
  delete S2SPlayerLeaveBattleRoomReq::default_instance_;
  delete S2SPlayerLeaveBattleRoomReq_reflection_;
  delete S2SPlayerLeaveBattleRoomAck::default_instance_;
  delete S2SPlayerLeaveBattleRoomAck_reflection_;
  delete S2SPlayerLeaveRoomToBattleShardReq::default_instance_;
  delete S2SPlayerLeaveRoomToBattleShardReq_reflection_;
  delete S2SPlayerLeaveRoomToMatchShardReq::default_instance_;
  delete S2SPlayerLeaveRoomToMatchShardReq_reflection_;
  delete S2SLeaveBattleRoomToClientAck::default_instance_;
  delete S2SLeaveBattleRoomToClientAck_reflection_;
  delete S2STellBattleRoomStartReq::default_instance_;
  delete S2STellBattleRoomStartReq_reflection_;
  delete S2STellRoomStartToBattleShardReq::default_instance_;
  delete S2STellRoomStartToBattleShardReq_reflection_;
  delete S2STellBattleRoomStartAck::default_instance_;
  delete S2STellBattleRoomStartAck_reflection_;
  delete S2STellRoomStartToMatchShardReq::default_instance_;
  delete S2STellRoomStartToMatchShardReq_reflection_;
  delete S2STellRoomStartToMatchShardAck::default_instance_;
  delete S2STellRoomStartToMatchShardAck_reflection_;
  delete S2STellBattleRoomFinishReq::default_instance_;
  delete S2STellBattleRoomFinishReq_reflection_;
  delete S2STellBattleRoomFinishAck::default_instance_;
  delete S2STellBattleRoomFinishAck_reflection_;
  delete S2SBattleRoomScoreBalanceReq::default_instance_;
  delete S2SBattleRoomScoreBalanceReq_reflection_;
  delete S2SBattleRoomScoreBalanceAck::default_instance_;
  delete S2SBattleRoomScoreBalanceAck_reflection_;
  delete S2SBattleScoreBalanceToShardReq::default_instance_;
  delete S2SBattleScoreBalanceToShardReq_reflection_;
  delete S2SPlayerBattleScoreReq::default_instance_;
  delete S2SPlayerBattleScoreReq_reflection_;
  delete S2SPlayerBattleScoreAck::default_instance_;
  delete S2SPlayerBattleScoreAck_reflection_;
  delete S2SOnlieQueryBattleScoreReq::default_instance_;
  delete S2SOnlieQueryBattleScoreReq_reflection_;
  delete S2STellRoomFinishToBattleShardReq::default_instance_;
  delete S2STellRoomFinishToBattleShardReq_reflection_;
  delete S2STellRoomCloseToMatchShardReq::default_instance_;
  delete S2STellRoomCloseToMatchShardReq_reflection_;
  delete S2SResetBattleRoomReq::default_instance_;
  delete S2SResetBattleRoomReq_reflection_;
}

void protobuf_AddDesc_KFBattleMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::KFMsg::protobuf_AddDesc_KFCommonMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025KFBattleMessage.proto\022\005KFMsg\032\025KFCommon"
    "Message.proto\"/\n\023S2SAllocBattleIdReq\022\n\n\002"
    "ip\030\001 \002(\014\022\014\n\004port\030\002 \002(\r\"!\n\023S2SAllocBattle"
    "IdAck\022\n\n\002id\030\001 \002(\004\"\200\001\n\032S2SRegisterBattleS"
    "erverReq\022\020\n\010serverid\030\001 \002(\004\022\n\n\002ip\030\002 \002(\014\022\014"
    "\n\004port\030\003 \002(\r\022\016\n\006roomid\030\004 \002(\004\022\025\n\rbattlesh"
    "ardid\030\005 \002(\004\022\017\n\007version\030\006 \002(\014\">\n\032S2SRegis"
    "terBattleServerAck\022\020\n\010serverid\030\001 \002(\004\022\016\n\006"
    "result\030\002 \002(\r\"p\n!S2SRegisterServerToBattl"
    "eShardReq\022\020\n\010serverid\030\001 \002(\004\022\n\n\002ip\030\002 \002(\014\022"
    "\014\n\004port\030\003 \002(\r\022\016\n\006roomid\030\004 \002(\004\022\017\n\007version"
    "\030\005 \002(\014\"n\n\037S2STellBattleRegisterToShardRe"
    "q\022\020\n\010serverid\030\001 \002(\004\022\016\n\006roomid\030\002 \002(\004\022\n\n\002i"
    "p\030\003 \002(\014\022\014\n\004port\030\004 \002(\r\022\017\n\007version\030\005 \002(\014\"7"
    "\n#S2SDisconnectServerToBattleShardReq\022\020\n"
    "\010serverid\030\001 \002(\004\"\201\001\n\035S2SCreateRoomToBattl"
    "eProxyReq\022\017\n\007matchid\030\001 \002(\r\022\016\n\006roomid\030\002 \002"
    "(\004\022\026\n\016maxplayercount\030\003 \002(\r\022\026\n\016battleserv"
    "erid\030\004 \002(\004\022\017\n\007version\030\005 \002(\014\"\227\001\n\035S2SCreat"
    "eRoomToBattleShardReq\022\017\n\007matchid\030\001 \002(\r\022\016"
    "\n\006roomid\030\002 \002(\004\022\024\n\014matchshardid\030\003 \002(\004\022\026\n\016"
    "maxplayercount\030\004 \002(\r\022\026\n\016battleserverid\030\005"
    " \002(\004\022\017\n\007version\030\006 \002(\014\"V\n\034S2SCreateRoomTo"
    "MatchShardAck\022\017\n\007matchid\030\001 \002(\r\022\016\n\006roomid"
    "\030\002 \002(\004\022\025\n\rbattleshardid\030\003 \002(\004\"x\n\032S2SAddC"
    "ampToBattleShardReq\022\016\n\006roomid\030\001 \002(\004\022#\n\006p"
    "bcamp\030\002 \002(\0132\023.KFMsg.PBBattleCamp\022\017\n\007matc"
    "hid\030\003 \002(\r\022\024\n\014matchshardid\030\004 \002(\004\"[\n\031S2SAd"
    "dCampToMatchShardAck\022\017\n\007matchid\030\001 \002(\r\022\016\n"
    "\006roomid\030\002 \002(\004\022\016\n\006campid\030\003 \002(\r\022\r\n\005addok\030\004"
    " \002(\010\"f\n\024S2SOpenBattleRoomReq\022\017\n\007matchid\030"
    "\001 \002(\r\022\016\n\006roomid\030\002 \002(\004\022\025\n\rbattleshardid\030\003"
    " \002(\004\022\026\n\016maxplayercount\030\004 \002(\r\"p\n\024S2SOpenB"
    "attleRoomAck\022\025\n\rbattleshardid\030\001 \002(\004\022\017\n\007m"
    "atchid\030\002 \002(\r\022\016\n\006roomid\030\003 \002(\004\022\016\n\006result\030\004"
    " \002(\r\022\020\n\010waittime\030\005 \002(\r\"`\n\033S2SOpenBattleR"
    "oomToShardAck\022\017\n\007matchid\030\001 \002(\r\022\016\n\006roomid"
    "\030\002 \002(\004\022\016\n\006result\030\003 \002(\r\022\020\n\010waittime\030\004 \002(\r"
    "\"O\n\032S2SOpenRoomToMatchShardReq\022\017\n\007matchi"
    "d\030\001 \002(\r\022\016\n\006roomid\030\002 \002(\004\022\020\n\010waittime\030\003 \002("
    "\r\"-\n\033S2SOpenRoomToBattleShardAck\022\016\n\006room"
    "id\030\001 \002(\004\"c\n\033S2SPlayerEnterBattleRoomReq\022"
    "\016\n\006roomid\030\001 \002(\004\022%\n\006player\030\002 \002(\0132\025.KFMsg."
    "PBBattlePlayer\022\r\n\005token\030\003 \002(\014\"f\n\033S2SPlay"
    "erEnterBattleRoomAck\022\025\n\rbattleshardid\030\001 "
    "\002(\004\022\016\n\006roomid\030\002 \002(\004\022\016\n\006campid\030\003 \002(\r\022\020\n\010p"
    "layerid\030\004 \002(\004\"V\n\"S2SPlayerEnterRoomToBat"
    "tleShardAck\022\016\n\006roomid\030\001 \002(\004\022\016\n\006campid\030\002 "
    "\002(\r\022\020\n\010playerid\030\003 \002(\004\"f\n\033S2SPlayerLoginB"
    "attleRoomReq\022\025\n\rbattleshardid\030\001 \002(\004\022\016\n\006r"
    "oomid\030\002 \002(\004\022\016\n\006campid\030\003 \002(\r\022\020\n\010playerid\030"
    "\004 \002(\004\"O\n\033S2SPlayerLoginBattleRoomAck\022\016\n\006"
    "roomid\030\001 \002(\004\022\016\n\006campid\030\002 \002(\r\022\020\n\010playerid"
    "\030\003 \002(\r\"V\n\"S2SPlayerLoginRoomToBattleShar"
    "dReq\022\016\n\006roomid\030\002 \002(\004\022\016\n\006campid\030\003 \002(\r\022\020\n\010"
    "playerid\030\004 \002(\004\"K\n\027S2SPlayerCancelMatchRe"
    "q\022\016\n\006roomid\030\001 \002(\004\022\016\n\006campid\030\002 \002(\r\022\020\n\010pla"
    "yerid\030\003 \002(\004\"f\n\033S2SPlayerLeaveBattleRoomR"
    "eq\022\016\n\006roomid\030\001 \002(\004\022\025\n\rbattleshardid\030\002 \002("
    "\004\022\016\n\006campid\030\003 \002(\r\022\020\n\010playerid\030\004 \002(\004\"O\n\033S"
    "2SPlayerLeaveBattleRoomAck\022\016\n\006roomid\030\001 \002"
    "(\004\022\016\n\006campid\030\002 \002(\r\022\020\n\010playerid\030\003 \002(\004\"V\n\""
    "S2SPlayerLeaveRoomToBattleShardReq\022\016\n\006ro"
    "omid\030\001 \002(\004\022\016\n\006campid\030\002 \002(\r\022\020\n\010playerid\030\003"
    " \002(\004\"w\n!S2SPlayerLeaveRoomToMatchShardRe"
    "q\022\017\n\007matchid\030\001 \002(\004\022\016\n\006roomid\030\002 \002(\004\022\016\n\006ca"
    "mpid\030\003 \002(\r\022\017\n\007groupid\030\004 \002(\004\022\020\n\010playerid\030"
    "\005 \002(\004\"A\n\035S2SLeaveBattleRoomToClientAck\022\020"
    "\n\010playerid\030\001 \002(\004\022\016\n\006roomid\030\002 \002(\004\"S\n\031S2ST"
    "ellBattleRoomStartReq\022\025\n\rbattleshardid\030\001"
    " \002(\004\022\016\n\006roomid\030\002 \002(\004\022\017\n\007maxtime\030\003 \002(\r\"C\n"
    " S2STellRoomStartToBattleShardReq\022\016\n\006roo"
    "mid\030\001 \002(\004\022\017\n\007maxtime\030\002 \002(\r\"+\n\031S2STellBat"
    "tleRoomStartAck\022\016\n\006roomid\030\001 \002(\004\"B\n\037S2STe"
    "llRoomStartToMatchShardReq\022\017\n\007matchid\030\001 "
    "\002(\r\022\016\n\006roomid\030\002 \002(\004\"1\n\037S2STellRoomStartT"
    "oMatchShardAck\022\016\n\006roomid\030\001 \002(\004\"a\n\032S2STel"
    "lBattleRoomFinishReq\022\025\n\rbattleshardid\030\001 "
    "\002(\004\022\016\n\006roomid\030\002 \002(\004\022\020\n\010serverid\030\003 \002(\004\022\n\n"
    "\002ip\030\004 \002(\014\",\n\032S2STellBattleRoomFinishAck\022"
    "\016\n\006roomid\030\001 \002(\004\"l\n\034S2SBattleRoomScoreBal"
    "anceReq\022\016\n\006roomid\030\001 \002(\004\022\025\n\rbattleshardid"
    "\030\002 \002(\r\022%\n\007pbscore\030\003 \002(\0132\024.KFMsg.PBBattle"
    "Score\"P\n\034S2SBattleRoomScoreBalanceAck\022\016\n"
    "\006roomid\030\001 \002(\004\022\020\n\010playerid\030\002 \002(\004\022\016\n\006rewar"
    "d\030\003 \002(\014\"X\n\037S2SBattleScoreBalanceToShardR"
    "eq\022\016\n\006roomid\030\001 \002(\004\022%\n\007pbscore\030\002 \002(\0132\024.KF"
    "Msg.PBBattleScore\"b\n\027S2SPlayerBattleScor"
    "eReq\022\020\n\010playerid\030\001 \002(\004\022\016\n\006roomid\030\002 \002(\004\022%"
    "\n\007pbscore\030\003 \002(\0132\024.KFMsg.PBBattleScore\";\n"
    "\027S2SPlayerBattleScoreAck\022\020\n\010playerid\030\001 \002"
    "(\004\022\016\n\006roomid\030\002 \002(\004\"/\n\033S2SOnlieQueryBattl"
    "eScoreReq\022\020\n\010playerid\030\001 \002(\004\"Q\n!S2STellRo"
    "omFinishToBattleShardReq\022\016\n\006roomid\030\001 \002(\004"
    "\022\020\n\010serverid\030\002 \002(\004\022\n\n\002ip\030\003 \002(\014\"B\n\037S2STel"
    "lRoomCloseToMatchShardReq\022\017\n\007matchid\030\001 \002"
    "(\004\022\016\n\006roomid\030\002 \002(\004\"\'\n\025S2SResetBattleRoom"
    "Req\022\016\n\006roomid\030\001 \002(\004*\227\017\n\016BattleProtocol\022#"
    "\n\036S2S_REGISTER_BATTLE_SERVER_REQ\020\300W\022#\n\036S"
    "2S_REGISTER_BATTLE_SERVER_ACK\020\301W\022.\n)S2S_"
    "DISCONNECT_SERVER_TO_BATTLE_SHARD_REQ\020\302W"
    "\022,\n\'S2S_REGISTER_SERVER_TO_BATTLE_SHARD_"
    "REQ\020\303W\022(\n#S2S_CREATE_ROOM_TO_BATTLE_PROX"
    "Y_REQ\020\304W\022(\n#S2S_CREATE_ROOM_TO_BATTLE_SH"
    "ARD_REQ\020\305W\022\'\n\"S2S_CREATE_ROOM_TO_MATCH_S"
    "HARD_ACK\020\306W\022\035\n\030S2S_OPEN_BATTLE_ROOM_REQ\020"
    "\307W\022\035\n\030S2S_OPEN_BATTLE_ROOM_ACK\020\310W\022&\n!S2S"
    "_OPEN_ROOM_TO_BATTLE_SHARD_ACK\020\311W\022%\n S2S"
    "_PLAYER_ENTER_BATTLE_ROOM_REQ\020\312W\022%\n S2S_"
    "PLAYER_ENTER_BATTLE_ROOM_ACK\020\313W\022.\n)S2S_P"
    "LAYER_ENTER_ROOM_TO_BATTLE_SHARD_ACK\020\314W\022"
    "%\n S2S_PLAYER_LEAVE_BATTLE_ROOM_REQ\020\315W\022-"
    "\n(S2S_PLAYER_LEAVE_ROOM_TO_MATCH_SHARD_R"
    "EQ\020\316W\022#\n\036S2S_TELL_BATTLE_ROOM_START_REQ\020"
    "\317W\022#\n\036S2S_TELL_BATTLE_ROOM_START_ACK\020\320W\022"
    "+\n&S2S_TELL_ROOM_START_TO_MATCH_SHARD_RE"
    "Q\020\321W\022%\n S2S_OPEN_ROOM_TO_MATCH_SHARD_REQ"
    "\020\322W\022$\n\037S2S_TELL_BATTLE_ROOM_FINISH_REQ\020\323"
    "W\022(\n#S2S_LEAVE_BATTLE_ROOM_TO_CLIENT_ACK"
    "\020\324W\022,\n\'S2S_TELL_ROOM_START_TO_BATTLE_SHA"
    "RD_REQ\020\325W\022-\n(S2S_TELL_ROOM_FINISH_TO_BAT"
    "TLE_SAHRD_REQ\020\326W\022%\n S2S_ADD_CAMP_TO_BATT"
    "LE_SHARD_REQ\020\327W\022$\n\037S2S_ADD_CAMP_TO_MATCH"
    "_SHARD_ACK\020\330W\022(\n#S2S_REMOVE_CAMP_TO_BATT"
    "LE_SHARD_REQ\020\331W\022 \n\033S2S_PLAYER_CANCEL_MAT"
    "CH_REQ\020\332W\022%\n S2S_PLAYER_LEAVE_BATTLE_ROO"
    "M_ACK\020\333W\022 \n\033S2S_PLAYER_CANCEL_MATCH_ACK\020"
    "\334W\022$\n\037S2S_TELL_BATTLE_ROOM_FINISH_ACK\020\335W"
    "\022.\n)S2S_PLAYER_LEAVE_ROOM_TO_BATTLE_SHAR"
    "D_REQ\020\336W\022%\n S2S_PLAYER_LOGIN_BATTLE_ROOM"
    "_REQ\020\337W\022%\n S2S_PLAYER_LOGIN_BATTLE_ROOM_"
    "ACK\020\340W\022.\n)S2S_PLAYER_LOGIN_ROOM_TO_BATTL"
    "E_SHARD_REQ\020\341W\022,\n\'S2S_TELL_ROOM_START_TO"
    "_BATTLE_SHARD_ACK\020\342W\022*\n%S2S_TELL_BATTLE_"
    "REGISTER_TO_SHARD_REQ\020\343W\022+\n&S2S_TELL_ROO"
    "M_CLOSE_TO_MATCH_SHARD_REQ\020\344W\022 \n\033S2S_PLA"
    "YER_BATTLE_SCORE_REQ\020\345W\022 \n\033S2S_PLAYER_BA"
    "TTLE_SCORE_ACK\020\346W\022&\n!S2S_BATTLE_ROOM_SCO"
    "RE_BALANCE_REQ\020\347W\022&\n!S2S_BATTLE_ROOM_SCO"
    "RE_BALANCE_ACK\020\350W\022*\n%S2S_BATTLE_SCORE_BA"
    "LANCE_TO_SHARD_REQ\020\351W\022&\n!S2S_ONLINE_QUER"
    "Y_BATTLE_SCORE_REQ\020\352W\022&\n!S2S_OPEN_BATTLE"
    "_ROOM_TO_SHARD_ACK\020\353W\022\036\n\031S2S_RESET_BATTL"
    "E_ROOM_REQ\020\354W\022\030\n\023S2S_BATTLE_PING_REQ\020\355W\022"
    "\030\n\023S2S_BATTLE_PING_ACK\020\356W\022\034\n\027S2S_ALLOC_B"
    "ATTLE_ID_REQ\020\357W\022\034\n\027S2S_ALLOC_BATTLE_ID_A"
    "CK\020\360W*-\n\nBattleEnum\022\017\n\013OpenSuccess\020\001\022\016\n\n"
    "OpenFailed\020\002", 5892);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KFBattleMessage.proto", &protobuf_RegisterTypes);
  S2SAllocBattleIdReq::default_instance_ = new S2SAllocBattleIdReq();
  S2SAllocBattleIdAck::default_instance_ = new S2SAllocBattleIdAck();
  S2SRegisterBattleServerReq::default_instance_ = new S2SRegisterBattleServerReq();
  S2SRegisterBattleServerAck::default_instance_ = new S2SRegisterBattleServerAck();
  S2SRegisterServerToBattleShardReq::default_instance_ = new S2SRegisterServerToBattleShardReq();
  S2STellBattleRegisterToShardReq::default_instance_ = new S2STellBattleRegisterToShardReq();
  S2SDisconnectServerToBattleShardReq::default_instance_ = new S2SDisconnectServerToBattleShardReq();
  S2SCreateRoomToBattleProxyReq::default_instance_ = new S2SCreateRoomToBattleProxyReq();
  S2SCreateRoomToBattleShardReq::default_instance_ = new S2SCreateRoomToBattleShardReq();
  S2SCreateRoomToMatchShardAck::default_instance_ = new S2SCreateRoomToMatchShardAck();
  S2SAddCampToBattleShardReq::default_instance_ = new S2SAddCampToBattleShardReq();
  S2SAddCampToMatchShardAck::default_instance_ = new S2SAddCampToMatchShardAck();
  S2SOpenBattleRoomReq::default_instance_ = new S2SOpenBattleRoomReq();
  S2SOpenBattleRoomAck::default_instance_ = new S2SOpenBattleRoomAck();
  S2SOpenBattleRoomToShardAck::default_instance_ = new S2SOpenBattleRoomToShardAck();
  S2SOpenRoomToMatchShardReq::default_instance_ = new S2SOpenRoomToMatchShardReq();
  S2SOpenRoomToBattleShardAck::default_instance_ = new S2SOpenRoomToBattleShardAck();
  S2SPlayerEnterBattleRoomReq::default_instance_ = new S2SPlayerEnterBattleRoomReq();
  S2SPlayerEnterBattleRoomAck::default_instance_ = new S2SPlayerEnterBattleRoomAck();
  S2SPlayerEnterRoomToBattleShardAck::default_instance_ = new S2SPlayerEnterRoomToBattleShardAck();
  S2SPlayerLoginBattleRoomReq::default_instance_ = new S2SPlayerLoginBattleRoomReq();
  S2SPlayerLoginBattleRoomAck::default_instance_ = new S2SPlayerLoginBattleRoomAck();
  S2SPlayerLoginRoomToBattleShardReq::default_instance_ = new S2SPlayerLoginRoomToBattleShardReq();
  S2SPlayerCancelMatchReq::default_instance_ = new S2SPlayerCancelMatchReq();
  S2SPlayerLeaveBattleRoomReq::default_instance_ = new S2SPlayerLeaveBattleRoomReq();
  S2SPlayerLeaveBattleRoomAck::default_instance_ = new S2SPlayerLeaveBattleRoomAck();
  S2SPlayerLeaveRoomToBattleShardReq::default_instance_ = new S2SPlayerLeaveRoomToBattleShardReq();
  S2SPlayerLeaveRoomToMatchShardReq::default_instance_ = new S2SPlayerLeaveRoomToMatchShardReq();
  S2SLeaveBattleRoomToClientAck::default_instance_ = new S2SLeaveBattleRoomToClientAck();
  S2STellBattleRoomStartReq::default_instance_ = new S2STellBattleRoomStartReq();
  S2STellRoomStartToBattleShardReq::default_instance_ = new S2STellRoomStartToBattleShardReq();
  S2STellBattleRoomStartAck::default_instance_ = new S2STellBattleRoomStartAck();
  S2STellRoomStartToMatchShardReq::default_instance_ = new S2STellRoomStartToMatchShardReq();
  S2STellRoomStartToMatchShardAck::default_instance_ = new S2STellRoomStartToMatchShardAck();
  S2STellBattleRoomFinishReq::default_instance_ = new S2STellBattleRoomFinishReq();
  S2STellBattleRoomFinishAck::default_instance_ = new S2STellBattleRoomFinishAck();
  S2SBattleRoomScoreBalanceReq::default_instance_ = new S2SBattleRoomScoreBalanceReq();
  S2SBattleRoomScoreBalanceAck::default_instance_ = new S2SBattleRoomScoreBalanceAck();
  S2SBattleScoreBalanceToShardReq::default_instance_ = new S2SBattleScoreBalanceToShardReq();
  S2SPlayerBattleScoreReq::default_instance_ = new S2SPlayerBattleScoreReq();
  S2SPlayerBattleScoreAck::default_instance_ = new S2SPlayerBattleScoreAck();
  S2SOnlieQueryBattleScoreReq::default_instance_ = new S2SOnlieQueryBattleScoreReq();
  S2STellRoomFinishToBattleShardReq::default_instance_ = new S2STellRoomFinishToBattleShardReq();
  S2STellRoomCloseToMatchShardReq::default_instance_ = new S2STellRoomCloseToMatchShardReq();
  S2SResetBattleRoomReq::default_instance_ = new S2SResetBattleRoomReq();
  S2SAllocBattleIdReq::default_instance_->InitAsDefaultInstance();
  S2SAllocBattleIdAck::default_instance_->InitAsDefaultInstance();
  S2SRegisterBattleServerReq::default_instance_->InitAsDefaultInstance();
  S2SRegisterBattleServerAck::default_instance_->InitAsDefaultInstance();
  S2SRegisterServerToBattleShardReq::default_instance_->InitAsDefaultInstance();
  S2STellBattleRegisterToShardReq::default_instance_->InitAsDefaultInstance();
  S2SDisconnectServerToBattleShardReq::default_instance_->InitAsDefaultInstance();
  S2SCreateRoomToBattleProxyReq::default_instance_->InitAsDefaultInstance();
  S2SCreateRoomToBattleShardReq::default_instance_->InitAsDefaultInstance();
  S2SCreateRoomToMatchShardAck::default_instance_->InitAsDefaultInstance();
  S2SAddCampToBattleShardReq::default_instance_->InitAsDefaultInstance();
  S2SAddCampToMatchShardAck::default_instance_->InitAsDefaultInstance();
  S2SOpenBattleRoomReq::default_instance_->InitAsDefaultInstance();
  S2SOpenBattleRoomAck::default_instance_->InitAsDefaultInstance();
  S2SOpenBattleRoomToShardAck::default_instance_->InitAsDefaultInstance();
  S2SOpenRoomToMatchShardReq::default_instance_->InitAsDefaultInstance();
  S2SOpenRoomToBattleShardAck::default_instance_->InitAsDefaultInstance();
  S2SPlayerEnterBattleRoomReq::default_instance_->InitAsDefaultInstance();
  S2SPlayerEnterBattleRoomAck::default_instance_->InitAsDefaultInstance();
  S2SPlayerEnterRoomToBattleShardAck::default_instance_->InitAsDefaultInstance();
  S2SPlayerLoginBattleRoomReq::default_instance_->InitAsDefaultInstance();
  S2SPlayerLoginBattleRoomAck::default_instance_->InitAsDefaultInstance();
  S2SPlayerLoginRoomToBattleShardReq::default_instance_->InitAsDefaultInstance();
  S2SPlayerCancelMatchReq::default_instance_->InitAsDefaultInstance();
  S2SPlayerLeaveBattleRoomReq::default_instance_->InitAsDefaultInstance();
  S2SPlayerLeaveBattleRoomAck::default_instance_->InitAsDefaultInstance();
  S2SPlayerLeaveRoomToBattleShardReq::default_instance_->InitAsDefaultInstance();
  S2SPlayerLeaveRoomToMatchShardReq::default_instance_->InitAsDefaultInstance();
  S2SLeaveBattleRoomToClientAck::default_instance_->InitAsDefaultInstance();
  S2STellBattleRoomStartReq::default_instance_->InitAsDefaultInstance();
  S2STellRoomStartToBattleShardReq::default_instance_->InitAsDefaultInstance();
  S2STellBattleRoomStartAck::default_instance_->InitAsDefaultInstance();
  S2STellRoomStartToMatchShardReq::default_instance_->InitAsDefaultInstance();
  S2STellRoomStartToMatchShardAck::default_instance_->InitAsDefaultInstance();
  S2STellBattleRoomFinishReq::default_instance_->InitAsDefaultInstance();
  S2STellBattleRoomFinishAck::default_instance_->InitAsDefaultInstance();
  S2SBattleRoomScoreBalanceReq::default_instance_->InitAsDefaultInstance();
  S2SBattleRoomScoreBalanceAck::default_instance_->InitAsDefaultInstance();
  S2SBattleScoreBalanceToShardReq::default_instance_->InitAsDefaultInstance();
  S2SPlayerBattleScoreReq::default_instance_->InitAsDefaultInstance();
  S2SPlayerBattleScoreAck::default_instance_->InitAsDefaultInstance();
  S2SOnlieQueryBattleScoreReq::default_instance_->InitAsDefaultInstance();
  S2STellRoomFinishToBattleShardReq::default_instance_->InitAsDefaultInstance();
  S2STellRoomCloseToMatchShardReq::default_instance_->InitAsDefaultInstance();
  S2SResetBattleRoomReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_KFBattleMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_KFBattleMessage_2eproto {
  StaticDescriptorInitializer_KFBattleMessage_2eproto() {
    protobuf_AddDesc_KFBattleMessage_2eproto();
  }
} static_descriptor_initializer_KFBattleMessage_2eproto_;
const ::google::protobuf::EnumDescriptor* BattleProtocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleProtocol_descriptor_;
}
bool BattleProtocol_IsValid(int value) {
  switch(value) {
    case 11200:
    case 11201:
    case 11202:
    case 11203:
    case 11204:
    case 11205:
    case 11206:
    case 11207:
    case 11208:
    case 11209:
    case 11210:
    case 11211:
    case 11212:
    case 11213:
    case 11214:
    case 11215:
    case 11216:
    case 11217:
    case 11218:
    case 11219:
    case 11220:
    case 11221:
    case 11222:
    case 11223:
    case 11224:
    case 11225:
    case 11226:
    case 11227:
    case 11228:
    case 11229:
    case 11230:
    case 11231:
    case 11232:
    case 11233:
    case 11234:
    case 11235:
    case 11236:
    case 11237:
    case 11238:
    case 11239:
    case 11240:
    case 11241:
    case 11242:
    case 11243:
    case 11244:
    case 11245:
    case 11246:
    case 11247:
    case 11248:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BattleEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleEnum_descriptor_;
}
bool BattleEnum_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int S2SAllocBattleIdReq::kIpFieldNumber;
const int S2SAllocBattleIdReq::kPortFieldNumber;
#endif  // !_MSC_VER

S2SAllocBattleIdReq::S2SAllocBattleIdReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SAllocBattleIdReq::InitAsDefaultInstance() {
}

S2SAllocBattleIdReq::S2SAllocBattleIdReq(const S2SAllocBattleIdReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SAllocBattleIdReq::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SAllocBattleIdReq::~S2SAllocBattleIdReq() {
  SharedDtor();
}

void S2SAllocBattleIdReq::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void S2SAllocBattleIdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SAllocBattleIdReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SAllocBattleIdReq_descriptor_;
}

const S2SAllocBattleIdReq& S2SAllocBattleIdReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SAllocBattleIdReq* S2SAllocBattleIdReq::default_instance_ = NULL;

S2SAllocBattleIdReq* S2SAllocBattleIdReq::New() const {
  return new S2SAllocBattleIdReq;
}

void S2SAllocBattleIdReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SAllocBattleIdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SAllocBattleIdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->ip(), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SAllocBattleIdReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes ip = 1;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->ip(), target);
  }

  // required uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SAllocBattleIdReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // required uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SAllocBattleIdReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SAllocBattleIdReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SAllocBattleIdReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SAllocBattleIdReq::MergeFrom(const S2SAllocBattleIdReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SAllocBattleIdReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SAllocBattleIdReq::CopyFrom(const S2SAllocBattleIdReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SAllocBattleIdReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SAllocBattleIdReq::Swap(S2SAllocBattleIdReq* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SAllocBattleIdReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SAllocBattleIdReq_descriptor_;
  metadata.reflection = S2SAllocBattleIdReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SAllocBattleIdAck::kIdFieldNumber;
#endif  // !_MSC_VER

S2SAllocBattleIdAck::S2SAllocBattleIdAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SAllocBattleIdAck::InitAsDefaultInstance() {
}

S2SAllocBattleIdAck::S2SAllocBattleIdAck(const S2SAllocBattleIdAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SAllocBattleIdAck::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SAllocBattleIdAck::~S2SAllocBattleIdAck() {
  SharedDtor();
}

void S2SAllocBattleIdAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SAllocBattleIdAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SAllocBattleIdAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SAllocBattleIdAck_descriptor_;
}

const S2SAllocBattleIdAck& S2SAllocBattleIdAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SAllocBattleIdAck* S2SAllocBattleIdAck::default_instance_ = NULL;

S2SAllocBattleIdAck* S2SAllocBattleIdAck::New() const {
  return new S2SAllocBattleIdAck;
}

void S2SAllocBattleIdAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SAllocBattleIdAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SAllocBattleIdAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SAllocBattleIdAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SAllocBattleIdAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SAllocBattleIdAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SAllocBattleIdAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SAllocBattleIdAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SAllocBattleIdAck::MergeFrom(const S2SAllocBattleIdAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SAllocBattleIdAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SAllocBattleIdAck::CopyFrom(const S2SAllocBattleIdAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SAllocBattleIdAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2SAllocBattleIdAck::Swap(S2SAllocBattleIdAck* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SAllocBattleIdAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SAllocBattleIdAck_descriptor_;
  metadata.reflection = S2SAllocBattleIdAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SRegisterBattleServerReq::kServeridFieldNumber;
const int S2SRegisterBattleServerReq::kIpFieldNumber;
const int S2SRegisterBattleServerReq::kPortFieldNumber;
const int S2SRegisterBattleServerReq::kRoomidFieldNumber;
const int S2SRegisterBattleServerReq::kBattleshardidFieldNumber;
const int S2SRegisterBattleServerReq::kVersionFieldNumber;
#endif  // !_MSC_VER

S2SRegisterBattleServerReq::S2SRegisterBattleServerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SRegisterBattleServerReq::InitAsDefaultInstance() {
}

S2SRegisterBattleServerReq::S2SRegisterBattleServerReq(const S2SRegisterBattleServerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SRegisterBattleServerReq::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = GOOGLE_ULONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  roomid_ = GOOGLE_ULONGLONG(0);
  battleshardid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SRegisterBattleServerReq::~S2SRegisterBattleServerReq() {
  SharedDtor();
}

void S2SRegisterBattleServerReq::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void S2SRegisterBattleServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SRegisterBattleServerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SRegisterBattleServerReq_descriptor_;
}

const S2SRegisterBattleServerReq& S2SRegisterBattleServerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SRegisterBattleServerReq* S2SRegisterBattleServerReq::default_instance_ = NULL;

S2SRegisterBattleServerReq* S2SRegisterBattleServerReq::New() const {
  return new S2SRegisterBattleServerReq;
}

void S2SRegisterBattleServerReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = GOOGLE_ULONGLONG(0);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
    roomid_ = GOOGLE_ULONGLONG(0);
    battleshardid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SRegisterBattleServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 serverid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // required bytes ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required uint32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roomid;
        break;
      }

      // required uint64 roomid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_battleshardid;
        break;
      }

      // required uint64 battleshardid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleshardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleshardid_)));
          set_has_battleshardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_version;
        break;
      }

      // required bytes version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SRegisterBattleServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 serverid = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->serverid(), output);
  }

  // required bytes ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->ip(), output);
  }

  // required uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // required uint64 roomid = 4;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->roomid(), output);
  }

  // required uint64 battleshardid = 5;
  if (has_battleshardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->battleshardid(), output);
  }

  // required bytes version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SRegisterBattleServerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 serverid = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->serverid(), target);
  }

  // required bytes ip = 2;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ip(), target);
  }

  // required uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // required uint64 roomid = 4;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->roomid(), target);
  }

  // required uint64 battleshardid = 5;
  if (has_battleshardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->battleshardid(), target);
  }

  // required bytes version = 6;
  if (has_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SRegisterBattleServerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 serverid = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->serverid());
    }

    // required bytes ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // required uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required uint64 roomid = 4;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint64 battleshardid = 5;
    if (has_battleshardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battleshardid());
    }

    // required bytes version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SRegisterBattleServerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SRegisterBattleServerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SRegisterBattleServerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SRegisterBattleServerReq::MergeFrom(const S2SRegisterBattleServerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_battleshardid()) {
      set_battleshardid(from.battleshardid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SRegisterBattleServerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SRegisterBattleServerReq::CopyFrom(const S2SRegisterBattleServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SRegisterBattleServerReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void S2SRegisterBattleServerReq::Swap(S2SRegisterBattleServerReq* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(roomid_, other->roomid_);
    std::swap(battleshardid_, other->battleshardid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SRegisterBattleServerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SRegisterBattleServerReq_descriptor_;
  metadata.reflection = S2SRegisterBattleServerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SRegisterBattleServerAck::kServeridFieldNumber;
const int S2SRegisterBattleServerAck::kResultFieldNumber;
#endif  // !_MSC_VER

S2SRegisterBattleServerAck::S2SRegisterBattleServerAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SRegisterBattleServerAck::InitAsDefaultInstance() {
}

S2SRegisterBattleServerAck::S2SRegisterBattleServerAck(const S2SRegisterBattleServerAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SRegisterBattleServerAck::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = GOOGLE_ULONGLONG(0);
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SRegisterBattleServerAck::~S2SRegisterBattleServerAck() {
  SharedDtor();
}

void S2SRegisterBattleServerAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SRegisterBattleServerAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SRegisterBattleServerAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SRegisterBattleServerAck_descriptor_;
}

const S2SRegisterBattleServerAck& S2SRegisterBattleServerAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SRegisterBattleServerAck* S2SRegisterBattleServerAck::default_instance_ = NULL;

S2SRegisterBattleServerAck* S2SRegisterBattleServerAck::New() const {
  return new S2SRegisterBattleServerAck;
}

void S2SRegisterBattleServerAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = GOOGLE_ULONGLONG(0);
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SRegisterBattleServerAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 serverid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SRegisterBattleServerAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 serverid = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->serverid(), output);
  }

  // required uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SRegisterBattleServerAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 serverid = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->serverid(), target);
  }

  // required uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SRegisterBattleServerAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 serverid = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->serverid());
    }

    // required uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SRegisterBattleServerAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SRegisterBattleServerAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SRegisterBattleServerAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SRegisterBattleServerAck::MergeFrom(const S2SRegisterBattleServerAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SRegisterBattleServerAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SRegisterBattleServerAck::CopyFrom(const S2SRegisterBattleServerAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SRegisterBattleServerAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SRegisterBattleServerAck::Swap(S2SRegisterBattleServerAck* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SRegisterBattleServerAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SRegisterBattleServerAck_descriptor_;
  metadata.reflection = S2SRegisterBattleServerAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SRegisterServerToBattleShardReq::kServeridFieldNumber;
const int S2SRegisterServerToBattleShardReq::kIpFieldNumber;
const int S2SRegisterServerToBattleShardReq::kPortFieldNumber;
const int S2SRegisterServerToBattleShardReq::kRoomidFieldNumber;
const int S2SRegisterServerToBattleShardReq::kVersionFieldNumber;
#endif  // !_MSC_VER

S2SRegisterServerToBattleShardReq::S2SRegisterServerToBattleShardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SRegisterServerToBattleShardReq::InitAsDefaultInstance() {
}

S2SRegisterServerToBattleShardReq::S2SRegisterServerToBattleShardReq(const S2SRegisterServerToBattleShardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SRegisterServerToBattleShardReq::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = GOOGLE_ULONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  roomid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SRegisterServerToBattleShardReq::~S2SRegisterServerToBattleShardReq() {
  SharedDtor();
}

void S2SRegisterServerToBattleShardReq::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void S2SRegisterServerToBattleShardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SRegisterServerToBattleShardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SRegisterServerToBattleShardReq_descriptor_;
}

const S2SRegisterServerToBattleShardReq& S2SRegisterServerToBattleShardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SRegisterServerToBattleShardReq* S2SRegisterServerToBattleShardReq::default_instance_ = NULL;

S2SRegisterServerToBattleShardReq* S2SRegisterServerToBattleShardReq::New() const {
  return new S2SRegisterServerToBattleShardReq;
}

void S2SRegisterServerToBattleShardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = GOOGLE_ULONGLONG(0);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
    roomid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SRegisterServerToBattleShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 serverid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // required bytes ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required uint32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roomid;
        break;
      }

      // required uint64 roomid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }

      // required bytes version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SRegisterServerToBattleShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 serverid = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->serverid(), output);
  }

  // required bytes ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->ip(), output);
  }

  // required uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // required uint64 roomid = 4;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->roomid(), output);
  }

  // required bytes version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SRegisterServerToBattleShardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 serverid = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->serverid(), target);
  }

  // required bytes ip = 2;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ip(), target);
  }

  // required uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // required uint64 roomid = 4;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->roomid(), target);
  }

  // required bytes version = 5;
  if (has_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SRegisterServerToBattleShardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 serverid = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->serverid());
    }

    // required bytes ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // required uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required uint64 roomid = 4;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required bytes version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SRegisterServerToBattleShardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SRegisterServerToBattleShardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SRegisterServerToBattleShardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SRegisterServerToBattleShardReq::MergeFrom(const S2SRegisterServerToBattleShardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SRegisterServerToBattleShardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SRegisterServerToBattleShardReq::CopyFrom(const S2SRegisterServerToBattleShardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SRegisterServerToBattleShardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2SRegisterServerToBattleShardReq::Swap(S2SRegisterServerToBattleShardReq* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(roomid_, other->roomid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SRegisterServerToBattleShardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SRegisterServerToBattleShardReq_descriptor_;
  metadata.reflection = S2SRegisterServerToBattleShardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2STellBattleRegisterToShardReq::kServeridFieldNumber;
const int S2STellBattleRegisterToShardReq::kRoomidFieldNumber;
const int S2STellBattleRegisterToShardReq::kIpFieldNumber;
const int S2STellBattleRegisterToShardReq::kPortFieldNumber;
const int S2STellBattleRegisterToShardReq::kVersionFieldNumber;
#endif  // !_MSC_VER

S2STellBattleRegisterToShardReq::S2STellBattleRegisterToShardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2STellBattleRegisterToShardReq::InitAsDefaultInstance() {
}

S2STellBattleRegisterToShardReq::S2STellBattleRegisterToShardReq(const S2STellBattleRegisterToShardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2STellBattleRegisterToShardReq::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = GOOGLE_ULONGLONG(0);
  roomid_ = GOOGLE_ULONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2STellBattleRegisterToShardReq::~S2STellBattleRegisterToShardReq() {
  SharedDtor();
}

void S2STellBattleRegisterToShardReq::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void S2STellBattleRegisterToShardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2STellBattleRegisterToShardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2STellBattleRegisterToShardReq_descriptor_;
}

const S2STellBattleRegisterToShardReq& S2STellBattleRegisterToShardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2STellBattleRegisterToShardReq* S2STellBattleRegisterToShardReq::default_instance_ = NULL;

S2STellBattleRegisterToShardReq* S2STellBattleRegisterToShardReq::New() const {
  return new S2STellBattleRegisterToShardReq;
}

void S2STellBattleRegisterToShardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = GOOGLE_ULONGLONG(0);
    roomid_ = GOOGLE_ULONGLONG(0);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2STellBattleRegisterToShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 serverid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // required uint64 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // required bytes ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // required uint32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }

      // required bytes version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2STellBattleRegisterToShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 serverid = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->serverid(), output);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  // required bytes ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->ip(), output);
  }

  // required uint32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  // required bytes version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2STellBattleRegisterToShardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 serverid = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->serverid(), target);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  // required bytes ip = 3;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ip(), target);
  }

  // required uint32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->port(), target);
  }

  // required bytes version = 5;
  if (has_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2STellBattleRegisterToShardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 serverid = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->serverid());
    }

    // required uint64 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required bytes ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // required uint32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required bytes version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2STellBattleRegisterToShardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2STellBattleRegisterToShardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2STellBattleRegisterToShardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2STellBattleRegisterToShardReq::MergeFrom(const S2STellBattleRegisterToShardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2STellBattleRegisterToShardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2STellBattleRegisterToShardReq::CopyFrom(const S2STellBattleRegisterToShardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2STellBattleRegisterToShardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2STellBattleRegisterToShardReq::Swap(S2STellBattleRegisterToShardReq* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(roomid_, other->roomid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2STellBattleRegisterToShardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2STellBattleRegisterToShardReq_descriptor_;
  metadata.reflection = S2STellBattleRegisterToShardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SDisconnectServerToBattleShardReq::kServeridFieldNumber;
#endif  // !_MSC_VER

S2SDisconnectServerToBattleShardReq::S2SDisconnectServerToBattleShardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SDisconnectServerToBattleShardReq::InitAsDefaultInstance() {
}

S2SDisconnectServerToBattleShardReq::S2SDisconnectServerToBattleShardReq(const S2SDisconnectServerToBattleShardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SDisconnectServerToBattleShardReq::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SDisconnectServerToBattleShardReq::~S2SDisconnectServerToBattleShardReq() {
  SharedDtor();
}

void S2SDisconnectServerToBattleShardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SDisconnectServerToBattleShardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SDisconnectServerToBattleShardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SDisconnectServerToBattleShardReq_descriptor_;
}

const S2SDisconnectServerToBattleShardReq& S2SDisconnectServerToBattleShardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SDisconnectServerToBattleShardReq* S2SDisconnectServerToBattleShardReq::default_instance_ = NULL;

S2SDisconnectServerToBattleShardReq* S2SDisconnectServerToBattleShardReq::New() const {
  return new S2SDisconnectServerToBattleShardReq;
}

void S2SDisconnectServerToBattleShardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SDisconnectServerToBattleShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 serverid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SDisconnectServerToBattleShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 serverid = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SDisconnectServerToBattleShardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 serverid = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SDisconnectServerToBattleShardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 serverid = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SDisconnectServerToBattleShardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SDisconnectServerToBattleShardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SDisconnectServerToBattleShardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SDisconnectServerToBattleShardReq::MergeFrom(const S2SDisconnectServerToBattleShardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SDisconnectServerToBattleShardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SDisconnectServerToBattleShardReq::CopyFrom(const S2SDisconnectServerToBattleShardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SDisconnectServerToBattleShardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2SDisconnectServerToBattleShardReq::Swap(S2SDisconnectServerToBattleShardReq* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SDisconnectServerToBattleShardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SDisconnectServerToBattleShardReq_descriptor_;
  metadata.reflection = S2SDisconnectServerToBattleShardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SCreateRoomToBattleProxyReq::kMatchidFieldNumber;
const int S2SCreateRoomToBattleProxyReq::kRoomidFieldNumber;
const int S2SCreateRoomToBattleProxyReq::kMaxplayercountFieldNumber;
const int S2SCreateRoomToBattleProxyReq::kBattleserveridFieldNumber;
const int S2SCreateRoomToBattleProxyReq::kVersionFieldNumber;
#endif  // !_MSC_VER

S2SCreateRoomToBattleProxyReq::S2SCreateRoomToBattleProxyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SCreateRoomToBattleProxyReq::InitAsDefaultInstance() {
}

S2SCreateRoomToBattleProxyReq::S2SCreateRoomToBattleProxyReq(const S2SCreateRoomToBattleProxyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SCreateRoomToBattleProxyReq::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  roomid_ = GOOGLE_ULONGLONG(0);
  maxplayercount_ = 0u;
  battleserverid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SCreateRoomToBattleProxyReq::~S2SCreateRoomToBattleProxyReq() {
  SharedDtor();
}

void S2SCreateRoomToBattleProxyReq::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void S2SCreateRoomToBattleProxyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SCreateRoomToBattleProxyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SCreateRoomToBattleProxyReq_descriptor_;
}

const S2SCreateRoomToBattleProxyReq& S2SCreateRoomToBattleProxyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SCreateRoomToBattleProxyReq* S2SCreateRoomToBattleProxyReq::default_instance_ = NULL;

S2SCreateRoomToBattleProxyReq* S2SCreateRoomToBattleProxyReq::New() const {
  return new S2SCreateRoomToBattleProxyReq;
}

void S2SCreateRoomToBattleProxyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0u;
    roomid_ = GOOGLE_ULONGLONG(0);
    maxplayercount_ = 0u;
    battleserverid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SCreateRoomToBattleProxyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // required uint64 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxplayercount;
        break;
      }

      // required uint32 maxplayercount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxplayercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxplayercount_)));
          set_has_maxplayercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_battleserverid;
        break;
      }

      // required uint64 battleserverid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleserverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleserverid_)));
          set_has_battleserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }

      // required bytes version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SCreateRoomToBattleProxyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  // required uint32 maxplayercount = 3;
  if (has_maxplayercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxplayercount(), output);
  }

  // required uint64 battleserverid = 4;
  if (has_battleserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->battleserverid(), output);
  }

  // required bytes version = 5;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SCreateRoomToBattleProxyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  // required uint32 maxplayercount = 3;
  if (has_maxplayercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxplayercount(), target);
  }

  // required uint64 battleserverid = 4;
  if (has_battleserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->battleserverid(), target);
  }

  // required bytes version = 5;
  if (has_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SCreateRoomToBattleProxyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // required uint64 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 maxplayercount = 3;
    if (has_maxplayercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxplayercount());
    }

    // required uint64 battleserverid = 4;
    if (has_battleserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battleserverid());
    }

    // required bytes version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SCreateRoomToBattleProxyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SCreateRoomToBattleProxyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SCreateRoomToBattleProxyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SCreateRoomToBattleProxyReq::MergeFrom(const S2SCreateRoomToBattleProxyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_maxplayercount()) {
      set_maxplayercount(from.maxplayercount());
    }
    if (from.has_battleserverid()) {
      set_battleserverid(from.battleserverid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SCreateRoomToBattleProxyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SCreateRoomToBattleProxyReq::CopyFrom(const S2SCreateRoomToBattleProxyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SCreateRoomToBattleProxyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2SCreateRoomToBattleProxyReq::Swap(S2SCreateRoomToBattleProxyReq* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(roomid_, other->roomid_);
    std::swap(maxplayercount_, other->maxplayercount_);
    std::swap(battleserverid_, other->battleserverid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SCreateRoomToBattleProxyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SCreateRoomToBattleProxyReq_descriptor_;
  metadata.reflection = S2SCreateRoomToBattleProxyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SCreateRoomToBattleShardReq::kMatchidFieldNumber;
const int S2SCreateRoomToBattleShardReq::kRoomidFieldNumber;
const int S2SCreateRoomToBattleShardReq::kMatchshardidFieldNumber;
const int S2SCreateRoomToBattleShardReq::kMaxplayercountFieldNumber;
const int S2SCreateRoomToBattleShardReq::kBattleserveridFieldNumber;
const int S2SCreateRoomToBattleShardReq::kVersionFieldNumber;
#endif  // !_MSC_VER

S2SCreateRoomToBattleShardReq::S2SCreateRoomToBattleShardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SCreateRoomToBattleShardReq::InitAsDefaultInstance() {
}

S2SCreateRoomToBattleShardReq::S2SCreateRoomToBattleShardReq(const S2SCreateRoomToBattleShardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SCreateRoomToBattleShardReq::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  roomid_ = GOOGLE_ULONGLONG(0);
  matchshardid_ = GOOGLE_ULONGLONG(0);
  maxplayercount_ = 0u;
  battleserverid_ = GOOGLE_ULONGLONG(0);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SCreateRoomToBattleShardReq::~S2SCreateRoomToBattleShardReq() {
  SharedDtor();
}

void S2SCreateRoomToBattleShardReq::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void S2SCreateRoomToBattleShardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SCreateRoomToBattleShardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SCreateRoomToBattleShardReq_descriptor_;
}

const S2SCreateRoomToBattleShardReq& S2SCreateRoomToBattleShardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SCreateRoomToBattleShardReq* S2SCreateRoomToBattleShardReq::default_instance_ = NULL;

S2SCreateRoomToBattleShardReq* S2SCreateRoomToBattleShardReq::New() const {
  return new S2SCreateRoomToBattleShardReq;
}

void S2SCreateRoomToBattleShardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0u;
    roomid_ = GOOGLE_ULONGLONG(0);
    matchshardid_ = GOOGLE_ULONGLONG(0);
    maxplayercount_ = 0u;
    battleserverid_ = GOOGLE_ULONGLONG(0);
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SCreateRoomToBattleShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // required uint64 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_matchshardid;
        break;
      }

      // required uint64 matchshardid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchshardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchshardid_)));
          set_has_matchshardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxplayercount;
        break;
      }

      // required uint32 maxplayercount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxplayercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxplayercount_)));
          set_has_maxplayercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_battleserverid;
        break;
      }

      // required uint64 battleserverid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleserverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleserverid_)));
          set_has_battleserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_version;
        break;
      }

      // required bytes version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SCreateRoomToBattleShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  // required uint64 matchshardid = 3;
  if (has_matchshardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->matchshardid(), output);
  }

  // required uint32 maxplayercount = 4;
  if (has_maxplayercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxplayercount(), output);
  }

  // required uint64 battleserverid = 5;
  if (has_battleserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->battleserverid(), output);
  }

  // required bytes version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SCreateRoomToBattleShardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  // required uint64 matchshardid = 3;
  if (has_matchshardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->matchshardid(), target);
  }

  // required uint32 maxplayercount = 4;
  if (has_maxplayercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxplayercount(), target);
  }

  // required uint64 battleserverid = 5;
  if (has_battleserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->battleserverid(), target);
  }

  // required bytes version = 6;
  if (has_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SCreateRoomToBattleShardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // required uint64 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint64 matchshardid = 3;
    if (has_matchshardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->matchshardid());
    }

    // required uint32 maxplayercount = 4;
    if (has_maxplayercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxplayercount());
    }

    // required uint64 battleserverid = 5;
    if (has_battleserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battleserverid());
    }

    // required bytes version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SCreateRoomToBattleShardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SCreateRoomToBattleShardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SCreateRoomToBattleShardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SCreateRoomToBattleShardReq::MergeFrom(const S2SCreateRoomToBattleShardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_matchshardid()) {
      set_matchshardid(from.matchshardid());
    }
    if (from.has_maxplayercount()) {
      set_maxplayercount(from.maxplayercount());
    }
    if (from.has_battleserverid()) {
      set_battleserverid(from.battleserverid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SCreateRoomToBattleShardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SCreateRoomToBattleShardReq::CopyFrom(const S2SCreateRoomToBattleShardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SCreateRoomToBattleShardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void S2SCreateRoomToBattleShardReq::Swap(S2SCreateRoomToBattleShardReq* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(roomid_, other->roomid_);
    std::swap(matchshardid_, other->matchshardid_);
    std::swap(maxplayercount_, other->maxplayercount_);
    std::swap(battleserverid_, other->battleserverid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SCreateRoomToBattleShardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SCreateRoomToBattleShardReq_descriptor_;
  metadata.reflection = S2SCreateRoomToBattleShardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SCreateRoomToMatchShardAck::kMatchidFieldNumber;
const int S2SCreateRoomToMatchShardAck::kRoomidFieldNumber;
const int S2SCreateRoomToMatchShardAck::kBattleshardidFieldNumber;
#endif  // !_MSC_VER

S2SCreateRoomToMatchShardAck::S2SCreateRoomToMatchShardAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SCreateRoomToMatchShardAck::InitAsDefaultInstance() {
}

S2SCreateRoomToMatchShardAck::S2SCreateRoomToMatchShardAck(const S2SCreateRoomToMatchShardAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SCreateRoomToMatchShardAck::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  roomid_ = GOOGLE_ULONGLONG(0);
  battleshardid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SCreateRoomToMatchShardAck::~S2SCreateRoomToMatchShardAck() {
  SharedDtor();
}

void S2SCreateRoomToMatchShardAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SCreateRoomToMatchShardAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SCreateRoomToMatchShardAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SCreateRoomToMatchShardAck_descriptor_;
}

const S2SCreateRoomToMatchShardAck& S2SCreateRoomToMatchShardAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SCreateRoomToMatchShardAck* S2SCreateRoomToMatchShardAck::default_instance_ = NULL;

S2SCreateRoomToMatchShardAck* S2SCreateRoomToMatchShardAck::New() const {
  return new S2SCreateRoomToMatchShardAck;
}

void S2SCreateRoomToMatchShardAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0u;
    roomid_ = GOOGLE_ULONGLONG(0);
    battleshardid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SCreateRoomToMatchShardAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // required uint64 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battleshardid;
        break;
      }

      // required uint64 battleshardid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleshardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleshardid_)));
          set_has_battleshardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SCreateRoomToMatchShardAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  // required uint64 battleshardid = 3;
  if (has_battleshardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->battleshardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SCreateRoomToMatchShardAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  // required uint64 battleshardid = 3;
  if (has_battleshardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->battleshardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SCreateRoomToMatchShardAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // required uint64 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint64 battleshardid = 3;
    if (has_battleshardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battleshardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SCreateRoomToMatchShardAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SCreateRoomToMatchShardAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SCreateRoomToMatchShardAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SCreateRoomToMatchShardAck::MergeFrom(const S2SCreateRoomToMatchShardAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_battleshardid()) {
      set_battleshardid(from.battleshardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SCreateRoomToMatchShardAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SCreateRoomToMatchShardAck::CopyFrom(const S2SCreateRoomToMatchShardAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SCreateRoomToMatchShardAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SCreateRoomToMatchShardAck::Swap(S2SCreateRoomToMatchShardAck* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(roomid_, other->roomid_);
    std::swap(battleshardid_, other->battleshardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SCreateRoomToMatchShardAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SCreateRoomToMatchShardAck_descriptor_;
  metadata.reflection = S2SCreateRoomToMatchShardAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SAddCampToBattleShardReq::kRoomidFieldNumber;
const int S2SAddCampToBattleShardReq::kPbcampFieldNumber;
const int S2SAddCampToBattleShardReq::kMatchidFieldNumber;
const int S2SAddCampToBattleShardReq::kMatchshardidFieldNumber;
#endif  // !_MSC_VER

S2SAddCampToBattleShardReq::S2SAddCampToBattleShardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SAddCampToBattleShardReq::InitAsDefaultInstance() {
  pbcamp_ = const_cast< ::KFMsg::PBBattleCamp*>(&::KFMsg::PBBattleCamp::default_instance());
}

S2SAddCampToBattleShardReq::S2SAddCampToBattleShardReq(const S2SAddCampToBattleShardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SAddCampToBattleShardReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  pbcamp_ = NULL;
  matchid_ = 0u;
  matchshardid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SAddCampToBattleShardReq::~S2SAddCampToBattleShardReq() {
  SharedDtor();
}

void S2SAddCampToBattleShardReq::SharedDtor() {
  if (this != default_instance_) {
    delete pbcamp_;
  }
}

void S2SAddCampToBattleShardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SAddCampToBattleShardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SAddCampToBattleShardReq_descriptor_;
}

const S2SAddCampToBattleShardReq& S2SAddCampToBattleShardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SAddCampToBattleShardReq* S2SAddCampToBattleShardReq::default_instance_ = NULL;

S2SAddCampToBattleShardReq* S2SAddCampToBattleShardReq::New() const {
  return new S2SAddCampToBattleShardReq;
}

void S2SAddCampToBattleShardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
    if (has_pbcamp()) {
      if (pbcamp_ != NULL) pbcamp_->::KFMsg::PBBattleCamp::Clear();
    }
    matchid_ = 0u;
    matchshardid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SAddCampToBattleShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbcamp;
        break;
      }

      // required .KFMsg.PBBattleCamp pbcamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbcamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbcamp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_matchid;
        break;
      }

      // required uint32 matchid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_matchshardid;
        break;
      }

      // required uint64 matchshardid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchshardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchshardid_)));
          set_has_matchshardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SAddCampToBattleShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // required .KFMsg.PBBattleCamp pbcamp = 2;
  if (has_pbcamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pbcamp(), output);
  }

  // required uint32 matchid = 3;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->matchid(), output);
  }

  // required uint64 matchshardid = 4;
  if (has_matchshardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->matchshardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SAddCampToBattleShardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // required .KFMsg.PBBattleCamp pbcamp = 2;
  if (has_pbcamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pbcamp(), target);
  }

  // required uint32 matchid = 3;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->matchid(), target);
  }

  // required uint64 matchshardid = 4;
  if (has_matchshardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->matchshardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SAddCampToBattleShardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required .KFMsg.PBBattleCamp pbcamp = 2;
    if (has_pbcamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbcamp());
    }

    // required uint32 matchid = 3;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // required uint64 matchshardid = 4;
    if (has_matchshardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->matchshardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SAddCampToBattleShardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SAddCampToBattleShardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SAddCampToBattleShardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SAddCampToBattleShardReq::MergeFrom(const S2SAddCampToBattleShardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_pbcamp()) {
      mutable_pbcamp()->::KFMsg::PBBattleCamp::MergeFrom(from.pbcamp());
    }
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_matchshardid()) {
      set_matchshardid(from.matchshardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SAddCampToBattleShardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SAddCampToBattleShardReq::CopyFrom(const S2SAddCampToBattleShardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SAddCampToBattleShardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_pbcamp()) {
    if (!this->pbcamp().IsInitialized()) return false;
  }
  return true;
}

void S2SAddCampToBattleShardReq::Swap(S2SAddCampToBattleShardReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(pbcamp_, other->pbcamp_);
    std::swap(matchid_, other->matchid_);
    std::swap(matchshardid_, other->matchshardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SAddCampToBattleShardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SAddCampToBattleShardReq_descriptor_;
  metadata.reflection = S2SAddCampToBattleShardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SAddCampToMatchShardAck::kMatchidFieldNumber;
const int S2SAddCampToMatchShardAck::kRoomidFieldNumber;
const int S2SAddCampToMatchShardAck::kCampidFieldNumber;
const int S2SAddCampToMatchShardAck::kAddokFieldNumber;
#endif  // !_MSC_VER

S2SAddCampToMatchShardAck::S2SAddCampToMatchShardAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SAddCampToMatchShardAck::InitAsDefaultInstance() {
}

S2SAddCampToMatchShardAck::S2SAddCampToMatchShardAck(const S2SAddCampToMatchShardAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SAddCampToMatchShardAck::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  roomid_ = GOOGLE_ULONGLONG(0);
  campid_ = 0u;
  addok_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SAddCampToMatchShardAck::~S2SAddCampToMatchShardAck() {
  SharedDtor();
}

void S2SAddCampToMatchShardAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SAddCampToMatchShardAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SAddCampToMatchShardAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SAddCampToMatchShardAck_descriptor_;
}

const S2SAddCampToMatchShardAck& S2SAddCampToMatchShardAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SAddCampToMatchShardAck* S2SAddCampToMatchShardAck::default_instance_ = NULL;

S2SAddCampToMatchShardAck* S2SAddCampToMatchShardAck::New() const {
  return new S2SAddCampToMatchShardAck;
}

void S2SAddCampToMatchShardAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0u;
    roomid_ = GOOGLE_ULONGLONG(0);
    campid_ = 0u;
    addok_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SAddCampToMatchShardAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // required uint64 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_campid;
        break;
      }

      // required uint32 campid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_addok;
        break;
      }

      // required bool addok = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &addok_)));
          set_has_addok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SAddCampToMatchShardAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  // required uint32 campid = 3;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->campid(), output);
  }

  // required bool addok = 4;
  if (has_addok()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->addok(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SAddCampToMatchShardAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  // required uint32 campid = 3;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->campid(), target);
  }

  // required bool addok = 4;
  if (has_addok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->addok(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SAddCampToMatchShardAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // required uint64 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 campid = 3;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // required bool addok = 4;
    if (has_addok()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SAddCampToMatchShardAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SAddCampToMatchShardAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SAddCampToMatchShardAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SAddCampToMatchShardAck::MergeFrom(const S2SAddCampToMatchShardAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_addok()) {
      set_addok(from.addok());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SAddCampToMatchShardAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SAddCampToMatchShardAck::CopyFrom(const S2SAddCampToMatchShardAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SAddCampToMatchShardAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SAddCampToMatchShardAck::Swap(S2SAddCampToMatchShardAck* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(roomid_, other->roomid_);
    std::swap(campid_, other->campid_);
    std::swap(addok_, other->addok_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SAddCampToMatchShardAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SAddCampToMatchShardAck_descriptor_;
  metadata.reflection = S2SAddCampToMatchShardAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SOpenBattleRoomReq::kMatchidFieldNumber;
const int S2SOpenBattleRoomReq::kRoomidFieldNumber;
const int S2SOpenBattleRoomReq::kBattleshardidFieldNumber;
const int S2SOpenBattleRoomReq::kMaxplayercountFieldNumber;
#endif  // !_MSC_VER

S2SOpenBattleRoomReq::S2SOpenBattleRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SOpenBattleRoomReq::InitAsDefaultInstance() {
}

S2SOpenBattleRoomReq::S2SOpenBattleRoomReq(const S2SOpenBattleRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SOpenBattleRoomReq::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  roomid_ = GOOGLE_ULONGLONG(0);
  battleshardid_ = GOOGLE_ULONGLONG(0);
  maxplayercount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SOpenBattleRoomReq::~S2SOpenBattleRoomReq() {
  SharedDtor();
}

void S2SOpenBattleRoomReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SOpenBattleRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SOpenBattleRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SOpenBattleRoomReq_descriptor_;
}

const S2SOpenBattleRoomReq& S2SOpenBattleRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SOpenBattleRoomReq* S2SOpenBattleRoomReq::default_instance_ = NULL;

S2SOpenBattleRoomReq* S2SOpenBattleRoomReq::New() const {
  return new S2SOpenBattleRoomReq;
}

void S2SOpenBattleRoomReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0u;
    roomid_ = GOOGLE_ULONGLONG(0);
    battleshardid_ = GOOGLE_ULONGLONG(0);
    maxplayercount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SOpenBattleRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // required uint64 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battleshardid;
        break;
      }

      // required uint64 battleshardid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleshardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleshardid_)));
          set_has_battleshardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxplayercount;
        break;
      }

      // required uint32 maxplayercount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxplayercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxplayercount_)));
          set_has_maxplayercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SOpenBattleRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  // required uint64 battleshardid = 3;
  if (has_battleshardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->battleshardid(), output);
  }

  // required uint32 maxplayercount = 4;
  if (has_maxplayercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxplayercount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SOpenBattleRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  // required uint64 battleshardid = 3;
  if (has_battleshardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->battleshardid(), target);
  }

  // required uint32 maxplayercount = 4;
  if (has_maxplayercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxplayercount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SOpenBattleRoomReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // required uint64 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint64 battleshardid = 3;
    if (has_battleshardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battleshardid());
    }

    // required uint32 maxplayercount = 4;
    if (has_maxplayercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxplayercount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SOpenBattleRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SOpenBattleRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SOpenBattleRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SOpenBattleRoomReq::MergeFrom(const S2SOpenBattleRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_battleshardid()) {
      set_battleshardid(from.battleshardid());
    }
    if (from.has_maxplayercount()) {
      set_maxplayercount(from.maxplayercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SOpenBattleRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SOpenBattleRoomReq::CopyFrom(const S2SOpenBattleRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SOpenBattleRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SOpenBattleRoomReq::Swap(S2SOpenBattleRoomReq* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(roomid_, other->roomid_);
    std::swap(battleshardid_, other->battleshardid_);
    std::swap(maxplayercount_, other->maxplayercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SOpenBattleRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SOpenBattleRoomReq_descriptor_;
  metadata.reflection = S2SOpenBattleRoomReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SOpenBattleRoomAck::kBattleshardidFieldNumber;
const int S2SOpenBattleRoomAck::kMatchidFieldNumber;
const int S2SOpenBattleRoomAck::kRoomidFieldNumber;
const int S2SOpenBattleRoomAck::kResultFieldNumber;
const int S2SOpenBattleRoomAck::kWaittimeFieldNumber;
#endif  // !_MSC_VER

S2SOpenBattleRoomAck::S2SOpenBattleRoomAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SOpenBattleRoomAck::InitAsDefaultInstance() {
}

S2SOpenBattleRoomAck::S2SOpenBattleRoomAck(const S2SOpenBattleRoomAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SOpenBattleRoomAck::SharedCtor() {
  _cached_size_ = 0;
  battleshardid_ = GOOGLE_ULONGLONG(0);
  matchid_ = 0u;
  roomid_ = GOOGLE_ULONGLONG(0);
  result_ = 0u;
  waittime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SOpenBattleRoomAck::~S2SOpenBattleRoomAck() {
  SharedDtor();
}

void S2SOpenBattleRoomAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SOpenBattleRoomAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SOpenBattleRoomAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SOpenBattleRoomAck_descriptor_;
}

const S2SOpenBattleRoomAck& S2SOpenBattleRoomAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SOpenBattleRoomAck* S2SOpenBattleRoomAck::default_instance_ = NULL;

S2SOpenBattleRoomAck* S2SOpenBattleRoomAck::New() const {
  return new S2SOpenBattleRoomAck;
}

void S2SOpenBattleRoomAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleshardid_ = GOOGLE_ULONGLONG(0);
    matchid_ = 0u;
    roomid_ = GOOGLE_ULONGLONG(0);
    result_ = 0u;
    waittime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SOpenBattleRoomAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 battleshardid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleshardid_)));
          set_has_battleshardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_matchid;
        break;
      }

      // required uint32 matchid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roomid;
        break;
      }

      // required uint64 roomid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // required uint32 result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_waittime;
        break;
      }

      // required uint32 waittime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_waittime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &waittime_)));
          set_has_waittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SOpenBattleRoomAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 battleshardid = 1;
  if (has_battleshardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->battleshardid(), output);
  }

  // required uint32 matchid = 2;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->matchid(), output);
  }

  // required uint64 roomid = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->roomid(), output);
  }

  // required uint32 result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->result(), output);
  }

  // required uint32 waittime = 5;
  if (has_waittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->waittime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SOpenBattleRoomAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 battleshardid = 1;
  if (has_battleshardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->battleshardid(), target);
  }

  // required uint32 matchid = 2;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->matchid(), target);
  }

  // required uint64 roomid = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->roomid(), target);
  }

  // required uint32 result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->result(), target);
  }

  // required uint32 waittime = 5;
  if (has_waittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->waittime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SOpenBattleRoomAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 battleshardid = 1;
    if (has_battleshardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battleshardid());
    }

    // required uint32 matchid = 2;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // required uint64 roomid = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // required uint32 waittime = 5;
    if (has_waittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->waittime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SOpenBattleRoomAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SOpenBattleRoomAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SOpenBattleRoomAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SOpenBattleRoomAck::MergeFrom(const S2SOpenBattleRoomAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleshardid()) {
      set_battleshardid(from.battleshardid());
    }
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_waittime()) {
      set_waittime(from.waittime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SOpenBattleRoomAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SOpenBattleRoomAck::CopyFrom(const S2SOpenBattleRoomAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SOpenBattleRoomAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2SOpenBattleRoomAck::Swap(S2SOpenBattleRoomAck* other) {
  if (other != this) {
    std::swap(battleshardid_, other->battleshardid_);
    std::swap(matchid_, other->matchid_);
    std::swap(roomid_, other->roomid_);
    std::swap(result_, other->result_);
    std::swap(waittime_, other->waittime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SOpenBattleRoomAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SOpenBattleRoomAck_descriptor_;
  metadata.reflection = S2SOpenBattleRoomAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SOpenBattleRoomToShardAck::kMatchidFieldNumber;
const int S2SOpenBattleRoomToShardAck::kRoomidFieldNumber;
const int S2SOpenBattleRoomToShardAck::kResultFieldNumber;
const int S2SOpenBattleRoomToShardAck::kWaittimeFieldNumber;
#endif  // !_MSC_VER

S2SOpenBattleRoomToShardAck::S2SOpenBattleRoomToShardAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SOpenBattleRoomToShardAck::InitAsDefaultInstance() {
}

S2SOpenBattleRoomToShardAck::S2SOpenBattleRoomToShardAck(const S2SOpenBattleRoomToShardAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SOpenBattleRoomToShardAck::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  roomid_ = GOOGLE_ULONGLONG(0);
  result_ = 0u;
  waittime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SOpenBattleRoomToShardAck::~S2SOpenBattleRoomToShardAck() {
  SharedDtor();
}

void S2SOpenBattleRoomToShardAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SOpenBattleRoomToShardAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SOpenBattleRoomToShardAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SOpenBattleRoomToShardAck_descriptor_;
}

const S2SOpenBattleRoomToShardAck& S2SOpenBattleRoomToShardAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SOpenBattleRoomToShardAck* S2SOpenBattleRoomToShardAck::default_instance_ = NULL;

S2SOpenBattleRoomToShardAck* S2SOpenBattleRoomToShardAck::New() const {
  return new S2SOpenBattleRoomToShardAck;
}

void S2SOpenBattleRoomToShardAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0u;
    roomid_ = GOOGLE_ULONGLONG(0);
    result_ = 0u;
    waittime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SOpenBattleRoomToShardAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // required uint64 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required uint32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_waittime;
        break;
      }

      // required uint32 waittime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_waittime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &waittime_)));
          set_has_waittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SOpenBattleRoomToShardAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  // required uint32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }

  // required uint32 waittime = 4;
  if (has_waittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->waittime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SOpenBattleRoomToShardAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  // required uint32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->result(), target);
  }

  // required uint32 waittime = 4;
  if (has_waittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->waittime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SOpenBattleRoomToShardAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // required uint64 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // required uint32 waittime = 4;
    if (has_waittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->waittime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SOpenBattleRoomToShardAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SOpenBattleRoomToShardAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SOpenBattleRoomToShardAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SOpenBattleRoomToShardAck::MergeFrom(const S2SOpenBattleRoomToShardAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_waittime()) {
      set_waittime(from.waittime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SOpenBattleRoomToShardAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SOpenBattleRoomToShardAck::CopyFrom(const S2SOpenBattleRoomToShardAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SOpenBattleRoomToShardAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SOpenBattleRoomToShardAck::Swap(S2SOpenBattleRoomToShardAck* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(roomid_, other->roomid_);
    std::swap(result_, other->result_);
    std::swap(waittime_, other->waittime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SOpenBattleRoomToShardAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SOpenBattleRoomToShardAck_descriptor_;
  metadata.reflection = S2SOpenBattleRoomToShardAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SOpenRoomToMatchShardReq::kMatchidFieldNumber;
const int S2SOpenRoomToMatchShardReq::kRoomidFieldNumber;
const int S2SOpenRoomToMatchShardReq::kWaittimeFieldNumber;
#endif  // !_MSC_VER

S2SOpenRoomToMatchShardReq::S2SOpenRoomToMatchShardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SOpenRoomToMatchShardReq::InitAsDefaultInstance() {
}

S2SOpenRoomToMatchShardReq::S2SOpenRoomToMatchShardReq(const S2SOpenRoomToMatchShardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SOpenRoomToMatchShardReq::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  roomid_ = GOOGLE_ULONGLONG(0);
  waittime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SOpenRoomToMatchShardReq::~S2SOpenRoomToMatchShardReq() {
  SharedDtor();
}

void S2SOpenRoomToMatchShardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SOpenRoomToMatchShardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SOpenRoomToMatchShardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SOpenRoomToMatchShardReq_descriptor_;
}

const S2SOpenRoomToMatchShardReq& S2SOpenRoomToMatchShardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SOpenRoomToMatchShardReq* S2SOpenRoomToMatchShardReq::default_instance_ = NULL;

S2SOpenRoomToMatchShardReq* S2SOpenRoomToMatchShardReq::New() const {
  return new S2SOpenRoomToMatchShardReq;
}

void S2SOpenRoomToMatchShardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0u;
    roomid_ = GOOGLE_ULONGLONG(0);
    waittime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SOpenRoomToMatchShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // required uint64 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_waittime;
        break;
      }

      // required uint32 waittime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_waittime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &waittime_)));
          set_has_waittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SOpenRoomToMatchShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  // required uint32 waittime = 3;
  if (has_waittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->waittime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SOpenRoomToMatchShardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  // required uint32 waittime = 3;
  if (has_waittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->waittime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SOpenRoomToMatchShardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // required uint64 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 waittime = 3;
    if (has_waittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->waittime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SOpenRoomToMatchShardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SOpenRoomToMatchShardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SOpenRoomToMatchShardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SOpenRoomToMatchShardReq::MergeFrom(const S2SOpenRoomToMatchShardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_waittime()) {
      set_waittime(from.waittime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SOpenRoomToMatchShardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SOpenRoomToMatchShardReq::CopyFrom(const S2SOpenRoomToMatchShardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SOpenRoomToMatchShardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SOpenRoomToMatchShardReq::Swap(S2SOpenRoomToMatchShardReq* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(roomid_, other->roomid_);
    std::swap(waittime_, other->waittime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SOpenRoomToMatchShardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SOpenRoomToMatchShardReq_descriptor_;
  metadata.reflection = S2SOpenRoomToMatchShardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SOpenRoomToBattleShardAck::kRoomidFieldNumber;
#endif  // !_MSC_VER

S2SOpenRoomToBattleShardAck::S2SOpenRoomToBattleShardAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SOpenRoomToBattleShardAck::InitAsDefaultInstance() {
}

S2SOpenRoomToBattleShardAck::S2SOpenRoomToBattleShardAck(const S2SOpenRoomToBattleShardAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SOpenRoomToBattleShardAck::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SOpenRoomToBattleShardAck::~S2SOpenRoomToBattleShardAck() {
  SharedDtor();
}

void S2SOpenRoomToBattleShardAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SOpenRoomToBattleShardAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SOpenRoomToBattleShardAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SOpenRoomToBattleShardAck_descriptor_;
}

const S2SOpenRoomToBattleShardAck& S2SOpenRoomToBattleShardAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SOpenRoomToBattleShardAck* S2SOpenRoomToBattleShardAck::default_instance_ = NULL;

S2SOpenRoomToBattleShardAck* S2SOpenRoomToBattleShardAck::New() const {
  return new S2SOpenRoomToBattleShardAck;
}

void S2SOpenRoomToBattleShardAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SOpenRoomToBattleShardAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SOpenRoomToBattleShardAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SOpenRoomToBattleShardAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SOpenRoomToBattleShardAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SOpenRoomToBattleShardAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SOpenRoomToBattleShardAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SOpenRoomToBattleShardAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SOpenRoomToBattleShardAck::MergeFrom(const S2SOpenRoomToBattleShardAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SOpenRoomToBattleShardAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SOpenRoomToBattleShardAck::CopyFrom(const S2SOpenRoomToBattleShardAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SOpenRoomToBattleShardAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2SOpenRoomToBattleShardAck::Swap(S2SOpenRoomToBattleShardAck* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SOpenRoomToBattleShardAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SOpenRoomToBattleShardAck_descriptor_;
  metadata.reflection = S2SOpenRoomToBattleShardAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SPlayerEnterBattleRoomReq::kRoomidFieldNumber;
const int S2SPlayerEnterBattleRoomReq::kPlayerFieldNumber;
const int S2SPlayerEnterBattleRoomReq::kTokenFieldNumber;
#endif  // !_MSC_VER

S2SPlayerEnterBattleRoomReq::S2SPlayerEnterBattleRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SPlayerEnterBattleRoomReq::InitAsDefaultInstance() {
  player_ = const_cast< ::KFMsg::PBBattlePlayer*>(&::KFMsg::PBBattlePlayer::default_instance());
}

S2SPlayerEnterBattleRoomReq::S2SPlayerEnterBattleRoomReq(const S2SPlayerEnterBattleRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SPlayerEnterBattleRoomReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  player_ = NULL;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SPlayerEnterBattleRoomReq::~S2SPlayerEnterBattleRoomReq() {
  SharedDtor();
}

void S2SPlayerEnterBattleRoomReq::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
    delete player_;
  }
}

void S2SPlayerEnterBattleRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SPlayerEnterBattleRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SPlayerEnterBattleRoomReq_descriptor_;
}

const S2SPlayerEnterBattleRoomReq& S2SPlayerEnterBattleRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SPlayerEnterBattleRoomReq* S2SPlayerEnterBattleRoomReq::default_instance_ = NULL;

S2SPlayerEnterBattleRoomReq* S2SPlayerEnterBattleRoomReq::New() const {
  return new S2SPlayerEnterBattleRoomReq;
}

void S2SPlayerEnterBattleRoomReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
    if (has_player()) {
      if (player_ != NULL) player_->::KFMsg::PBBattlePlayer::Clear();
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SPlayerEnterBattleRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player;
        break;
      }

      // required .KFMsg.PBBattlePlayer player = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // required bytes token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SPlayerEnterBattleRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // required .KFMsg.PBBattlePlayer player = 2;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player(), output);
  }

  // required bytes token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SPlayerEnterBattleRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // required .KFMsg.PBBattlePlayer player = 2;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player(), target);
  }

  // required bytes token = 3;
  if (has_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SPlayerEnterBattleRoomReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required .KFMsg.PBBattlePlayer player = 2;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player());
    }

    // required bytes token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SPlayerEnterBattleRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SPlayerEnterBattleRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SPlayerEnterBattleRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SPlayerEnterBattleRoomReq::MergeFrom(const S2SPlayerEnterBattleRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_player()) {
      mutable_player()->::KFMsg::PBBattlePlayer::MergeFrom(from.player());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SPlayerEnterBattleRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SPlayerEnterBattleRoomReq::CopyFrom(const S2SPlayerEnterBattleRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SPlayerEnterBattleRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SPlayerEnterBattleRoomReq::Swap(S2SPlayerEnterBattleRoomReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(player_, other->player_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SPlayerEnterBattleRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SPlayerEnterBattleRoomReq_descriptor_;
  metadata.reflection = S2SPlayerEnterBattleRoomReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SPlayerEnterBattleRoomAck::kBattleshardidFieldNumber;
const int S2SPlayerEnterBattleRoomAck::kRoomidFieldNumber;
const int S2SPlayerEnterBattleRoomAck::kCampidFieldNumber;
const int S2SPlayerEnterBattleRoomAck::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SPlayerEnterBattleRoomAck::S2SPlayerEnterBattleRoomAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SPlayerEnterBattleRoomAck::InitAsDefaultInstance() {
}

S2SPlayerEnterBattleRoomAck::S2SPlayerEnterBattleRoomAck(const S2SPlayerEnterBattleRoomAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SPlayerEnterBattleRoomAck::SharedCtor() {
  _cached_size_ = 0;
  battleshardid_ = GOOGLE_ULONGLONG(0);
  roomid_ = GOOGLE_ULONGLONG(0);
  campid_ = 0u;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SPlayerEnterBattleRoomAck::~S2SPlayerEnterBattleRoomAck() {
  SharedDtor();
}

void S2SPlayerEnterBattleRoomAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SPlayerEnterBattleRoomAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SPlayerEnterBattleRoomAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SPlayerEnterBattleRoomAck_descriptor_;
}

const S2SPlayerEnterBattleRoomAck& S2SPlayerEnterBattleRoomAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SPlayerEnterBattleRoomAck* S2SPlayerEnterBattleRoomAck::default_instance_ = NULL;

S2SPlayerEnterBattleRoomAck* S2SPlayerEnterBattleRoomAck::New() const {
  return new S2SPlayerEnterBattleRoomAck;
}

void S2SPlayerEnterBattleRoomAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleshardid_ = GOOGLE_ULONGLONG(0);
    roomid_ = GOOGLE_ULONGLONG(0);
    campid_ = 0u;
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SPlayerEnterBattleRoomAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 battleshardid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleshardid_)));
          set_has_battleshardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // required uint64 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_campid;
        break;
      }

      // required uint32 campid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerid;
        break;
      }

      // required uint64 playerid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SPlayerEnterBattleRoomAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 battleshardid = 1;
  if (has_battleshardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->battleshardid(), output);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  // required uint32 campid = 3;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->campid(), output);
  }

  // required uint64 playerid = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SPlayerEnterBattleRoomAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 battleshardid = 1;
  if (has_battleshardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->battleshardid(), target);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  // required uint32 campid = 3;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->campid(), target);
  }

  // required uint64 playerid = 4;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SPlayerEnterBattleRoomAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 battleshardid = 1;
    if (has_battleshardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battleshardid());
    }

    // required uint64 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 campid = 3;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // required uint64 playerid = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SPlayerEnterBattleRoomAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SPlayerEnterBattleRoomAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SPlayerEnterBattleRoomAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SPlayerEnterBattleRoomAck::MergeFrom(const S2SPlayerEnterBattleRoomAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleshardid()) {
      set_battleshardid(from.battleshardid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SPlayerEnterBattleRoomAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SPlayerEnterBattleRoomAck::CopyFrom(const S2SPlayerEnterBattleRoomAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SPlayerEnterBattleRoomAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SPlayerEnterBattleRoomAck::Swap(S2SPlayerEnterBattleRoomAck* other) {
  if (other != this) {
    std::swap(battleshardid_, other->battleshardid_);
    std::swap(roomid_, other->roomid_);
    std::swap(campid_, other->campid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SPlayerEnterBattleRoomAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SPlayerEnterBattleRoomAck_descriptor_;
  metadata.reflection = S2SPlayerEnterBattleRoomAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SPlayerEnterRoomToBattleShardAck::kRoomidFieldNumber;
const int S2SPlayerEnterRoomToBattleShardAck::kCampidFieldNumber;
const int S2SPlayerEnterRoomToBattleShardAck::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SPlayerEnterRoomToBattleShardAck::S2SPlayerEnterRoomToBattleShardAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SPlayerEnterRoomToBattleShardAck::InitAsDefaultInstance() {
}

S2SPlayerEnterRoomToBattleShardAck::S2SPlayerEnterRoomToBattleShardAck(const S2SPlayerEnterRoomToBattleShardAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SPlayerEnterRoomToBattleShardAck::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  campid_ = 0u;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SPlayerEnterRoomToBattleShardAck::~S2SPlayerEnterRoomToBattleShardAck() {
  SharedDtor();
}

void S2SPlayerEnterRoomToBattleShardAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SPlayerEnterRoomToBattleShardAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SPlayerEnterRoomToBattleShardAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SPlayerEnterRoomToBattleShardAck_descriptor_;
}

const S2SPlayerEnterRoomToBattleShardAck& S2SPlayerEnterRoomToBattleShardAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SPlayerEnterRoomToBattleShardAck* S2SPlayerEnterRoomToBattleShardAck::default_instance_ = NULL;

S2SPlayerEnterRoomToBattleShardAck* S2SPlayerEnterRoomToBattleShardAck::New() const {
  return new S2SPlayerEnterRoomToBattleShardAck;
}

void S2SPlayerEnterRoomToBattleShardAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
    campid_ = 0u;
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SPlayerEnterRoomToBattleShardAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_campid;
        break;
      }

      // required uint32 campid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerid;
        break;
      }

      // required uint64 playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SPlayerEnterRoomToBattleShardAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // required uint32 campid = 2;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->campid(), output);
  }

  // required uint64 playerid = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SPlayerEnterRoomToBattleShardAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // required uint32 campid = 2;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->campid(), target);
  }

  // required uint64 playerid = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SPlayerEnterRoomToBattleShardAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 campid = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // required uint64 playerid = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SPlayerEnterRoomToBattleShardAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SPlayerEnterRoomToBattleShardAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SPlayerEnterRoomToBattleShardAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SPlayerEnterRoomToBattleShardAck::MergeFrom(const S2SPlayerEnterRoomToBattleShardAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SPlayerEnterRoomToBattleShardAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SPlayerEnterRoomToBattleShardAck::CopyFrom(const S2SPlayerEnterRoomToBattleShardAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SPlayerEnterRoomToBattleShardAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SPlayerEnterRoomToBattleShardAck::Swap(S2SPlayerEnterRoomToBattleShardAck* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(campid_, other->campid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SPlayerEnterRoomToBattleShardAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SPlayerEnterRoomToBattleShardAck_descriptor_;
  metadata.reflection = S2SPlayerEnterRoomToBattleShardAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SPlayerLoginBattleRoomReq::kBattleshardidFieldNumber;
const int S2SPlayerLoginBattleRoomReq::kRoomidFieldNumber;
const int S2SPlayerLoginBattleRoomReq::kCampidFieldNumber;
const int S2SPlayerLoginBattleRoomReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SPlayerLoginBattleRoomReq::S2SPlayerLoginBattleRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SPlayerLoginBattleRoomReq::InitAsDefaultInstance() {
}

S2SPlayerLoginBattleRoomReq::S2SPlayerLoginBattleRoomReq(const S2SPlayerLoginBattleRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SPlayerLoginBattleRoomReq::SharedCtor() {
  _cached_size_ = 0;
  battleshardid_ = GOOGLE_ULONGLONG(0);
  roomid_ = GOOGLE_ULONGLONG(0);
  campid_ = 0u;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SPlayerLoginBattleRoomReq::~S2SPlayerLoginBattleRoomReq() {
  SharedDtor();
}

void S2SPlayerLoginBattleRoomReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SPlayerLoginBattleRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SPlayerLoginBattleRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SPlayerLoginBattleRoomReq_descriptor_;
}

const S2SPlayerLoginBattleRoomReq& S2SPlayerLoginBattleRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SPlayerLoginBattleRoomReq* S2SPlayerLoginBattleRoomReq::default_instance_ = NULL;

S2SPlayerLoginBattleRoomReq* S2SPlayerLoginBattleRoomReq::New() const {
  return new S2SPlayerLoginBattleRoomReq;
}

void S2SPlayerLoginBattleRoomReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleshardid_ = GOOGLE_ULONGLONG(0);
    roomid_ = GOOGLE_ULONGLONG(0);
    campid_ = 0u;
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SPlayerLoginBattleRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 battleshardid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleshardid_)));
          set_has_battleshardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // required uint64 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_campid;
        break;
      }

      // required uint32 campid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerid;
        break;
      }

      // required uint64 playerid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SPlayerLoginBattleRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 battleshardid = 1;
  if (has_battleshardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->battleshardid(), output);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  // required uint32 campid = 3;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->campid(), output);
  }

  // required uint64 playerid = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SPlayerLoginBattleRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 battleshardid = 1;
  if (has_battleshardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->battleshardid(), target);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  // required uint32 campid = 3;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->campid(), target);
  }

  // required uint64 playerid = 4;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SPlayerLoginBattleRoomReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 battleshardid = 1;
    if (has_battleshardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battleshardid());
    }

    // required uint64 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 campid = 3;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // required uint64 playerid = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SPlayerLoginBattleRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SPlayerLoginBattleRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SPlayerLoginBattleRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SPlayerLoginBattleRoomReq::MergeFrom(const S2SPlayerLoginBattleRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleshardid()) {
      set_battleshardid(from.battleshardid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SPlayerLoginBattleRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SPlayerLoginBattleRoomReq::CopyFrom(const S2SPlayerLoginBattleRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SPlayerLoginBattleRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SPlayerLoginBattleRoomReq::Swap(S2SPlayerLoginBattleRoomReq* other) {
  if (other != this) {
    std::swap(battleshardid_, other->battleshardid_);
    std::swap(roomid_, other->roomid_);
    std::swap(campid_, other->campid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SPlayerLoginBattleRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SPlayerLoginBattleRoomReq_descriptor_;
  metadata.reflection = S2SPlayerLoginBattleRoomReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SPlayerLoginBattleRoomAck::kRoomidFieldNumber;
const int S2SPlayerLoginBattleRoomAck::kCampidFieldNumber;
const int S2SPlayerLoginBattleRoomAck::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SPlayerLoginBattleRoomAck::S2SPlayerLoginBattleRoomAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SPlayerLoginBattleRoomAck::InitAsDefaultInstance() {
}

S2SPlayerLoginBattleRoomAck::S2SPlayerLoginBattleRoomAck(const S2SPlayerLoginBattleRoomAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SPlayerLoginBattleRoomAck::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  campid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SPlayerLoginBattleRoomAck::~S2SPlayerLoginBattleRoomAck() {
  SharedDtor();
}

void S2SPlayerLoginBattleRoomAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SPlayerLoginBattleRoomAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SPlayerLoginBattleRoomAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SPlayerLoginBattleRoomAck_descriptor_;
}

const S2SPlayerLoginBattleRoomAck& S2SPlayerLoginBattleRoomAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SPlayerLoginBattleRoomAck* S2SPlayerLoginBattleRoomAck::default_instance_ = NULL;

S2SPlayerLoginBattleRoomAck* S2SPlayerLoginBattleRoomAck::New() const {
  return new S2SPlayerLoginBattleRoomAck;
}

void S2SPlayerLoginBattleRoomAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
    campid_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SPlayerLoginBattleRoomAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_campid;
        break;
      }

      // required uint32 campid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SPlayerLoginBattleRoomAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // required uint32 campid = 2;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->campid(), output);
  }

  // required uint32 playerid = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SPlayerLoginBattleRoomAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // required uint32 campid = 2;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->campid(), target);
  }

  // required uint32 playerid = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SPlayerLoginBattleRoomAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 campid = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // required uint32 playerid = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SPlayerLoginBattleRoomAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SPlayerLoginBattleRoomAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SPlayerLoginBattleRoomAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SPlayerLoginBattleRoomAck::MergeFrom(const S2SPlayerLoginBattleRoomAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SPlayerLoginBattleRoomAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SPlayerLoginBattleRoomAck::CopyFrom(const S2SPlayerLoginBattleRoomAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SPlayerLoginBattleRoomAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SPlayerLoginBattleRoomAck::Swap(S2SPlayerLoginBattleRoomAck* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(campid_, other->campid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SPlayerLoginBattleRoomAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SPlayerLoginBattleRoomAck_descriptor_;
  metadata.reflection = S2SPlayerLoginBattleRoomAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SPlayerLoginRoomToBattleShardReq::kRoomidFieldNumber;
const int S2SPlayerLoginRoomToBattleShardReq::kCampidFieldNumber;
const int S2SPlayerLoginRoomToBattleShardReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SPlayerLoginRoomToBattleShardReq::S2SPlayerLoginRoomToBattleShardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SPlayerLoginRoomToBattleShardReq::InitAsDefaultInstance() {
}

S2SPlayerLoginRoomToBattleShardReq::S2SPlayerLoginRoomToBattleShardReq(const S2SPlayerLoginRoomToBattleShardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SPlayerLoginRoomToBattleShardReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  campid_ = 0u;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SPlayerLoginRoomToBattleShardReq::~S2SPlayerLoginRoomToBattleShardReq() {
  SharedDtor();
}

void S2SPlayerLoginRoomToBattleShardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SPlayerLoginRoomToBattleShardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SPlayerLoginRoomToBattleShardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SPlayerLoginRoomToBattleShardReq_descriptor_;
}

const S2SPlayerLoginRoomToBattleShardReq& S2SPlayerLoginRoomToBattleShardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SPlayerLoginRoomToBattleShardReq* S2SPlayerLoginRoomToBattleShardReq::default_instance_ = NULL;

S2SPlayerLoginRoomToBattleShardReq* S2SPlayerLoginRoomToBattleShardReq::New() const {
  return new S2SPlayerLoginRoomToBattleShardReq;
}

void S2SPlayerLoginRoomToBattleShardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
    campid_ = 0u;
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SPlayerLoginRoomToBattleShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_campid;
        break;
      }

      // required uint32 campid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerid;
        break;
      }

      // required uint64 playerid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SPlayerLoginRoomToBattleShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  // required uint32 campid = 3;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->campid(), output);
  }

  // required uint64 playerid = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SPlayerLoginRoomToBattleShardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  // required uint32 campid = 3;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->campid(), target);
  }

  // required uint64 playerid = 4;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SPlayerLoginRoomToBattleShardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 campid = 3;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // required uint64 playerid = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SPlayerLoginRoomToBattleShardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SPlayerLoginRoomToBattleShardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SPlayerLoginRoomToBattleShardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SPlayerLoginRoomToBattleShardReq::MergeFrom(const S2SPlayerLoginRoomToBattleShardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SPlayerLoginRoomToBattleShardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SPlayerLoginRoomToBattleShardReq::CopyFrom(const S2SPlayerLoginRoomToBattleShardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SPlayerLoginRoomToBattleShardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SPlayerLoginRoomToBattleShardReq::Swap(S2SPlayerLoginRoomToBattleShardReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(campid_, other->campid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SPlayerLoginRoomToBattleShardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SPlayerLoginRoomToBattleShardReq_descriptor_;
  metadata.reflection = S2SPlayerLoginRoomToBattleShardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SPlayerCancelMatchReq::kRoomidFieldNumber;
const int S2SPlayerCancelMatchReq::kCampidFieldNumber;
const int S2SPlayerCancelMatchReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SPlayerCancelMatchReq::S2SPlayerCancelMatchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SPlayerCancelMatchReq::InitAsDefaultInstance() {
}

S2SPlayerCancelMatchReq::S2SPlayerCancelMatchReq(const S2SPlayerCancelMatchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SPlayerCancelMatchReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  campid_ = 0u;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SPlayerCancelMatchReq::~S2SPlayerCancelMatchReq() {
  SharedDtor();
}

void S2SPlayerCancelMatchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SPlayerCancelMatchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SPlayerCancelMatchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SPlayerCancelMatchReq_descriptor_;
}

const S2SPlayerCancelMatchReq& S2SPlayerCancelMatchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SPlayerCancelMatchReq* S2SPlayerCancelMatchReq::default_instance_ = NULL;

S2SPlayerCancelMatchReq* S2SPlayerCancelMatchReq::New() const {
  return new S2SPlayerCancelMatchReq;
}

void S2SPlayerCancelMatchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
    campid_ = 0u;
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SPlayerCancelMatchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_campid;
        break;
      }

      // required uint32 campid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerid;
        break;
      }

      // required uint64 playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SPlayerCancelMatchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // required uint32 campid = 2;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->campid(), output);
  }

  // required uint64 playerid = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SPlayerCancelMatchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // required uint32 campid = 2;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->campid(), target);
  }

  // required uint64 playerid = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SPlayerCancelMatchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 campid = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // required uint64 playerid = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SPlayerCancelMatchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SPlayerCancelMatchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SPlayerCancelMatchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SPlayerCancelMatchReq::MergeFrom(const S2SPlayerCancelMatchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SPlayerCancelMatchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SPlayerCancelMatchReq::CopyFrom(const S2SPlayerCancelMatchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SPlayerCancelMatchReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SPlayerCancelMatchReq::Swap(S2SPlayerCancelMatchReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(campid_, other->campid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SPlayerCancelMatchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SPlayerCancelMatchReq_descriptor_;
  metadata.reflection = S2SPlayerCancelMatchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SPlayerLeaveBattleRoomReq::kRoomidFieldNumber;
const int S2SPlayerLeaveBattleRoomReq::kBattleshardidFieldNumber;
const int S2SPlayerLeaveBattleRoomReq::kCampidFieldNumber;
const int S2SPlayerLeaveBattleRoomReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SPlayerLeaveBattleRoomReq::S2SPlayerLeaveBattleRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SPlayerLeaveBattleRoomReq::InitAsDefaultInstance() {
}

S2SPlayerLeaveBattleRoomReq::S2SPlayerLeaveBattleRoomReq(const S2SPlayerLeaveBattleRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SPlayerLeaveBattleRoomReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  battleshardid_ = GOOGLE_ULONGLONG(0);
  campid_ = 0u;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SPlayerLeaveBattleRoomReq::~S2SPlayerLeaveBattleRoomReq() {
  SharedDtor();
}

void S2SPlayerLeaveBattleRoomReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SPlayerLeaveBattleRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SPlayerLeaveBattleRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SPlayerLeaveBattleRoomReq_descriptor_;
}

const S2SPlayerLeaveBattleRoomReq& S2SPlayerLeaveBattleRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SPlayerLeaveBattleRoomReq* S2SPlayerLeaveBattleRoomReq::default_instance_ = NULL;

S2SPlayerLeaveBattleRoomReq* S2SPlayerLeaveBattleRoomReq::New() const {
  return new S2SPlayerLeaveBattleRoomReq;
}

void S2SPlayerLeaveBattleRoomReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
    battleshardid_ = GOOGLE_ULONGLONG(0);
    campid_ = 0u;
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SPlayerLeaveBattleRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battleshardid;
        break;
      }

      // required uint64 battleshardid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleshardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleshardid_)));
          set_has_battleshardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_campid;
        break;
      }

      // required uint32 campid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerid;
        break;
      }

      // required uint64 playerid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SPlayerLeaveBattleRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // required uint64 battleshardid = 2;
  if (has_battleshardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battleshardid(), output);
  }

  // required uint32 campid = 3;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->campid(), output);
  }

  // required uint64 playerid = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SPlayerLeaveBattleRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // required uint64 battleshardid = 2;
  if (has_battleshardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battleshardid(), target);
  }

  // required uint32 campid = 3;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->campid(), target);
  }

  // required uint64 playerid = 4;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SPlayerLeaveBattleRoomReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint64 battleshardid = 2;
    if (has_battleshardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battleshardid());
    }

    // required uint32 campid = 3;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // required uint64 playerid = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SPlayerLeaveBattleRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SPlayerLeaveBattleRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SPlayerLeaveBattleRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SPlayerLeaveBattleRoomReq::MergeFrom(const S2SPlayerLeaveBattleRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_battleshardid()) {
      set_battleshardid(from.battleshardid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SPlayerLeaveBattleRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SPlayerLeaveBattleRoomReq::CopyFrom(const S2SPlayerLeaveBattleRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SPlayerLeaveBattleRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SPlayerLeaveBattleRoomReq::Swap(S2SPlayerLeaveBattleRoomReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(battleshardid_, other->battleshardid_);
    std::swap(campid_, other->campid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SPlayerLeaveBattleRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SPlayerLeaveBattleRoomReq_descriptor_;
  metadata.reflection = S2SPlayerLeaveBattleRoomReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SPlayerLeaveBattleRoomAck::kRoomidFieldNumber;
const int S2SPlayerLeaveBattleRoomAck::kCampidFieldNumber;
const int S2SPlayerLeaveBattleRoomAck::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SPlayerLeaveBattleRoomAck::S2SPlayerLeaveBattleRoomAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SPlayerLeaveBattleRoomAck::InitAsDefaultInstance() {
}

S2SPlayerLeaveBattleRoomAck::S2SPlayerLeaveBattleRoomAck(const S2SPlayerLeaveBattleRoomAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SPlayerLeaveBattleRoomAck::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  campid_ = 0u;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SPlayerLeaveBattleRoomAck::~S2SPlayerLeaveBattleRoomAck() {
  SharedDtor();
}

void S2SPlayerLeaveBattleRoomAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SPlayerLeaveBattleRoomAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SPlayerLeaveBattleRoomAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SPlayerLeaveBattleRoomAck_descriptor_;
}

const S2SPlayerLeaveBattleRoomAck& S2SPlayerLeaveBattleRoomAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SPlayerLeaveBattleRoomAck* S2SPlayerLeaveBattleRoomAck::default_instance_ = NULL;

S2SPlayerLeaveBattleRoomAck* S2SPlayerLeaveBattleRoomAck::New() const {
  return new S2SPlayerLeaveBattleRoomAck;
}

void S2SPlayerLeaveBattleRoomAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
    campid_ = 0u;
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SPlayerLeaveBattleRoomAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_campid;
        break;
      }

      // required uint32 campid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerid;
        break;
      }

      // required uint64 playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SPlayerLeaveBattleRoomAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // required uint32 campid = 2;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->campid(), output);
  }

  // required uint64 playerid = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SPlayerLeaveBattleRoomAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // required uint32 campid = 2;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->campid(), target);
  }

  // required uint64 playerid = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SPlayerLeaveBattleRoomAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 campid = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // required uint64 playerid = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SPlayerLeaveBattleRoomAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SPlayerLeaveBattleRoomAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SPlayerLeaveBattleRoomAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SPlayerLeaveBattleRoomAck::MergeFrom(const S2SPlayerLeaveBattleRoomAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SPlayerLeaveBattleRoomAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SPlayerLeaveBattleRoomAck::CopyFrom(const S2SPlayerLeaveBattleRoomAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SPlayerLeaveBattleRoomAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SPlayerLeaveBattleRoomAck::Swap(S2SPlayerLeaveBattleRoomAck* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(campid_, other->campid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SPlayerLeaveBattleRoomAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SPlayerLeaveBattleRoomAck_descriptor_;
  metadata.reflection = S2SPlayerLeaveBattleRoomAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SPlayerLeaveRoomToBattleShardReq::kRoomidFieldNumber;
const int S2SPlayerLeaveRoomToBattleShardReq::kCampidFieldNumber;
const int S2SPlayerLeaveRoomToBattleShardReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SPlayerLeaveRoomToBattleShardReq::S2SPlayerLeaveRoomToBattleShardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SPlayerLeaveRoomToBattleShardReq::InitAsDefaultInstance() {
}

S2SPlayerLeaveRoomToBattleShardReq::S2SPlayerLeaveRoomToBattleShardReq(const S2SPlayerLeaveRoomToBattleShardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SPlayerLeaveRoomToBattleShardReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  campid_ = 0u;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SPlayerLeaveRoomToBattleShardReq::~S2SPlayerLeaveRoomToBattleShardReq() {
  SharedDtor();
}

void S2SPlayerLeaveRoomToBattleShardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SPlayerLeaveRoomToBattleShardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SPlayerLeaveRoomToBattleShardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SPlayerLeaveRoomToBattleShardReq_descriptor_;
}

const S2SPlayerLeaveRoomToBattleShardReq& S2SPlayerLeaveRoomToBattleShardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SPlayerLeaveRoomToBattleShardReq* S2SPlayerLeaveRoomToBattleShardReq::default_instance_ = NULL;

S2SPlayerLeaveRoomToBattleShardReq* S2SPlayerLeaveRoomToBattleShardReq::New() const {
  return new S2SPlayerLeaveRoomToBattleShardReq;
}

void S2SPlayerLeaveRoomToBattleShardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
    campid_ = 0u;
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SPlayerLeaveRoomToBattleShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_campid;
        break;
      }

      // required uint32 campid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerid;
        break;
      }

      // required uint64 playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SPlayerLeaveRoomToBattleShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // required uint32 campid = 2;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->campid(), output);
  }

  // required uint64 playerid = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SPlayerLeaveRoomToBattleShardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // required uint32 campid = 2;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->campid(), target);
  }

  // required uint64 playerid = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SPlayerLeaveRoomToBattleShardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 campid = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // required uint64 playerid = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SPlayerLeaveRoomToBattleShardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SPlayerLeaveRoomToBattleShardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SPlayerLeaveRoomToBattleShardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SPlayerLeaveRoomToBattleShardReq::MergeFrom(const S2SPlayerLeaveRoomToBattleShardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SPlayerLeaveRoomToBattleShardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SPlayerLeaveRoomToBattleShardReq::CopyFrom(const S2SPlayerLeaveRoomToBattleShardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SPlayerLeaveRoomToBattleShardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SPlayerLeaveRoomToBattleShardReq::Swap(S2SPlayerLeaveRoomToBattleShardReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(campid_, other->campid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SPlayerLeaveRoomToBattleShardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SPlayerLeaveRoomToBattleShardReq_descriptor_;
  metadata.reflection = S2SPlayerLeaveRoomToBattleShardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SPlayerLeaveRoomToMatchShardReq::kMatchidFieldNumber;
const int S2SPlayerLeaveRoomToMatchShardReq::kRoomidFieldNumber;
const int S2SPlayerLeaveRoomToMatchShardReq::kCampidFieldNumber;
const int S2SPlayerLeaveRoomToMatchShardReq::kGroupidFieldNumber;
const int S2SPlayerLeaveRoomToMatchShardReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SPlayerLeaveRoomToMatchShardReq::S2SPlayerLeaveRoomToMatchShardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SPlayerLeaveRoomToMatchShardReq::InitAsDefaultInstance() {
}

S2SPlayerLeaveRoomToMatchShardReq::S2SPlayerLeaveRoomToMatchShardReq(const S2SPlayerLeaveRoomToMatchShardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SPlayerLeaveRoomToMatchShardReq::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = GOOGLE_ULONGLONG(0);
  roomid_ = GOOGLE_ULONGLONG(0);
  campid_ = 0u;
  groupid_ = GOOGLE_ULONGLONG(0);
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SPlayerLeaveRoomToMatchShardReq::~S2SPlayerLeaveRoomToMatchShardReq() {
  SharedDtor();
}

void S2SPlayerLeaveRoomToMatchShardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SPlayerLeaveRoomToMatchShardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SPlayerLeaveRoomToMatchShardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SPlayerLeaveRoomToMatchShardReq_descriptor_;
}

const S2SPlayerLeaveRoomToMatchShardReq& S2SPlayerLeaveRoomToMatchShardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SPlayerLeaveRoomToMatchShardReq* S2SPlayerLeaveRoomToMatchShardReq::default_instance_ = NULL;

S2SPlayerLeaveRoomToMatchShardReq* S2SPlayerLeaveRoomToMatchShardReq::New() const {
  return new S2SPlayerLeaveRoomToMatchShardReq;
}

void S2SPlayerLeaveRoomToMatchShardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = GOOGLE_ULONGLONG(0);
    roomid_ = GOOGLE_ULONGLONG(0);
    campid_ = 0u;
    groupid_ = GOOGLE_ULONGLONG(0);
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SPlayerLeaveRoomToMatchShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // required uint64 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_campid;
        break;
      }

      // required uint32 campid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_groupid;
        break;
      }

      // required uint64 groupid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_playerid;
        break;
      }

      // required uint64 playerid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SPlayerLeaveRoomToMatchShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->matchid(), output);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  // required uint32 campid = 3;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->campid(), output);
  }

  // required uint64 groupid = 4;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->groupid(), output);
  }

  // required uint64 playerid = 5;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SPlayerLeaveRoomToMatchShardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->matchid(), target);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  // required uint32 campid = 3;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->campid(), target);
  }

  // required uint64 groupid = 4;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->groupid(), target);
  }

  // required uint64 playerid = 5;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SPlayerLeaveRoomToMatchShardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->matchid());
    }

    // required uint64 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 campid = 3;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // required uint64 groupid = 4;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required uint64 playerid = 5;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SPlayerLeaveRoomToMatchShardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SPlayerLeaveRoomToMatchShardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SPlayerLeaveRoomToMatchShardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SPlayerLeaveRoomToMatchShardReq::MergeFrom(const S2SPlayerLeaveRoomToMatchShardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SPlayerLeaveRoomToMatchShardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SPlayerLeaveRoomToMatchShardReq::CopyFrom(const S2SPlayerLeaveRoomToMatchShardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SPlayerLeaveRoomToMatchShardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void S2SPlayerLeaveRoomToMatchShardReq::Swap(S2SPlayerLeaveRoomToMatchShardReq* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(roomid_, other->roomid_);
    std::swap(campid_, other->campid_);
    std::swap(groupid_, other->groupid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SPlayerLeaveRoomToMatchShardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SPlayerLeaveRoomToMatchShardReq_descriptor_;
  metadata.reflection = S2SPlayerLeaveRoomToMatchShardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SLeaveBattleRoomToClientAck::kPlayeridFieldNumber;
const int S2SLeaveBattleRoomToClientAck::kRoomidFieldNumber;
#endif  // !_MSC_VER

S2SLeaveBattleRoomToClientAck::S2SLeaveBattleRoomToClientAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SLeaveBattleRoomToClientAck::InitAsDefaultInstance() {
}

S2SLeaveBattleRoomToClientAck::S2SLeaveBattleRoomToClientAck(const S2SLeaveBattleRoomToClientAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SLeaveBattleRoomToClientAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  roomid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SLeaveBattleRoomToClientAck::~S2SLeaveBattleRoomToClientAck() {
  SharedDtor();
}

void S2SLeaveBattleRoomToClientAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SLeaveBattleRoomToClientAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SLeaveBattleRoomToClientAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SLeaveBattleRoomToClientAck_descriptor_;
}

const S2SLeaveBattleRoomToClientAck& S2SLeaveBattleRoomToClientAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SLeaveBattleRoomToClientAck* S2SLeaveBattleRoomToClientAck::default_instance_ = NULL;

S2SLeaveBattleRoomToClientAck* S2SLeaveBattleRoomToClientAck::New() const {
  return new S2SLeaveBattleRoomToClientAck;
}

void S2SLeaveBattleRoomToClientAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    roomid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SLeaveBattleRoomToClientAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // required uint64 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SLeaveBattleRoomToClientAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SLeaveBattleRoomToClientAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SLeaveBattleRoomToClientAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // required uint64 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SLeaveBattleRoomToClientAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SLeaveBattleRoomToClientAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SLeaveBattleRoomToClientAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SLeaveBattleRoomToClientAck::MergeFrom(const S2SLeaveBattleRoomToClientAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SLeaveBattleRoomToClientAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SLeaveBattleRoomToClientAck::CopyFrom(const S2SLeaveBattleRoomToClientAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SLeaveBattleRoomToClientAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SLeaveBattleRoomToClientAck::Swap(S2SLeaveBattleRoomToClientAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SLeaveBattleRoomToClientAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SLeaveBattleRoomToClientAck_descriptor_;
  metadata.reflection = S2SLeaveBattleRoomToClientAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2STellBattleRoomStartReq::kBattleshardidFieldNumber;
const int S2STellBattleRoomStartReq::kRoomidFieldNumber;
const int S2STellBattleRoomStartReq::kMaxtimeFieldNumber;
#endif  // !_MSC_VER

S2STellBattleRoomStartReq::S2STellBattleRoomStartReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2STellBattleRoomStartReq::InitAsDefaultInstance() {
}

S2STellBattleRoomStartReq::S2STellBattleRoomStartReq(const S2STellBattleRoomStartReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2STellBattleRoomStartReq::SharedCtor() {
  _cached_size_ = 0;
  battleshardid_ = GOOGLE_ULONGLONG(0);
  roomid_ = GOOGLE_ULONGLONG(0);
  maxtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2STellBattleRoomStartReq::~S2STellBattleRoomStartReq() {
  SharedDtor();
}

void S2STellBattleRoomStartReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2STellBattleRoomStartReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2STellBattleRoomStartReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2STellBattleRoomStartReq_descriptor_;
}

const S2STellBattleRoomStartReq& S2STellBattleRoomStartReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2STellBattleRoomStartReq* S2STellBattleRoomStartReq::default_instance_ = NULL;

S2STellBattleRoomStartReq* S2STellBattleRoomStartReq::New() const {
  return new S2STellBattleRoomStartReq;
}

void S2STellBattleRoomStartReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleshardid_ = GOOGLE_ULONGLONG(0);
    roomid_ = GOOGLE_ULONGLONG(0);
    maxtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2STellBattleRoomStartReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 battleshardid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleshardid_)));
          set_has_battleshardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // required uint64 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxtime;
        break;
      }

      // required uint32 maxtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxtime_)));
          set_has_maxtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2STellBattleRoomStartReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 battleshardid = 1;
  if (has_battleshardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->battleshardid(), output);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  // required uint32 maxtime = 3;
  if (has_maxtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2STellBattleRoomStartReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 battleshardid = 1;
  if (has_battleshardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->battleshardid(), target);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  // required uint32 maxtime = 3;
  if (has_maxtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2STellBattleRoomStartReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 battleshardid = 1;
    if (has_battleshardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battleshardid());
    }

    // required uint64 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 maxtime = 3;
    if (has_maxtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2STellBattleRoomStartReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2STellBattleRoomStartReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2STellBattleRoomStartReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2STellBattleRoomStartReq::MergeFrom(const S2STellBattleRoomStartReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleshardid()) {
      set_battleshardid(from.battleshardid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_maxtime()) {
      set_maxtime(from.maxtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2STellBattleRoomStartReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2STellBattleRoomStartReq::CopyFrom(const S2STellBattleRoomStartReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2STellBattleRoomStartReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2STellBattleRoomStartReq::Swap(S2STellBattleRoomStartReq* other) {
  if (other != this) {
    std::swap(battleshardid_, other->battleshardid_);
    std::swap(roomid_, other->roomid_);
    std::swap(maxtime_, other->maxtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2STellBattleRoomStartReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2STellBattleRoomStartReq_descriptor_;
  metadata.reflection = S2STellBattleRoomStartReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2STellRoomStartToBattleShardReq::kRoomidFieldNumber;
const int S2STellRoomStartToBattleShardReq::kMaxtimeFieldNumber;
#endif  // !_MSC_VER

S2STellRoomStartToBattleShardReq::S2STellRoomStartToBattleShardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2STellRoomStartToBattleShardReq::InitAsDefaultInstance() {
}

S2STellRoomStartToBattleShardReq::S2STellRoomStartToBattleShardReq(const S2STellRoomStartToBattleShardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2STellRoomStartToBattleShardReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  maxtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2STellRoomStartToBattleShardReq::~S2STellRoomStartToBattleShardReq() {
  SharedDtor();
}

void S2STellRoomStartToBattleShardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2STellRoomStartToBattleShardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2STellRoomStartToBattleShardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2STellRoomStartToBattleShardReq_descriptor_;
}

const S2STellRoomStartToBattleShardReq& S2STellRoomStartToBattleShardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2STellRoomStartToBattleShardReq* S2STellRoomStartToBattleShardReq::default_instance_ = NULL;

S2STellRoomStartToBattleShardReq* S2STellRoomStartToBattleShardReq::New() const {
  return new S2STellRoomStartToBattleShardReq;
}

void S2STellRoomStartToBattleShardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
    maxtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2STellRoomStartToBattleShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxtime;
        break;
      }

      // required uint32 maxtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxtime_)));
          set_has_maxtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2STellRoomStartToBattleShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // required uint32 maxtime = 2;
  if (has_maxtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2STellRoomStartToBattleShardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // required uint32 maxtime = 2;
  if (has_maxtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2STellRoomStartToBattleShardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 maxtime = 2;
    if (has_maxtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2STellRoomStartToBattleShardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2STellRoomStartToBattleShardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2STellRoomStartToBattleShardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2STellRoomStartToBattleShardReq::MergeFrom(const S2STellRoomStartToBattleShardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_maxtime()) {
      set_maxtime(from.maxtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2STellRoomStartToBattleShardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2STellRoomStartToBattleShardReq::CopyFrom(const S2STellRoomStartToBattleShardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2STellRoomStartToBattleShardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2STellRoomStartToBattleShardReq::Swap(S2STellRoomStartToBattleShardReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(maxtime_, other->maxtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2STellRoomStartToBattleShardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2STellRoomStartToBattleShardReq_descriptor_;
  metadata.reflection = S2STellRoomStartToBattleShardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2STellBattleRoomStartAck::kRoomidFieldNumber;
#endif  // !_MSC_VER

S2STellBattleRoomStartAck::S2STellBattleRoomStartAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2STellBattleRoomStartAck::InitAsDefaultInstance() {
}

S2STellBattleRoomStartAck::S2STellBattleRoomStartAck(const S2STellBattleRoomStartAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2STellBattleRoomStartAck::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2STellBattleRoomStartAck::~S2STellBattleRoomStartAck() {
  SharedDtor();
}

void S2STellBattleRoomStartAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2STellBattleRoomStartAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2STellBattleRoomStartAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2STellBattleRoomStartAck_descriptor_;
}

const S2STellBattleRoomStartAck& S2STellBattleRoomStartAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2STellBattleRoomStartAck* S2STellBattleRoomStartAck::default_instance_ = NULL;

S2STellBattleRoomStartAck* S2STellBattleRoomStartAck::New() const {
  return new S2STellBattleRoomStartAck;
}

void S2STellBattleRoomStartAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2STellBattleRoomStartAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2STellBattleRoomStartAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2STellBattleRoomStartAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2STellBattleRoomStartAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2STellBattleRoomStartAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2STellBattleRoomStartAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2STellBattleRoomStartAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2STellBattleRoomStartAck::MergeFrom(const S2STellBattleRoomStartAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2STellBattleRoomStartAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2STellBattleRoomStartAck::CopyFrom(const S2STellBattleRoomStartAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2STellBattleRoomStartAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2STellBattleRoomStartAck::Swap(S2STellBattleRoomStartAck* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2STellBattleRoomStartAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2STellBattleRoomStartAck_descriptor_;
  metadata.reflection = S2STellBattleRoomStartAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2STellRoomStartToMatchShardReq::kMatchidFieldNumber;
const int S2STellRoomStartToMatchShardReq::kRoomidFieldNumber;
#endif  // !_MSC_VER

S2STellRoomStartToMatchShardReq::S2STellRoomStartToMatchShardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2STellRoomStartToMatchShardReq::InitAsDefaultInstance() {
}

S2STellRoomStartToMatchShardReq::S2STellRoomStartToMatchShardReq(const S2STellRoomStartToMatchShardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2STellRoomStartToMatchShardReq::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  roomid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2STellRoomStartToMatchShardReq::~S2STellRoomStartToMatchShardReq() {
  SharedDtor();
}

void S2STellRoomStartToMatchShardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2STellRoomStartToMatchShardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2STellRoomStartToMatchShardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2STellRoomStartToMatchShardReq_descriptor_;
}

const S2STellRoomStartToMatchShardReq& S2STellRoomStartToMatchShardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2STellRoomStartToMatchShardReq* S2STellRoomStartToMatchShardReq::default_instance_ = NULL;

S2STellRoomStartToMatchShardReq* S2STellRoomStartToMatchShardReq::New() const {
  return new S2STellRoomStartToMatchShardReq;
}

void S2STellRoomStartToMatchShardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0u;
    roomid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2STellRoomStartToMatchShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // required uint64 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2STellRoomStartToMatchShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2STellRoomStartToMatchShardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2STellRoomStartToMatchShardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // required uint64 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2STellRoomStartToMatchShardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2STellRoomStartToMatchShardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2STellRoomStartToMatchShardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2STellRoomStartToMatchShardReq::MergeFrom(const S2STellRoomStartToMatchShardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2STellRoomStartToMatchShardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2STellRoomStartToMatchShardReq::CopyFrom(const S2STellRoomStartToMatchShardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2STellRoomStartToMatchShardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2STellRoomStartToMatchShardReq::Swap(S2STellRoomStartToMatchShardReq* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2STellRoomStartToMatchShardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2STellRoomStartToMatchShardReq_descriptor_;
  metadata.reflection = S2STellRoomStartToMatchShardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2STellRoomStartToMatchShardAck::kRoomidFieldNumber;
#endif  // !_MSC_VER

S2STellRoomStartToMatchShardAck::S2STellRoomStartToMatchShardAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2STellRoomStartToMatchShardAck::InitAsDefaultInstance() {
}

S2STellRoomStartToMatchShardAck::S2STellRoomStartToMatchShardAck(const S2STellRoomStartToMatchShardAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2STellRoomStartToMatchShardAck::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2STellRoomStartToMatchShardAck::~S2STellRoomStartToMatchShardAck() {
  SharedDtor();
}

void S2STellRoomStartToMatchShardAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2STellRoomStartToMatchShardAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2STellRoomStartToMatchShardAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2STellRoomStartToMatchShardAck_descriptor_;
}

const S2STellRoomStartToMatchShardAck& S2STellRoomStartToMatchShardAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2STellRoomStartToMatchShardAck* S2STellRoomStartToMatchShardAck::default_instance_ = NULL;

S2STellRoomStartToMatchShardAck* S2STellRoomStartToMatchShardAck::New() const {
  return new S2STellRoomStartToMatchShardAck;
}

void S2STellRoomStartToMatchShardAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2STellRoomStartToMatchShardAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2STellRoomStartToMatchShardAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2STellRoomStartToMatchShardAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2STellRoomStartToMatchShardAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2STellRoomStartToMatchShardAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2STellRoomStartToMatchShardAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2STellRoomStartToMatchShardAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2STellRoomStartToMatchShardAck::MergeFrom(const S2STellRoomStartToMatchShardAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2STellRoomStartToMatchShardAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2STellRoomStartToMatchShardAck::CopyFrom(const S2STellRoomStartToMatchShardAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2STellRoomStartToMatchShardAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2STellRoomStartToMatchShardAck::Swap(S2STellRoomStartToMatchShardAck* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2STellRoomStartToMatchShardAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2STellRoomStartToMatchShardAck_descriptor_;
  metadata.reflection = S2STellRoomStartToMatchShardAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2STellBattleRoomFinishReq::kBattleshardidFieldNumber;
const int S2STellBattleRoomFinishReq::kRoomidFieldNumber;
const int S2STellBattleRoomFinishReq::kServeridFieldNumber;
const int S2STellBattleRoomFinishReq::kIpFieldNumber;
#endif  // !_MSC_VER

S2STellBattleRoomFinishReq::S2STellBattleRoomFinishReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2STellBattleRoomFinishReq::InitAsDefaultInstance() {
}

S2STellBattleRoomFinishReq::S2STellBattleRoomFinishReq(const S2STellBattleRoomFinishReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2STellBattleRoomFinishReq::SharedCtor() {
  _cached_size_ = 0;
  battleshardid_ = GOOGLE_ULONGLONG(0);
  roomid_ = GOOGLE_ULONGLONG(0);
  serverid_ = GOOGLE_ULONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2STellBattleRoomFinishReq::~S2STellBattleRoomFinishReq() {
  SharedDtor();
}

void S2STellBattleRoomFinishReq::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void S2STellBattleRoomFinishReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2STellBattleRoomFinishReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2STellBattleRoomFinishReq_descriptor_;
}

const S2STellBattleRoomFinishReq& S2STellBattleRoomFinishReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2STellBattleRoomFinishReq* S2STellBattleRoomFinishReq::default_instance_ = NULL;

S2STellBattleRoomFinishReq* S2STellBattleRoomFinishReq::New() const {
  return new S2STellBattleRoomFinishReq;
}

void S2STellBattleRoomFinishReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleshardid_ = GOOGLE_ULONGLONG(0);
    roomid_ = GOOGLE_ULONGLONG(0);
    serverid_ = GOOGLE_ULONGLONG(0);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2STellBattleRoomFinishReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 battleshardid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleshardid_)));
          set_has_battleshardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // required uint64 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // required uint64 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // required bytes ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2STellBattleRoomFinishReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 battleshardid = 1;
  if (has_battleshardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->battleshardid(), output);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  // required uint64 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->serverid(), output);
  }

  // required bytes ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2STellBattleRoomFinishReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 battleshardid = 1;
  if (has_battleshardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->battleshardid(), target);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  // required uint64 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->serverid(), target);
  }

  // required bytes ip = 4;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2STellBattleRoomFinishReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 battleshardid = 1;
    if (has_battleshardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battleshardid());
    }

    // required uint64 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint64 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->serverid());
    }

    // required bytes ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2STellBattleRoomFinishReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2STellBattleRoomFinishReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2STellBattleRoomFinishReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2STellBattleRoomFinishReq::MergeFrom(const S2STellBattleRoomFinishReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleshardid()) {
      set_battleshardid(from.battleshardid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2STellBattleRoomFinishReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2STellBattleRoomFinishReq::CopyFrom(const S2STellBattleRoomFinishReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2STellBattleRoomFinishReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2STellBattleRoomFinishReq::Swap(S2STellBattleRoomFinishReq* other) {
  if (other != this) {
    std::swap(battleshardid_, other->battleshardid_);
    std::swap(roomid_, other->roomid_);
    std::swap(serverid_, other->serverid_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2STellBattleRoomFinishReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2STellBattleRoomFinishReq_descriptor_;
  metadata.reflection = S2STellBattleRoomFinishReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2STellBattleRoomFinishAck::kRoomidFieldNumber;
#endif  // !_MSC_VER

S2STellBattleRoomFinishAck::S2STellBattleRoomFinishAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2STellBattleRoomFinishAck::InitAsDefaultInstance() {
}

S2STellBattleRoomFinishAck::S2STellBattleRoomFinishAck(const S2STellBattleRoomFinishAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2STellBattleRoomFinishAck::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2STellBattleRoomFinishAck::~S2STellBattleRoomFinishAck() {
  SharedDtor();
}

void S2STellBattleRoomFinishAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2STellBattleRoomFinishAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2STellBattleRoomFinishAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2STellBattleRoomFinishAck_descriptor_;
}

const S2STellBattleRoomFinishAck& S2STellBattleRoomFinishAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2STellBattleRoomFinishAck* S2STellBattleRoomFinishAck::default_instance_ = NULL;

S2STellBattleRoomFinishAck* S2STellBattleRoomFinishAck::New() const {
  return new S2STellBattleRoomFinishAck;
}

void S2STellBattleRoomFinishAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2STellBattleRoomFinishAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2STellBattleRoomFinishAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2STellBattleRoomFinishAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2STellBattleRoomFinishAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2STellBattleRoomFinishAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2STellBattleRoomFinishAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2STellBattleRoomFinishAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2STellBattleRoomFinishAck::MergeFrom(const S2STellBattleRoomFinishAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2STellBattleRoomFinishAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2STellBattleRoomFinishAck::CopyFrom(const S2STellBattleRoomFinishAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2STellBattleRoomFinishAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2STellBattleRoomFinishAck::Swap(S2STellBattleRoomFinishAck* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2STellBattleRoomFinishAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2STellBattleRoomFinishAck_descriptor_;
  metadata.reflection = S2STellBattleRoomFinishAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SBattleRoomScoreBalanceReq::kRoomidFieldNumber;
const int S2SBattleRoomScoreBalanceReq::kBattleshardidFieldNumber;
const int S2SBattleRoomScoreBalanceReq::kPbscoreFieldNumber;
#endif  // !_MSC_VER

S2SBattleRoomScoreBalanceReq::S2SBattleRoomScoreBalanceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SBattleRoomScoreBalanceReq::InitAsDefaultInstance() {
  pbscore_ = const_cast< ::KFMsg::PBBattleScore*>(&::KFMsg::PBBattleScore::default_instance());
}

S2SBattleRoomScoreBalanceReq::S2SBattleRoomScoreBalanceReq(const S2SBattleRoomScoreBalanceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SBattleRoomScoreBalanceReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  battleshardid_ = 0u;
  pbscore_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SBattleRoomScoreBalanceReq::~S2SBattleRoomScoreBalanceReq() {
  SharedDtor();
}

void S2SBattleRoomScoreBalanceReq::SharedDtor() {
  if (this != default_instance_) {
    delete pbscore_;
  }
}

void S2SBattleRoomScoreBalanceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SBattleRoomScoreBalanceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SBattleRoomScoreBalanceReq_descriptor_;
}

const S2SBattleRoomScoreBalanceReq& S2SBattleRoomScoreBalanceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SBattleRoomScoreBalanceReq* S2SBattleRoomScoreBalanceReq::default_instance_ = NULL;

S2SBattleRoomScoreBalanceReq* S2SBattleRoomScoreBalanceReq::New() const {
  return new S2SBattleRoomScoreBalanceReq;
}

void S2SBattleRoomScoreBalanceReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
    battleshardid_ = 0u;
    if (has_pbscore()) {
      if (pbscore_ != NULL) pbscore_->::KFMsg::PBBattleScore::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SBattleRoomScoreBalanceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battleshardid;
        break;
      }

      // required uint32 battleshardid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleshardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleshardid_)));
          set_has_battleshardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pbscore;
        break;
      }

      // required .KFMsg.PBBattleScore pbscore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbscore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbscore()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SBattleRoomScoreBalanceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // required uint32 battleshardid = 2;
  if (has_battleshardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->battleshardid(), output);
  }

  // required .KFMsg.PBBattleScore pbscore = 3;
  if (has_pbscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pbscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SBattleRoomScoreBalanceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // required uint32 battleshardid = 2;
  if (has_battleshardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->battleshardid(), target);
  }

  // required .KFMsg.PBBattleScore pbscore = 3;
  if (has_pbscore()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pbscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SBattleRoomScoreBalanceReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 battleshardid = 2;
    if (has_battleshardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleshardid());
    }

    // required .KFMsg.PBBattleScore pbscore = 3;
    if (has_pbscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SBattleRoomScoreBalanceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SBattleRoomScoreBalanceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SBattleRoomScoreBalanceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SBattleRoomScoreBalanceReq::MergeFrom(const S2SBattleRoomScoreBalanceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_battleshardid()) {
      set_battleshardid(from.battleshardid());
    }
    if (from.has_pbscore()) {
      mutable_pbscore()->::KFMsg::PBBattleScore::MergeFrom(from.pbscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SBattleRoomScoreBalanceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SBattleRoomScoreBalanceReq::CopyFrom(const S2SBattleRoomScoreBalanceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SBattleRoomScoreBalanceReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_pbscore()) {
    if (!this->pbscore().IsInitialized()) return false;
  }
  return true;
}

void S2SBattleRoomScoreBalanceReq::Swap(S2SBattleRoomScoreBalanceReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(battleshardid_, other->battleshardid_);
    std::swap(pbscore_, other->pbscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SBattleRoomScoreBalanceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SBattleRoomScoreBalanceReq_descriptor_;
  metadata.reflection = S2SBattleRoomScoreBalanceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SBattleRoomScoreBalanceAck::kRoomidFieldNumber;
const int S2SBattleRoomScoreBalanceAck::kPlayeridFieldNumber;
const int S2SBattleRoomScoreBalanceAck::kRewardFieldNumber;
#endif  // !_MSC_VER

S2SBattleRoomScoreBalanceAck::S2SBattleRoomScoreBalanceAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SBattleRoomScoreBalanceAck::InitAsDefaultInstance() {
}

S2SBattleRoomScoreBalanceAck::S2SBattleRoomScoreBalanceAck(const S2SBattleRoomScoreBalanceAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SBattleRoomScoreBalanceAck::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  playerid_ = GOOGLE_ULONGLONG(0);
  reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SBattleRoomScoreBalanceAck::~S2SBattleRoomScoreBalanceAck() {
  SharedDtor();
}

void S2SBattleRoomScoreBalanceAck::SharedDtor() {
  if (reward_ != &::google::protobuf::internal::kEmptyString) {
    delete reward_;
  }
  if (this != default_instance_) {
  }
}

void S2SBattleRoomScoreBalanceAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SBattleRoomScoreBalanceAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SBattleRoomScoreBalanceAck_descriptor_;
}

const S2SBattleRoomScoreBalanceAck& S2SBattleRoomScoreBalanceAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SBattleRoomScoreBalanceAck* S2SBattleRoomScoreBalanceAck::default_instance_ = NULL;

S2SBattleRoomScoreBalanceAck* S2SBattleRoomScoreBalanceAck::New() const {
  return new S2SBattleRoomScoreBalanceAck;
}

void S2SBattleRoomScoreBalanceAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_reward()) {
      if (reward_ != &::google::protobuf::internal::kEmptyString) {
        reward_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SBattleRoomScoreBalanceAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint64 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward;
        break;
      }

      // required bytes reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SBattleRoomScoreBalanceAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // required uint64 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // required bytes reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SBattleRoomScoreBalanceAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // required uint64 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // required bytes reward = 3;
  if (has_reward()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SBattleRoomScoreBalanceAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint64 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // required bytes reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SBattleRoomScoreBalanceAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SBattleRoomScoreBalanceAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SBattleRoomScoreBalanceAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SBattleRoomScoreBalanceAck::MergeFrom(const S2SBattleRoomScoreBalanceAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SBattleRoomScoreBalanceAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SBattleRoomScoreBalanceAck::CopyFrom(const S2SBattleRoomScoreBalanceAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SBattleRoomScoreBalanceAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SBattleRoomScoreBalanceAck::Swap(S2SBattleRoomScoreBalanceAck* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(playerid_, other->playerid_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SBattleRoomScoreBalanceAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SBattleRoomScoreBalanceAck_descriptor_;
  metadata.reflection = S2SBattleRoomScoreBalanceAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SBattleScoreBalanceToShardReq::kRoomidFieldNumber;
const int S2SBattleScoreBalanceToShardReq::kPbscoreFieldNumber;
#endif  // !_MSC_VER

S2SBattleScoreBalanceToShardReq::S2SBattleScoreBalanceToShardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SBattleScoreBalanceToShardReq::InitAsDefaultInstance() {
  pbscore_ = const_cast< ::KFMsg::PBBattleScore*>(&::KFMsg::PBBattleScore::default_instance());
}

S2SBattleScoreBalanceToShardReq::S2SBattleScoreBalanceToShardReq(const S2SBattleScoreBalanceToShardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SBattleScoreBalanceToShardReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  pbscore_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SBattleScoreBalanceToShardReq::~S2SBattleScoreBalanceToShardReq() {
  SharedDtor();
}

void S2SBattleScoreBalanceToShardReq::SharedDtor() {
  if (this != default_instance_) {
    delete pbscore_;
  }
}

void S2SBattleScoreBalanceToShardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SBattleScoreBalanceToShardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SBattleScoreBalanceToShardReq_descriptor_;
}

const S2SBattleScoreBalanceToShardReq& S2SBattleScoreBalanceToShardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SBattleScoreBalanceToShardReq* S2SBattleScoreBalanceToShardReq::default_instance_ = NULL;

S2SBattleScoreBalanceToShardReq* S2SBattleScoreBalanceToShardReq::New() const {
  return new S2SBattleScoreBalanceToShardReq;
}

void S2SBattleScoreBalanceToShardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
    if (has_pbscore()) {
      if (pbscore_ != NULL) pbscore_->::KFMsg::PBBattleScore::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SBattleScoreBalanceToShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pbscore;
        break;
      }

      // required .KFMsg.PBBattleScore pbscore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbscore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbscore()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SBattleScoreBalanceToShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // required .KFMsg.PBBattleScore pbscore = 2;
  if (has_pbscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pbscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SBattleScoreBalanceToShardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // required .KFMsg.PBBattleScore pbscore = 2;
  if (has_pbscore()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pbscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SBattleScoreBalanceToShardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required .KFMsg.PBBattleScore pbscore = 2;
    if (has_pbscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SBattleScoreBalanceToShardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SBattleScoreBalanceToShardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SBattleScoreBalanceToShardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SBattleScoreBalanceToShardReq::MergeFrom(const S2SBattleScoreBalanceToShardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_pbscore()) {
      mutable_pbscore()->::KFMsg::PBBattleScore::MergeFrom(from.pbscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SBattleScoreBalanceToShardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SBattleScoreBalanceToShardReq::CopyFrom(const S2SBattleScoreBalanceToShardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SBattleScoreBalanceToShardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pbscore()) {
    if (!this->pbscore().IsInitialized()) return false;
  }
  return true;
}

void S2SBattleScoreBalanceToShardReq::Swap(S2SBattleScoreBalanceToShardReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(pbscore_, other->pbscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SBattleScoreBalanceToShardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SBattleScoreBalanceToShardReq_descriptor_;
  metadata.reflection = S2SBattleScoreBalanceToShardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SPlayerBattleScoreReq::kPlayeridFieldNumber;
const int S2SPlayerBattleScoreReq::kRoomidFieldNumber;
const int S2SPlayerBattleScoreReq::kPbscoreFieldNumber;
#endif  // !_MSC_VER

S2SPlayerBattleScoreReq::S2SPlayerBattleScoreReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SPlayerBattleScoreReq::InitAsDefaultInstance() {
  pbscore_ = const_cast< ::KFMsg::PBBattleScore*>(&::KFMsg::PBBattleScore::default_instance());
}

S2SPlayerBattleScoreReq::S2SPlayerBattleScoreReq(const S2SPlayerBattleScoreReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SPlayerBattleScoreReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  roomid_ = GOOGLE_ULONGLONG(0);
  pbscore_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SPlayerBattleScoreReq::~S2SPlayerBattleScoreReq() {
  SharedDtor();
}

void S2SPlayerBattleScoreReq::SharedDtor() {
  if (this != default_instance_) {
    delete pbscore_;
  }
}

void S2SPlayerBattleScoreReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SPlayerBattleScoreReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SPlayerBattleScoreReq_descriptor_;
}

const S2SPlayerBattleScoreReq& S2SPlayerBattleScoreReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SPlayerBattleScoreReq* S2SPlayerBattleScoreReq::default_instance_ = NULL;

S2SPlayerBattleScoreReq* S2SPlayerBattleScoreReq::New() const {
  return new S2SPlayerBattleScoreReq;
}

void S2SPlayerBattleScoreReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    roomid_ = GOOGLE_ULONGLONG(0);
    if (has_pbscore()) {
      if (pbscore_ != NULL) pbscore_->::KFMsg::PBBattleScore::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SPlayerBattleScoreReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // required uint64 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pbscore;
        break;
      }

      // required .KFMsg.PBBattleScore pbscore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pbscore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbscore()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SPlayerBattleScoreReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  // required .KFMsg.PBBattleScore pbscore = 3;
  if (has_pbscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pbscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SPlayerBattleScoreReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  // required .KFMsg.PBBattleScore pbscore = 3;
  if (has_pbscore()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pbscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SPlayerBattleScoreReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // required uint64 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required .KFMsg.PBBattleScore pbscore = 3;
    if (has_pbscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SPlayerBattleScoreReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SPlayerBattleScoreReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SPlayerBattleScoreReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SPlayerBattleScoreReq::MergeFrom(const S2SPlayerBattleScoreReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_pbscore()) {
      mutable_pbscore()->::KFMsg::PBBattleScore::MergeFrom(from.pbscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SPlayerBattleScoreReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SPlayerBattleScoreReq::CopyFrom(const S2SPlayerBattleScoreReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SPlayerBattleScoreReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_pbscore()) {
    if (!this->pbscore().IsInitialized()) return false;
  }
  return true;
}

void S2SPlayerBattleScoreReq::Swap(S2SPlayerBattleScoreReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(roomid_, other->roomid_);
    std::swap(pbscore_, other->pbscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SPlayerBattleScoreReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SPlayerBattleScoreReq_descriptor_;
  metadata.reflection = S2SPlayerBattleScoreReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SPlayerBattleScoreAck::kPlayeridFieldNumber;
const int S2SPlayerBattleScoreAck::kRoomidFieldNumber;
#endif  // !_MSC_VER

S2SPlayerBattleScoreAck::S2SPlayerBattleScoreAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SPlayerBattleScoreAck::InitAsDefaultInstance() {
}

S2SPlayerBattleScoreAck::S2SPlayerBattleScoreAck(const S2SPlayerBattleScoreAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SPlayerBattleScoreAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  roomid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SPlayerBattleScoreAck::~S2SPlayerBattleScoreAck() {
  SharedDtor();
}

void S2SPlayerBattleScoreAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SPlayerBattleScoreAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SPlayerBattleScoreAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SPlayerBattleScoreAck_descriptor_;
}

const S2SPlayerBattleScoreAck& S2SPlayerBattleScoreAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SPlayerBattleScoreAck* S2SPlayerBattleScoreAck::default_instance_ = NULL;

S2SPlayerBattleScoreAck* S2SPlayerBattleScoreAck::New() const {
  return new S2SPlayerBattleScoreAck;
}

void S2SPlayerBattleScoreAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    roomid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SPlayerBattleScoreAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // required uint64 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SPlayerBattleScoreAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SPlayerBattleScoreAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SPlayerBattleScoreAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // required uint64 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SPlayerBattleScoreAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SPlayerBattleScoreAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SPlayerBattleScoreAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SPlayerBattleScoreAck::MergeFrom(const S2SPlayerBattleScoreAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SPlayerBattleScoreAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SPlayerBattleScoreAck::CopyFrom(const S2SPlayerBattleScoreAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SPlayerBattleScoreAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SPlayerBattleScoreAck::Swap(S2SPlayerBattleScoreAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SPlayerBattleScoreAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SPlayerBattleScoreAck_descriptor_;
  metadata.reflection = S2SPlayerBattleScoreAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SOnlieQueryBattleScoreReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SOnlieQueryBattleScoreReq::S2SOnlieQueryBattleScoreReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SOnlieQueryBattleScoreReq::InitAsDefaultInstance() {
}

S2SOnlieQueryBattleScoreReq::S2SOnlieQueryBattleScoreReq(const S2SOnlieQueryBattleScoreReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SOnlieQueryBattleScoreReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SOnlieQueryBattleScoreReq::~S2SOnlieQueryBattleScoreReq() {
  SharedDtor();
}

void S2SOnlieQueryBattleScoreReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SOnlieQueryBattleScoreReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SOnlieQueryBattleScoreReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SOnlieQueryBattleScoreReq_descriptor_;
}

const S2SOnlieQueryBattleScoreReq& S2SOnlieQueryBattleScoreReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SOnlieQueryBattleScoreReq* S2SOnlieQueryBattleScoreReq::default_instance_ = NULL;

S2SOnlieQueryBattleScoreReq* S2SOnlieQueryBattleScoreReq::New() const {
  return new S2SOnlieQueryBattleScoreReq;
}

void S2SOnlieQueryBattleScoreReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SOnlieQueryBattleScoreReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SOnlieQueryBattleScoreReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SOnlieQueryBattleScoreReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SOnlieQueryBattleScoreReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SOnlieQueryBattleScoreReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SOnlieQueryBattleScoreReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SOnlieQueryBattleScoreReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SOnlieQueryBattleScoreReq::MergeFrom(const S2SOnlieQueryBattleScoreReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SOnlieQueryBattleScoreReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SOnlieQueryBattleScoreReq::CopyFrom(const S2SOnlieQueryBattleScoreReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SOnlieQueryBattleScoreReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2SOnlieQueryBattleScoreReq::Swap(S2SOnlieQueryBattleScoreReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SOnlieQueryBattleScoreReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SOnlieQueryBattleScoreReq_descriptor_;
  metadata.reflection = S2SOnlieQueryBattleScoreReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2STellRoomFinishToBattleShardReq::kRoomidFieldNumber;
const int S2STellRoomFinishToBattleShardReq::kServeridFieldNumber;
const int S2STellRoomFinishToBattleShardReq::kIpFieldNumber;
#endif  // !_MSC_VER

S2STellRoomFinishToBattleShardReq::S2STellRoomFinishToBattleShardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2STellRoomFinishToBattleShardReq::InitAsDefaultInstance() {
}

S2STellRoomFinishToBattleShardReq::S2STellRoomFinishToBattleShardReq(const S2STellRoomFinishToBattleShardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2STellRoomFinishToBattleShardReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  serverid_ = GOOGLE_ULONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2STellRoomFinishToBattleShardReq::~S2STellRoomFinishToBattleShardReq() {
  SharedDtor();
}

void S2STellRoomFinishToBattleShardReq::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void S2STellRoomFinishToBattleShardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2STellRoomFinishToBattleShardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2STellRoomFinishToBattleShardReq_descriptor_;
}

const S2STellRoomFinishToBattleShardReq& S2STellRoomFinishToBattleShardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2STellRoomFinishToBattleShardReq* S2STellRoomFinishToBattleShardReq::default_instance_ = NULL;

S2STellRoomFinishToBattleShardReq* S2STellRoomFinishToBattleShardReq::New() const {
  return new S2STellRoomFinishToBattleShardReq;
}

void S2STellRoomFinishToBattleShardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
    serverid_ = GOOGLE_ULONGLONG(0);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2STellRoomFinishToBattleShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required uint64 serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // required bytes ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2STellRoomFinishToBattleShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // required uint64 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->serverid(), output);
  }

  // required bytes ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->ip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2STellRoomFinishToBattleShardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // required uint64 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->serverid(), target);
  }

  // required bytes ip = 3;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2STellRoomFinishToBattleShardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint64 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->serverid());
    }

    // required bytes ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2STellRoomFinishToBattleShardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2STellRoomFinishToBattleShardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2STellRoomFinishToBattleShardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2STellRoomFinishToBattleShardReq::MergeFrom(const S2STellRoomFinishToBattleShardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2STellRoomFinishToBattleShardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2STellRoomFinishToBattleShardReq::CopyFrom(const S2STellRoomFinishToBattleShardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2STellRoomFinishToBattleShardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2STellRoomFinishToBattleShardReq::Swap(S2STellRoomFinishToBattleShardReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(serverid_, other->serverid_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2STellRoomFinishToBattleShardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2STellRoomFinishToBattleShardReq_descriptor_;
  metadata.reflection = S2STellRoomFinishToBattleShardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2STellRoomCloseToMatchShardReq::kMatchidFieldNumber;
const int S2STellRoomCloseToMatchShardReq::kRoomidFieldNumber;
#endif  // !_MSC_VER

S2STellRoomCloseToMatchShardReq::S2STellRoomCloseToMatchShardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2STellRoomCloseToMatchShardReq::InitAsDefaultInstance() {
}

S2STellRoomCloseToMatchShardReq::S2STellRoomCloseToMatchShardReq(const S2STellRoomCloseToMatchShardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2STellRoomCloseToMatchShardReq::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = GOOGLE_ULONGLONG(0);
  roomid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2STellRoomCloseToMatchShardReq::~S2STellRoomCloseToMatchShardReq() {
  SharedDtor();
}

void S2STellRoomCloseToMatchShardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2STellRoomCloseToMatchShardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2STellRoomCloseToMatchShardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2STellRoomCloseToMatchShardReq_descriptor_;
}

const S2STellRoomCloseToMatchShardReq& S2STellRoomCloseToMatchShardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2STellRoomCloseToMatchShardReq* S2STellRoomCloseToMatchShardReq::default_instance_ = NULL;

S2STellRoomCloseToMatchShardReq* S2STellRoomCloseToMatchShardReq::New() const {
  return new S2STellRoomCloseToMatchShardReq;
}

void S2STellRoomCloseToMatchShardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = GOOGLE_ULONGLONG(0);
    roomid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2STellRoomCloseToMatchShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // required uint64 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2STellRoomCloseToMatchShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->matchid(), output);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2STellRoomCloseToMatchShardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->matchid(), target);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2STellRoomCloseToMatchShardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->matchid());
    }

    // required uint64 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2STellRoomCloseToMatchShardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2STellRoomCloseToMatchShardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2STellRoomCloseToMatchShardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2STellRoomCloseToMatchShardReq::MergeFrom(const S2STellRoomCloseToMatchShardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2STellRoomCloseToMatchShardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2STellRoomCloseToMatchShardReq::CopyFrom(const S2STellRoomCloseToMatchShardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2STellRoomCloseToMatchShardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2STellRoomCloseToMatchShardReq::Swap(S2STellRoomCloseToMatchShardReq* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2STellRoomCloseToMatchShardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2STellRoomCloseToMatchShardReq_descriptor_;
  metadata.reflection = S2STellRoomCloseToMatchShardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SResetBattleRoomReq::kRoomidFieldNumber;
#endif  // !_MSC_VER

S2SResetBattleRoomReq::S2SResetBattleRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SResetBattleRoomReq::InitAsDefaultInstance() {
}

S2SResetBattleRoomReq::S2SResetBattleRoomReq(const S2SResetBattleRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SResetBattleRoomReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SResetBattleRoomReq::~S2SResetBattleRoomReq() {
  SharedDtor();
}

void S2SResetBattleRoomReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SResetBattleRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SResetBattleRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SResetBattleRoomReq_descriptor_;
}

const S2SResetBattleRoomReq& S2SResetBattleRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFBattleMessage_2eproto();
  return *default_instance_;
}

S2SResetBattleRoomReq* S2SResetBattleRoomReq::default_instance_ = NULL;

S2SResetBattleRoomReq* S2SResetBattleRoomReq::New() const {
  return new S2SResetBattleRoomReq;
}

void S2SResetBattleRoomReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SResetBattleRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SResetBattleRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SResetBattleRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SResetBattleRoomReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SResetBattleRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SResetBattleRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SResetBattleRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SResetBattleRoomReq::MergeFrom(const S2SResetBattleRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SResetBattleRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SResetBattleRoomReq::CopyFrom(const S2SResetBattleRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SResetBattleRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void S2SResetBattleRoomReq::Swap(S2SResetBattleRoomReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SResetBattleRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SResetBattleRoomReq_descriptor_;
  metadata.reflection = S2SResetBattleRoomReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

// @@protoc_insertion_point(global_scope)
