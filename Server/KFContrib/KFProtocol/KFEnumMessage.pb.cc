// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFEnumMessage.proto

#include "KFEnumMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace KFMsg {
}  // namespace KFMsg
namespace protobuf_KFEnumMessage_2eproto {
void InitDefaults() {
}

const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[14];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "KFEnumMessage.proto", schemas, file_default_instances, TableStruct::offsets,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023KFEnumMessage.proto\022\005KFMsg*E\n\013ChannelE"
      "num\022\021\n\rUnknowChannel\020\000\022\014\n\010Internal\020\001\022\n\n\006"
      "WeiXin\020\002\022\t\n\005Steam\020\003*.\n\007SexEnum\022\r\n\tUnknow"
      "Sex\020\000\022\010\n\004Male\020\001\022\n\n\006Female\020\002*\?\n\010KickEnum\022"
      "\016\n\nUnknowKick\020\000\022\017\n\013LoginBeKick\020\001\022\022\n\016Plat"
      "formBeKick\020\002*K\n\010FlagEnum\022\010\n\004Init\020\000\022\010\n\004Do"
      "ne\020\001\022\014\n\010Received\020\002\022\n\n\006Remove\020\003\022\021\n\rReceiv"
      "eRemove\020\004*G\n\010MailEnum\022\016\n\nUnknowMail\020\000\022\r\n"
      "\tWholeMail\020\001\022\016\n\nFriendMail\020\002\022\014\n\010GiftMail"
      "\020\003*x\n\nStatusEnum\022\020\n\014UnknowStatus\020\000\022\020\n\014On"
      "lineStatus\020\001\022\017\n\013GroupStatus\020\002\022\017\n\013MatchSt"
      "atus\020\003\022\021\n\rPlayingStatus\020\004\022\021\n\rOfflineStat"
      "us\020\005*U\n\nInviteEnum\022\020\n\014UnknowInvite\020\000\022\013\n\007"
      "Consent\020\001\022\n\n\006Refuse\020\002\022\n\n\006Delete\020\003\022\020\n\014Ref"
      "useMinute\020\004*>\n\rStoreWishEnum\022\017\n\013UnknowSt"
      "ore\020\000\022\007\n\003Add\020\001\022\007\n\003Del\020\002\022\n\n\006Modify\020\003*L\n\rW"
      "ishStateEnum\022\014\n\010AllWatch\020\000\022\r\n\tNoneWatch\020"
      "\001\022\017\n\013FriendWatch\020\002\022\r\n\tTeamWatch\020\003*L\n\020Fri"
      "endLinessEnum\022\020\n\014UnKnowFriend\020\000\022\010\n\004Team\020"
      "\001\022\007\n\003Win\020\002\022\t\n\005Toast\020\003\022\010\n\004Give\020\004*:\n\tGuild"
      "Enum\022\017\n\013UnKnowGuild\020\000\022\r\n\tJoinGuild\020\001\022\r\n\t"
      "ExitGuild\020\002*I\n\017GuildReviewEnum\022\025\n\021Unknow"
      "GuildReview\020\000\022\016\n\nAgreeApply\020\001\022\017\n\013RefuseA"
      "pply\020\002*\?\n\nBattleEnum\022\020\n\014BattleUnknow\020\000\022\017"
      "\n\013OpenSuccess\020\001\022\016\n\nOpenFailed\020\002*\341!\n\010Code"
      "Enum\022\t\n\005Error\020\000\022\006\n\002Ok\020\001\022\r\n\tSignError\020\002\022\017"
      "\n\013WeiXinError\020\003\022\023\n\017WeiXinCodeError\020\004\022\026\n\022"
      "WeiXinTokenTimeout\020\005\022\024\n\020WeiXinTokenError"
      "\020\006\022\023\n\017WeiXinUserError\020\007\022\020\n\014ChannelError\020"
      "\010\022\022\n\016ChannelNotOpen\020\t\022\023\n\017WorldSystemBusy"
      "\020\n\022\023\n\017LoginSystemBusy\020\013\022\023\n\017CanNotFindPro"
      "xy\020\014\022\022\n\016AuthServerBusy\020\r\022\024\n\020AuthDatabase"
      "Busy\020\016\022\022\n\016CanNotFindGame\020\017\022\023\n\017LoginToken"
      "Error\020\020\022\021\n\rHttpDataError\020\022\022\026\n\022LoginDatab"
      "aseError\020\023\022\024\n\017RouteServerBusy\020\221N\022\025\n\020Name"
      "DatabaseBusy\020\222N\022\024\n\016LoadDataFailed\020\241\234\001\022\027\n"
      "\021QueryPlayerFailed\020\242\234\001\022\017\n\tNameEmpty\020\205\235\001\022"
      "\024\n\016NameAlreadySet\020\206\235\001\022\026\n\020NameAlreadyExis"
      "t\020\207\235\001\022\017\n\tNameSetOK\020\210\235\001\022\025\n\017NameLengthErro"
      "r\020\211\235\001\022\025\n\017NameFilterError\020\212\235\001\022\016\n\010SexSetOK"
      "\020\213\235\001\022\022\n\014ChangeIconOK\020\214\235\001\022\024\n\020ZoneDatabase"
      "Busy\020\024\022\027\n\023PublicDatabaseError\020\030\022\022\n\016Accou"
      "ntIsEmpty\020\032\022\025\n\021CreateRoleAlready\020\033\022\020\n\014Cr"
      "eateRoleOK\020\034\022\026\n\022LoginAlreadyOnline\020\035\022\021\n\r"
      "ChangeMottoOK\020 \022\023\n\017ModuleIdNotFind\020!\022\025\n\021"
      "SetModelClothesOK\020\"\022\023\n\017ChangeIconBoxOK\020#"
      "\022\022\n\016DataSystemBusy\020$\022\025\n\021ActivationAccoun"
      "t\020%\022\027\n\023ActivationCodeError\020&\022\027\n\023LoginCan"
      "NotFindGate\020\'\022\024\n\020TaskIdCanNotFind\020(\022\026\n\022T"
      "askNotInValidTime\020)\022\024\n\020CanNotFindPlayer\020"
      "*\022\026\n\022CanNotFindTaskData\020+\022\017\n\013TaskNotDone"
      "\020,\022\027\n\023TaskAlreadyReceived\020-\022\027\n\023TaskRecei"
      "veRewardOK\020.\022\025\n\021CanNotInquireSelf\020/\022\030\n\024A"
      "ctivityIdCanNotFind\0200\022\032\n\026CanNotFindActiv"
      "ityType\0201\022\033\n\027ActivityAlreadyReceived\0202\022\023"
      "\n\017ActivityNotDone\0203\022\033\n\027ActivityReceiveRe"
      "wardOK\0204\022\027\n\023AchieveIdCanNotFind\0205\022\031\n\025Can"
      "NotFindAchieveData\0206\022\032\n\026AchieveAlreadyRe"
      "ceived\0207\022\022\n\016AchieveNotDone\0208\022\032\n\026AchieveR"
      "eceiveRewardOK\0209\022\021\n\rReceiveGiftOK\020:\022\025\n\021R"
      "eceiveGiftFailed\020;\022\020\n\014MailNotExist\020<\022\027\n\023"
      "MailAlreadyReceived\020=\022\025\n\021MailNotHaveRewa"
      "rd\020>\022\024\n\020MailDeleteFailed\020\?\022\017\n\013MailTimeOu"
      "t\020@\022\026\n\022ToastSendCountOver\020A\022\025\n\021ToastCanN"
      "otRepeat\020B\022\025\n\021ToastGetCountOver\020C\022\017\n\013Toa"
      "stFailed\020D\022\013\n\007ToastOK\020E\022\024\n\020MatchAlreadyW"
      "ait\020F\022\024\n\020MatchClusterBusy\020G\022\031\n\025MatchCanN"
      "otFindServer\020H\022\030\n\024MatchCanNotFindMatch\020I"
      "\022\031\n\025MatchGroupPlayerLimit\020J\022\027\n\023MatchRequ"
      "estSuccess\020K\022\026\n\022MatchCancelSuccess\020L\022\022\n\016"
      "FriendInviteOK\020M\022\026\n\022FriendRefuseInvite\020N"
      "\022\025\n\021FriendTargetLimit\020O\022\023\n\017FriendSelfLim"
      "it\020P\022\021\n\rFriendAlready\020Q\022\022\n\016FriendNotExis"
      "t\020R\022\017\n\013FriendDelOK\020S\022\025\n\021FriendInviteLimi"
      "t\020T\022\030\n\024FriendInviteNotExist\020U\022\023\n\017MatchNo"
      "tInMatch\020V\022\027\n\023FriendInviteAlready\020W\022\024\n\020M"
      "atchMustPrepare\020X\022\023\n\017StoreParamError\020Y\022\021"
      "\n\rStoreLackCost\020Z\022\024\n\020StoreOutOfLimits\020[\022"
      "\026\n\022StoreOutOfLimitOwm\020\\\022\027\n\023StoreOutOfLim"
      "itDate\020]\022\022\n\016WishOrderEmpty\020^\022\024\n\020WishOrde"
      "rNoExist\020_\022\026\n\022WishOrderNoStoreId\020`\022\027\n\023Wi"
      "shOrderHadStoreId\020a\022\024\n\020WishOrderMaxSize\020"
      "b\022\033\n\027WishOrderStateRepeatSet\020c\022\020\n\014GiveLa"
      "ckCost\020d\022\023\n\017ClothesNotExist\020e\022\024\n\020Clothes"
      "DataError\020f\022\030\n\024ClothesModleNotMatch\020g\022\022\n"
      "\016ClothesDressOK\020h\022\021\n\rModelNotExist\020i\022\021\n\r"
      "ModelChangeOK\020j\022\023\n\017ChatByteTooLong\020k\022\025\n\021"
      "ChatNotFindPlayer\020l\022\025\n\021ChatIntervalError"
      "\020m\022\025\n\021ChatFriendIdError\020n\022\026\n\022InviteMatch"
      "GroupOK\020o\022\020\n\014GroupLeaveOK\020p\022\025\n\021GroupMemb"
      "erIsFull\020q\022\023\n\017GroupServerBusy\020r\022\027\n\023Group"
      "InviteNotExist\020s\022\027\n\023GroupCanNotKickSelf\020"
      "t\022\020\n\014GroupInGroup\020u\022\026\n\022GroupApplyNotExis"
      "t\020v\022\023\n\017GroupNotInGroup\020w\022\020\n\014ItemNotExist"
      "\020x\022\021\n\rItemDataError\020y\022\021\n\rItemCanNotUse\020z"
      "\022\021\n\rGroupNotExist\020{\022\016\n\nStoreBuyOK\020|\022\r\n\tG"
      "iveBuyOK\020}\022\026\n\022GroupPlayerOffline\020~\022\027\n\023Gr"
      "oupAlreadyInGroup\020\177\022\026\n\021GroupRefuseInvite"
      "\020\200\001\022\032\n\025GroupRefuseYourInvite\020\201\001\022\025\n\020Group"
      "MemberLeave\020\202\001\022\025\n\020GroupRefuseApply\020\203\001\022\030\n"
      "\023GroupCaptainOffline\020\204\001\022\023\n\016GroupNoCaptio"
      "n\020\205\001\022\024\n\017GroupNotCaption\020\206\001\022\025\n\020FriendServ"
      "erBusy\020\207\001\022\033\n\026FriendRefuseYourInvite\020\210\001\022\020"
      "\n\013FriendAddOK\020\211\001\022\024\n\017FriendInviteReq\020\212\001\022\020"
      "\n\013GroupJoinOK\020\213\001\022\024\n\017GroupMemberJoin\020\214\001\022\026"
      "\n\021GroupIsNewCaption\020\215\001\022\024\n\017FriendLinessAd"
      "d\020\216\001\022\031\n\024FriendLinessAddLimit\020\217\001\022\035\n\030Frien"
      "dLinessAddByWinGame\020\220\001\022\031\n\024FriendLinessMa"
      "xLimit\020\221\001\022\032\n\025WishPanelAddSuccessed\020\222\001\022\027\n"
      "\022GroupInviteInMatch\020\223\001\022\026\n\021GroupApplyInMa"
      "tch\020\224\001\022\027\n\022GroupInviteTimeOut\020\225\001\022\032\n\025Group"
      "InviteMatchError\020\226\001\022\026\n\021GroupApplyTimeOut"
      "\020\227\001\022\026\n\021OperateFrequently\020\230\001\022\022\n\rDataNotEn"
      "ough\020\231\001\022\025\n\020CompoundNotExist\020\232\001\022\021\n\014LoginI"
      "sClose\020\233\001\022\021\n\014RankNotExist\020\234\001\022\023\n\016RankServ"
      "erBusy\020\235\001\022\021\n\014SignInNotDay\020\241\001\022\024\n\017SignInDa"
      "taError\020\242\001\022\030\n\023SignInRewardAlready\020\243\001\022\023\n\016"
      "ZoneServerBusy\020\244\001\022\027\n\022GroupTargetInMatch\020"
      "\245\001\022\021\n\014GroupInMatch\020\246\001\022\025\n\020GroupKickInMatc"
      "h\020\247\001\022\026\n\021GroupLeaveInMatch\020\250\001\022\030\n\023MatchCan"
      "celInBattle\020\251\001\022\023\n\016MailServerBusy\020\252\001\022\031\n\024R"
      "elationDatabaseBusy\020\253\001\022\017\n\nSteamError\020\255\001\022"
      "\023\n\016SteamDataError\020\256\001\022\023\n\016SteamAuthError\020\257"
      "\001\022\032\n\025InvalidActivationCode\020\260\001\022\030\n\023CanNotF"
      "indLoginNode\020\261\001\022\026\n\021ChannelNotSupport\020\262\001\022"
      "\020\n\013HaveNotIcon\020\263\001\022\032\n\025QueryInviteScoreErr"
      "or\020\264\001\022\027\n\022PlatformServerBusy\020\265\001\022\021\n\014BindAl"
      "ipayOk\020\266\001\022\025\n\020BindAlipayFailed\020\267\001\022\035\n\030Exch"
      "angeInviteScoreError\020\270\001\022\036\n\031ExchangeInvit"
      "eRecordError\020\271\001\022\034\n\027VersionNotCompatibili"
      "ty\020\272\001\022\033\n\026BattleNotCompatibility\020\273\001\022\025\n\020Ba"
      "ttleNotPrepare\020\274\001\022\023\n\016BanForbidLogin\020\275\001\022\022"
      "\n\rTitleNotExist\020\276\001\022\017\n\nServerBusy\020\350\007b\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5323);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KFEnumMessage.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_KFEnumMessage_2eproto
namespace KFMsg {
const ::google::protobuf::EnumDescriptor* ChannelEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[0];
}
bool ChannelEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SexEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[1];
}
bool SexEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* KickEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[2];
}
bool KickEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FlagEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[3];
}
bool FlagEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MailEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[4];
}
bool MailEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StatusEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[5];
}
bool StatusEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* InviteEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[6];
}
bool InviteEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StoreWishEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[7];
}
bool StoreWishEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WishStateEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[8];
}
bool WishStateEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FriendLinessEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[9];
}
bool FriendLinessEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GuildEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[10];
}
bool GuildEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GuildReviewEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[11];
}
bool GuildReviewEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BattleEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[12];
}
bool BattleEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CodeEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[13];
}
bool CodeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 18:
    case 19:
    case 20:
    case 24:
    case 26:
    case 27:
    case 28:
    case 29:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 1000:
    case 10001:
    case 10002:
    case 20001:
    case 20002:
    case 20101:
    case 20102:
    case 20103:
    case 20104:
    case 20105:
    case 20106:
    case 20107:
    case 20108:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace KFMsg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
