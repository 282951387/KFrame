// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFEnumMessage.proto

#include "KFEnumMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace KFMsg {
}  // namespace KFMsg
namespace protobuf_KFEnumMessage_2eproto {
void InitDefaults() {
}

const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[13];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "KFEnumMessage.proto", schemas, file_default_instances, TableStruct::offsets,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023KFEnumMessage.proto\022\005KFMsg*E\n\013ChannelE"
      "num\022\021\n\rUnknowChannel\020\000\022\014\n\010Internal\020\001\022\n\n\006"
      "WeiXin\020\002\022\t\n\005Steam\020\003*.\n\007SexEnum\022\r\n\tUnknow"
      "Sex\020\000\022\010\n\004Male\020\001\022\n\n\006Female\020\002*\?\n\010KickEnum\022"
      "\016\n\nUnknowKick\020\000\022\017\n\013LoginBeKick\020\001\022\022\n\016Plat"
      "formBeKick\020\002*^\n\nStatusEnum\022\016\n\nInitStatus"
      "\020\000\022\016\n\nDoneStatus\020\001\022\021\n\rReceiveStatus\020\002\022\n\n"
      "\006Remove\020\003\022\021\n\rReceiveRemove\020\004*:\n\010MailEnum"
      "\022\016\n\nUnknowMail\020\000\022\016\n\nGlobalMail\020\001\022\016\n\nPers"
      "onMail\020\002*w\n\tStateEnum\022\020\n\014UnknowStatus\020\000\022"
      "\020\n\014OnlineStatus\020\001\022\017\n\013GroupStatus\020\002\022\017\n\013Ma"
      "tchStatus\020\003\022\021\n\rPlayingStatus\020\004\022\021\n\rOfflin"
      "eStatus\020\005*U\n\nInviteEnum\022\020\n\014UnknowInvite\020"
      "\000\022\013\n\007Consent\020\001\022\n\n\006Refuse\020\002\022\n\n\006Delete\020\003\022\020"
      "\n\014RefuseMinute\020\004*L\n\rWishStateEnum\022\014\n\010All"
      "Watch\020\000\022\r\n\tNoneWatch\020\001\022\017\n\013FriendWatch\020\002\022"
      "\r\n\tTeamWatch\020\003*L\n\020FriendLinessEnum\022\020\n\014Un"
      "KnowFriend\020\000\022\010\n\004Team\020\001\022\007\n\003Win\020\002\022\t\n\005Toast"
      "\020\003\022\010\n\004Give\020\004*:\n\tGuildEnum\022\017\n\013UnKnowGuild"
      "\020\000\022\r\n\tJoinGuild\020\001\022\r\n\tExitGuild\020\002*I\n\017Guil"
      "dReviewEnum\022\025\n\021UnknowGuildReview\020\000\022\016\n\nAg"
      "reeApply\020\001\022\017\n\013RefuseApply\020\002*\?\n\nBattleEnu"
      "m\022\020\n\014BattleUnknow\020\000\022\017\n\013OpenSuccess\020\001\022\016\n\n"
      "OpenFailed\020\002*\303\"\n\010CodeEnum\022\t\n\005Error\020\000\022\006\n\002"
      "Ok\020\001\022\r\n\tSignError\020\002\022\017\n\013WeiXinError\020\003\022\023\n\017"
      "WeiXinCodeError\020\004\022\026\n\022WeiXinTokenTimeout\020"
      "\005\022\024\n\020WeiXinTokenError\020\006\022\023\n\017WeiXinUserErr"
      "or\020\007\022\020\n\014ChannelError\020\010\022\022\n\016ChannelNotOpen"
      "\020\t\022\023\n\017WorldSystemBusy\020\n\022\023\n\017LoginSystemBu"
      "sy\020\013\022\023\n\017CanNotFindProxy\020\014\022\022\n\016AuthServerB"
      "usy\020\r\022\024\n\020AuthDatabaseBusy\020\016\022\022\n\016CanNotFin"
      "dGame\020\017\022\023\n\017LoginTokenError\020\020\022\021\n\rHttpData"
      "Error\020\022\022\026\n\022LoginDatabaseError\020\023\022\024\n\017Route"
      "ServerBusy\020\221N\022\025\n\020NameDatabaseBusy\020\222N\022\024\n\016"
      "LoadDataFailed\020\241\234\001\022\027\n\021QueryPlayerFailed\020"
      "\242\234\001\022\017\n\tNameEmpty\020\205\235\001\022\024\n\016NameAlreadySet\020\206"
      "\235\001\022\026\n\020NameAlreadyExist\020\207\235\001\022\017\n\tNameSetOK\020"
      "\210\235\001\022\025\n\017NameLengthError\020\211\235\001\022\025\n\017NameFilter"
      "Error\020\212\235\001\022\016\n\010SexSetOK\020\213\235\001\022\022\n\014ChangeIconO"
      "K\020\214\235\001\022\022\n\014MailNotExist\020\350\235\001\022\031\n\023MailAlready"
      "Received\020\351\235\001\022\027\n\021MailNotHaveReward\020\352\235\001\022\026\n"
      "\020MailDeleteFailed\020\354\235\001\022\021\n\013MailTimeOut\020\355\235\001"
      "\022\026\n\020TaskIdCanNotFind\020\315\236\001\022\030\n\022TaskNotInVal"
      "idTime\020\316\236\001\022\030\n\022CanNotFindTaskData\020\317\236\001\022\021\n\013"
      "TaskNotDone\020\320\236\001\022\031\n\023TaskAlreadyReceived\020\321"
      "\236\001\022\031\n\023TaskReceiveRewardOK\020\322\236\001\022\031\n\023Achieve"
      "IdCanNotFind\020\261\237\001\022\033\n\025CanNotFindAchieveDat"
      "a\020\262\237\001\022\034\n\026AchieveAlreadyReceived\020\263\237\001\022\024\n\016A"
      "chieveNotDone\020\264\237\001\022\034\n\026AchieveReceiveRewar"
      "dOK\020\265\237\001\022\022\n\014StoreNotFind\020\225\240\001\022\030\n\022StoreOutO"
      "fLimitOwm\020\226\240\001\022\027\n\021StoreBuyTypeError\020\227\240\001\022\023"
      "\n\rStoreLackCost\020\230\240\001\022\026\n\020StoreOutOfLimits\020"
      "\231\240\001\022\030\n\022StoreBuyCountError\020\232\240\001\022\033\n\025Compoun"
      "dDataNotEnough\020\371\240\001\022\026\n\020CompoundNotExist\020\372"
      "\240\001\022\024\n\020ZoneDatabaseBusy\020\024\022\027\n\023PublicDataba"
      "seError\020\030\022\022\n\016AccountIsEmpty\020\032\022\025\n\021CreateR"
      "oleAlready\020\033\022\020\n\014CreateRoleOK\020\034\022\026\n\022LoginA"
      "lreadyOnline\020\035\022\021\n\rChangeMottoOK\020 \022\023\n\017Mod"
      "uleIdNotFind\020!\022\025\n\021SetModelClothesOK\020\"\022\023\n"
      "\017ChangeIconBoxOK\020#\022\022\n\016DataSystemBusy\020$\022\025"
      "\n\021ActivationAccount\020%\022\027\n\023ActivationCodeE"
      "rror\020&\022\027\n\023LoginCanNotFindGate\020\'\022\024\n\020CanNo"
      "tFindPlayer\020*\022\025\n\021CanNotInquireSelf\020/\022\030\n\024"
      "ActivityIdCanNotFind\0200\022\032\n\026CanNotFindActi"
      "vityType\0201\022\033\n\027ActivityAlreadyReceived\0202\022"
      "\023\n\017ActivityNotDone\0203\022\033\n\027ActivityReceiveR"
      "ewardOK\0204\022\021\n\rReceiveGiftOK\020:\022\025\n\021ReceiveG"
      "iftFailed\020;\022\026\n\022ToastSendCountOver\020A\022\025\n\021T"
      "oastCanNotRepeat\020B\022\025\n\021ToastGetCountOver\020"
      "C\022\017\n\013ToastFailed\020D\022\013\n\007ToastOK\020E\022\024\n\020Match"
      "AlreadyWait\020F\022\024\n\020MatchClusterBusy\020G\022\031\n\025M"
      "atchCanNotFindServer\020H\022\030\n\024MatchCanNotFin"
      "dMatch\020I\022\031\n\025MatchGroupPlayerLimit\020J\022\027\n\023M"
      "atchRequestSuccess\020K\022\026\n\022MatchCancelSucce"
      "ss\020L\022\022\n\016FriendInviteOK\020M\022\026\n\022FriendRefuse"
      "Invite\020N\022\025\n\021FriendTargetLimit\020O\022\023\n\017Frien"
      "dSelfLimit\020P\022\021\n\rFriendAlready\020Q\022\022\n\016Frien"
      "dNotExist\020R\022\017\n\013FriendDelOK\020S\022\025\n\021FriendIn"
      "viteLimit\020T\022\030\n\024FriendInviteNotExist\020U\022\023\n"
      "\017MatchNotInMatch\020V\022\027\n\023FriendInviteAlread"
      "y\020W\022\024\n\020MatchMustPrepare\020X\022\027\n\023StoreOutOfL"
      "imitDate\020]\022\022\n\016WishOrderEmpty\020^\022\024\n\020WishOr"
      "derNoExist\020_\022\026\n\022WishOrderNoStoreId\020`\022\027\n\023"
      "WishOrderHadStoreId\020a\022\024\n\020WishOrderMaxSiz"
      "e\020b\022\033\n\027WishOrderStateRepeatSet\020c\022\020\n\014Give"
      "LackCost\020d\022\023\n\017ClothesNotExist\020e\022\024\n\020Cloth"
      "esDataError\020f\022\030\n\024ClothesModleNotMatch\020g\022"
      "\022\n\016ClothesDressOK\020h\022\021\n\rModelNotExist\020i\022\021"
      "\n\rModelChangeOK\020j\022\023\n\017ChatByteTooLong\020k\022\025"
      "\n\021ChatNotFindPlayer\020l\022\025\n\021ChatIntervalErr"
      "or\020m\022\025\n\021ChatFriendIdError\020n\022\026\n\022InviteMat"
      "chGroupOK\020o\022\020\n\014GroupLeaveOK\020p\022\025\n\021GroupMe"
      "mberIsFull\020q\022\023\n\017GroupServerBusy\020r\022\027\n\023Gro"
      "upInviteNotExist\020s\022\027\n\023GroupCanNotKickSel"
      "f\020t\022\020\n\014GroupInGroup\020u\022\026\n\022GroupApplyNotEx"
      "ist\020v\022\023\n\017GroupNotInGroup\020w\022\020\n\014ItemNotExi"
      "st\020x\022\021\n\rItemDataError\020y\022\021\n\rItemCanNotUse"
      "\020z\022\021\n\rGroupNotExist\020{\022\016\n\nStoreBuyOK\020|\022\r\n"
      "\tGiveBuyOK\020}\022\026\n\022GroupPlayerOffline\020~\022\027\n\023"
      "GroupAlreadyInGroup\020\177\022\026\n\021GroupRefuseInvi"
      "te\020\200\001\022\032\n\025GroupRefuseYourInvite\020\201\001\022\025\n\020Gro"
      "upMemberLeave\020\202\001\022\025\n\020GroupRefuseApply\020\203\001\022"
      "\030\n\023GroupCaptainOffline\020\204\001\022\023\n\016GroupNoCapt"
      "ion\020\205\001\022\024\n\017GroupNotCaption\020\206\001\022\025\n\020FriendSe"
      "rverBusy\020\207\001\022\033\n\026FriendRefuseYourInvite\020\210\001"
      "\022\020\n\013FriendAddOK\020\211\001\022\024\n\017FriendInviteReq\020\212\001"
      "\022\020\n\013GroupJoinOK\020\213\001\022\024\n\017GroupMemberJoin\020\214\001"
      "\022\026\n\021GroupIsNewCaption\020\215\001\022\024\n\017FriendLiness"
      "Add\020\216\001\022\031\n\024FriendLinessAddLimit\020\217\001\022\035\n\030Fri"
      "endLinessAddByWinGame\020\220\001\022\031\n\024FriendLiness"
      "MaxLimit\020\221\001\022\032\n\025WishPanelAddSuccessed\020\222\001\022"
      "\027\n\022GroupInviteInMatch\020\223\001\022\026\n\021GroupApplyIn"
      "Match\020\224\001\022\027\n\022GroupInviteTimeOut\020\225\001\022\032\n\025Gro"
      "upInviteMatchError\020\226\001\022\026\n\021GroupApplyTimeO"
      "ut\020\227\001\022\026\n\021OperateFrequently\020\230\001\022\021\n\014LoginIs"
      "Close\020\233\001\022\021\n\014RankNotExist\020\234\001\022\023\n\016RankServe"
      "rBusy\020\235\001\022\021\n\014SignInNotDay\020\241\001\022\024\n\017SignInDat"
      "aError\020\242\001\022\030\n\023SignInRewardAlready\020\243\001\022\023\n\016Z"
      "oneServerBusy\020\244\001\022\027\n\022GroupTargetInMatch\020\245"
      "\001\022\021\n\014GroupInMatch\020\246\001\022\025\n\020GroupKickInMatch"
      "\020\247\001\022\026\n\021GroupLeaveInMatch\020\250\001\022\030\n\023MatchCanc"
      "elInBattle\020\251\001\022\023\n\016MailServerBusy\020\252\001\022\031\n\024Re"
      "lationDatabaseBusy\020\253\001\022\017\n\nSteamError\020\255\001\022\023"
      "\n\016SteamDataError\020\256\001\022\023\n\016SteamAuthError\020\257\001"
      "\022\032\n\025InvalidActivationCode\020\260\001\022\030\n\023CanNotFi"
      "ndLoginNode\020\261\001\022\026\n\021ChannelNotSupport\020\262\001\022\020"
      "\n\013HaveNotIcon\020\263\001\022\032\n\025QueryInviteScoreErro"
      "r\020\264\001\022\027\n\022PlatformServerBusy\020\265\001\022\021\n\014BindAli"
      "payOk\020\266\001\022\025\n\020BindAlipayFailed\020\267\001\022\035\n\030Excha"
      "ngeInviteScoreError\020\270\001\022\036\n\031ExchangeInvite"
      "RecordError\020\271\001\022\034\n\027VersionNotCompatibilit"
      "y\020\272\001\022\033\n\026BattleNotCompatibility\020\273\001\022\025\n\020Bat"
      "tleNotPrepare\020\274\001\022\023\n\016BanForbidLogin\020\275\001\022\022\n"
      "\rTitleNotExist\020\276\001\022\017\n\nServerBusy\020\350\007b\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5362);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KFEnumMessage.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_KFEnumMessage_2eproto
namespace KFMsg {
const ::google::protobuf::EnumDescriptor* ChannelEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[0];
}
bool ChannelEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SexEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[1];
}
bool SexEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* KickEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[2];
}
bool KickEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StatusEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[3];
}
bool StatusEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MailEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[4];
}
bool MailEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StateEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[5];
}
bool StateEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* InviteEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[6];
}
bool InviteEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WishStateEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[7];
}
bool WishStateEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FriendLinessEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[8];
}
bool FriendLinessEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GuildEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[9];
}
bool GuildEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GuildReviewEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[10];
}
bool GuildReviewEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BattleEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[11];
}
bool BattleEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CodeEnum_descriptor() {
  protobuf_KFEnumMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFEnumMessage_2eproto::file_level_enum_descriptors[12];
}
bool CodeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 18:
    case 19:
    case 20:
    case 24:
    case 26:
    case 27:
    case 28:
    case 29:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 42:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 58:
    case 59:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 155:
    case 156:
    case 157:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 1000:
    case 10001:
    case 10002:
    case 20001:
    case 20002:
    case 20101:
    case 20102:
    case 20103:
    case 20104:
    case 20105:
    case 20106:
    case 20107:
    case 20108:
    case 20200:
    case 20201:
    case 20202:
    case 20204:
    case 20205:
    case 20301:
    case 20302:
    case 20303:
    case 20304:
    case 20305:
    case 20306:
    case 20401:
    case 20402:
    case 20403:
    case 20404:
    case 20405:
    case 20501:
    case 20502:
    case 20503:
    case 20504:
    case 20505:
    case 20506:
    case 20601:
    case 20602:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace KFMsg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
