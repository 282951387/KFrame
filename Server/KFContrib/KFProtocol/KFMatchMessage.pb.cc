// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFMatchMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "KFMatchMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace KFMsg {

namespace {

const ::google::protobuf::Descriptor* S2SRegisterMatchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SRegisterMatchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SMatchToProxyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SMatchToProxyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SMatchToClientAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SMatchToClientAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SMatchToShardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SMatchToShardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SCancelMatchToProxyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SCancelMatchToProxyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SCancelMatchToShardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SCancelMatchToShardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SCancelMatchToBattleShardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SCancelMatchToBattleShardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SNoticeMatchRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SNoticeMatchRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SNoticeMatchRoomAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SNoticeMatchRoomAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SQueryMatchRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SQueryMatchRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SQueryRoomToMatchShardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SQueryRoomToMatchShardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SQueryMatchRoomAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SQueryMatchRoomAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SQueryBattleRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SQueryBattleRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SQueryBattleRoomAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SQueryBattleRoomAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SQueryRoomToBattleShardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SQueryRoomToBattleShardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SPlayerOnlineToBattleShardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SPlayerOnlineToBattleShardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SNoticeMatchStateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SNoticeMatchStateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2SResetMatchRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2SResetMatchRoomReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MatchProtocol_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_KFMatchMessage_2eproto() {
  protobuf_AddDesc_KFMatchMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "KFMatchMessage.proto");
  GOOGLE_CHECK(file != NULL);
  S2SRegisterMatchReq_descriptor_ = file->message_type(0);
  static const int S2SRegisterMatchReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterMatchReq, matchid_),
  };
  S2SRegisterMatchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SRegisterMatchReq_descriptor_,
      S2SRegisterMatchReq::default_instance_,
      S2SRegisterMatchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterMatchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SRegisterMatchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SRegisterMatchReq));
  S2SMatchToProxyReq_descriptor_ = file->message_type(1);
  static const int S2SMatchToProxyReq_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SMatchToProxyReq, pbgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SMatchToProxyReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SMatchToProxyReq, allowgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SMatchToProxyReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SMatchToProxyReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SMatchToProxyReq, battleserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SMatchToProxyReq, version_),
  };
  S2SMatchToProxyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SMatchToProxyReq_descriptor_,
      S2SMatchToProxyReq::default_instance_,
      S2SMatchToProxyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SMatchToProxyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SMatchToProxyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SMatchToProxyReq));
  S2SMatchToClientAck_descriptor_ = file->message_type(2);
  static const int S2SMatchToClientAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SMatchToClientAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SMatchToClientAck, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SMatchToClientAck, playerid_),
  };
  S2SMatchToClientAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SMatchToClientAck_descriptor_,
      S2SMatchToClientAck::default_instance_,
      S2SMatchToClientAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SMatchToClientAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SMatchToClientAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SMatchToClientAck));
  S2SMatchToShardReq_descriptor_ = file->message_type(3);
  static const int S2SMatchToShardReq_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SMatchToShardReq, pbgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SMatchToShardReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SMatchToShardReq, allowgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SMatchToShardReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SMatchToShardReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SMatchToShardReq, battleserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SMatchToShardReq, version_),
  };
  S2SMatchToShardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SMatchToShardReq_descriptor_,
      S2SMatchToShardReq::default_instance_,
      S2SMatchToShardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SMatchToShardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SMatchToShardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SMatchToShardReq));
  S2SCancelMatchToProxyReq_descriptor_ = file->message_type(4);
  static const int S2SCancelMatchToProxyReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCancelMatchToProxyReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCancelMatchToProxyReq, playerid_),
  };
  S2SCancelMatchToProxyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SCancelMatchToProxyReq_descriptor_,
      S2SCancelMatchToProxyReq::default_instance_,
      S2SCancelMatchToProxyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCancelMatchToProxyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCancelMatchToProxyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SCancelMatchToProxyReq));
  S2SCancelMatchToShardReq_descriptor_ = file->message_type(5);
  static const int S2SCancelMatchToShardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCancelMatchToShardReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCancelMatchToShardReq, playerid_),
  };
  S2SCancelMatchToShardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SCancelMatchToShardReq_descriptor_,
      S2SCancelMatchToShardReq::default_instance_,
      S2SCancelMatchToShardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCancelMatchToShardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCancelMatchToShardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SCancelMatchToShardReq));
  S2SCancelMatchToBattleShardReq_descriptor_ = file->message_type(6);
  static const int S2SCancelMatchToBattleShardReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCancelMatchToBattleShardReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCancelMatchToBattleShardReq, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCancelMatchToBattleShardReq, groupid_),
  };
  S2SCancelMatchToBattleShardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SCancelMatchToBattleShardReq_descriptor_,
      S2SCancelMatchToBattleShardReq::default_instance_,
      S2SCancelMatchToBattleShardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCancelMatchToBattleShardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SCancelMatchToBattleShardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SCancelMatchToBattleShardReq));
  S2SNoticeMatchRoomReq_descriptor_ = file->message_type(7);
  static const int S2SNoticeMatchRoomReq_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNoticeMatchRoomReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNoticeMatchRoomReq, battleshardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNoticeMatchRoomReq, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNoticeMatchRoomReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNoticeMatchRoomReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNoticeMatchRoomReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNoticeMatchRoomReq, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNoticeMatchRoomReq, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNoticeMatchRoomReq, token_),
  };
  S2SNoticeMatchRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SNoticeMatchRoomReq_descriptor_,
      S2SNoticeMatchRoomReq::default_instance_,
      S2SNoticeMatchRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNoticeMatchRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNoticeMatchRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SNoticeMatchRoomReq));
  S2SNoticeMatchRoomAck_descriptor_ = file->message_type(8);
  static const int S2SNoticeMatchRoomAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNoticeMatchRoomAck, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNoticeMatchRoomAck, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNoticeMatchRoomAck, playerid_),
  };
  S2SNoticeMatchRoomAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SNoticeMatchRoomAck_descriptor_,
      S2SNoticeMatchRoomAck::default_instance_,
      S2SNoticeMatchRoomAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNoticeMatchRoomAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNoticeMatchRoomAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SNoticeMatchRoomAck));
  S2SQueryMatchRoomReq_descriptor_ = file->message_type(9);
  static const int S2SQueryMatchRoomReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryMatchRoomReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryMatchRoomReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryMatchRoomReq, serverid_),
  };
  S2SQueryMatchRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SQueryMatchRoomReq_descriptor_,
      S2SQueryMatchRoomReq::default_instance_,
      S2SQueryMatchRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryMatchRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryMatchRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SQueryMatchRoomReq));
  S2SQueryRoomToMatchShardReq_descriptor_ = file->message_type(10);
  static const int S2SQueryRoomToMatchShardReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryRoomToMatchShardReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryRoomToMatchShardReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryRoomToMatchShardReq, serverid_),
  };
  S2SQueryRoomToMatchShardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SQueryRoomToMatchShardReq_descriptor_,
      S2SQueryRoomToMatchShardReq::default_instance_,
      S2SQueryRoomToMatchShardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryRoomToMatchShardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryRoomToMatchShardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SQueryRoomToMatchShardReq));
  S2SQueryMatchRoomAck_descriptor_ = file->message_type(11);
  static const int S2SQueryMatchRoomAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryMatchRoomAck, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryMatchRoomAck, playerid_),
  };
  S2SQueryMatchRoomAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SQueryMatchRoomAck_descriptor_,
      S2SQueryMatchRoomAck::default_instance_,
      S2SQueryMatchRoomAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryMatchRoomAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryMatchRoomAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SQueryMatchRoomAck));
  S2SQueryBattleRoomReq_descriptor_ = file->message_type(12);
  static const int S2SQueryBattleRoomReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryBattleRoomReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryBattleRoomReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryBattleRoomReq, serverid_),
  };
  S2SQueryBattleRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SQueryBattleRoomReq_descriptor_,
      S2SQueryBattleRoomReq::default_instance_,
      S2SQueryBattleRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryBattleRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryBattleRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SQueryBattleRoomReq));
  S2SQueryBattleRoomAck_descriptor_ = file->message_type(13);
  static const int S2SQueryBattleRoomAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryBattleRoomAck, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryBattleRoomAck, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryBattleRoomAck, matchid_),
  };
  S2SQueryBattleRoomAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SQueryBattleRoomAck_descriptor_,
      S2SQueryBattleRoomAck::default_instance_,
      S2SQueryBattleRoomAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryBattleRoomAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryBattleRoomAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SQueryBattleRoomAck));
  S2SQueryRoomToBattleShardReq_descriptor_ = file->message_type(14);
  static const int S2SQueryRoomToBattleShardReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryRoomToBattleShardReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryRoomToBattleShardReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryRoomToBattleShardReq, serverid_),
  };
  S2SQueryRoomToBattleShardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SQueryRoomToBattleShardReq_descriptor_,
      S2SQueryRoomToBattleShardReq::default_instance_,
      S2SQueryRoomToBattleShardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryRoomToBattleShardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SQueryRoomToBattleShardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SQueryRoomToBattleShardReq));
  S2SPlayerOnlineToBattleShardReq_descriptor_ = file->message_type(15);
  static const int S2SPlayerOnlineToBattleShardReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerOnlineToBattleShardReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerOnlineToBattleShardReq, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerOnlineToBattleShardReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerOnlineToBattleShardReq, serverid_),
  };
  S2SPlayerOnlineToBattleShardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SPlayerOnlineToBattleShardReq_descriptor_,
      S2SPlayerOnlineToBattleShardReq::default_instance_,
      S2SPlayerOnlineToBattleShardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerOnlineToBattleShardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SPlayerOnlineToBattleShardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SPlayerOnlineToBattleShardReq));
  S2SNoticeMatchStateReq_descriptor_ = file->message_type(16);
  static const int S2SNoticeMatchStateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNoticeMatchStateReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNoticeMatchStateReq, matchid_),
  };
  S2SNoticeMatchStateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SNoticeMatchStateReq_descriptor_,
      S2SNoticeMatchStateReq::default_instance_,
      S2SNoticeMatchStateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNoticeMatchStateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SNoticeMatchStateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SNoticeMatchStateReq));
  S2SResetMatchRoomReq_descriptor_ = file->message_type(17);
  static const int S2SResetMatchRoomReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SResetMatchRoomReq, matchid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SResetMatchRoomReq, roomid_),
  };
  S2SResetMatchRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2SResetMatchRoomReq_descriptor_,
      S2SResetMatchRoomReq::default_instance_,
      S2SResetMatchRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SResetMatchRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2SResetMatchRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2SResetMatchRoomReq));
  MatchProtocol_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_KFMatchMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SRegisterMatchReq_descriptor_, &S2SRegisterMatchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SMatchToProxyReq_descriptor_, &S2SMatchToProxyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SMatchToClientAck_descriptor_, &S2SMatchToClientAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SMatchToShardReq_descriptor_, &S2SMatchToShardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SCancelMatchToProxyReq_descriptor_, &S2SCancelMatchToProxyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SCancelMatchToShardReq_descriptor_, &S2SCancelMatchToShardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SCancelMatchToBattleShardReq_descriptor_, &S2SCancelMatchToBattleShardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SNoticeMatchRoomReq_descriptor_, &S2SNoticeMatchRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SNoticeMatchRoomAck_descriptor_, &S2SNoticeMatchRoomAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SQueryMatchRoomReq_descriptor_, &S2SQueryMatchRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SQueryRoomToMatchShardReq_descriptor_, &S2SQueryRoomToMatchShardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SQueryMatchRoomAck_descriptor_, &S2SQueryMatchRoomAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SQueryBattleRoomReq_descriptor_, &S2SQueryBattleRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SQueryBattleRoomAck_descriptor_, &S2SQueryBattleRoomAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SQueryRoomToBattleShardReq_descriptor_, &S2SQueryRoomToBattleShardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SPlayerOnlineToBattleShardReq_descriptor_, &S2SPlayerOnlineToBattleShardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SNoticeMatchStateReq_descriptor_, &S2SNoticeMatchStateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2SResetMatchRoomReq_descriptor_, &S2SResetMatchRoomReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_KFMatchMessage_2eproto() {
  delete S2SRegisterMatchReq::default_instance_;
  delete S2SRegisterMatchReq_reflection_;
  delete S2SMatchToProxyReq::default_instance_;
  delete S2SMatchToProxyReq_reflection_;
  delete S2SMatchToClientAck::default_instance_;
  delete S2SMatchToClientAck_reflection_;
  delete S2SMatchToShardReq::default_instance_;
  delete S2SMatchToShardReq_reflection_;
  delete S2SCancelMatchToProxyReq::default_instance_;
  delete S2SCancelMatchToProxyReq_reflection_;
  delete S2SCancelMatchToShardReq::default_instance_;
  delete S2SCancelMatchToShardReq_reflection_;
  delete S2SCancelMatchToBattleShardReq::default_instance_;
  delete S2SCancelMatchToBattleShardReq_reflection_;
  delete S2SNoticeMatchRoomReq::default_instance_;
  delete S2SNoticeMatchRoomReq_reflection_;
  delete S2SNoticeMatchRoomAck::default_instance_;
  delete S2SNoticeMatchRoomAck_reflection_;
  delete S2SQueryMatchRoomReq::default_instance_;
  delete S2SQueryMatchRoomReq_reflection_;
  delete S2SQueryRoomToMatchShardReq::default_instance_;
  delete S2SQueryRoomToMatchShardReq_reflection_;
  delete S2SQueryMatchRoomAck::default_instance_;
  delete S2SQueryMatchRoomAck_reflection_;
  delete S2SQueryBattleRoomReq::default_instance_;
  delete S2SQueryBattleRoomReq_reflection_;
  delete S2SQueryBattleRoomAck::default_instance_;
  delete S2SQueryBattleRoomAck_reflection_;
  delete S2SQueryRoomToBattleShardReq::default_instance_;
  delete S2SQueryRoomToBattleShardReq_reflection_;
  delete S2SPlayerOnlineToBattleShardReq::default_instance_;
  delete S2SPlayerOnlineToBattleShardReq_reflection_;
  delete S2SNoticeMatchStateReq::default_instance_;
  delete S2SNoticeMatchStateReq_reflection_;
  delete S2SResetMatchRoomReq::default_instance_;
  delete S2SResetMatchRoomReq_reflection_;
}

void protobuf_AddDesc_KFMatchMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::KFMsg::protobuf_AddDesc_KFCommonMessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024KFMatchMessage.proto\022\005KFMsg\032\025KFCommonM"
    "essage.proto\"&\n\023S2SRegisterMatchReq\022\017\n\007m"
    "atchid\030\001 \003(\r\"\254\001\n\022S2SMatchToProxyReq\022$\n\007p"
    "bgroup\030\001 \002(\0132\023.KFMsg.PBMatchGroup\022\017\n\007mat"
    "chid\030\002 \002(\r\022\022\n\nallowgroup\030\003 \002(\010\022\020\n\010player"
    "id\030\004 \002(\r\022\020\n\010serverid\030\005 \002(\r\022\026\n\016battleserv"
    "erid\030\006 \002(\r\022\017\n\007version\030\007 \002(\014\"H\n\023S2SMatchT"
    "oClientAck\022\016\n\006result\030\001 \002(\r\022\017\n\007matchid\030\002 "
    "\002(\r\022\020\n\010playerid\030\003 \002(\r\"\254\001\n\022S2SMatchToShar"
    "dReq\022$\n\007pbgroup\030\001 \002(\0132\023.KFMsg.PBMatchGro"
    "up\022\017\n\007matchid\030\002 \002(\r\022\022\n\nallowgroup\030\003 \002(\010\022"
    "\020\n\010playerid\030\004 \002(\r\022\020\n\010serverid\030\005 \002(\r\022\026\n\016b"
    "attleserverid\030\006 \002(\r\022\017\n\007version\030\007 \002(\014\"=\n\030"
    "S2SCancelMatchToProxyReq\022\017\n\007matchid\030\001 \002("
    "\r\022\020\n\010playerid\030\002 \002(\r\"=\n\030S2SCancelMatchToS"
    "hardReq\022\017\n\007matchid\030\001 \002(\r\022\020\n\010playerid\030\002 \002"
    "(\r\"Q\n\036S2SCancelMatchToBattleShardReq\022\016\n\006"
    "roomid\030\001 \002(\004\022\016\n\006campid\030\002 \002(\r\022\017\n\007groupid\030"
    "\003 \002(\004\"\254\001\n\025S2SNoticeMatchRoomReq\022\017\n\007match"
    "id\030\001 \002(\r\022\025\n\rbattleshardid\030\002 \002(\r\022\016\n\006campi"
    "d\030\003 \002(\r\022\020\n\010playerid\030\004 \002(\r\022\020\n\010serverid\030\005 "
    "\002(\r\022\016\n\006roomid\030\006 \002(\004\022\n\n\002ip\030\007 \002(\014\022\014\n\004port\030"
    "\010 \002(\r\022\r\n\005token\030\t \002(\014\"I\n\025S2SNoticeMatchRo"
    "omAck\022\016\n\006roomid\030\001 \002(\004\022\016\n\006campid\030\002 \002(\r\022\020\n"
    "\010playerid\030\003 \002(\r\"K\n\024S2SQueryMatchRoomReq\022"
    "\017\n\007matchid\030\001 \002(\r\022\020\n\010playerid\030\002 \002(\r\022\020\n\010se"
    "rverid\030\003 \002(\r\"R\n\033S2SQueryRoomToMatchShard"
    "Req\022\017\n\007matchid\030\001 \002(\r\022\020\n\010playerid\030\002 \002(\r\022\020"
    "\n\010serverid\030\003 \002(\r\"9\n\024S2SQueryMatchRoomAck"
    "\022\017\n\007matchid\030\001 \002(\r\022\020\n\010playerid\030\002 \002(\r\"K\n\025S"
    "2SQueryBattleRoomReq\022\016\n\006roomid\030\001 \002(\004\022\020\n\010"
    "playerid\030\002 \002(\r\022\020\n\010serverid\030\003 \002(\r\"J\n\025S2SQ"
    "ueryBattleRoomAck\022\020\n\010playerid\030\001 \002(\r\022\016\n\006r"
    "oomid\030\002 \002(\004\022\017\n\007matchid\030\003 \002(\r\"R\n\034S2SQuery"
    "RoomToBattleShardReq\022\016\n\006roomid\030\001 \002(\004\022\020\n\010"
    "playerid\030\002 \002(\r\022\020\n\010serverid\030\003 \002(\r\"e\n\037S2SP"
    "layerOnlineToBattleShardReq\022\016\n\006roomid\030\001 "
    "\002(\004\022\016\n\006campid\030\002 \002(\r\022\020\n\010playerid\030\003 \002(\r\022\020\n"
    "\010serverid\030\004 \002(\r\";\n\026S2SNoticeMatchStateRe"
    "q\022\020\n\010playerid\030\001 \002(\r\022\017\n\007matchid\030\002 \002(\r\"7\n\024"
    "S2SResetMatchRoomReq\022\017\n\007matchid\030\001 \002(\r\022\016\n"
    "\006roomid\030\002 \002(\004*\362\004\n\rMatchProtocol\022\033\n\026S2S_R"
    "EGISTER_MATCH_REQ\020\335V\022\033\n\026S2S_MATCH_TO_PRO"
    "XY_REQ\020\336V\022\033\n\026S2S_MATCH_TO_SHARD_REQ\020\337V\022\034"
    "\n\027S2S_MATCH_TO_CLIENT_ACK\020\340V\022\"\n\035S2S_CANC"
    "EL_MATCH_TO_PROXY_REQ\020\343V\022\"\n\035S2S_CANCEL_M"
    "ATCH_TO_SHARD_REQ\020\344V\022\036\n\031S2S_NOTICE_MATCH"
    "_ROOM_REQ\020\345V\022\036\n\031S2S_NOTICE_MATCH_ROOM_AC"
    "K\020\346V\022\035\n\030S2S_QUERY_MATCH_ROOM_REQ\020\347V\022\035\n\030S"
    "2S_QUERY_MATCH_ROOM_ACK\020\350V\022\036\n\031S2S_QUERY_"
    "BATTLE_ROOM_REQ\020\351V\022\036\n\031S2S_QUERY_BATTLE_R"
    "OOM_ACK\020\352V\022&\n!S2S_QUERY_ROOM_TO_MATCH_SH"
    "ARD_REQ\020\353V\022\'\n\"S2S_QUERY_ROOM_TO_BATTLE_S"
    "HARD_REQ\020\354V\022)\n$S2S_CANCEL_MATCH_TO_BATTL"
    "E_SHARD_REQ\020\356V\022*\n%S2S_PLAYER_ONLINE_TO_B"
    "ATTLE_SHARD_REQ\020\360V\022\037\n\032S2S_NOTICE_MATCH_S"
    "TATE_REQ\020\361V\022\035\n\030S2S_RESET_MATCH_ROOM_REQ\020"
    "\362V", 2282);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KFMatchMessage.proto", &protobuf_RegisterTypes);
  S2SRegisterMatchReq::default_instance_ = new S2SRegisterMatchReq();
  S2SMatchToProxyReq::default_instance_ = new S2SMatchToProxyReq();
  S2SMatchToClientAck::default_instance_ = new S2SMatchToClientAck();
  S2SMatchToShardReq::default_instance_ = new S2SMatchToShardReq();
  S2SCancelMatchToProxyReq::default_instance_ = new S2SCancelMatchToProxyReq();
  S2SCancelMatchToShardReq::default_instance_ = new S2SCancelMatchToShardReq();
  S2SCancelMatchToBattleShardReq::default_instance_ = new S2SCancelMatchToBattleShardReq();
  S2SNoticeMatchRoomReq::default_instance_ = new S2SNoticeMatchRoomReq();
  S2SNoticeMatchRoomAck::default_instance_ = new S2SNoticeMatchRoomAck();
  S2SQueryMatchRoomReq::default_instance_ = new S2SQueryMatchRoomReq();
  S2SQueryRoomToMatchShardReq::default_instance_ = new S2SQueryRoomToMatchShardReq();
  S2SQueryMatchRoomAck::default_instance_ = new S2SQueryMatchRoomAck();
  S2SQueryBattleRoomReq::default_instance_ = new S2SQueryBattleRoomReq();
  S2SQueryBattleRoomAck::default_instance_ = new S2SQueryBattleRoomAck();
  S2SQueryRoomToBattleShardReq::default_instance_ = new S2SQueryRoomToBattleShardReq();
  S2SPlayerOnlineToBattleShardReq::default_instance_ = new S2SPlayerOnlineToBattleShardReq();
  S2SNoticeMatchStateReq::default_instance_ = new S2SNoticeMatchStateReq();
  S2SResetMatchRoomReq::default_instance_ = new S2SResetMatchRoomReq();
  S2SRegisterMatchReq::default_instance_->InitAsDefaultInstance();
  S2SMatchToProxyReq::default_instance_->InitAsDefaultInstance();
  S2SMatchToClientAck::default_instance_->InitAsDefaultInstance();
  S2SMatchToShardReq::default_instance_->InitAsDefaultInstance();
  S2SCancelMatchToProxyReq::default_instance_->InitAsDefaultInstance();
  S2SCancelMatchToShardReq::default_instance_->InitAsDefaultInstance();
  S2SCancelMatchToBattleShardReq::default_instance_->InitAsDefaultInstance();
  S2SNoticeMatchRoomReq::default_instance_->InitAsDefaultInstance();
  S2SNoticeMatchRoomAck::default_instance_->InitAsDefaultInstance();
  S2SQueryMatchRoomReq::default_instance_->InitAsDefaultInstance();
  S2SQueryRoomToMatchShardReq::default_instance_->InitAsDefaultInstance();
  S2SQueryMatchRoomAck::default_instance_->InitAsDefaultInstance();
  S2SQueryBattleRoomReq::default_instance_->InitAsDefaultInstance();
  S2SQueryBattleRoomAck::default_instance_->InitAsDefaultInstance();
  S2SQueryRoomToBattleShardReq::default_instance_->InitAsDefaultInstance();
  S2SPlayerOnlineToBattleShardReq::default_instance_->InitAsDefaultInstance();
  S2SNoticeMatchStateReq::default_instance_->InitAsDefaultInstance();
  S2SResetMatchRoomReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_KFMatchMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_KFMatchMessage_2eproto {
  StaticDescriptorInitializer_KFMatchMessage_2eproto() {
    protobuf_AddDesc_KFMatchMessage_2eproto();
  }
} static_descriptor_initializer_KFMatchMessage_2eproto_;
const ::google::protobuf::EnumDescriptor* MatchProtocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchProtocol_descriptor_;
}
bool MatchProtocol_IsValid(int value) {
  switch(value) {
    case 11101:
    case 11102:
    case 11103:
    case 11104:
    case 11107:
    case 11108:
    case 11109:
    case 11110:
    case 11111:
    case 11112:
    case 11113:
    case 11114:
    case 11115:
    case 11116:
    case 11118:
    case 11120:
    case 11121:
    case 11122:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int S2SRegisterMatchReq::kMatchidFieldNumber;
#endif  // !_MSC_VER

S2SRegisterMatchReq::S2SRegisterMatchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SRegisterMatchReq::InitAsDefaultInstance() {
}

S2SRegisterMatchReq::S2SRegisterMatchReq(const S2SRegisterMatchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SRegisterMatchReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SRegisterMatchReq::~S2SRegisterMatchReq() {
  SharedDtor();
}

void S2SRegisterMatchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SRegisterMatchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SRegisterMatchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SRegisterMatchReq_descriptor_;
}

const S2SRegisterMatchReq& S2SRegisterMatchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFMatchMessage_2eproto();
  return *default_instance_;
}

S2SRegisterMatchReq* S2SRegisterMatchReq::default_instance_ = NULL;

S2SRegisterMatchReq* S2SRegisterMatchReq::New() const {
  return new S2SRegisterMatchReq;
}

void S2SRegisterMatchReq::Clear() {
  matchid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SRegisterMatchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_matchid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_matchid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_matchid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SRegisterMatchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 matchid = 1;
  for (int i = 0; i < this->matchid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->matchid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SRegisterMatchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 matchid = 1;
  for (int i = 0; i < this->matchid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->matchid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SRegisterMatchReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 matchid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->matchid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->matchid(i));
    }
    total_size += 1 * this->matchid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SRegisterMatchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SRegisterMatchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SRegisterMatchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SRegisterMatchReq::MergeFrom(const S2SRegisterMatchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  matchid_.MergeFrom(from.matchid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SRegisterMatchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SRegisterMatchReq::CopyFrom(const S2SRegisterMatchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SRegisterMatchReq::IsInitialized() const {

  return true;
}

void S2SRegisterMatchReq::Swap(S2SRegisterMatchReq* other) {
  if (other != this) {
    matchid_.Swap(&other->matchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SRegisterMatchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SRegisterMatchReq_descriptor_;
  metadata.reflection = S2SRegisterMatchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SMatchToProxyReq::kPbgroupFieldNumber;
const int S2SMatchToProxyReq::kMatchidFieldNumber;
const int S2SMatchToProxyReq::kAllowgroupFieldNumber;
const int S2SMatchToProxyReq::kPlayeridFieldNumber;
const int S2SMatchToProxyReq::kServeridFieldNumber;
const int S2SMatchToProxyReq::kBattleserveridFieldNumber;
const int S2SMatchToProxyReq::kVersionFieldNumber;
#endif  // !_MSC_VER

S2SMatchToProxyReq::S2SMatchToProxyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SMatchToProxyReq::InitAsDefaultInstance() {
  pbgroup_ = const_cast< ::KFMsg::PBMatchGroup*>(&::KFMsg::PBMatchGroup::default_instance());
}

S2SMatchToProxyReq::S2SMatchToProxyReq(const S2SMatchToProxyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SMatchToProxyReq::SharedCtor() {
  _cached_size_ = 0;
  pbgroup_ = NULL;
  matchid_ = 0u;
  allowgroup_ = false;
  playerid_ = 0u;
  serverid_ = 0u;
  battleserverid_ = 0u;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SMatchToProxyReq::~S2SMatchToProxyReq() {
  SharedDtor();
}

void S2SMatchToProxyReq::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete pbgroup_;
  }
}

void S2SMatchToProxyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SMatchToProxyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SMatchToProxyReq_descriptor_;
}

const S2SMatchToProxyReq& S2SMatchToProxyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFMatchMessage_2eproto();
  return *default_instance_;
}

S2SMatchToProxyReq* S2SMatchToProxyReq::default_instance_ = NULL;

S2SMatchToProxyReq* S2SMatchToProxyReq::New() const {
  return new S2SMatchToProxyReq;
}

void S2SMatchToProxyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pbgroup()) {
      if (pbgroup_ != NULL) pbgroup_->::KFMsg::PBMatchGroup::Clear();
    }
    matchid_ = 0u;
    allowgroup_ = false;
    playerid_ = 0u;
    serverid_ = 0u;
    battleserverid_ = 0u;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SMatchToProxyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KFMsg.PBMatchGroup pbgroup = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbgroup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_matchid;
        break;
      }

      // required uint32 matchid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_allowgroup;
        break;
      }

      // required bool allowgroup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allowgroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowgroup_)));
          set_has_allowgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_battleserverid;
        break;
      }

      // required uint32 battleserverid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleserverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleserverid_)));
          set_has_battleserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_version;
        break;
      }

      // required bytes version = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SMatchToProxyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KFMsg.PBMatchGroup pbgroup = 1;
  if (has_pbgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pbgroup(), output);
  }

  // required uint32 matchid = 2;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->matchid(), output);
  }

  // required bool allowgroup = 3;
  if (has_allowgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->allowgroup(), output);
  }

  // required uint32 playerid = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->playerid(), output);
  }

  // required uint32 serverid = 5;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->serverid(), output);
  }

  // required uint32 battleserverid = 6;
  if (has_battleserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->battleserverid(), output);
  }

  // required bytes version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SMatchToProxyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KFMsg.PBMatchGroup pbgroup = 1;
  if (has_pbgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pbgroup(), target);
  }

  // required uint32 matchid = 2;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->matchid(), target);
  }

  // required bool allowgroup = 3;
  if (has_allowgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->allowgroup(), target);
  }

  // required uint32 playerid = 4;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->playerid(), target);
  }

  // required uint32 serverid = 5;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->serverid(), target);
  }

  // required uint32 battleserverid = 6;
  if (has_battleserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->battleserverid(), target);
  }

  // required bytes version = 7;
  if (has_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SMatchToProxyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KFMsg.PBMatchGroup pbgroup = 1;
    if (has_pbgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbgroup());
    }

    // required uint32 matchid = 2;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // required bool allowgroup = 3;
    if (has_allowgroup()) {
      total_size += 1 + 1;
    }

    // required uint32 playerid = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 serverid = 5;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required uint32 battleserverid = 6;
    if (has_battleserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleserverid());
    }

    // required bytes version = 7;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SMatchToProxyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SMatchToProxyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SMatchToProxyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SMatchToProxyReq::MergeFrom(const S2SMatchToProxyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pbgroup()) {
      mutable_pbgroup()->::KFMsg::PBMatchGroup::MergeFrom(from.pbgroup());
    }
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_allowgroup()) {
      set_allowgroup(from.allowgroup());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_battleserverid()) {
      set_battleserverid(from.battleserverid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SMatchToProxyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SMatchToProxyReq::CopyFrom(const S2SMatchToProxyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SMatchToProxyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_pbgroup()) {
    if (!this->pbgroup().IsInitialized()) return false;
  }
  return true;
}

void S2SMatchToProxyReq::Swap(S2SMatchToProxyReq* other) {
  if (other != this) {
    std::swap(pbgroup_, other->pbgroup_);
    std::swap(matchid_, other->matchid_);
    std::swap(allowgroup_, other->allowgroup_);
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(battleserverid_, other->battleserverid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SMatchToProxyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SMatchToProxyReq_descriptor_;
  metadata.reflection = S2SMatchToProxyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SMatchToClientAck::kResultFieldNumber;
const int S2SMatchToClientAck::kMatchidFieldNumber;
const int S2SMatchToClientAck::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SMatchToClientAck::S2SMatchToClientAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SMatchToClientAck::InitAsDefaultInstance() {
}

S2SMatchToClientAck::S2SMatchToClientAck(const S2SMatchToClientAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SMatchToClientAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  matchid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SMatchToClientAck::~S2SMatchToClientAck() {
  SharedDtor();
}

void S2SMatchToClientAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SMatchToClientAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SMatchToClientAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SMatchToClientAck_descriptor_;
}

const S2SMatchToClientAck& S2SMatchToClientAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFMatchMessage_2eproto();
  return *default_instance_;
}

S2SMatchToClientAck* S2SMatchToClientAck::default_instance_ = NULL;

S2SMatchToClientAck* S2SMatchToClientAck::New() const {
  return new S2SMatchToClientAck;
}

void S2SMatchToClientAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    matchid_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SMatchToClientAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_matchid;
        break;
      }

      // required uint32 matchid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SMatchToClientAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // required uint32 matchid = 2;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->matchid(), output);
  }

  // required uint32 playerid = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SMatchToClientAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // required uint32 matchid = 2;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->matchid(), target);
  }

  // required uint32 playerid = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SMatchToClientAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // required uint32 matchid = 2;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // required uint32 playerid = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SMatchToClientAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SMatchToClientAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SMatchToClientAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SMatchToClientAck::MergeFrom(const S2SMatchToClientAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SMatchToClientAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SMatchToClientAck::CopyFrom(const S2SMatchToClientAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SMatchToClientAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SMatchToClientAck::Swap(S2SMatchToClientAck* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(matchid_, other->matchid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SMatchToClientAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SMatchToClientAck_descriptor_;
  metadata.reflection = S2SMatchToClientAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SMatchToShardReq::kPbgroupFieldNumber;
const int S2SMatchToShardReq::kMatchidFieldNumber;
const int S2SMatchToShardReq::kAllowgroupFieldNumber;
const int S2SMatchToShardReq::kPlayeridFieldNumber;
const int S2SMatchToShardReq::kServeridFieldNumber;
const int S2SMatchToShardReq::kBattleserveridFieldNumber;
const int S2SMatchToShardReq::kVersionFieldNumber;
#endif  // !_MSC_VER

S2SMatchToShardReq::S2SMatchToShardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SMatchToShardReq::InitAsDefaultInstance() {
  pbgroup_ = const_cast< ::KFMsg::PBMatchGroup*>(&::KFMsg::PBMatchGroup::default_instance());
}

S2SMatchToShardReq::S2SMatchToShardReq(const S2SMatchToShardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SMatchToShardReq::SharedCtor() {
  _cached_size_ = 0;
  pbgroup_ = NULL;
  matchid_ = 0u;
  allowgroup_ = false;
  playerid_ = 0u;
  serverid_ = 0u;
  battleserverid_ = 0u;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SMatchToShardReq::~S2SMatchToShardReq() {
  SharedDtor();
}

void S2SMatchToShardReq::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete pbgroup_;
  }
}

void S2SMatchToShardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SMatchToShardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SMatchToShardReq_descriptor_;
}

const S2SMatchToShardReq& S2SMatchToShardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFMatchMessage_2eproto();
  return *default_instance_;
}

S2SMatchToShardReq* S2SMatchToShardReq::default_instance_ = NULL;

S2SMatchToShardReq* S2SMatchToShardReq::New() const {
  return new S2SMatchToShardReq;
}

void S2SMatchToShardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pbgroup()) {
      if (pbgroup_ != NULL) pbgroup_->::KFMsg::PBMatchGroup::Clear();
    }
    matchid_ = 0u;
    allowgroup_ = false;
    playerid_ = 0u;
    serverid_ = 0u;
    battleserverid_ = 0u;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SMatchToShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .KFMsg.PBMatchGroup pbgroup = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pbgroup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_matchid;
        break;
      }

      // required uint32 matchid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_allowgroup;
        break;
      }

      // required bool allowgroup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allowgroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowgroup_)));
          set_has_allowgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_battleserverid;
        break;
      }

      // required uint32 battleserverid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleserverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleserverid_)));
          set_has_battleserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_version;
        break;
      }

      // required bytes version = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SMatchToShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .KFMsg.PBMatchGroup pbgroup = 1;
  if (has_pbgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pbgroup(), output);
  }

  // required uint32 matchid = 2;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->matchid(), output);
  }

  // required bool allowgroup = 3;
  if (has_allowgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->allowgroup(), output);
  }

  // required uint32 playerid = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->playerid(), output);
  }

  // required uint32 serverid = 5;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->serverid(), output);
  }

  // required uint32 battleserverid = 6;
  if (has_battleserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->battleserverid(), output);
  }

  // required bytes version = 7;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SMatchToShardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .KFMsg.PBMatchGroup pbgroup = 1;
  if (has_pbgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pbgroup(), target);
  }

  // required uint32 matchid = 2;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->matchid(), target);
  }

  // required bool allowgroup = 3;
  if (has_allowgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->allowgroup(), target);
  }

  // required uint32 playerid = 4;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->playerid(), target);
  }

  // required uint32 serverid = 5;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->serverid(), target);
  }

  // required uint32 battleserverid = 6;
  if (has_battleserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->battleserverid(), target);
  }

  // required bytes version = 7;
  if (has_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SMatchToShardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .KFMsg.PBMatchGroup pbgroup = 1;
    if (has_pbgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pbgroup());
    }

    // required uint32 matchid = 2;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // required bool allowgroup = 3;
    if (has_allowgroup()) {
      total_size += 1 + 1;
    }

    // required uint32 playerid = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 serverid = 5;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required uint32 battleserverid = 6;
    if (has_battleserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleserverid());
    }

    // required bytes version = 7;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SMatchToShardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SMatchToShardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SMatchToShardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SMatchToShardReq::MergeFrom(const S2SMatchToShardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pbgroup()) {
      mutable_pbgroup()->::KFMsg::PBMatchGroup::MergeFrom(from.pbgroup());
    }
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_allowgroup()) {
      set_allowgroup(from.allowgroup());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_battleserverid()) {
      set_battleserverid(from.battleserverid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SMatchToShardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SMatchToShardReq::CopyFrom(const S2SMatchToShardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SMatchToShardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_pbgroup()) {
    if (!this->pbgroup().IsInitialized()) return false;
  }
  return true;
}

void S2SMatchToShardReq::Swap(S2SMatchToShardReq* other) {
  if (other != this) {
    std::swap(pbgroup_, other->pbgroup_);
    std::swap(matchid_, other->matchid_);
    std::swap(allowgroup_, other->allowgroup_);
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(battleserverid_, other->battleserverid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SMatchToShardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SMatchToShardReq_descriptor_;
  metadata.reflection = S2SMatchToShardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SCancelMatchToProxyReq::kMatchidFieldNumber;
const int S2SCancelMatchToProxyReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SCancelMatchToProxyReq::S2SCancelMatchToProxyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SCancelMatchToProxyReq::InitAsDefaultInstance() {
}

S2SCancelMatchToProxyReq::S2SCancelMatchToProxyReq(const S2SCancelMatchToProxyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SCancelMatchToProxyReq::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SCancelMatchToProxyReq::~S2SCancelMatchToProxyReq() {
  SharedDtor();
}

void S2SCancelMatchToProxyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SCancelMatchToProxyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SCancelMatchToProxyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SCancelMatchToProxyReq_descriptor_;
}

const S2SCancelMatchToProxyReq& S2SCancelMatchToProxyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFMatchMessage_2eproto();
  return *default_instance_;
}

S2SCancelMatchToProxyReq* S2SCancelMatchToProxyReq::default_instance_ = NULL;

S2SCancelMatchToProxyReq* S2SCancelMatchToProxyReq::New() const {
  return new S2SCancelMatchToProxyReq;
}

void S2SCancelMatchToProxyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SCancelMatchToProxyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SCancelMatchToProxyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SCancelMatchToProxyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SCancelMatchToProxyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SCancelMatchToProxyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SCancelMatchToProxyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SCancelMatchToProxyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SCancelMatchToProxyReq::MergeFrom(const S2SCancelMatchToProxyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SCancelMatchToProxyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SCancelMatchToProxyReq::CopyFrom(const S2SCancelMatchToProxyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SCancelMatchToProxyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SCancelMatchToProxyReq::Swap(S2SCancelMatchToProxyReq* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SCancelMatchToProxyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SCancelMatchToProxyReq_descriptor_;
  metadata.reflection = S2SCancelMatchToProxyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SCancelMatchToShardReq::kMatchidFieldNumber;
const int S2SCancelMatchToShardReq::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SCancelMatchToShardReq::S2SCancelMatchToShardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SCancelMatchToShardReq::InitAsDefaultInstance() {
}

S2SCancelMatchToShardReq::S2SCancelMatchToShardReq(const S2SCancelMatchToShardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SCancelMatchToShardReq::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SCancelMatchToShardReq::~S2SCancelMatchToShardReq() {
  SharedDtor();
}

void S2SCancelMatchToShardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SCancelMatchToShardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SCancelMatchToShardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SCancelMatchToShardReq_descriptor_;
}

const S2SCancelMatchToShardReq& S2SCancelMatchToShardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFMatchMessage_2eproto();
  return *default_instance_;
}

S2SCancelMatchToShardReq* S2SCancelMatchToShardReq::default_instance_ = NULL;

S2SCancelMatchToShardReq* S2SCancelMatchToShardReq::New() const {
  return new S2SCancelMatchToShardReq;
}

void S2SCancelMatchToShardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SCancelMatchToShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SCancelMatchToShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SCancelMatchToShardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SCancelMatchToShardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SCancelMatchToShardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SCancelMatchToShardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SCancelMatchToShardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SCancelMatchToShardReq::MergeFrom(const S2SCancelMatchToShardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SCancelMatchToShardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SCancelMatchToShardReq::CopyFrom(const S2SCancelMatchToShardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SCancelMatchToShardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SCancelMatchToShardReq::Swap(S2SCancelMatchToShardReq* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SCancelMatchToShardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SCancelMatchToShardReq_descriptor_;
  metadata.reflection = S2SCancelMatchToShardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SCancelMatchToBattleShardReq::kRoomidFieldNumber;
const int S2SCancelMatchToBattleShardReq::kCampidFieldNumber;
const int S2SCancelMatchToBattleShardReq::kGroupidFieldNumber;
#endif  // !_MSC_VER

S2SCancelMatchToBattleShardReq::S2SCancelMatchToBattleShardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SCancelMatchToBattleShardReq::InitAsDefaultInstance() {
}

S2SCancelMatchToBattleShardReq::S2SCancelMatchToBattleShardReq(const S2SCancelMatchToBattleShardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SCancelMatchToBattleShardReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  campid_ = 0u;
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SCancelMatchToBattleShardReq::~S2SCancelMatchToBattleShardReq() {
  SharedDtor();
}

void S2SCancelMatchToBattleShardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SCancelMatchToBattleShardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SCancelMatchToBattleShardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SCancelMatchToBattleShardReq_descriptor_;
}

const S2SCancelMatchToBattleShardReq& S2SCancelMatchToBattleShardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFMatchMessage_2eproto();
  return *default_instance_;
}

S2SCancelMatchToBattleShardReq* S2SCancelMatchToBattleShardReq::default_instance_ = NULL;

S2SCancelMatchToBattleShardReq* S2SCancelMatchToBattleShardReq::New() const {
  return new S2SCancelMatchToBattleShardReq;
}

void S2SCancelMatchToBattleShardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
    campid_ = 0u;
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SCancelMatchToBattleShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_campid;
        break;
      }

      // required uint32 campid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_groupid;
        break;
      }

      // required uint64 groupid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SCancelMatchToBattleShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // required uint32 campid = 2;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->campid(), output);
  }

  // required uint64 groupid = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SCancelMatchToBattleShardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // required uint32 campid = 2;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->campid(), target);
  }

  // required uint64 groupid = 3;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SCancelMatchToBattleShardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 campid = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // required uint64 groupid = 3;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SCancelMatchToBattleShardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SCancelMatchToBattleShardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SCancelMatchToBattleShardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SCancelMatchToBattleShardReq::MergeFrom(const S2SCancelMatchToBattleShardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SCancelMatchToBattleShardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SCancelMatchToBattleShardReq::CopyFrom(const S2SCancelMatchToBattleShardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SCancelMatchToBattleShardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SCancelMatchToBattleShardReq::Swap(S2SCancelMatchToBattleShardReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(campid_, other->campid_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SCancelMatchToBattleShardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SCancelMatchToBattleShardReq_descriptor_;
  metadata.reflection = S2SCancelMatchToBattleShardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SNoticeMatchRoomReq::kMatchidFieldNumber;
const int S2SNoticeMatchRoomReq::kBattleshardidFieldNumber;
const int S2SNoticeMatchRoomReq::kCampidFieldNumber;
const int S2SNoticeMatchRoomReq::kPlayeridFieldNumber;
const int S2SNoticeMatchRoomReq::kServeridFieldNumber;
const int S2SNoticeMatchRoomReq::kRoomidFieldNumber;
const int S2SNoticeMatchRoomReq::kIpFieldNumber;
const int S2SNoticeMatchRoomReq::kPortFieldNumber;
const int S2SNoticeMatchRoomReq::kTokenFieldNumber;
#endif  // !_MSC_VER

S2SNoticeMatchRoomReq::S2SNoticeMatchRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SNoticeMatchRoomReq::InitAsDefaultInstance() {
}

S2SNoticeMatchRoomReq::S2SNoticeMatchRoomReq(const S2SNoticeMatchRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SNoticeMatchRoomReq::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  battleshardid_ = 0u;
  campid_ = 0u;
  playerid_ = 0u;
  serverid_ = 0u;
  roomid_ = GOOGLE_ULONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SNoticeMatchRoomReq::~S2SNoticeMatchRoomReq() {
  SharedDtor();
}

void S2SNoticeMatchRoomReq::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void S2SNoticeMatchRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SNoticeMatchRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SNoticeMatchRoomReq_descriptor_;
}

const S2SNoticeMatchRoomReq& S2SNoticeMatchRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFMatchMessage_2eproto();
  return *default_instance_;
}

S2SNoticeMatchRoomReq* S2SNoticeMatchRoomReq::default_instance_ = NULL;

S2SNoticeMatchRoomReq* S2SNoticeMatchRoomReq::New() const {
  return new S2SNoticeMatchRoomReq;
}

void S2SNoticeMatchRoomReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0u;
    battleshardid_ = 0u;
    campid_ = 0u;
    playerid_ = 0u;
    serverid_ = 0u;
    roomid_ = GOOGLE_ULONGLONG(0);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SNoticeMatchRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battleshardid;
        break;
      }

      // required uint32 battleshardid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleshardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleshardid_)));
          set_has_battleshardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_campid;
        break;
      }

      // required uint32 campid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_roomid;
        break;
      }

      // required uint64 roomid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ip;
        break;
      }

      // required bytes ip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_port;
        break;
      }

      // required uint32 port = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_token;
        break;
      }

      // required bytes token = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SNoticeMatchRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // required uint32 battleshardid = 2;
  if (has_battleshardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->battleshardid(), output);
  }

  // required uint32 campid = 3;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->campid(), output);
  }

  // required uint32 playerid = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->playerid(), output);
  }

  // required uint32 serverid = 5;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->serverid(), output);
  }

  // required uint64 roomid = 6;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->roomid(), output);
  }

  // required bytes ip = 7;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->ip(), output);
  }

  // required uint32 port = 8;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->port(), output);
  }

  // required bytes token = 9;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SNoticeMatchRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // required uint32 battleshardid = 2;
  if (has_battleshardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->battleshardid(), target);
  }

  // required uint32 campid = 3;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->campid(), target);
  }

  // required uint32 playerid = 4;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->playerid(), target);
  }

  // required uint32 serverid = 5;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->serverid(), target);
  }

  // required uint64 roomid = 6;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->roomid(), target);
  }

  // required bytes ip = 7;
  if (has_ip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->ip(), target);
  }

  // required uint32 port = 8;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->port(), target);
  }

  // required bytes token = 9;
  if (has_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SNoticeMatchRoomReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // required uint32 battleshardid = 2;
    if (has_battleshardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleshardid());
    }

    // required uint32 campid = 3;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // required uint32 playerid = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 serverid = 5;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required uint64 roomid = 6;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required bytes ip = 7;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ip());
    }

    // required uint32 port = 8;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bytes token = 9;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SNoticeMatchRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SNoticeMatchRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SNoticeMatchRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SNoticeMatchRoomReq::MergeFrom(const S2SNoticeMatchRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_battleshardid()) {
      set_battleshardid(from.battleshardid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SNoticeMatchRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SNoticeMatchRoomReq::CopyFrom(const S2SNoticeMatchRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SNoticeMatchRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void S2SNoticeMatchRoomReq::Swap(S2SNoticeMatchRoomReq* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(battleshardid_, other->battleshardid_);
    std::swap(campid_, other->campid_);
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(roomid_, other->roomid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SNoticeMatchRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SNoticeMatchRoomReq_descriptor_;
  metadata.reflection = S2SNoticeMatchRoomReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SNoticeMatchRoomAck::kRoomidFieldNumber;
const int S2SNoticeMatchRoomAck::kCampidFieldNumber;
const int S2SNoticeMatchRoomAck::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SNoticeMatchRoomAck::S2SNoticeMatchRoomAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SNoticeMatchRoomAck::InitAsDefaultInstance() {
}

S2SNoticeMatchRoomAck::S2SNoticeMatchRoomAck(const S2SNoticeMatchRoomAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SNoticeMatchRoomAck::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  campid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SNoticeMatchRoomAck::~S2SNoticeMatchRoomAck() {
  SharedDtor();
}

void S2SNoticeMatchRoomAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SNoticeMatchRoomAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SNoticeMatchRoomAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SNoticeMatchRoomAck_descriptor_;
}

const S2SNoticeMatchRoomAck& S2SNoticeMatchRoomAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFMatchMessage_2eproto();
  return *default_instance_;
}

S2SNoticeMatchRoomAck* S2SNoticeMatchRoomAck::default_instance_ = NULL;

S2SNoticeMatchRoomAck* S2SNoticeMatchRoomAck::New() const {
  return new S2SNoticeMatchRoomAck;
}

void S2SNoticeMatchRoomAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
    campid_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SNoticeMatchRoomAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_campid;
        break;
      }

      // required uint32 campid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SNoticeMatchRoomAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // required uint32 campid = 2;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->campid(), output);
  }

  // required uint32 playerid = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SNoticeMatchRoomAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // required uint32 campid = 2;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->campid(), target);
  }

  // required uint32 playerid = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SNoticeMatchRoomAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 campid = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // required uint32 playerid = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SNoticeMatchRoomAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SNoticeMatchRoomAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SNoticeMatchRoomAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SNoticeMatchRoomAck::MergeFrom(const S2SNoticeMatchRoomAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SNoticeMatchRoomAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SNoticeMatchRoomAck::CopyFrom(const S2SNoticeMatchRoomAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SNoticeMatchRoomAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SNoticeMatchRoomAck::Swap(S2SNoticeMatchRoomAck* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(campid_, other->campid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SNoticeMatchRoomAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SNoticeMatchRoomAck_descriptor_;
  metadata.reflection = S2SNoticeMatchRoomAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SQueryMatchRoomReq::kMatchidFieldNumber;
const int S2SQueryMatchRoomReq::kPlayeridFieldNumber;
const int S2SQueryMatchRoomReq::kServeridFieldNumber;
#endif  // !_MSC_VER

S2SQueryMatchRoomReq::S2SQueryMatchRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SQueryMatchRoomReq::InitAsDefaultInstance() {
}

S2SQueryMatchRoomReq::S2SQueryMatchRoomReq(const S2SQueryMatchRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SQueryMatchRoomReq::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  playerid_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SQueryMatchRoomReq::~S2SQueryMatchRoomReq() {
  SharedDtor();
}

void S2SQueryMatchRoomReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SQueryMatchRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SQueryMatchRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SQueryMatchRoomReq_descriptor_;
}

const S2SQueryMatchRoomReq& S2SQueryMatchRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFMatchMessage_2eproto();
  return *default_instance_;
}

S2SQueryMatchRoomReq* S2SQueryMatchRoomReq::default_instance_ = NULL;

S2SQueryMatchRoomReq* S2SQueryMatchRoomReq::New() const {
  return new S2SQueryMatchRoomReq;
}

void S2SQueryMatchRoomReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0u;
    playerid_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SQueryMatchRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SQueryMatchRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SQueryMatchRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SQueryMatchRoomReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SQueryMatchRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SQueryMatchRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SQueryMatchRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SQueryMatchRoomReq::MergeFrom(const S2SQueryMatchRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SQueryMatchRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryMatchRoomReq::CopyFrom(const S2SQueryMatchRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryMatchRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SQueryMatchRoomReq::Swap(S2SQueryMatchRoomReq* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SQueryMatchRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SQueryMatchRoomReq_descriptor_;
  metadata.reflection = S2SQueryMatchRoomReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SQueryRoomToMatchShardReq::kMatchidFieldNumber;
const int S2SQueryRoomToMatchShardReq::kPlayeridFieldNumber;
const int S2SQueryRoomToMatchShardReq::kServeridFieldNumber;
#endif  // !_MSC_VER

S2SQueryRoomToMatchShardReq::S2SQueryRoomToMatchShardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SQueryRoomToMatchShardReq::InitAsDefaultInstance() {
}

S2SQueryRoomToMatchShardReq::S2SQueryRoomToMatchShardReq(const S2SQueryRoomToMatchShardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SQueryRoomToMatchShardReq::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  playerid_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SQueryRoomToMatchShardReq::~S2SQueryRoomToMatchShardReq() {
  SharedDtor();
}

void S2SQueryRoomToMatchShardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SQueryRoomToMatchShardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SQueryRoomToMatchShardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SQueryRoomToMatchShardReq_descriptor_;
}

const S2SQueryRoomToMatchShardReq& S2SQueryRoomToMatchShardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFMatchMessage_2eproto();
  return *default_instance_;
}

S2SQueryRoomToMatchShardReq* S2SQueryRoomToMatchShardReq::default_instance_ = NULL;

S2SQueryRoomToMatchShardReq* S2SQueryRoomToMatchShardReq::New() const {
  return new S2SQueryRoomToMatchShardReq;
}

void S2SQueryRoomToMatchShardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0u;
    playerid_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SQueryRoomToMatchShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SQueryRoomToMatchShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SQueryRoomToMatchShardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SQueryRoomToMatchShardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SQueryRoomToMatchShardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SQueryRoomToMatchShardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SQueryRoomToMatchShardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SQueryRoomToMatchShardReq::MergeFrom(const S2SQueryRoomToMatchShardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SQueryRoomToMatchShardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryRoomToMatchShardReq::CopyFrom(const S2SQueryRoomToMatchShardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryRoomToMatchShardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SQueryRoomToMatchShardReq::Swap(S2SQueryRoomToMatchShardReq* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SQueryRoomToMatchShardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SQueryRoomToMatchShardReq_descriptor_;
  metadata.reflection = S2SQueryRoomToMatchShardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SQueryMatchRoomAck::kMatchidFieldNumber;
const int S2SQueryMatchRoomAck::kPlayeridFieldNumber;
#endif  // !_MSC_VER

S2SQueryMatchRoomAck::S2SQueryMatchRoomAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SQueryMatchRoomAck::InitAsDefaultInstance() {
}

S2SQueryMatchRoomAck::S2SQueryMatchRoomAck(const S2SQueryMatchRoomAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SQueryMatchRoomAck::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SQueryMatchRoomAck::~S2SQueryMatchRoomAck() {
  SharedDtor();
}

void S2SQueryMatchRoomAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SQueryMatchRoomAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SQueryMatchRoomAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SQueryMatchRoomAck_descriptor_;
}

const S2SQueryMatchRoomAck& S2SQueryMatchRoomAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFMatchMessage_2eproto();
  return *default_instance_;
}

S2SQueryMatchRoomAck* S2SQueryMatchRoomAck::default_instance_ = NULL;

S2SQueryMatchRoomAck* S2SQueryMatchRoomAck::New() const {
  return new S2SQueryMatchRoomAck;
}

void S2SQueryMatchRoomAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0u;
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SQueryMatchRoomAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SQueryMatchRoomAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SQueryMatchRoomAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SQueryMatchRoomAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SQueryMatchRoomAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SQueryMatchRoomAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SQueryMatchRoomAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SQueryMatchRoomAck::MergeFrom(const S2SQueryMatchRoomAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SQueryMatchRoomAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryMatchRoomAck::CopyFrom(const S2SQueryMatchRoomAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryMatchRoomAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SQueryMatchRoomAck::Swap(S2SQueryMatchRoomAck* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SQueryMatchRoomAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SQueryMatchRoomAck_descriptor_;
  metadata.reflection = S2SQueryMatchRoomAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SQueryBattleRoomReq::kRoomidFieldNumber;
const int S2SQueryBattleRoomReq::kPlayeridFieldNumber;
const int S2SQueryBattleRoomReq::kServeridFieldNumber;
#endif  // !_MSC_VER

S2SQueryBattleRoomReq::S2SQueryBattleRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SQueryBattleRoomReq::InitAsDefaultInstance() {
}

S2SQueryBattleRoomReq::S2SQueryBattleRoomReq(const S2SQueryBattleRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SQueryBattleRoomReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  playerid_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SQueryBattleRoomReq::~S2SQueryBattleRoomReq() {
  SharedDtor();
}

void S2SQueryBattleRoomReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SQueryBattleRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SQueryBattleRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SQueryBattleRoomReq_descriptor_;
}

const S2SQueryBattleRoomReq& S2SQueryBattleRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFMatchMessage_2eproto();
  return *default_instance_;
}

S2SQueryBattleRoomReq* S2SQueryBattleRoomReq::default_instance_ = NULL;

S2SQueryBattleRoomReq* S2SQueryBattleRoomReq::New() const {
  return new S2SQueryBattleRoomReq;
}

void S2SQueryBattleRoomReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
    playerid_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SQueryBattleRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SQueryBattleRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SQueryBattleRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SQueryBattleRoomReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SQueryBattleRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SQueryBattleRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SQueryBattleRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SQueryBattleRoomReq::MergeFrom(const S2SQueryBattleRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SQueryBattleRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryBattleRoomReq::CopyFrom(const S2SQueryBattleRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryBattleRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SQueryBattleRoomReq::Swap(S2SQueryBattleRoomReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SQueryBattleRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SQueryBattleRoomReq_descriptor_;
  metadata.reflection = S2SQueryBattleRoomReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SQueryBattleRoomAck::kPlayeridFieldNumber;
const int S2SQueryBattleRoomAck::kRoomidFieldNumber;
const int S2SQueryBattleRoomAck::kMatchidFieldNumber;
#endif  // !_MSC_VER

S2SQueryBattleRoomAck::S2SQueryBattleRoomAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SQueryBattleRoomAck::InitAsDefaultInstance() {
}

S2SQueryBattleRoomAck::S2SQueryBattleRoomAck(const S2SQueryBattleRoomAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SQueryBattleRoomAck::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  roomid_ = GOOGLE_ULONGLONG(0);
  matchid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SQueryBattleRoomAck::~S2SQueryBattleRoomAck() {
  SharedDtor();
}

void S2SQueryBattleRoomAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SQueryBattleRoomAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SQueryBattleRoomAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SQueryBattleRoomAck_descriptor_;
}

const S2SQueryBattleRoomAck& S2SQueryBattleRoomAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFMatchMessage_2eproto();
  return *default_instance_;
}

S2SQueryBattleRoomAck* S2SQueryBattleRoomAck::default_instance_ = NULL;

S2SQueryBattleRoomAck* S2SQueryBattleRoomAck::New() const {
  return new S2SQueryBattleRoomAck;
}

void S2SQueryBattleRoomAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    roomid_ = GOOGLE_ULONGLONG(0);
    matchid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SQueryBattleRoomAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // required uint64 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_matchid;
        break;
      }

      // required uint32 matchid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SQueryBattleRoomAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  // required uint32 matchid = 3;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->matchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SQueryBattleRoomAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  // required uint32 matchid = 3;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->matchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SQueryBattleRoomAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint64 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 matchid = 3;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SQueryBattleRoomAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SQueryBattleRoomAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SQueryBattleRoomAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SQueryBattleRoomAck::MergeFrom(const S2SQueryBattleRoomAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SQueryBattleRoomAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryBattleRoomAck::CopyFrom(const S2SQueryBattleRoomAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryBattleRoomAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SQueryBattleRoomAck::Swap(S2SQueryBattleRoomAck* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(roomid_, other->roomid_);
    std::swap(matchid_, other->matchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SQueryBattleRoomAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SQueryBattleRoomAck_descriptor_;
  metadata.reflection = S2SQueryBattleRoomAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SQueryRoomToBattleShardReq::kRoomidFieldNumber;
const int S2SQueryRoomToBattleShardReq::kPlayeridFieldNumber;
const int S2SQueryRoomToBattleShardReq::kServeridFieldNumber;
#endif  // !_MSC_VER

S2SQueryRoomToBattleShardReq::S2SQueryRoomToBattleShardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SQueryRoomToBattleShardReq::InitAsDefaultInstance() {
}

S2SQueryRoomToBattleShardReq::S2SQueryRoomToBattleShardReq(const S2SQueryRoomToBattleShardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SQueryRoomToBattleShardReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  playerid_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SQueryRoomToBattleShardReq::~S2SQueryRoomToBattleShardReq() {
  SharedDtor();
}

void S2SQueryRoomToBattleShardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SQueryRoomToBattleShardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SQueryRoomToBattleShardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SQueryRoomToBattleShardReq_descriptor_;
}

const S2SQueryRoomToBattleShardReq& S2SQueryRoomToBattleShardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFMatchMessage_2eproto();
  return *default_instance_;
}

S2SQueryRoomToBattleShardReq* S2SQueryRoomToBattleShardReq::default_instance_ = NULL;

S2SQueryRoomToBattleShardReq* S2SQueryRoomToBattleShardReq::New() const {
  return new S2SQueryRoomToBattleShardReq;
}

void S2SQueryRoomToBattleShardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
    playerid_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SQueryRoomToBattleShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SQueryRoomToBattleShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SQueryRoomToBattleShardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // required uint32 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // required uint32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SQueryRoomToBattleShardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SQueryRoomToBattleShardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SQueryRoomToBattleShardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SQueryRoomToBattleShardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SQueryRoomToBattleShardReq::MergeFrom(const S2SQueryRoomToBattleShardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SQueryRoomToBattleShardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryRoomToBattleShardReq::CopyFrom(const S2SQueryRoomToBattleShardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryRoomToBattleShardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void S2SQueryRoomToBattleShardReq::Swap(S2SQueryRoomToBattleShardReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SQueryRoomToBattleShardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SQueryRoomToBattleShardReq_descriptor_;
  metadata.reflection = S2SQueryRoomToBattleShardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SPlayerOnlineToBattleShardReq::kRoomidFieldNumber;
const int S2SPlayerOnlineToBattleShardReq::kCampidFieldNumber;
const int S2SPlayerOnlineToBattleShardReq::kPlayeridFieldNumber;
const int S2SPlayerOnlineToBattleShardReq::kServeridFieldNumber;
#endif  // !_MSC_VER

S2SPlayerOnlineToBattleShardReq::S2SPlayerOnlineToBattleShardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SPlayerOnlineToBattleShardReq::InitAsDefaultInstance() {
}

S2SPlayerOnlineToBattleShardReq::S2SPlayerOnlineToBattleShardReq(const S2SPlayerOnlineToBattleShardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SPlayerOnlineToBattleShardReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  campid_ = 0u;
  playerid_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SPlayerOnlineToBattleShardReq::~S2SPlayerOnlineToBattleShardReq() {
  SharedDtor();
}

void S2SPlayerOnlineToBattleShardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SPlayerOnlineToBattleShardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SPlayerOnlineToBattleShardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SPlayerOnlineToBattleShardReq_descriptor_;
}

const S2SPlayerOnlineToBattleShardReq& S2SPlayerOnlineToBattleShardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFMatchMessage_2eproto();
  return *default_instance_;
}

S2SPlayerOnlineToBattleShardReq* S2SPlayerOnlineToBattleShardReq::default_instance_ = NULL;

S2SPlayerOnlineToBattleShardReq* S2SPlayerOnlineToBattleShardReq::New() const {
  return new S2SPlayerOnlineToBattleShardReq;
}

void S2SPlayerOnlineToBattleShardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = GOOGLE_ULONGLONG(0);
    campid_ = 0u;
    playerid_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SPlayerOnlineToBattleShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_campid;
        break;
      }

      // required uint32 campid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerid;
        break;
      }

      // required uint32 playerid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SPlayerOnlineToBattleShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // required uint32 campid = 2;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->campid(), output);
  }

  // required uint32 playerid = 3;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->playerid(), output);
  }

  // required uint32 serverid = 4;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SPlayerOnlineToBattleShardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // required uint32 campid = 2;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->campid(), target);
  }

  // required uint32 playerid = 3;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->playerid(), target);
  }

  // required uint32 serverid = 4;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SPlayerOnlineToBattleShardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // required uint32 campid = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // required uint32 playerid = 3;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 serverid = 4;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SPlayerOnlineToBattleShardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SPlayerOnlineToBattleShardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SPlayerOnlineToBattleShardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SPlayerOnlineToBattleShardReq::MergeFrom(const S2SPlayerOnlineToBattleShardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SPlayerOnlineToBattleShardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SPlayerOnlineToBattleShardReq::CopyFrom(const S2SPlayerOnlineToBattleShardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SPlayerOnlineToBattleShardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void S2SPlayerOnlineToBattleShardReq::Swap(S2SPlayerOnlineToBattleShardReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(campid_, other->campid_);
    std::swap(playerid_, other->playerid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SPlayerOnlineToBattleShardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SPlayerOnlineToBattleShardReq_descriptor_;
  metadata.reflection = S2SPlayerOnlineToBattleShardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SNoticeMatchStateReq::kPlayeridFieldNumber;
const int S2SNoticeMatchStateReq::kMatchidFieldNumber;
#endif  // !_MSC_VER

S2SNoticeMatchStateReq::S2SNoticeMatchStateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SNoticeMatchStateReq::InitAsDefaultInstance() {
}

S2SNoticeMatchStateReq::S2SNoticeMatchStateReq(const S2SNoticeMatchStateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SNoticeMatchStateReq::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  matchid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SNoticeMatchStateReq::~S2SNoticeMatchStateReq() {
  SharedDtor();
}

void S2SNoticeMatchStateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SNoticeMatchStateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SNoticeMatchStateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SNoticeMatchStateReq_descriptor_;
}

const S2SNoticeMatchStateReq& S2SNoticeMatchStateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFMatchMessage_2eproto();
  return *default_instance_;
}

S2SNoticeMatchStateReq* S2SNoticeMatchStateReq::default_instance_ = NULL;

S2SNoticeMatchStateReq* S2SNoticeMatchStateReq::New() const {
  return new S2SNoticeMatchStateReq;
}

void S2SNoticeMatchStateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    matchid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SNoticeMatchStateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_matchid;
        break;
      }

      // required uint32 matchid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_matchid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SNoticeMatchStateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required uint32 matchid = 2;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->matchid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SNoticeMatchStateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }

  // required uint32 matchid = 2;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->matchid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SNoticeMatchStateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required uint32 matchid = 2;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SNoticeMatchStateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SNoticeMatchStateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SNoticeMatchStateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SNoticeMatchStateReq::MergeFrom(const S2SNoticeMatchStateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SNoticeMatchStateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SNoticeMatchStateReq::CopyFrom(const S2SNoticeMatchStateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SNoticeMatchStateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SNoticeMatchStateReq::Swap(S2SNoticeMatchStateReq* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(matchid_, other->matchid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SNoticeMatchStateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SNoticeMatchStateReq_descriptor_;
  metadata.reflection = S2SNoticeMatchStateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2SResetMatchRoomReq::kMatchidFieldNumber;
const int S2SResetMatchRoomReq::kRoomidFieldNumber;
#endif  // !_MSC_VER

S2SResetMatchRoomReq::S2SResetMatchRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2SResetMatchRoomReq::InitAsDefaultInstance() {
}

S2SResetMatchRoomReq::S2SResetMatchRoomReq(const S2SResetMatchRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2SResetMatchRoomReq::SharedCtor() {
  _cached_size_ = 0;
  matchid_ = 0u;
  roomid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2SResetMatchRoomReq::~S2SResetMatchRoomReq() {
  SharedDtor();
}

void S2SResetMatchRoomReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2SResetMatchRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2SResetMatchRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2SResetMatchRoomReq_descriptor_;
}

const S2SResetMatchRoomReq& S2SResetMatchRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KFMatchMessage_2eproto();
  return *default_instance_;
}

S2SResetMatchRoomReq* S2SResetMatchRoomReq::default_instance_ = NULL;

S2SResetMatchRoomReq* S2SResetMatchRoomReq::New() const {
  return new S2SResetMatchRoomReq;
}

void S2SResetMatchRoomReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    matchid_ = 0u;
    roomid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2SResetMatchRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 matchid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
          set_has_matchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // required uint64 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2SResetMatchRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2SResetMatchRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 matchid = 1;
  if (has_matchid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // required uint64 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2SResetMatchRoomReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 matchid = 1;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchid());
    }

    // required uint64 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2SResetMatchRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2SResetMatchRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2SResetMatchRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2SResetMatchRoomReq::MergeFrom(const S2SResetMatchRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matchid()) {
      set_matchid(from.matchid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2SResetMatchRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SResetMatchRoomReq::CopyFrom(const S2SResetMatchRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SResetMatchRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void S2SResetMatchRoomReq::Swap(S2SResetMatchRoomReq* other) {
  if (other != this) {
    std::swap(matchid_, other->matchid_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2SResetMatchRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2SResetMatchRoomReq_descriptor_;
  metadata.reflection = S2SResetMatchRoomReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

// @@protoc_insertion_point(global_scope)
