// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFMatchMessage.proto

#include "KFMatchMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_KFDefineMessage_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_KFDefineMessage_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PBMatchGroup;
}  // namespace protobuf_KFDefineMessage_2eproto
namespace KFMsg {
class S2SRegisterMatchReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SRegisterMatchReq>
      _instance;
} _S2SRegisterMatchReq_default_instance_;
class S2SMatchToProxyReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SMatchToProxyReq>
      _instance;
} _S2SMatchToProxyReq_default_instance_;
class S2SMatchToClientAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SMatchToClientAck>
      _instance;
} _S2SMatchToClientAck_default_instance_;
class S2SMatchToShardReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SMatchToShardReq>
      _instance;
} _S2SMatchToShardReq_default_instance_;
class S2SCancelMatchToProxyReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SCancelMatchToProxyReq>
      _instance;
} _S2SCancelMatchToProxyReq_default_instance_;
class S2SCancelMatchToShardReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SCancelMatchToShardReq>
      _instance;
} _S2SCancelMatchToShardReq_default_instance_;
class S2SCancelMatchToBattleShardReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SCancelMatchToBattleShardReq>
      _instance;
} _S2SCancelMatchToBattleShardReq_default_instance_;
class S2SNoticeMatchRoomReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SNoticeMatchRoomReq>
      _instance;
} _S2SNoticeMatchRoomReq_default_instance_;
class S2SNoticeMatchRoomAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SNoticeMatchRoomAck>
      _instance;
} _S2SNoticeMatchRoomAck_default_instance_;
class S2SQueryMatchRoomReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SQueryMatchRoomReq>
      _instance;
} _S2SQueryMatchRoomReq_default_instance_;
class S2SQueryRoomToMatchShardReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SQueryRoomToMatchShardReq>
      _instance;
} _S2SQueryRoomToMatchShardReq_default_instance_;
class S2SQueryMatchRoomAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SQueryMatchRoomAck>
      _instance;
} _S2SQueryMatchRoomAck_default_instance_;
class S2SQueryBattleRoomReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SQueryBattleRoomReq>
      _instance;
} _S2SQueryBattleRoomReq_default_instance_;
class S2SQueryBattleRoomAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SQueryBattleRoomAck>
      _instance;
} _S2SQueryBattleRoomAck_default_instance_;
class S2SQueryRoomToBattleShardReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SQueryRoomToBattleShardReq>
      _instance;
} _S2SQueryRoomToBattleShardReq_default_instance_;
class S2SPlayerOnlineToBattleShardReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SPlayerOnlineToBattleShardReq>
      _instance;
} _S2SPlayerOnlineToBattleShardReq_default_instance_;
class S2SNoticeMatchStateReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SNoticeMatchStateReq>
      _instance;
} _S2SNoticeMatchStateReq_default_instance_;
class S2SResetMatchRoomReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<S2SResetMatchRoomReq>
      _instance;
} _S2SResetMatchRoomReq_default_instance_;
}  // namespace KFMsg
namespace protobuf_KFMatchMessage_2eproto {
static void InitDefaultsS2SRegisterMatchReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SRegisterMatchReq_default_instance_;
    new (ptr) ::KFMsg::S2SRegisterMatchReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SRegisterMatchReq::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SRegisterMatchReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SRegisterMatchReq}, {}};

static void InitDefaultsS2SMatchToProxyReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SMatchToProxyReq_default_instance_;
    new (ptr) ::KFMsg::S2SMatchToProxyReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SMatchToProxyReq::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_S2SMatchToProxyReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsS2SMatchToProxyReq}, {
      &protobuf_KFDefineMessage_2eproto::scc_info_PBMatchGroup.base,}};

static void InitDefaultsS2SMatchToClientAck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SMatchToClientAck_default_instance_;
    new (ptr) ::KFMsg::S2SMatchToClientAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SMatchToClientAck::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SMatchToClientAck =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SMatchToClientAck}, {}};

static void InitDefaultsS2SMatchToShardReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SMatchToShardReq_default_instance_;
    new (ptr) ::KFMsg::S2SMatchToShardReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SMatchToShardReq::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<1> scc_info_S2SMatchToShardReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsS2SMatchToShardReq}, {
      &protobuf_KFDefineMessage_2eproto::scc_info_PBMatchGroup.base,}};

static void InitDefaultsS2SCancelMatchToProxyReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SCancelMatchToProxyReq_default_instance_;
    new (ptr) ::KFMsg::S2SCancelMatchToProxyReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SCancelMatchToProxyReq::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SCancelMatchToProxyReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SCancelMatchToProxyReq}, {}};

static void InitDefaultsS2SCancelMatchToShardReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SCancelMatchToShardReq_default_instance_;
    new (ptr) ::KFMsg::S2SCancelMatchToShardReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SCancelMatchToShardReq::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SCancelMatchToShardReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SCancelMatchToShardReq}, {}};

static void InitDefaultsS2SCancelMatchToBattleShardReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SCancelMatchToBattleShardReq_default_instance_;
    new (ptr) ::KFMsg::S2SCancelMatchToBattleShardReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SCancelMatchToBattleShardReq::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SCancelMatchToBattleShardReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SCancelMatchToBattleShardReq}, {}};

static void InitDefaultsS2SNoticeMatchRoomReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SNoticeMatchRoomReq_default_instance_;
    new (ptr) ::KFMsg::S2SNoticeMatchRoomReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SNoticeMatchRoomReq::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SNoticeMatchRoomReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SNoticeMatchRoomReq}, {}};

static void InitDefaultsS2SNoticeMatchRoomAck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SNoticeMatchRoomAck_default_instance_;
    new (ptr) ::KFMsg::S2SNoticeMatchRoomAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SNoticeMatchRoomAck::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SNoticeMatchRoomAck =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SNoticeMatchRoomAck}, {}};

static void InitDefaultsS2SQueryMatchRoomReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SQueryMatchRoomReq_default_instance_;
    new (ptr) ::KFMsg::S2SQueryMatchRoomReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SQueryMatchRoomReq::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SQueryMatchRoomReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SQueryMatchRoomReq}, {}};

static void InitDefaultsS2SQueryRoomToMatchShardReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SQueryRoomToMatchShardReq_default_instance_;
    new (ptr) ::KFMsg::S2SQueryRoomToMatchShardReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SQueryRoomToMatchShardReq::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SQueryRoomToMatchShardReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SQueryRoomToMatchShardReq}, {}};

static void InitDefaultsS2SQueryMatchRoomAck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SQueryMatchRoomAck_default_instance_;
    new (ptr) ::KFMsg::S2SQueryMatchRoomAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SQueryMatchRoomAck::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SQueryMatchRoomAck =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SQueryMatchRoomAck}, {}};

static void InitDefaultsS2SQueryBattleRoomReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SQueryBattleRoomReq_default_instance_;
    new (ptr) ::KFMsg::S2SQueryBattleRoomReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SQueryBattleRoomReq::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SQueryBattleRoomReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SQueryBattleRoomReq}, {}};

static void InitDefaultsS2SQueryBattleRoomAck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SQueryBattleRoomAck_default_instance_;
    new (ptr) ::KFMsg::S2SQueryBattleRoomAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SQueryBattleRoomAck::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SQueryBattleRoomAck =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SQueryBattleRoomAck}, {}};

static void InitDefaultsS2SQueryRoomToBattleShardReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SQueryRoomToBattleShardReq_default_instance_;
    new (ptr) ::KFMsg::S2SQueryRoomToBattleShardReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SQueryRoomToBattleShardReq::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SQueryRoomToBattleShardReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SQueryRoomToBattleShardReq}, {}};

static void InitDefaultsS2SPlayerOnlineToBattleShardReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SPlayerOnlineToBattleShardReq_default_instance_;
    new (ptr) ::KFMsg::S2SPlayerOnlineToBattleShardReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SPlayerOnlineToBattleShardReq::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SPlayerOnlineToBattleShardReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SPlayerOnlineToBattleShardReq}, {}};

static void InitDefaultsS2SNoticeMatchStateReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SNoticeMatchStateReq_default_instance_;
    new (ptr) ::KFMsg::S2SNoticeMatchStateReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SNoticeMatchStateReq::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SNoticeMatchStateReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SNoticeMatchStateReq}, {}};

static void InitDefaultsS2SResetMatchRoomReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::KFMsg::_S2SResetMatchRoomReq_default_instance_;
    new (ptr) ::KFMsg::S2SResetMatchRoomReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::KFMsg::S2SResetMatchRoomReq::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_S2SResetMatchRoomReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsS2SResetMatchRoomReq}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_S2SRegisterMatchReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SMatchToProxyReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SMatchToClientAck.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SMatchToShardReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SCancelMatchToProxyReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SCancelMatchToShardReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SCancelMatchToBattleShardReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SNoticeMatchRoomReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SNoticeMatchRoomAck.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SQueryMatchRoomReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SQueryRoomToMatchShardReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SQueryMatchRoomAck.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SQueryBattleRoomReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SQueryBattleRoomAck.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SQueryRoomToBattleShardReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SPlayerOnlineToBattleShardReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SNoticeMatchStateReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_S2SResetMatchRoomReq.base);
}

::google::protobuf::Metadata file_level_metadata[18];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SRegisterMatchReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SRegisterMatchReq, matchid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SMatchToProxyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SMatchToProxyReq, pbgroup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SMatchToProxyReq, matchid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SMatchToProxyReq, allowgroup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SMatchToProxyReq, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SMatchToProxyReq, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SMatchToProxyReq, battleserverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SMatchToProxyReq, version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SMatchToClientAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SMatchToClientAck, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SMatchToClientAck, matchid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SMatchToClientAck, playerid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SMatchToShardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SMatchToShardReq, pbgroup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SMatchToShardReq, matchid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SMatchToShardReq, allowgroup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SMatchToShardReq, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SMatchToShardReq, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SMatchToShardReq, battleserverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SMatchToShardReq, version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SCancelMatchToProxyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SCancelMatchToProxyReq, matchid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SCancelMatchToProxyReq, playerid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SCancelMatchToShardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SCancelMatchToShardReq, matchid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SCancelMatchToShardReq, playerid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SCancelMatchToBattleShardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SCancelMatchToBattleShardReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SCancelMatchToBattleShardReq, campid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SCancelMatchToBattleShardReq, groupid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SNoticeMatchRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SNoticeMatchRoomReq, matchid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SNoticeMatchRoomReq, battleshardid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SNoticeMatchRoomReq, campid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SNoticeMatchRoomReq, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SNoticeMatchRoomReq, serverid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SNoticeMatchRoomReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SNoticeMatchRoomReq, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SNoticeMatchRoomReq, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SNoticeMatchRoomReq, token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SNoticeMatchRoomAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SNoticeMatchRoomAck, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SNoticeMatchRoomAck, campid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SNoticeMatchRoomAck, playerid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryMatchRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryMatchRoomReq, matchid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryMatchRoomReq, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryMatchRoomReq, serverid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryRoomToMatchShardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryRoomToMatchShardReq, matchid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryRoomToMatchShardReq, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryRoomToMatchShardReq, serverid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryMatchRoomAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryMatchRoomAck, matchid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryMatchRoomAck, playerid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryBattleRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryBattleRoomReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryBattleRoomReq, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryBattleRoomReq, serverid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryBattleRoomAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryBattleRoomAck, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryBattleRoomAck, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryBattleRoomAck, matchid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryRoomToBattleShardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryRoomToBattleShardReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryRoomToBattleShardReq, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SQueryRoomToBattleShardReq, serverid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SPlayerOnlineToBattleShardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SPlayerOnlineToBattleShardReq, roomid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SPlayerOnlineToBattleShardReq, campid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SPlayerOnlineToBattleShardReq, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SPlayerOnlineToBattleShardReq, serverid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SNoticeMatchStateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SNoticeMatchStateReq, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SNoticeMatchStateReq, matchid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SResetMatchRoomReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SResetMatchRoomReq, matchid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::KFMsg::S2SResetMatchRoomReq, roomid_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::KFMsg::S2SRegisterMatchReq)},
  { 6, -1, sizeof(::KFMsg::S2SMatchToProxyReq)},
  { 18, -1, sizeof(::KFMsg::S2SMatchToClientAck)},
  { 26, -1, sizeof(::KFMsg::S2SMatchToShardReq)},
  { 38, -1, sizeof(::KFMsg::S2SCancelMatchToProxyReq)},
  { 45, -1, sizeof(::KFMsg::S2SCancelMatchToShardReq)},
  { 52, -1, sizeof(::KFMsg::S2SCancelMatchToBattleShardReq)},
  { 60, -1, sizeof(::KFMsg::S2SNoticeMatchRoomReq)},
  { 74, -1, sizeof(::KFMsg::S2SNoticeMatchRoomAck)},
  { 82, -1, sizeof(::KFMsg::S2SQueryMatchRoomReq)},
  { 90, -1, sizeof(::KFMsg::S2SQueryRoomToMatchShardReq)},
  { 98, -1, sizeof(::KFMsg::S2SQueryMatchRoomAck)},
  { 105, -1, sizeof(::KFMsg::S2SQueryBattleRoomReq)},
  { 113, -1, sizeof(::KFMsg::S2SQueryBattleRoomAck)},
  { 121, -1, sizeof(::KFMsg::S2SQueryRoomToBattleShardReq)},
  { 129, -1, sizeof(::KFMsg::S2SPlayerOnlineToBattleShardReq)},
  { 138, -1, sizeof(::KFMsg::S2SNoticeMatchStateReq)},
  { 145, -1, sizeof(::KFMsg::S2SResetMatchRoomReq)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SRegisterMatchReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SMatchToProxyReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SMatchToClientAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SMatchToShardReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SCancelMatchToProxyReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SCancelMatchToShardReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SCancelMatchToBattleShardReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SNoticeMatchRoomReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SNoticeMatchRoomAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SQueryMatchRoomReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SQueryRoomToMatchShardReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SQueryMatchRoomAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SQueryBattleRoomReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SQueryBattleRoomAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SQueryRoomToBattleShardReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SPlayerOnlineToBattleShardReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SNoticeMatchStateReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::KFMsg::_S2SResetMatchRoomReq_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "KFMatchMessage.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 18);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024KFMatchMessage.proto\022\005KFMsg\032\025KFDefineM"
      "essage.proto\"&\n\023S2SRegisterMatchReq\022\017\n\007m"
      "atchid\030\001 \003(\r\"\254\001\n\022S2SMatchToProxyReq\022$\n\007p"
      "bgroup\030\001 \001(\0132\023.KFMsg.PBMatchGroup\022\017\n\007mat"
      "chid\030\002 \001(\r\022\022\n\nallowgroup\030\003 \001(\010\022\020\n\010player"
      "id\030\004 \001(\004\022\020\n\010serverid\030\005 \001(\004\022\026\n\016battleserv"
      "erid\030\006 \001(\004\022\017\n\007version\030\007 \001(\014\"H\n\023S2SMatchT"
      "oClientAck\022\016\n\006result\030\001 \001(\r\022\017\n\007matchid\030\002 "
      "\001(\r\022\020\n\010playerid\030\003 \001(\004\"\254\001\n\022S2SMatchToShar"
      "dReq\022$\n\007pbgroup\030\001 \001(\0132\023.KFMsg.PBMatchGro"
      "up\022\017\n\007matchid\030\002 \001(\r\022\022\n\nallowgroup\030\003 \001(\010\022"
      "\020\n\010playerid\030\004 \001(\004\022\020\n\010serverid\030\005 \001(\004\022\026\n\016b"
      "attleserverid\030\006 \001(\004\022\017\n\007version\030\007 \001(\014\"=\n\030"
      "S2SCancelMatchToProxyReq\022\017\n\007matchid\030\001 \001("
      "\r\022\020\n\010playerid\030\002 \001(\004\"=\n\030S2SCancelMatchToS"
      "hardReq\022\017\n\007matchid\030\001 \001(\r\022\020\n\010playerid\030\002 \001"
      "(\004\"Q\n\036S2SCancelMatchToBattleShardReq\022\016\n\006"
      "roomid\030\001 \001(\004\022\016\n\006campid\030\002 \001(\r\022\017\n\007groupid\030"
      "\003 \001(\004\"\254\001\n\025S2SNoticeMatchRoomReq\022\017\n\007match"
      "id\030\001 \001(\r\022\025\n\rbattleshardid\030\002 \001(\004\022\016\n\006campi"
      "d\030\003 \001(\r\022\020\n\010playerid\030\004 \001(\004\022\020\n\010serverid\030\005 "
      "\001(\004\022\016\n\006roomid\030\006 \001(\004\022\n\n\002ip\030\007 \001(\014\022\014\n\004port\030"
      "\010 \001(\r\022\r\n\005token\030\t \001(\014\"I\n\025S2SNoticeMatchRo"
      "omAck\022\016\n\006roomid\030\001 \001(\004\022\016\n\006campid\030\002 \001(\r\022\020\n"
      "\010playerid\030\003 \001(\004\"K\n\024S2SQueryMatchRoomReq\022"
      "\017\n\007matchid\030\001 \001(\r\022\020\n\010playerid\030\002 \001(\004\022\020\n\010se"
      "rverid\030\003 \001(\004\"R\n\033S2SQueryRoomToMatchShard"
      "Req\022\017\n\007matchid\030\001 \001(\r\022\020\n\010playerid\030\002 \001(\004\022\020"
      "\n\010serverid\030\003 \001(\004\"9\n\024S2SQueryMatchRoomAck"
      "\022\017\n\007matchid\030\001 \001(\r\022\020\n\010playerid\030\002 \001(\004\"K\n\025S"
      "2SQueryBattleRoomReq\022\016\n\006roomid\030\001 \001(\004\022\020\n\010"
      "playerid\030\002 \001(\004\022\020\n\010serverid\030\003 \001(\004\"J\n\025S2SQ"
      "ueryBattleRoomAck\022\020\n\010playerid\030\001 \001(\004\022\016\n\006r"
      "oomid\030\002 \001(\004\022\017\n\007matchid\030\003 \001(\r\"R\n\034S2SQuery"
      "RoomToBattleShardReq\022\016\n\006roomid\030\001 \001(\004\022\020\n\010"
      "playerid\030\002 \001(\004\022\020\n\010serverid\030\003 \001(\004\"e\n\037S2SP"
      "layerOnlineToBattleShardReq\022\016\n\006roomid\030\001 "
      "\001(\004\022\016\n\006campid\030\002 \001(\r\022\020\n\010playerid\030\003 \001(\004\022\020\n"
      "\010serverid\030\004 \001(\004\";\n\026S2SNoticeMatchStateRe"
      "q\022\020\n\010playerid\030\001 \001(\004\022\017\n\007matchid\030\002 \001(\r\"7\n\024"
      "S2SResetMatchRoomReq\022\017\n\007matchid\030\001 \001(\r\022\016\n"
      "\006roomid\030\002 \001(\004*\221\005\n\rMatchProtocol\022\035\n\031S2S_M"
      "ATCH_PROTOCOL_UNKNOW\020\000\022\033\n\026S2S_REGISTER_M"
      "ATCH_REQ\020\335V\022\033\n\026S2S_MATCH_TO_PROXY_REQ\020\336V"
      "\022\033\n\026S2S_MATCH_TO_SHARD_REQ\020\337V\022\034\n\027S2S_MAT"
      "CH_TO_CLIENT_ACK\020\340V\022\"\n\035S2S_CANCEL_MATCH_"
      "TO_PROXY_REQ\020\343V\022\"\n\035S2S_CANCEL_MATCH_TO_S"
      "HARD_REQ\020\344V\022\036\n\031S2S_NOTICE_MATCH_ROOM_REQ"
      "\020\345V\022\036\n\031S2S_NOTICE_MATCH_ROOM_ACK\020\346V\022\035\n\030S"
      "2S_QUERY_MATCH_ROOM_REQ\020\347V\022\035\n\030S2S_QUERY_"
      "MATCH_ROOM_ACK\020\350V\022\036\n\031S2S_QUERY_BATTLE_RO"
      "OM_REQ\020\351V\022\036\n\031S2S_QUERY_BATTLE_ROOM_ACK\020\352"
      "V\022&\n!S2S_QUERY_ROOM_TO_MATCH_SHARD_REQ\020\353"
      "V\022\'\n\"S2S_QUERY_ROOM_TO_BATTLE_SHARD_REQ\020"
      "\354V\022)\n$S2S_CANCEL_MATCH_TO_BATTLE_SHARD_R"
      "EQ\020\356V\022*\n%S2S_PLAYER_ONLINE_TO_BATTLE_SHA"
      "RD_REQ\020\360V\022\037\n\032S2S_NOTICE_MATCH_STATE_REQ\020"
      "\361V\022\035\n\030S2S_RESET_MATCH_ROOM_REQ\020\362Vb\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2321);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KFMatchMessage.proto", &protobuf_RegisterTypes);
  ::protobuf_KFDefineMessage_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_KFMatchMessage_2eproto
namespace KFMsg {
const ::google::protobuf::EnumDescriptor* MatchProtocol_descriptor() {
  protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFMatchMessage_2eproto::file_level_enum_descriptors[0];
}
bool MatchProtocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 11101:
    case 11102:
    case 11103:
    case 11104:
    case 11107:
    case 11108:
    case 11109:
    case 11110:
    case 11111:
    case 11112:
    case 11113:
    case 11114:
    case 11115:
    case 11116:
    case 11118:
    case 11120:
    case 11121:
    case 11122:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void S2SRegisterMatchReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SRegisterMatchReq::kMatchidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SRegisterMatchReq::S2SRegisterMatchReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_KFMatchMessage_2eproto::scc_info_S2SRegisterMatchReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SRegisterMatchReq)
}
S2SRegisterMatchReq::S2SRegisterMatchReq(const S2SRegisterMatchReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      matchid_(from.matchid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SRegisterMatchReq)
}

void S2SRegisterMatchReq::SharedCtor() {
}

S2SRegisterMatchReq::~S2SRegisterMatchReq() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SRegisterMatchReq)
  SharedDtor();
}

void S2SRegisterMatchReq::SharedDtor() {
}

void S2SRegisterMatchReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SRegisterMatchReq::descriptor() {
  ::protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SRegisterMatchReq& S2SRegisterMatchReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_KFMatchMessage_2eproto::scc_info_S2SRegisterMatchReq.base);
  return *internal_default_instance();
}


void S2SRegisterMatchReq::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SRegisterMatchReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matchid_.Clear();
  _internal_metadata_.Clear();
}

bool S2SRegisterMatchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SRegisterMatchReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 matchid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_matchid())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_matchid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SRegisterMatchReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SRegisterMatchReq)
  return false;
#undef DO_
}

void S2SRegisterMatchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SRegisterMatchReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 matchid = 1;
  if (this->matchid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _matchid_cached_byte_size_));
  }
  for (int i = 0, n = this->matchid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->matchid(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SRegisterMatchReq)
}

::google::protobuf::uint8* S2SRegisterMatchReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SRegisterMatchReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 matchid = 1;
  if (this->matchid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _matchid_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->matchid_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SRegisterMatchReq)
  return target;
}

size_t S2SRegisterMatchReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SRegisterMatchReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 matchid = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->matchid_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _matchid_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SRegisterMatchReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SRegisterMatchReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SRegisterMatchReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SRegisterMatchReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SRegisterMatchReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SRegisterMatchReq)
    MergeFrom(*source);
  }
}

void S2SRegisterMatchReq::MergeFrom(const S2SRegisterMatchReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SRegisterMatchReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matchid_.MergeFrom(from.matchid_);
}

void S2SRegisterMatchReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SRegisterMatchReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SRegisterMatchReq::CopyFrom(const S2SRegisterMatchReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SRegisterMatchReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SRegisterMatchReq::IsInitialized() const {
  return true;
}

void S2SRegisterMatchReq::Swap(S2SRegisterMatchReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SRegisterMatchReq::InternalSwap(S2SRegisterMatchReq* other) {
  using std::swap;
  matchid_.InternalSwap(&other->matchid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SRegisterMatchReq::GetMetadata() const {
  protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SMatchToProxyReq::InitAsDefaultInstance() {
  ::KFMsg::_S2SMatchToProxyReq_default_instance_._instance.get_mutable()->pbgroup_ = const_cast< ::KFMsg::PBMatchGroup*>(
      ::KFMsg::PBMatchGroup::internal_default_instance());
}
void S2SMatchToProxyReq::clear_pbgroup() {
  if (GetArenaNoVirtual() == NULL && pbgroup_ != NULL) {
    delete pbgroup_;
  }
  pbgroup_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SMatchToProxyReq::kPbgroupFieldNumber;
const int S2SMatchToProxyReq::kMatchidFieldNumber;
const int S2SMatchToProxyReq::kAllowgroupFieldNumber;
const int S2SMatchToProxyReq::kPlayeridFieldNumber;
const int S2SMatchToProxyReq::kServeridFieldNumber;
const int S2SMatchToProxyReq::kBattleserveridFieldNumber;
const int S2SMatchToProxyReq::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SMatchToProxyReq::S2SMatchToProxyReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_KFMatchMessage_2eproto::scc_info_S2SMatchToProxyReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SMatchToProxyReq)
}
S2SMatchToProxyReq::S2SMatchToProxyReq(const S2SMatchToProxyReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_pbgroup()) {
    pbgroup_ = new ::KFMsg::PBMatchGroup(*from.pbgroup_);
  } else {
    pbgroup_ = NULL;
  }
  ::memcpy(&matchid_, &from.matchid_,
    static_cast<size_t>(reinterpret_cast<char*>(&battleserverid_) -
    reinterpret_cast<char*>(&matchid_)) + sizeof(battleserverid_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SMatchToProxyReq)
}

void S2SMatchToProxyReq::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pbgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battleserverid_) -
      reinterpret_cast<char*>(&pbgroup_)) + sizeof(battleserverid_));
}

S2SMatchToProxyReq::~S2SMatchToProxyReq() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SMatchToProxyReq)
  SharedDtor();
}

void S2SMatchToProxyReq::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pbgroup_;
}

void S2SMatchToProxyReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SMatchToProxyReq::descriptor() {
  ::protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SMatchToProxyReq& S2SMatchToProxyReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_KFMatchMessage_2eproto::scc_info_S2SMatchToProxyReq.base);
  return *internal_default_instance();
}


void S2SMatchToProxyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SMatchToProxyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pbgroup_ != NULL) {
    delete pbgroup_;
  }
  pbgroup_ = NULL;
  ::memset(&matchid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battleserverid_) -
      reinterpret_cast<char*>(&matchid_)) + sizeof(battleserverid_));
  _internal_metadata_.Clear();
}

bool S2SMatchToProxyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SMatchToProxyReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .KFMsg.PBMatchGroup pbgroup = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pbgroup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 matchid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool allowgroup = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowgroup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 playerid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 serverid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 battleserverid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleserverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SMatchToProxyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SMatchToProxyReq)
  return false;
#undef DO_
}

void S2SMatchToProxyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SMatchToProxyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KFMsg.PBMatchGroup pbgroup = 1;
  if (this->has_pbgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_pbgroup(), output);
  }

  // uint32 matchid = 2;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->matchid(), output);
  }

  // bool allowgroup = 3;
  if (this->allowgroup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->allowgroup(), output);
  }

  // uint64 playerid = 4;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->playerid(), output);
  }

  // uint64 serverid = 5;
  if (this->serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->serverid(), output);
  }

  // uint64 battleserverid = 6;
  if (this->battleserverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->battleserverid(), output);
  }

  // bytes version = 7;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SMatchToProxyReq)
}

::google::protobuf::uint8* S2SMatchToProxyReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SMatchToProxyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KFMsg.PBMatchGroup pbgroup = 1;
  if (this->has_pbgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_pbgroup(), deterministic, target);
  }

  // uint32 matchid = 2;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->matchid(), target);
  }

  // bool allowgroup = 3;
  if (this->allowgroup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->allowgroup(), target);
  }

  // uint64 playerid = 4;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->playerid(), target);
  }

  // uint64 serverid = 5;
  if (this->serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->serverid(), target);
  }

  // uint64 battleserverid = 6;
  if (this->battleserverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->battleserverid(), target);
  }

  // bytes version = 7;
  if (this->version().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SMatchToProxyReq)
  return target;
}

size_t S2SMatchToProxyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SMatchToProxyReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes version = 7;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->version());
  }

  // .KFMsg.PBMatchGroup pbgroup = 1;
  if (this->has_pbgroup()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pbgroup_);
  }

  // uint32 matchid = 2;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  // bool allowgroup = 3;
  if (this->allowgroup() != 0) {
    total_size += 1 + 1;
  }

  // uint64 playerid = 4;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // uint64 serverid = 5;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->serverid());
  }

  // uint64 battleserverid = 6;
  if (this->battleserverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->battleserverid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SMatchToProxyReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SMatchToProxyReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SMatchToProxyReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SMatchToProxyReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SMatchToProxyReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SMatchToProxyReq)
    MergeFrom(*source);
  }
}

void S2SMatchToProxyReq::MergeFrom(const S2SMatchToProxyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SMatchToProxyReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_pbgroup()) {
    mutable_pbgroup()->::KFMsg::PBMatchGroup::MergeFrom(from.pbgroup());
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
  if (from.allowgroup() != 0) {
    set_allowgroup(from.allowgroup());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.serverid() != 0) {
    set_serverid(from.serverid());
  }
  if (from.battleserverid() != 0) {
    set_battleserverid(from.battleserverid());
  }
}

void S2SMatchToProxyReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SMatchToProxyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SMatchToProxyReq::CopyFrom(const S2SMatchToProxyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SMatchToProxyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SMatchToProxyReq::IsInitialized() const {
  return true;
}

void S2SMatchToProxyReq::Swap(S2SMatchToProxyReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SMatchToProxyReq::InternalSwap(S2SMatchToProxyReq* other) {
  using std::swap;
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pbgroup_, other->pbgroup_);
  swap(matchid_, other->matchid_);
  swap(allowgroup_, other->allowgroup_);
  swap(playerid_, other->playerid_);
  swap(serverid_, other->serverid_);
  swap(battleserverid_, other->battleserverid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SMatchToProxyReq::GetMetadata() const {
  protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SMatchToClientAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SMatchToClientAck::kResultFieldNumber;
const int S2SMatchToClientAck::kMatchidFieldNumber;
const int S2SMatchToClientAck::kPlayeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SMatchToClientAck::S2SMatchToClientAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_KFMatchMessage_2eproto::scc_info_S2SMatchToClientAck.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SMatchToClientAck)
}
S2SMatchToClientAck::S2SMatchToClientAck(const S2SMatchToClientAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&result_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SMatchToClientAck)
}

void S2SMatchToClientAck::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&result_)) + sizeof(playerid_));
}

S2SMatchToClientAck::~S2SMatchToClientAck() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SMatchToClientAck)
  SharedDtor();
}

void S2SMatchToClientAck::SharedDtor() {
}

void S2SMatchToClientAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SMatchToClientAck::descriptor() {
  ::protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SMatchToClientAck& S2SMatchToClientAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_KFMatchMessage_2eproto::scc_info_S2SMatchToClientAck.base);
  return *internal_default_instance();
}


void S2SMatchToClientAck::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SMatchToClientAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&result_)) + sizeof(playerid_));
  _internal_metadata_.Clear();
}

bool S2SMatchToClientAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SMatchToClientAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 matchid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 playerid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SMatchToClientAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SMatchToClientAck)
  return false;
#undef DO_
}

void S2SMatchToClientAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SMatchToClientAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // uint32 matchid = 2;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->matchid(), output);
  }

  // uint64 playerid = 3;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->playerid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SMatchToClientAck)
}

::google::protobuf::uint8* S2SMatchToClientAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SMatchToClientAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // uint32 matchid = 2;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->matchid(), target);
  }

  // uint64 playerid = 3;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->playerid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SMatchToClientAck)
  return target;
}

size_t S2SMatchToClientAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SMatchToClientAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  // uint32 matchid = 2;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  // uint64 playerid = 3;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SMatchToClientAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SMatchToClientAck)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SMatchToClientAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SMatchToClientAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SMatchToClientAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SMatchToClientAck)
    MergeFrom(*source);
  }
}

void S2SMatchToClientAck::MergeFrom(const S2SMatchToClientAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SMatchToClientAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void S2SMatchToClientAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SMatchToClientAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SMatchToClientAck::CopyFrom(const S2SMatchToClientAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SMatchToClientAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SMatchToClientAck::IsInitialized() const {
  return true;
}

void S2SMatchToClientAck::Swap(S2SMatchToClientAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SMatchToClientAck::InternalSwap(S2SMatchToClientAck* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(matchid_, other->matchid_);
  swap(playerid_, other->playerid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SMatchToClientAck::GetMetadata() const {
  protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SMatchToShardReq::InitAsDefaultInstance() {
  ::KFMsg::_S2SMatchToShardReq_default_instance_._instance.get_mutable()->pbgroup_ = const_cast< ::KFMsg::PBMatchGroup*>(
      ::KFMsg::PBMatchGroup::internal_default_instance());
}
void S2SMatchToShardReq::clear_pbgroup() {
  if (GetArenaNoVirtual() == NULL && pbgroup_ != NULL) {
    delete pbgroup_;
  }
  pbgroup_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SMatchToShardReq::kPbgroupFieldNumber;
const int S2SMatchToShardReq::kMatchidFieldNumber;
const int S2SMatchToShardReq::kAllowgroupFieldNumber;
const int S2SMatchToShardReq::kPlayeridFieldNumber;
const int S2SMatchToShardReq::kServeridFieldNumber;
const int S2SMatchToShardReq::kBattleserveridFieldNumber;
const int S2SMatchToShardReq::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SMatchToShardReq::S2SMatchToShardReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_KFMatchMessage_2eproto::scc_info_S2SMatchToShardReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SMatchToShardReq)
}
S2SMatchToShardReq::S2SMatchToShardReq(const S2SMatchToShardReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_pbgroup()) {
    pbgroup_ = new ::KFMsg::PBMatchGroup(*from.pbgroup_);
  } else {
    pbgroup_ = NULL;
  }
  ::memcpy(&matchid_, &from.matchid_,
    static_cast<size_t>(reinterpret_cast<char*>(&battleserverid_) -
    reinterpret_cast<char*>(&matchid_)) + sizeof(battleserverid_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SMatchToShardReq)
}

void S2SMatchToShardReq::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pbgroup_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battleserverid_) -
      reinterpret_cast<char*>(&pbgroup_)) + sizeof(battleserverid_));
}

S2SMatchToShardReq::~S2SMatchToShardReq() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SMatchToShardReq)
  SharedDtor();
}

void S2SMatchToShardReq::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pbgroup_;
}

void S2SMatchToShardReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SMatchToShardReq::descriptor() {
  ::protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SMatchToShardReq& S2SMatchToShardReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_KFMatchMessage_2eproto::scc_info_S2SMatchToShardReq.base);
  return *internal_default_instance();
}


void S2SMatchToShardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SMatchToShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pbgroup_ != NULL) {
    delete pbgroup_;
  }
  pbgroup_ = NULL;
  ::memset(&matchid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battleserverid_) -
      reinterpret_cast<char*>(&matchid_)) + sizeof(battleserverid_));
  _internal_metadata_.Clear();
}

bool S2SMatchToShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SMatchToShardReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .KFMsg.PBMatchGroup pbgroup = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pbgroup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 matchid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool allowgroup = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowgroup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 playerid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 serverid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 battleserverid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleserverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes version = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SMatchToShardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SMatchToShardReq)
  return false;
#undef DO_
}

void S2SMatchToShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SMatchToShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KFMsg.PBMatchGroup pbgroup = 1;
  if (this->has_pbgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_pbgroup(), output);
  }

  // uint32 matchid = 2;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->matchid(), output);
  }

  // bool allowgroup = 3;
  if (this->allowgroup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->allowgroup(), output);
  }

  // uint64 playerid = 4;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->playerid(), output);
  }

  // uint64 serverid = 5;
  if (this->serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->serverid(), output);
  }

  // uint64 battleserverid = 6;
  if (this->battleserverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->battleserverid(), output);
  }

  // bytes version = 7;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SMatchToShardReq)
}

::google::protobuf::uint8* S2SMatchToShardReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SMatchToShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KFMsg.PBMatchGroup pbgroup = 1;
  if (this->has_pbgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_pbgroup(), deterministic, target);
  }

  // uint32 matchid = 2;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->matchid(), target);
  }

  // bool allowgroup = 3;
  if (this->allowgroup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->allowgroup(), target);
  }

  // uint64 playerid = 4;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->playerid(), target);
  }

  // uint64 serverid = 5;
  if (this->serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->serverid(), target);
  }

  // uint64 battleserverid = 6;
  if (this->battleserverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->battleserverid(), target);
  }

  // bytes version = 7;
  if (this->version().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SMatchToShardReq)
  return target;
}

size_t S2SMatchToShardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SMatchToShardReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes version = 7;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->version());
  }

  // .KFMsg.PBMatchGroup pbgroup = 1;
  if (this->has_pbgroup()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pbgroup_);
  }

  // uint32 matchid = 2;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  // bool allowgroup = 3;
  if (this->allowgroup() != 0) {
    total_size += 1 + 1;
  }

  // uint64 playerid = 4;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // uint64 serverid = 5;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->serverid());
  }

  // uint64 battleserverid = 6;
  if (this->battleserverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->battleserverid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SMatchToShardReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SMatchToShardReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SMatchToShardReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SMatchToShardReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SMatchToShardReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SMatchToShardReq)
    MergeFrom(*source);
  }
}

void S2SMatchToShardReq::MergeFrom(const S2SMatchToShardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SMatchToShardReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_pbgroup()) {
    mutable_pbgroup()->::KFMsg::PBMatchGroup::MergeFrom(from.pbgroup());
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
  if (from.allowgroup() != 0) {
    set_allowgroup(from.allowgroup());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.serverid() != 0) {
    set_serverid(from.serverid());
  }
  if (from.battleserverid() != 0) {
    set_battleserverid(from.battleserverid());
  }
}

void S2SMatchToShardReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SMatchToShardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SMatchToShardReq::CopyFrom(const S2SMatchToShardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SMatchToShardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SMatchToShardReq::IsInitialized() const {
  return true;
}

void S2SMatchToShardReq::Swap(S2SMatchToShardReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SMatchToShardReq::InternalSwap(S2SMatchToShardReq* other) {
  using std::swap;
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pbgroup_, other->pbgroup_);
  swap(matchid_, other->matchid_);
  swap(allowgroup_, other->allowgroup_);
  swap(playerid_, other->playerid_);
  swap(serverid_, other->serverid_);
  swap(battleserverid_, other->battleserverid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SMatchToShardReq::GetMetadata() const {
  protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SCancelMatchToProxyReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SCancelMatchToProxyReq::kMatchidFieldNumber;
const int S2SCancelMatchToProxyReq::kPlayeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SCancelMatchToProxyReq::S2SCancelMatchToProxyReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_KFMatchMessage_2eproto::scc_info_S2SCancelMatchToProxyReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SCancelMatchToProxyReq)
}
S2SCancelMatchToProxyReq::S2SCancelMatchToProxyReq(const S2SCancelMatchToProxyReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&matchid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SCancelMatchToProxyReq)
}

void S2SCancelMatchToProxyReq::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
}

S2SCancelMatchToProxyReq::~S2SCancelMatchToProxyReq() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SCancelMatchToProxyReq)
  SharedDtor();
}

void S2SCancelMatchToProxyReq::SharedDtor() {
}

void S2SCancelMatchToProxyReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SCancelMatchToProxyReq::descriptor() {
  ::protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SCancelMatchToProxyReq& S2SCancelMatchToProxyReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_KFMatchMessage_2eproto::scc_info_S2SCancelMatchToProxyReq.base);
  return *internal_default_instance();
}


void S2SCancelMatchToProxyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SCancelMatchToProxyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
  _internal_metadata_.Clear();
}

bool S2SCancelMatchToProxyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SCancelMatchToProxyReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 matchid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 playerid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SCancelMatchToProxyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SCancelMatchToProxyReq)
  return false;
#undef DO_
}

void S2SCancelMatchToProxyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SCancelMatchToProxyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // uint64 playerid = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SCancelMatchToProxyReq)
}

::google::protobuf::uint8* S2SCancelMatchToProxyReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SCancelMatchToProxyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // uint64 playerid = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SCancelMatchToProxyReq)
  return target;
}

size_t S2SCancelMatchToProxyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SCancelMatchToProxyReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 playerid = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SCancelMatchToProxyReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SCancelMatchToProxyReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SCancelMatchToProxyReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SCancelMatchToProxyReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SCancelMatchToProxyReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SCancelMatchToProxyReq)
    MergeFrom(*source);
  }
}

void S2SCancelMatchToProxyReq::MergeFrom(const S2SCancelMatchToProxyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SCancelMatchToProxyReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
}

void S2SCancelMatchToProxyReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SCancelMatchToProxyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SCancelMatchToProxyReq::CopyFrom(const S2SCancelMatchToProxyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SCancelMatchToProxyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SCancelMatchToProxyReq::IsInitialized() const {
  return true;
}

void S2SCancelMatchToProxyReq::Swap(S2SCancelMatchToProxyReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SCancelMatchToProxyReq::InternalSwap(S2SCancelMatchToProxyReq* other) {
  using std::swap;
  swap(playerid_, other->playerid_);
  swap(matchid_, other->matchid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SCancelMatchToProxyReq::GetMetadata() const {
  protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SCancelMatchToShardReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SCancelMatchToShardReq::kMatchidFieldNumber;
const int S2SCancelMatchToShardReq::kPlayeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SCancelMatchToShardReq::S2SCancelMatchToShardReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_KFMatchMessage_2eproto::scc_info_S2SCancelMatchToShardReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SCancelMatchToShardReq)
}
S2SCancelMatchToShardReq::S2SCancelMatchToShardReq(const S2SCancelMatchToShardReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&matchid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SCancelMatchToShardReq)
}

void S2SCancelMatchToShardReq::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
}

S2SCancelMatchToShardReq::~S2SCancelMatchToShardReq() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SCancelMatchToShardReq)
  SharedDtor();
}

void S2SCancelMatchToShardReq::SharedDtor() {
}

void S2SCancelMatchToShardReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SCancelMatchToShardReq::descriptor() {
  ::protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SCancelMatchToShardReq& S2SCancelMatchToShardReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_KFMatchMessage_2eproto::scc_info_S2SCancelMatchToShardReq.base);
  return *internal_default_instance();
}


void S2SCancelMatchToShardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SCancelMatchToShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
  _internal_metadata_.Clear();
}

bool S2SCancelMatchToShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SCancelMatchToShardReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 matchid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 playerid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SCancelMatchToShardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SCancelMatchToShardReq)
  return false;
#undef DO_
}

void S2SCancelMatchToShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SCancelMatchToShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // uint64 playerid = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SCancelMatchToShardReq)
}

::google::protobuf::uint8* S2SCancelMatchToShardReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SCancelMatchToShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // uint64 playerid = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SCancelMatchToShardReq)
  return target;
}

size_t S2SCancelMatchToShardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SCancelMatchToShardReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 playerid = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SCancelMatchToShardReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SCancelMatchToShardReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SCancelMatchToShardReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SCancelMatchToShardReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SCancelMatchToShardReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SCancelMatchToShardReq)
    MergeFrom(*source);
  }
}

void S2SCancelMatchToShardReq::MergeFrom(const S2SCancelMatchToShardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SCancelMatchToShardReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
}

void S2SCancelMatchToShardReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SCancelMatchToShardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SCancelMatchToShardReq::CopyFrom(const S2SCancelMatchToShardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SCancelMatchToShardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SCancelMatchToShardReq::IsInitialized() const {
  return true;
}

void S2SCancelMatchToShardReq::Swap(S2SCancelMatchToShardReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SCancelMatchToShardReq::InternalSwap(S2SCancelMatchToShardReq* other) {
  using std::swap;
  swap(playerid_, other->playerid_);
  swap(matchid_, other->matchid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SCancelMatchToShardReq::GetMetadata() const {
  protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SCancelMatchToBattleShardReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SCancelMatchToBattleShardReq::kRoomidFieldNumber;
const int S2SCancelMatchToBattleShardReq::kCampidFieldNumber;
const int S2SCancelMatchToBattleShardReq::kGroupidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SCancelMatchToBattleShardReq::S2SCancelMatchToBattleShardReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_KFMatchMessage_2eproto::scc_info_S2SCancelMatchToBattleShardReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SCancelMatchToBattleShardReq)
}
S2SCancelMatchToBattleShardReq::S2SCancelMatchToBattleShardReq(const S2SCancelMatchToBattleShardReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&campid_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(campid_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SCancelMatchToBattleShardReq)
}

void S2SCancelMatchToBattleShardReq::SharedCtor() {
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&campid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(campid_));
}

S2SCancelMatchToBattleShardReq::~S2SCancelMatchToBattleShardReq() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SCancelMatchToBattleShardReq)
  SharedDtor();
}

void S2SCancelMatchToBattleShardReq::SharedDtor() {
}

void S2SCancelMatchToBattleShardReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SCancelMatchToBattleShardReq::descriptor() {
  ::protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SCancelMatchToBattleShardReq& S2SCancelMatchToBattleShardReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_KFMatchMessage_2eproto::scc_info_S2SCancelMatchToBattleShardReq.base);
  return *internal_default_instance();
}


void S2SCancelMatchToBattleShardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SCancelMatchToBattleShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&campid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(campid_));
  _internal_metadata_.Clear();
}

bool S2SCancelMatchToBattleShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SCancelMatchToBattleShardReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 campid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 groupid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SCancelMatchToBattleShardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SCancelMatchToBattleShardReq)
  return false;
#undef DO_
}

void S2SCancelMatchToBattleShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SCancelMatchToBattleShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // uint32 campid = 2;
  if (this->campid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->campid(), output);
  }

  // uint64 groupid = 3;
  if (this->groupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->groupid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SCancelMatchToBattleShardReq)
}

::google::protobuf::uint8* S2SCancelMatchToBattleShardReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SCancelMatchToBattleShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // uint32 campid = 2;
  if (this->campid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->campid(), target);
  }

  // uint64 groupid = 3;
  if (this->groupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->groupid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SCancelMatchToBattleShardReq)
  return target;
}

size_t S2SCancelMatchToBattleShardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SCancelMatchToBattleShardReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roomid());
  }

  // uint64 groupid = 3;
  if (this->groupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->groupid());
  }

  // uint32 campid = 2;
  if (this->campid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->campid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SCancelMatchToBattleShardReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SCancelMatchToBattleShardReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SCancelMatchToBattleShardReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SCancelMatchToBattleShardReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SCancelMatchToBattleShardReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SCancelMatchToBattleShardReq)
    MergeFrom(*source);
  }
}

void S2SCancelMatchToBattleShardReq::MergeFrom(const S2SCancelMatchToBattleShardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SCancelMatchToBattleShardReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.groupid() != 0) {
    set_groupid(from.groupid());
  }
  if (from.campid() != 0) {
    set_campid(from.campid());
  }
}

void S2SCancelMatchToBattleShardReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SCancelMatchToBattleShardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SCancelMatchToBattleShardReq::CopyFrom(const S2SCancelMatchToBattleShardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SCancelMatchToBattleShardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SCancelMatchToBattleShardReq::IsInitialized() const {
  return true;
}

void S2SCancelMatchToBattleShardReq::Swap(S2SCancelMatchToBattleShardReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SCancelMatchToBattleShardReq::InternalSwap(S2SCancelMatchToBattleShardReq* other) {
  using std::swap;
  swap(roomid_, other->roomid_);
  swap(groupid_, other->groupid_);
  swap(campid_, other->campid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SCancelMatchToBattleShardReq::GetMetadata() const {
  protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SNoticeMatchRoomReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SNoticeMatchRoomReq::kMatchidFieldNumber;
const int S2SNoticeMatchRoomReq::kBattleshardidFieldNumber;
const int S2SNoticeMatchRoomReq::kCampidFieldNumber;
const int S2SNoticeMatchRoomReq::kPlayeridFieldNumber;
const int S2SNoticeMatchRoomReq::kServeridFieldNumber;
const int S2SNoticeMatchRoomReq::kRoomidFieldNumber;
const int S2SNoticeMatchRoomReq::kIpFieldNumber;
const int S2SNoticeMatchRoomReq::kPortFieldNumber;
const int S2SNoticeMatchRoomReq::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SNoticeMatchRoomReq::S2SNoticeMatchRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_KFMatchMessage_2eproto::scc_info_S2SNoticeMatchRoomReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SNoticeMatchRoomReq)
}
S2SNoticeMatchRoomReq::S2SNoticeMatchRoomReq(const S2SNoticeMatchRoomReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ::memcpy(&battleshardid_, &from.battleshardid_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&battleshardid_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SNoticeMatchRoomReq)
}

void S2SNoticeMatchRoomReq::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&battleshardid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&battleshardid_)) + sizeof(port_));
}

S2SNoticeMatchRoomReq::~S2SNoticeMatchRoomReq() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SNoticeMatchRoomReq)
  SharedDtor();
}

void S2SNoticeMatchRoomReq::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void S2SNoticeMatchRoomReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SNoticeMatchRoomReq::descriptor() {
  ::protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SNoticeMatchRoomReq& S2SNoticeMatchRoomReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_KFMatchMessage_2eproto::scc_info_S2SNoticeMatchRoomReq.base);
  return *internal_default_instance();
}


void S2SNoticeMatchRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SNoticeMatchRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&battleshardid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&battleshardid_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

bool S2SNoticeMatchRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SNoticeMatchRoomReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 matchid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 battleshardid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battleshardid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 campid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 playerid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 serverid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 roomid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes ip = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes token = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SNoticeMatchRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SNoticeMatchRoomReq)
  return false;
#undef DO_
}

void S2SNoticeMatchRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SNoticeMatchRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // uint64 battleshardid = 2;
  if (this->battleshardid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battleshardid(), output);
  }

  // uint32 campid = 3;
  if (this->campid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->campid(), output);
  }

  // uint64 playerid = 4;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->playerid(), output);
  }

  // uint64 serverid = 5;
  if (this->serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->serverid(), output);
  }

  // uint64 roomid = 6;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->roomid(), output);
  }

  // bytes ip = 7;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->ip(), output);
  }

  // uint32 port = 8;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->port(), output);
  }

  // bytes token = 9;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SNoticeMatchRoomReq)
}

::google::protobuf::uint8* S2SNoticeMatchRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SNoticeMatchRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // uint64 battleshardid = 2;
  if (this->battleshardid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battleshardid(), target);
  }

  // uint32 campid = 3;
  if (this->campid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->campid(), target);
  }

  // uint64 playerid = 4;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->playerid(), target);
  }

  // uint64 serverid = 5;
  if (this->serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->serverid(), target);
  }

  // uint64 roomid = 6;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->roomid(), target);
  }

  // bytes ip = 7;
  if (this->ip().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->ip(), target);
  }

  // uint32 port = 8;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->port(), target);
  }

  // bytes token = 9;
  if (this->token().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SNoticeMatchRoomReq)
  return target;
}

size_t S2SNoticeMatchRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SNoticeMatchRoomReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes ip = 7;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ip());
  }

  // bytes token = 9;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->token());
  }

  // uint64 battleshardid = 2;
  if (this->battleshardid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->battleshardid());
  }

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  // uint32 campid = 3;
  if (this->campid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->campid());
  }

  // uint64 playerid = 4;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // uint64 serverid = 5;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->serverid());
  }

  // uint64 roomid = 6;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roomid());
  }

  // uint32 port = 8;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SNoticeMatchRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SNoticeMatchRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SNoticeMatchRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SNoticeMatchRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SNoticeMatchRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SNoticeMatchRoomReq)
    MergeFrom(*source);
  }
}

void S2SNoticeMatchRoomReq::MergeFrom(const S2SNoticeMatchRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SNoticeMatchRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.battleshardid() != 0) {
    set_battleshardid(from.battleshardid());
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
  if (from.campid() != 0) {
    set_campid(from.campid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.serverid() != 0) {
    set_serverid(from.serverid());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void S2SNoticeMatchRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SNoticeMatchRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SNoticeMatchRoomReq::CopyFrom(const S2SNoticeMatchRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SNoticeMatchRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SNoticeMatchRoomReq::IsInitialized() const {
  return true;
}

void S2SNoticeMatchRoomReq::Swap(S2SNoticeMatchRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SNoticeMatchRoomReq::InternalSwap(S2SNoticeMatchRoomReq* other) {
  using std::swap;
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(battleshardid_, other->battleshardid_);
  swap(matchid_, other->matchid_);
  swap(campid_, other->campid_);
  swap(playerid_, other->playerid_);
  swap(serverid_, other->serverid_);
  swap(roomid_, other->roomid_);
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SNoticeMatchRoomReq::GetMetadata() const {
  protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SNoticeMatchRoomAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SNoticeMatchRoomAck::kRoomidFieldNumber;
const int S2SNoticeMatchRoomAck::kCampidFieldNumber;
const int S2SNoticeMatchRoomAck::kPlayeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SNoticeMatchRoomAck::S2SNoticeMatchRoomAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_KFMatchMessage_2eproto::scc_info_S2SNoticeMatchRoomAck.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SNoticeMatchRoomAck)
}
S2SNoticeMatchRoomAck::S2SNoticeMatchRoomAck(const S2SNoticeMatchRoomAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&campid_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(campid_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SNoticeMatchRoomAck)
}

void S2SNoticeMatchRoomAck::SharedCtor() {
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&campid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(campid_));
}

S2SNoticeMatchRoomAck::~S2SNoticeMatchRoomAck() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SNoticeMatchRoomAck)
  SharedDtor();
}

void S2SNoticeMatchRoomAck::SharedDtor() {
}

void S2SNoticeMatchRoomAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SNoticeMatchRoomAck::descriptor() {
  ::protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SNoticeMatchRoomAck& S2SNoticeMatchRoomAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_KFMatchMessage_2eproto::scc_info_S2SNoticeMatchRoomAck.base);
  return *internal_default_instance();
}


void S2SNoticeMatchRoomAck::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SNoticeMatchRoomAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&campid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(campid_));
  _internal_metadata_.Clear();
}

bool S2SNoticeMatchRoomAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SNoticeMatchRoomAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 campid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 playerid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SNoticeMatchRoomAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SNoticeMatchRoomAck)
  return false;
#undef DO_
}

void S2SNoticeMatchRoomAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SNoticeMatchRoomAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // uint32 campid = 2;
  if (this->campid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->campid(), output);
  }

  // uint64 playerid = 3;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->playerid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SNoticeMatchRoomAck)
}

::google::protobuf::uint8* S2SNoticeMatchRoomAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SNoticeMatchRoomAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // uint32 campid = 2;
  if (this->campid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->campid(), target);
  }

  // uint64 playerid = 3;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->playerid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SNoticeMatchRoomAck)
  return target;
}

size_t S2SNoticeMatchRoomAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SNoticeMatchRoomAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roomid());
  }

  // uint64 playerid = 3;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // uint32 campid = 2;
  if (this->campid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->campid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SNoticeMatchRoomAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SNoticeMatchRoomAck)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SNoticeMatchRoomAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SNoticeMatchRoomAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SNoticeMatchRoomAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SNoticeMatchRoomAck)
    MergeFrom(*source);
  }
}

void S2SNoticeMatchRoomAck::MergeFrom(const S2SNoticeMatchRoomAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SNoticeMatchRoomAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.campid() != 0) {
    set_campid(from.campid());
  }
}

void S2SNoticeMatchRoomAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SNoticeMatchRoomAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SNoticeMatchRoomAck::CopyFrom(const S2SNoticeMatchRoomAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SNoticeMatchRoomAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SNoticeMatchRoomAck::IsInitialized() const {
  return true;
}

void S2SNoticeMatchRoomAck::Swap(S2SNoticeMatchRoomAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SNoticeMatchRoomAck::InternalSwap(S2SNoticeMatchRoomAck* other) {
  using std::swap;
  swap(roomid_, other->roomid_);
  swap(playerid_, other->playerid_);
  swap(campid_, other->campid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SNoticeMatchRoomAck::GetMetadata() const {
  protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SQueryMatchRoomReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SQueryMatchRoomReq::kMatchidFieldNumber;
const int S2SQueryMatchRoomReq::kPlayeridFieldNumber;
const int S2SQueryMatchRoomReq::kServeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SQueryMatchRoomReq::S2SQueryMatchRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_KFMatchMessage_2eproto::scc_info_S2SQueryMatchRoomReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SQueryMatchRoomReq)
}
S2SQueryMatchRoomReq::S2SQueryMatchRoomReq(const S2SQueryMatchRoomReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&matchid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SQueryMatchRoomReq)
}

void S2SQueryMatchRoomReq::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
}

S2SQueryMatchRoomReq::~S2SQueryMatchRoomReq() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SQueryMatchRoomReq)
  SharedDtor();
}

void S2SQueryMatchRoomReq::SharedDtor() {
}

void S2SQueryMatchRoomReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SQueryMatchRoomReq::descriptor() {
  ::protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SQueryMatchRoomReq& S2SQueryMatchRoomReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_KFMatchMessage_2eproto::scc_info_S2SQueryMatchRoomReq.base);
  return *internal_default_instance();
}


void S2SQueryMatchRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SQueryMatchRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
  _internal_metadata_.Clear();
}

bool S2SQueryMatchRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SQueryMatchRoomReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 matchid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 playerid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 serverid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SQueryMatchRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SQueryMatchRoomReq)
  return false;
#undef DO_
}

void S2SQueryMatchRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SQueryMatchRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // uint64 playerid = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // uint64 serverid = 3;
  if (this->serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->serverid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SQueryMatchRoomReq)
}

::google::protobuf::uint8* S2SQueryMatchRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SQueryMatchRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // uint64 playerid = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // uint64 serverid = 3;
  if (this->serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->serverid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SQueryMatchRoomReq)
  return target;
}

size_t S2SQueryMatchRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SQueryMatchRoomReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 playerid = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // uint64 serverid = 3;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->serverid());
  }

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SQueryMatchRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SQueryMatchRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SQueryMatchRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SQueryMatchRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SQueryMatchRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SQueryMatchRoomReq)
    MergeFrom(*source);
  }
}

void S2SQueryMatchRoomReq::MergeFrom(const S2SQueryMatchRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SQueryMatchRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.serverid() != 0) {
    set_serverid(from.serverid());
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
}

void S2SQueryMatchRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SQueryMatchRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryMatchRoomReq::CopyFrom(const S2SQueryMatchRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SQueryMatchRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryMatchRoomReq::IsInitialized() const {
  return true;
}

void S2SQueryMatchRoomReq::Swap(S2SQueryMatchRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SQueryMatchRoomReq::InternalSwap(S2SQueryMatchRoomReq* other) {
  using std::swap;
  swap(playerid_, other->playerid_);
  swap(serverid_, other->serverid_);
  swap(matchid_, other->matchid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SQueryMatchRoomReq::GetMetadata() const {
  protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SQueryRoomToMatchShardReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SQueryRoomToMatchShardReq::kMatchidFieldNumber;
const int S2SQueryRoomToMatchShardReq::kPlayeridFieldNumber;
const int S2SQueryRoomToMatchShardReq::kServeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SQueryRoomToMatchShardReq::S2SQueryRoomToMatchShardReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_KFMatchMessage_2eproto::scc_info_S2SQueryRoomToMatchShardReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SQueryRoomToMatchShardReq)
}
S2SQueryRoomToMatchShardReq::S2SQueryRoomToMatchShardReq(const S2SQueryRoomToMatchShardReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&matchid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SQueryRoomToMatchShardReq)
}

void S2SQueryRoomToMatchShardReq::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
}

S2SQueryRoomToMatchShardReq::~S2SQueryRoomToMatchShardReq() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SQueryRoomToMatchShardReq)
  SharedDtor();
}

void S2SQueryRoomToMatchShardReq::SharedDtor() {
}

void S2SQueryRoomToMatchShardReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SQueryRoomToMatchShardReq::descriptor() {
  ::protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SQueryRoomToMatchShardReq& S2SQueryRoomToMatchShardReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_KFMatchMessage_2eproto::scc_info_S2SQueryRoomToMatchShardReq.base);
  return *internal_default_instance();
}


void S2SQueryRoomToMatchShardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SQueryRoomToMatchShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
  _internal_metadata_.Clear();
}

bool S2SQueryRoomToMatchShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SQueryRoomToMatchShardReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 matchid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 playerid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 serverid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SQueryRoomToMatchShardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SQueryRoomToMatchShardReq)
  return false;
#undef DO_
}

void S2SQueryRoomToMatchShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SQueryRoomToMatchShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // uint64 playerid = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // uint64 serverid = 3;
  if (this->serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->serverid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SQueryRoomToMatchShardReq)
}

::google::protobuf::uint8* S2SQueryRoomToMatchShardReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SQueryRoomToMatchShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // uint64 playerid = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // uint64 serverid = 3;
  if (this->serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->serverid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SQueryRoomToMatchShardReq)
  return target;
}

size_t S2SQueryRoomToMatchShardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SQueryRoomToMatchShardReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 playerid = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // uint64 serverid = 3;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->serverid());
  }

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SQueryRoomToMatchShardReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SQueryRoomToMatchShardReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SQueryRoomToMatchShardReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SQueryRoomToMatchShardReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SQueryRoomToMatchShardReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SQueryRoomToMatchShardReq)
    MergeFrom(*source);
  }
}

void S2SQueryRoomToMatchShardReq::MergeFrom(const S2SQueryRoomToMatchShardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SQueryRoomToMatchShardReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.serverid() != 0) {
    set_serverid(from.serverid());
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
}

void S2SQueryRoomToMatchShardReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SQueryRoomToMatchShardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryRoomToMatchShardReq::CopyFrom(const S2SQueryRoomToMatchShardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SQueryRoomToMatchShardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryRoomToMatchShardReq::IsInitialized() const {
  return true;
}

void S2SQueryRoomToMatchShardReq::Swap(S2SQueryRoomToMatchShardReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SQueryRoomToMatchShardReq::InternalSwap(S2SQueryRoomToMatchShardReq* other) {
  using std::swap;
  swap(playerid_, other->playerid_);
  swap(serverid_, other->serverid_);
  swap(matchid_, other->matchid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SQueryRoomToMatchShardReq::GetMetadata() const {
  protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SQueryMatchRoomAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SQueryMatchRoomAck::kMatchidFieldNumber;
const int S2SQueryMatchRoomAck::kPlayeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SQueryMatchRoomAck::S2SQueryMatchRoomAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_KFMatchMessage_2eproto::scc_info_S2SQueryMatchRoomAck.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SQueryMatchRoomAck)
}
S2SQueryMatchRoomAck::S2SQueryMatchRoomAck(const S2SQueryMatchRoomAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&matchid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SQueryMatchRoomAck)
}

void S2SQueryMatchRoomAck::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
}

S2SQueryMatchRoomAck::~S2SQueryMatchRoomAck() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SQueryMatchRoomAck)
  SharedDtor();
}

void S2SQueryMatchRoomAck::SharedDtor() {
}

void S2SQueryMatchRoomAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SQueryMatchRoomAck::descriptor() {
  ::protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SQueryMatchRoomAck& S2SQueryMatchRoomAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_KFMatchMessage_2eproto::scc_info_S2SQueryMatchRoomAck.base);
  return *internal_default_instance();
}


void S2SQueryMatchRoomAck::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SQueryMatchRoomAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
  _internal_metadata_.Clear();
}

bool S2SQueryMatchRoomAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SQueryMatchRoomAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 matchid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 playerid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SQueryMatchRoomAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SQueryMatchRoomAck)
  return false;
#undef DO_
}

void S2SQueryMatchRoomAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SQueryMatchRoomAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // uint64 playerid = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SQueryMatchRoomAck)
}

::google::protobuf::uint8* S2SQueryMatchRoomAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SQueryMatchRoomAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // uint64 playerid = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SQueryMatchRoomAck)
  return target;
}

size_t S2SQueryMatchRoomAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SQueryMatchRoomAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 playerid = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SQueryMatchRoomAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SQueryMatchRoomAck)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SQueryMatchRoomAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SQueryMatchRoomAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SQueryMatchRoomAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SQueryMatchRoomAck)
    MergeFrom(*source);
  }
}

void S2SQueryMatchRoomAck::MergeFrom(const S2SQueryMatchRoomAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SQueryMatchRoomAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
}

void S2SQueryMatchRoomAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SQueryMatchRoomAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryMatchRoomAck::CopyFrom(const S2SQueryMatchRoomAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SQueryMatchRoomAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryMatchRoomAck::IsInitialized() const {
  return true;
}

void S2SQueryMatchRoomAck::Swap(S2SQueryMatchRoomAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SQueryMatchRoomAck::InternalSwap(S2SQueryMatchRoomAck* other) {
  using std::swap;
  swap(playerid_, other->playerid_);
  swap(matchid_, other->matchid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SQueryMatchRoomAck::GetMetadata() const {
  protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SQueryBattleRoomReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SQueryBattleRoomReq::kRoomidFieldNumber;
const int S2SQueryBattleRoomReq::kPlayeridFieldNumber;
const int S2SQueryBattleRoomReq::kServeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SQueryBattleRoomReq::S2SQueryBattleRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_KFMatchMessage_2eproto::scc_info_S2SQueryBattleRoomReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SQueryBattleRoomReq)
}
S2SQueryBattleRoomReq::S2SQueryBattleRoomReq(const S2SQueryBattleRoomReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(serverid_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SQueryBattleRoomReq)
}

void S2SQueryBattleRoomReq::SharedCtor() {
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(serverid_));
}

S2SQueryBattleRoomReq::~S2SQueryBattleRoomReq() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SQueryBattleRoomReq)
  SharedDtor();
}

void S2SQueryBattleRoomReq::SharedDtor() {
}

void S2SQueryBattleRoomReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SQueryBattleRoomReq::descriptor() {
  ::protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SQueryBattleRoomReq& S2SQueryBattleRoomReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_KFMatchMessage_2eproto::scc_info_S2SQueryBattleRoomReq.base);
  return *internal_default_instance();
}


void S2SQueryBattleRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SQueryBattleRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(serverid_));
  _internal_metadata_.Clear();
}

bool S2SQueryBattleRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SQueryBattleRoomReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 playerid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 serverid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SQueryBattleRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SQueryBattleRoomReq)
  return false;
#undef DO_
}

void S2SQueryBattleRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SQueryBattleRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // uint64 playerid = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // uint64 serverid = 3;
  if (this->serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->serverid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SQueryBattleRoomReq)
}

::google::protobuf::uint8* S2SQueryBattleRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SQueryBattleRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // uint64 playerid = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // uint64 serverid = 3;
  if (this->serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->serverid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SQueryBattleRoomReq)
  return target;
}

size_t S2SQueryBattleRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SQueryBattleRoomReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roomid());
  }

  // uint64 playerid = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // uint64 serverid = 3;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->serverid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SQueryBattleRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SQueryBattleRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SQueryBattleRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SQueryBattleRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SQueryBattleRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SQueryBattleRoomReq)
    MergeFrom(*source);
  }
}

void S2SQueryBattleRoomReq::MergeFrom(const S2SQueryBattleRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SQueryBattleRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.serverid() != 0) {
    set_serverid(from.serverid());
  }
}

void S2SQueryBattleRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SQueryBattleRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryBattleRoomReq::CopyFrom(const S2SQueryBattleRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SQueryBattleRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryBattleRoomReq::IsInitialized() const {
  return true;
}

void S2SQueryBattleRoomReq::Swap(S2SQueryBattleRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SQueryBattleRoomReq::InternalSwap(S2SQueryBattleRoomReq* other) {
  using std::swap;
  swap(roomid_, other->roomid_);
  swap(playerid_, other->playerid_);
  swap(serverid_, other->serverid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SQueryBattleRoomReq::GetMetadata() const {
  protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SQueryBattleRoomAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SQueryBattleRoomAck::kPlayeridFieldNumber;
const int S2SQueryBattleRoomAck::kRoomidFieldNumber;
const int S2SQueryBattleRoomAck::kMatchidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SQueryBattleRoomAck::S2SQueryBattleRoomAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_KFMatchMessage_2eproto::scc_info_S2SQueryBattleRoomAck.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SQueryBattleRoomAck)
}
S2SQueryBattleRoomAck::S2SQueryBattleRoomAck(const S2SQueryBattleRoomAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&matchid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SQueryBattleRoomAck)
}

void S2SQueryBattleRoomAck::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
}

S2SQueryBattleRoomAck::~S2SQueryBattleRoomAck() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SQueryBattleRoomAck)
  SharedDtor();
}

void S2SQueryBattleRoomAck::SharedDtor() {
}

void S2SQueryBattleRoomAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SQueryBattleRoomAck::descriptor() {
  ::protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SQueryBattleRoomAck& S2SQueryBattleRoomAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_KFMatchMessage_2eproto::scc_info_S2SQueryBattleRoomAck.base);
  return *internal_default_instance();
}


void S2SQueryBattleRoomAck::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SQueryBattleRoomAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
  _internal_metadata_.Clear();
}

bool S2SQueryBattleRoomAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SQueryBattleRoomAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 playerid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 roomid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 matchid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SQueryBattleRoomAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SQueryBattleRoomAck)
  return false;
#undef DO_
}

void S2SQueryBattleRoomAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SQueryBattleRoomAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // uint64 roomid = 2;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  // uint32 matchid = 3;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->matchid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SQueryBattleRoomAck)
}

::google::protobuf::uint8* S2SQueryBattleRoomAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SQueryBattleRoomAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // uint64 roomid = 2;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  // uint32 matchid = 3;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->matchid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SQueryBattleRoomAck)
  return target;
}

size_t S2SQueryBattleRoomAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SQueryBattleRoomAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // uint64 roomid = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roomid());
  }

  // uint32 matchid = 3;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SQueryBattleRoomAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SQueryBattleRoomAck)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SQueryBattleRoomAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SQueryBattleRoomAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SQueryBattleRoomAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SQueryBattleRoomAck)
    MergeFrom(*source);
  }
}

void S2SQueryBattleRoomAck::MergeFrom(const S2SQueryBattleRoomAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SQueryBattleRoomAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
}

void S2SQueryBattleRoomAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SQueryBattleRoomAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryBattleRoomAck::CopyFrom(const S2SQueryBattleRoomAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SQueryBattleRoomAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryBattleRoomAck::IsInitialized() const {
  return true;
}

void S2SQueryBattleRoomAck::Swap(S2SQueryBattleRoomAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SQueryBattleRoomAck::InternalSwap(S2SQueryBattleRoomAck* other) {
  using std::swap;
  swap(playerid_, other->playerid_);
  swap(roomid_, other->roomid_);
  swap(matchid_, other->matchid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SQueryBattleRoomAck::GetMetadata() const {
  protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SQueryRoomToBattleShardReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SQueryRoomToBattleShardReq::kRoomidFieldNumber;
const int S2SQueryRoomToBattleShardReq::kPlayeridFieldNumber;
const int S2SQueryRoomToBattleShardReq::kServeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SQueryRoomToBattleShardReq::S2SQueryRoomToBattleShardReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_KFMatchMessage_2eproto::scc_info_S2SQueryRoomToBattleShardReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SQueryRoomToBattleShardReq)
}
S2SQueryRoomToBattleShardReq::S2SQueryRoomToBattleShardReq(const S2SQueryRoomToBattleShardReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&serverid_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(serverid_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SQueryRoomToBattleShardReq)
}

void S2SQueryRoomToBattleShardReq::SharedCtor() {
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(serverid_));
}

S2SQueryRoomToBattleShardReq::~S2SQueryRoomToBattleShardReq() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SQueryRoomToBattleShardReq)
  SharedDtor();
}

void S2SQueryRoomToBattleShardReq::SharedDtor() {
}

void S2SQueryRoomToBattleShardReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SQueryRoomToBattleShardReq::descriptor() {
  ::protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SQueryRoomToBattleShardReq& S2SQueryRoomToBattleShardReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_KFMatchMessage_2eproto::scc_info_S2SQueryRoomToBattleShardReq.base);
  return *internal_default_instance();
}


void S2SQueryRoomToBattleShardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SQueryRoomToBattleShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serverid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(serverid_));
  _internal_metadata_.Clear();
}

bool S2SQueryRoomToBattleShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SQueryRoomToBattleShardReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 playerid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 serverid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SQueryRoomToBattleShardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SQueryRoomToBattleShardReq)
  return false;
#undef DO_
}

void S2SQueryRoomToBattleShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SQueryRoomToBattleShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // uint64 playerid = 2;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  // uint64 serverid = 3;
  if (this->serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->serverid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SQueryRoomToBattleShardReq)
}

::google::protobuf::uint8* S2SQueryRoomToBattleShardReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SQueryRoomToBattleShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // uint64 playerid = 2;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  // uint64 serverid = 3;
  if (this->serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->serverid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SQueryRoomToBattleShardReq)
  return target;
}

size_t S2SQueryRoomToBattleShardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SQueryRoomToBattleShardReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roomid());
  }

  // uint64 playerid = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // uint64 serverid = 3;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->serverid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SQueryRoomToBattleShardReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SQueryRoomToBattleShardReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SQueryRoomToBattleShardReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SQueryRoomToBattleShardReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SQueryRoomToBattleShardReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SQueryRoomToBattleShardReq)
    MergeFrom(*source);
  }
}

void S2SQueryRoomToBattleShardReq::MergeFrom(const S2SQueryRoomToBattleShardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SQueryRoomToBattleShardReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.serverid() != 0) {
    set_serverid(from.serverid());
  }
}

void S2SQueryRoomToBattleShardReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SQueryRoomToBattleShardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SQueryRoomToBattleShardReq::CopyFrom(const S2SQueryRoomToBattleShardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SQueryRoomToBattleShardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SQueryRoomToBattleShardReq::IsInitialized() const {
  return true;
}

void S2SQueryRoomToBattleShardReq::Swap(S2SQueryRoomToBattleShardReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SQueryRoomToBattleShardReq::InternalSwap(S2SQueryRoomToBattleShardReq* other) {
  using std::swap;
  swap(roomid_, other->roomid_);
  swap(playerid_, other->playerid_);
  swap(serverid_, other->serverid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SQueryRoomToBattleShardReq::GetMetadata() const {
  protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SPlayerOnlineToBattleShardReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SPlayerOnlineToBattleShardReq::kRoomidFieldNumber;
const int S2SPlayerOnlineToBattleShardReq::kCampidFieldNumber;
const int S2SPlayerOnlineToBattleShardReq::kPlayeridFieldNumber;
const int S2SPlayerOnlineToBattleShardReq::kServeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SPlayerOnlineToBattleShardReq::S2SPlayerOnlineToBattleShardReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_KFMatchMessage_2eproto::scc_info_S2SPlayerOnlineToBattleShardReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SPlayerOnlineToBattleShardReq)
}
S2SPlayerOnlineToBattleShardReq::S2SPlayerOnlineToBattleShardReq(const S2SPlayerOnlineToBattleShardReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&campid_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(campid_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SPlayerOnlineToBattleShardReq)
}

void S2SPlayerOnlineToBattleShardReq::SharedCtor() {
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&campid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(campid_));
}

S2SPlayerOnlineToBattleShardReq::~S2SPlayerOnlineToBattleShardReq() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SPlayerOnlineToBattleShardReq)
  SharedDtor();
}

void S2SPlayerOnlineToBattleShardReq::SharedDtor() {
}

void S2SPlayerOnlineToBattleShardReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SPlayerOnlineToBattleShardReq::descriptor() {
  ::protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SPlayerOnlineToBattleShardReq& S2SPlayerOnlineToBattleShardReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_KFMatchMessage_2eproto::scc_info_S2SPlayerOnlineToBattleShardReq.base);
  return *internal_default_instance();
}


void S2SPlayerOnlineToBattleShardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SPlayerOnlineToBattleShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&campid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(campid_));
  _internal_metadata_.Clear();
}

bool S2SPlayerOnlineToBattleShardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SPlayerOnlineToBattleShardReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 campid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 playerid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 serverid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SPlayerOnlineToBattleShardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SPlayerOnlineToBattleShardReq)
  return false;
#undef DO_
}

void S2SPlayerOnlineToBattleShardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SPlayerOnlineToBattleShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // uint32 campid = 2;
  if (this->campid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->campid(), output);
  }

  // uint64 playerid = 3;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->playerid(), output);
  }

  // uint64 serverid = 4;
  if (this->serverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->serverid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SPlayerOnlineToBattleShardReq)
}

::google::protobuf::uint8* S2SPlayerOnlineToBattleShardReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SPlayerOnlineToBattleShardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // uint32 campid = 2;
  if (this->campid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->campid(), target);
  }

  // uint64 playerid = 3;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->playerid(), target);
  }

  // uint64 serverid = 4;
  if (this->serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->serverid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SPlayerOnlineToBattleShardReq)
  return target;
}

size_t S2SPlayerOnlineToBattleShardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SPlayerOnlineToBattleShardReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 roomid = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roomid());
  }

  // uint64 playerid = 3;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // uint64 serverid = 4;
  if (this->serverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->serverid());
  }

  // uint32 campid = 2;
  if (this->campid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->campid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SPlayerOnlineToBattleShardReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SPlayerOnlineToBattleShardReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SPlayerOnlineToBattleShardReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SPlayerOnlineToBattleShardReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SPlayerOnlineToBattleShardReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SPlayerOnlineToBattleShardReq)
    MergeFrom(*source);
  }
}

void S2SPlayerOnlineToBattleShardReq::MergeFrom(const S2SPlayerOnlineToBattleShardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SPlayerOnlineToBattleShardReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.serverid() != 0) {
    set_serverid(from.serverid());
  }
  if (from.campid() != 0) {
    set_campid(from.campid());
  }
}

void S2SPlayerOnlineToBattleShardReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SPlayerOnlineToBattleShardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SPlayerOnlineToBattleShardReq::CopyFrom(const S2SPlayerOnlineToBattleShardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SPlayerOnlineToBattleShardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SPlayerOnlineToBattleShardReq::IsInitialized() const {
  return true;
}

void S2SPlayerOnlineToBattleShardReq::Swap(S2SPlayerOnlineToBattleShardReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SPlayerOnlineToBattleShardReq::InternalSwap(S2SPlayerOnlineToBattleShardReq* other) {
  using std::swap;
  swap(roomid_, other->roomid_);
  swap(playerid_, other->playerid_);
  swap(serverid_, other->serverid_);
  swap(campid_, other->campid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SPlayerOnlineToBattleShardReq::GetMetadata() const {
  protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SNoticeMatchStateReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SNoticeMatchStateReq::kPlayeridFieldNumber;
const int S2SNoticeMatchStateReq::kMatchidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SNoticeMatchStateReq::S2SNoticeMatchStateReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_KFMatchMessage_2eproto::scc_info_S2SNoticeMatchStateReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SNoticeMatchStateReq)
}
S2SNoticeMatchStateReq::S2SNoticeMatchStateReq(const S2SNoticeMatchStateReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&matchid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SNoticeMatchStateReq)
}

void S2SNoticeMatchStateReq::SharedCtor() {
  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
}

S2SNoticeMatchStateReq::~S2SNoticeMatchStateReq() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SNoticeMatchStateReq)
  SharedDtor();
}

void S2SNoticeMatchStateReq::SharedDtor() {
}

void S2SNoticeMatchStateReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SNoticeMatchStateReq::descriptor() {
  ::protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SNoticeMatchStateReq& S2SNoticeMatchStateReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_KFMatchMessage_2eproto::scc_info_S2SNoticeMatchStateReq.base);
  return *internal_default_instance();
}


void S2SNoticeMatchStateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SNoticeMatchStateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(matchid_));
  _internal_metadata_.Clear();
}

bool S2SNoticeMatchStateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SNoticeMatchStateReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 playerid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 matchid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SNoticeMatchStateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SNoticeMatchStateReq)
  return false;
#undef DO_
}

void S2SNoticeMatchStateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SNoticeMatchStateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // uint32 matchid = 2;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->matchid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SNoticeMatchStateReq)
}

::google::protobuf::uint8* S2SNoticeMatchStateReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SNoticeMatchStateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // uint32 matchid = 2;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->matchid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SNoticeMatchStateReq)
  return target;
}

size_t S2SNoticeMatchStateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SNoticeMatchStateReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 playerid = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->playerid());
  }

  // uint32 matchid = 2;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SNoticeMatchStateReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SNoticeMatchStateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SNoticeMatchStateReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SNoticeMatchStateReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SNoticeMatchStateReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SNoticeMatchStateReq)
    MergeFrom(*source);
  }
}

void S2SNoticeMatchStateReq::MergeFrom(const S2SNoticeMatchStateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SNoticeMatchStateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
}

void S2SNoticeMatchStateReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SNoticeMatchStateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SNoticeMatchStateReq::CopyFrom(const S2SNoticeMatchStateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SNoticeMatchStateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SNoticeMatchStateReq::IsInitialized() const {
  return true;
}

void S2SNoticeMatchStateReq::Swap(S2SNoticeMatchStateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SNoticeMatchStateReq::InternalSwap(S2SNoticeMatchStateReq* other) {
  using std::swap;
  swap(playerid_, other->playerid_);
  swap(matchid_, other->matchid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SNoticeMatchStateReq::GetMetadata() const {
  protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void S2SResetMatchRoomReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2SResetMatchRoomReq::kMatchidFieldNumber;
const int S2SResetMatchRoomReq::kRoomidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2SResetMatchRoomReq::S2SResetMatchRoomReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_KFMatchMessage_2eproto::scc_info_S2SResetMatchRoomReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:KFMsg.S2SResetMatchRoomReq)
}
S2SResetMatchRoomReq::S2SResetMatchRoomReq(const S2SResetMatchRoomReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&matchid_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(matchid_));
  // @@protoc_insertion_point(copy_constructor:KFMsg.S2SResetMatchRoomReq)
}

void S2SResetMatchRoomReq::SharedCtor() {
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(matchid_));
}

S2SResetMatchRoomReq::~S2SResetMatchRoomReq() {
  // @@protoc_insertion_point(destructor:KFMsg.S2SResetMatchRoomReq)
  SharedDtor();
}

void S2SResetMatchRoomReq::SharedDtor() {
}

void S2SResetMatchRoomReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* S2SResetMatchRoomReq::descriptor() {
  ::protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2SResetMatchRoomReq& S2SResetMatchRoomReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_KFMatchMessage_2eproto::scc_info_S2SResetMatchRoomReq.base);
  return *internal_default_instance();
}


void S2SResetMatchRoomReq::Clear() {
// @@protoc_insertion_point(message_clear_start:KFMsg.S2SResetMatchRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&matchid_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(matchid_));
  _internal_metadata_.Clear();
}

bool S2SResetMatchRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KFMsg.S2SResetMatchRoomReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 matchid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 roomid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KFMsg.S2SResetMatchRoomReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KFMsg.S2SResetMatchRoomReq)
  return false;
#undef DO_
}

void S2SResetMatchRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KFMsg.S2SResetMatchRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchid(), output);
  }

  // uint64 roomid = 2;
  if (this->roomid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roomid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:KFMsg.S2SResetMatchRoomReq)
}

::google::protobuf::uint8* S2SResetMatchRoomReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KFMsg.S2SResetMatchRoomReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchid(), target);
  }

  // uint64 roomid = 2;
  if (this->roomid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roomid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KFMsg.S2SResetMatchRoomReq)
  return target;
}

size_t S2SResetMatchRoomReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KFMsg.S2SResetMatchRoomReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 roomid = 2;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->roomid());
  }

  // uint32 matchid = 1;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void S2SResetMatchRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KFMsg.S2SResetMatchRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  const S2SResetMatchRoomReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2SResetMatchRoomReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KFMsg.S2SResetMatchRoomReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KFMsg.S2SResetMatchRoomReq)
    MergeFrom(*source);
  }
}

void S2SResetMatchRoomReq::MergeFrom(const S2SResetMatchRoomReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KFMsg.S2SResetMatchRoomReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    set_roomid(from.roomid());
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
}

void S2SResetMatchRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KFMsg.S2SResetMatchRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2SResetMatchRoomReq::CopyFrom(const S2SResetMatchRoomReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KFMsg.S2SResetMatchRoomReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2SResetMatchRoomReq::IsInitialized() const {
  return true;
}

void S2SResetMatchRoomReq::Swap(S2SResetMatchRoomReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2SResetMatchRoomReq::InternalSwap(S2SResetMatchRoomReq* other) {
  using std::swap;
  swap(roomid_, other->roomid_);
  swap(matchid_, other->matchid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata S2SResetMatchRoomReq::GetMetadata() const {
  protobuf_KFMatchMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_KFMatchMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace KFMsg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SRegisterMatchReq* Arena::CreateMaybeMessage< ::KFMsg::S2SRegisterMatchReq >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SRegisterMatchReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SMatchToProxyReq* Arena::CreateMaybeMessage< ::KFMsg::S2SMatchToProxyReq >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SMatchToProxyReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SMatchToClientAck* Arena::CreateMaybeMessage< ::KFMsg::S2SMatchToClientAck >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SMatchToClientAck >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SMatchToShardReq* Arena::CreateMaybeMessage< ::KFMsg::S2SMatchToShardReq >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SMatchToShardReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SCancelMatchToProxyReq* Arena::CreateMaybeMessage< ::KFMsg::S2SCancelMatchToProxyReq >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SCancelMatchToProxyReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SCancelMatchToShardReq* Arena::CreateMaybeMessage< ::KFMsg::S2SCancelMatchToShardReq >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SCancelMatchToShardReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SCancelMatchToBattleShardReq* Arena::CreateMaybeMessage< ::KFMsg::S2SCancelMatchToBattleShardReq >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SCancelMatchToBattleShardReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SNoticeMatchRoomReq* Arena::CreateMaybeMessage< ::KFMsg::S2SNoticeMatchRoomReq >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SNoticeMatchRoomReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SNoticeMatchRoomAck* Arena::CreateMaybeMessage< ::KFMsg::S2SNoticeMatchRoomAck >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SNoticeMatchRoomAck >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SQueryMatchRoomReq* Arena::CreateMaybeMessage< ::KFMsg::S2SQueryMatchRoomReq >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SQueryMatchRoomReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SQueryRoomToMatchShardReq* Arena::CreateMaybeMessage< ::KFMsg::S2SQueryRoomToMatchShardReq >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SQueryRoomToMatchShardReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SQueryMatchRoomAck* Arena::CreateMaybeMessage< ::KFMsg::S2SQueryMatchRoomAck >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SQueryMatchRoomAck >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SQueryBattleRoomReq* Arena::CreateMaybeMessage< ::KFMsg::S2SQueryBattleRoomReq >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SQueryBattleRoomReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SQueryBattleRoomAck* Arena::CreateMaybeMessage< ::KFMsg::S2SQueryBattleRoomAck >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SQueryBattleRoomAck >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SQueryRoomToBattleShardReq* Arena::CreateMaybeMessage< ::KFMsg::S2SQueryRoomToBattleShardReq >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SQueryRoomToBattleShardReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SPlayerOnlineToBattleShardReq* Arena::CreateMaybeMessage< ::KFMsg::S2SPlayerOnlineToBattleShardReq >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SPlayerOnlineToBattleShardReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SNoticeMatchStateReq* Arena::CreateMaybeMessage< ::KFMsg::S2SNoticeMatchStateReq >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SNoticeMatchStateReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::KFMsg::S2SResetMatchRoomReq* Arena::CreateMaybeMessage< ::KFMsg::S2SResetMatchRoomReq >(Arena* arena) {
  return Arena::CreateInternal< ::KFMsg::S2SResetMatchRoomReq >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
