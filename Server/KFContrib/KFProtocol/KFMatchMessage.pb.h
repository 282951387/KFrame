// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFMatchMessage.proto

#ifndef PROTOBUF_INCLUDED_KFMatchMessage_2eproto
#define PROTOBUF_INCLUDED_KFMatchMessage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "KFDefineMessage.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_KFMatchMessage_2eproto LIBPROTOC_EXPORT

namespace protobuf_KFMatchMessage_2eproto {
// Internal implementation detail -- do not use these members.
struct LIBPROTOC_EXPORT TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[18];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void LIBPROTOC_EXPORT AddDescriptors();
}  // namespace protobuf_KFMatchMessage_2eproto
namespace KFMsg {
class S2SCancelMatchToBattleShardReq;
class S2SCancelMatchToBattleShardReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SCancelMatchToBattleShardReqDefaultTypeInternal _S2SCancelMatchToBattleShardReq_default_instance_;
class S2SCancelMatchToProxyReq;
class S2SCancelMatchToProxyReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SCancelMatchToProxyReqDefaultTypeInternal _S2SCancelMatchToProxyReq_default_instance_;
class S2SCancelMatchToShardReq;
class S2SCancelMatchToShardReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SCancelMatchToShardReqDefaultTypeInternal _S2SCancelMatchToShardReq_default_instance_;
class S2SMatchToClientAck;
class S2SMatchToClientAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SMatchToClientAckDefaultTypeInternal _S2SMatchToClientAck_default_instance_;
class S2SMatchToProxyReq;
class S2SMatchToProxyReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SMatchToProxyReqDefaultTypeInternal _S2SMatchToProxyReq_default_instance_;
class S2SMatchToShardReq;
class S2SMatchToShardReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SMatchToShardReqDefaultTypeInternal _S2SMatchToShardReq_default_instance_;
class S2SNoticeMatchRoomAck;
class S2SNoticeMatchRoomAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SNoticeMatchRoomAckDefaultTypeInternal _S2SNoticeMatchRoomAck_default_instance_;
class S2SNoticeMatchRoomReq;
class S2SNoticeMatchRoomReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SNoticeMatchRoomReqDefaultTypeInternal _S2SNoticeMatchRoomReq_default_instance_;
class S2SNoticeMatchStateReq;
class S2SNoticeMatchStateReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SNoticeMatchStateReqDefaultTypeInternal _S2SNoticeMatchStateReq_default_instance_;
class S2SPlayerOnlineToBattleShardReq;
class S2SPlayerOnlineToBattleShardReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SPlayerOnlineToBattleShardReqDefaultTypeInternal _S2SPlayerOnlineToBattleShardReq_default_instance_;
class S2SQueryBattleRoomAck;
class S2SQueryBattleRoomAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SQueryBattleRoomAckDefaultTypeInternal _S2SQueryBattleRoomAck_default_instance_;
class S2SQueryBattleRoomReq;
class S2SQueryBattleRoomReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SQueryBattleRoomReqDefaultTypeInternal _S2SQueryBattleRoomReq_default_instance_;
class S2SQueryMatchRoomAck;
class S2SQueryMatchRoomAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SQueryMatchRoomAckDefaultTypeInternal _S2SQueryMatchRoomAck_default_instance_;
class S2SQueryMatchRoomReq;
class S2SQueryMatchRoomReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SQueryMatchRoomReqDefaultTypeInternal _S2SQueryMatchRoomReq_default_instance_;
class S2SQueryRoomToBattleShardReq;
class S2SQueryRoomToBattleShardReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SQueryRoomToBattleShardReqDefaultTypeInternal _S2SQueryRoomToBattleShardReq_default_instance_;
class S2SQueryRoomToMatchShardReq;
class S2SQueryRoomToMatchShardReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SQueryRoomToMatchShardReqDefaultTypeInternal _S2SQueryRoomToMatchShardReq_default_instance_;
class S2SRegisterMatchReq;
class S2SRegisterMatchReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SRegisterMatchReqDefaultTypeInternal _S2SRegisterMatchReq_default_instance_;
class S2SResetMatchRoomReq;
class S2SResetMatchRoomReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SResetMatchRoomReqDefaultTypeInternal _S2SResetMatchRoomReq_default_instance_;
}  // namespace KFMsg
namespace google {
namespace protobuf {
template<> LIBPROTOC_EXPORT ::KFMsg::S2SCancelMatchToBattleShardReq* Arena::CreateMaybeMessage<::KFMsg::S2SCancelMatchToBattleShardReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SCancelMatchToProxyReq* Arena::CreateMaybeMessage<::KFMsg::S2SCancelMatchToProxyReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SCancelMatchToShardReq* Arena::CreateMaybeMessage<::KFMsg::S2SCancelMatchToShardReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SMatchToClientAck* Arena::CreateMaybeMessage<::KFMsg::S2SMatchToClientAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SMatchToProxyReq* Arena::CreateMaybeMessage<::KFMsg::S2SMatchToProxyReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SMatchToShardReq* Arena::CreateMaybeMessage<::KFMsg::S2SMatchToShardReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SNoticeMatchRoomAck* Arena::CreateMaybeMessage<::KFMsg::S2SNoticeMatchRoomAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SNoticeMatchRoomReq* Arena::CreateMaybeMessage<::KFMsg::S2SNoticeMatchRoomReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SNoticeMatchStateReq* Arena::CreateMaybeMessage<::KFMsg::S2SNoticeMatchStateReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SPlayerOnlineToBattleShardReq* Arena::CreateMaybeMessage<::KFMsg::S2SPlayerOnlineToBattleShardReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SQueryBattleRoomAck* Arena::CreateMaybeMessage<::KFMsg::S2SQueryBattleRoomAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SQueryBattleRoomReq* Arena::CreateMaybeMessage<::KFMsg::S2SQueryBattleRoomReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SQueryMatchRoomAck* Arena::CreateMaybeMessage<::KFMsg::S2SQueryMatchRoomAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SQueryMatchRoomReq* Arena::CreateMaybeMessage<::KFMsg::S2SQueryMatchRoomReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SQueryRoomToBattleShardReq* Arena::CreateMaybeMessage<::KFMsg::S2SQueryRoomToBattleShardReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SQueryRoomToMatchShardReq* Arena::CreateMaybeMessage<::KFMsg::S2SQueryRoomToMatchShardReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SRegisterMatchReq* Arena::CreateMaybeMessage<::KFMsg::S2SRegisterMatchReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SResetMatchRoomReq* Arena::CreateMaybeMessage<::KFMsg::S2SResetMatchRoomReq>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace KFMsg {

enum MatchProtocol {
  S2S_MATCH_PROTOCOL_UNKNOW = 0,
  S2S_REGISTER_MATCH_REQ = 11101,
  S2S_MATCH_TO_PROXY_REQ = 11102,
  S2S_MATCH_TO_SHARD_REQ = 11103,
  S2S_MATCH_TO_CLIENT_ACK = 11104,
  S2S_CANCEL_MATCH_TO_PROXY_REQ = 11107,
  S2S_CANCEL_MATCH_TO_SHARD_REQ = 11108,
  S2S_NOTICE_MATCH_ROOM_REQ = 11109,
  S2S_NOTICE_MATCH_ROOM_ACK = 11110,
  S2S_QUERY_MATCH_ROOM_REQ = 11111,
  S2S_QUERY_MATCH_ROOM_ACK = 11112,
  S2S_QUERY_BATTLE_ROOM_REQ = 11113,
  S2S_QUERY_BATTLE_ROOM_ACK = 11114,
  S2S_QUERY_ROOM_TO_MATCH_SHARD_REQ = 11115,
  S2S_QUERY_ROOM_TO_BATTLE_SHARD_REQ = 11116,
  S2S_CANCEL_MATCH_TO_BATTLE_SHARD_REQ = 11118,
  S2S_PLAYER_ONLINE_TO_BATTLE_SHARD_REQ = 11120,
  S2S_NOTICE_MATCH_STATE_REQ = 11121,
  S2S_RESET_MATCH_ROOM_REQ = 11122,
  MatchProtocol_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MatchProtocol_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool MatchProtocol_IsValid(int value);
const MatchProtocol MatchProtocol_MIN = S2S_MATCH_PROTOCOL_UNKNOW;
const MatchProtocol MatchProtocol_MAX = S2S_RESET_MATCH_ROOM_REQ;
const int MatchProtocol_ARRAYSIZE = MatchProtocol_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* MatchProtocol_descriptor();
inline const ::std::string& MatchProtocol_Name(MatchProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    MatchProtocol_descriptor(), value);
}
inline bool MatchProtocol_Parse(
    const ::std::string& name, MatchProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MatchProtocol>(
    MatchProtocol_descriptor(), name, value);
}
// ===================================================================

class LIBPROTOC_EXPORT S2SRegisterMatchReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SRegisterMatchReq) */ {
 public:
  S2SRegisterMatchReq();
  virtual ~S2SRegisterMatchReq();

  S2SRegisterMatchReq(const S2SRegisterMatchReq& from);

  inline S2SRegisterMatchReq& operator=(const S2SRegisterMatchReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SRegisterMatchReq(S2SRegisterMatchReq&& from) noexcept
    : S2SRegisterMatchReq() {
    *this = ::std::move(from);
  }

  inline S2SRegisterMatchReq& operator=(S2SRegisterMatchReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRegisterMatchReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SRegisterMatchReq* internal_default_instance() {
    return reinterpret_cast<const S2SRegisterMatchReq*>(
               &_S2SRegisterMatchReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(S2SRegisterMatchReq* other);
  friend void swap(S2SRegisterMatchReq& a, S2SRegisterMatchReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SRegisterMatchReq* New() const final {
    return CreateMaybeMessage<S2SRegisterMatchReq>(NULL);
  }

  S2SRegisterMatchReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SRegisterMatchReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SRegisterMatchReq& from);
  void MergeFrom(const S2SRegisterMatchReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SRegisterMatchReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 matchid = 1;
  int matchid_size() const;
  void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  ::google::protobuf::uint32 matchid(int index) const;
  void set_matchid(int index, ::google::protobuf::uint32 value);
  void add_matchid(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      matchid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_matchid();

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRegisterMatchReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > matchid_;
  mutable int _matchid_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFMatchMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SMatchToProxyReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SMatchToProxyReq) */ {
 public:
  S2SMatchToProxyReq();
  virtual ~S2SMatchToProxyReq();

  S2SMatchToProxyReq(const S2SMatchToProxyReq& from);

  inline S2SMatchToProxyReq& operator=(const S2SMatchToProxyReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SMatchToProxyReq(S2SMatchToProxyReq&& from) noexcept
    : S2SMatchToProxyReq() {
    *this = ::std::move(from);
  }

  inline S2SMatchToProxyReq& operator=(S2SMatchToProxyReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SMatchToProxyReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SMatchToProxyReq* internal_default_instance() {
    return reinterpret_cast<const S2SMatchToProxyReq*>(
               &_S2SMatchToProxyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(S2SMatchToProxyReq* other);
  friend void swap(S2SMatchToProxyReq& a, S2SMatchToProxyReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SMatchToProxyReq* New() const final {
    return CreateMaybeMessage<S2SMatchToProxyReq>(NULL);
  }

  S2SMatchToProxyReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SMatchToProxyReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SMatchToProxyReq& from);
  void MergeFrom(const S2SMatchToProxyReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SMatchToProxyReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes version = 7;
  void clear_version();
  static const int kVersionFieldNumber = 7;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // .KFMsg.PBMatchGroup pbgroup = 1;
  bool has_pbgroup() const;
  void clear_pbgroup();
  static const int kPbgroupFieldNumber = 1;
  private:
  const ::KFMsg::PBMatchGroup& _internal_pbgroup() const;
  public:
  const ::KFMsg::PBMatchGroup& pbgroup() const;
  ::KFMsg::PBMatchGroup* release_pbgroup();
  ::KFMsg::PBMatchGroup* mutable_pbgroup();
  void set_allocated_pbgroup(::KFMsg::PBMatchGroup* pbgroup);

  // uint32 matchid = 2;
  void clear_matchid();
  static const int kMatchidFieldNumber = 2;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // bool allowgroup = 3;
  void clear_allowgroup();
  static const int kAllowgroupFieldNumber = 3;
  bool allowgroup() const;
  void set_allowgroup(bool value);

  // uint64 playerid = 4;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 4;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // uint64 serverid = 5;
  void clear_serverid();
  static const int kServeridFieldNumber = 5;
  ::google::protobuf::uint64 serverid() const;
  void set_serverid(::google::protobuf::uint64 value);

  // uint64 battleserverid = 6;
  void clear_battleserverid();
  static const int kBattleserveridFieldNumber = 6;
  ::google::protobuf::uint64 battleserverid() const;
  void set_battleserverid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SMatchToProxyReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::KFMsg::PBMatchGroup* pbgroup_;
  ::google::protobuf::uint32 matchid_;
  bool allowgroup_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint64 serverid_;
  ::google::protobuf::uint64 battleserverid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFMatchMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SMatchToClientAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SMatchToClientAck) */ {
 public:
  S2SMatchToClientAck();
  virtual ~S2SMatchToClientAck();

  S2SMatchToClientAck(const S2SMatchToClientAck& from);

  inline S2SMatchToClientAck& operator=(const S2SMatchToClientAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SMatchToClientAck(S2SMatchToClientAck&& from) noexcept
    : S2SMatchToClientAck() {
    *this = ::std::move(from);
  }

  inline S2SMatchToClientAck& operator=(S2SMatchToClientAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SMatchToClientAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SMatchToClientAck* internal_default_instance() {
    return reinterpret_cast<const S2SMatchToClientAck*>(
               &_S2SMatchToClientAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(S2SMatchToClientAck* other);
  friend void swap(S2SMatchToClientAck& a, S2SMatchToClientAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SMatchToClientAck* New() const final {
    return CreateMaybeMessage<S2SMatchToClientAck>(NULL);
  }

  S2SMatchToClientAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SMatchToClientAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SMatchToClientAck& from);
  void MergeFrom(const S2SMatchToClientAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SMatchToClientAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // uint32 matchid = 2;
  void clear_matchid();
  static const int kMatchidFieldNumber = 2;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // uint64 playerid = 3;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 3;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SMatchToClientAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint64 playerid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFMatchMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SMatchToShardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SMatchToShardReq) */ {
 public:
  S2SMatchToShardReq();
  virtual ~S2SMatchToShardReq();

  S2SMatchToShardReq(const S2SMatchToShardReq& from);

  inline S2SMatchToShardReq& operator=(const S2SMatchToShardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SMatchToShardReq(S2SMatchToShardReq&& from) noexcept
    : S2SMatchToShardReq() {
    *this = ::std::move(from);
  }

  inline S2SMatchToShardReq& operator=(S2SMatchToShardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SMatchToShardReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SMatchToShardReq* internal_default_instance() {
    return reinterpret_cast<const S2SMatchToShardReq*>(
               &_S2SMatchToShardReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(S2SMatchToShardReq* other);
  friend void swap(S2SMatchToShardReq& a, S2SMatchToShardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SMatchToShardReq* New() const final {
    return CreateMaybeMessage<S2SMatchToShardReq>(NULL);
  }

  S2SMatchToShardReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SMatchToShardReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SMatchToShardReq& from);
  void MergeFrom(const S2SMatchToShardReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SMatchToShardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes version = 7;
  void clear_version();
  static const int kVersionFieldNumber = 7;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // .KFMsg.PBMatchGroup pbgroup = 1;
  bool has_pbgroup() const;
  void clear_pbgroup();
  static const int kPbgroupFieldNumber = 1;
  private:
  const ::KFMsg::PBMatchGroup& _internal_pbgroup() const;
  public:
  const ::KFMsg::PBMatchGroup& pbgroup() const;
  ::KFMsg::PBMatchGroup* release_pbgroup();
  ::KFMsg::PBMatchGroup* mutable_pbgroup();
  void set_allocated_pbgroup(::KFMsg::PBMatchGroup* pbgroup);

  // uint32 matchid = 2;
  void clear_matchid();
  static const int kMatchidFieldNumber = 2;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // bool allowgroup = 3;
  void clear_allowgroup();
  static const int kAllowgroupFieldNumber = 3;
  bool allowgroup() const;
  void set_allowgroup(bool value);

  // uint64 playerid = 4;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 4;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // uint64 serverid = 5;
  void clear_serverid();
  static const int kServeridFieldNumber = 5;
  ::google::protobuf::uint64 serverid() const;
  void set_serverid(::google::protobuf::uint64 value);

  // uint64 battleserverid = 6;
  void clear_battleserverid();
  static const int kBattleserveridFieldNumber = 6;
  ::google::protobuf::uint64 battleserverid() const;
  void set_battleserverid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SMatchToShardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::KFMsg::PBMatchGroup* pbgroup_;
  ::google::protobuf::uint32 matchid_;
  bool allowgroup_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint64 serverid_;
  ::google::protobuf::uint64 battleserverid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFMatchMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SCancelMatchToProxyReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SCancelMatchToProxyReq) */ {
 public:
  S2SCancelMatchToProxyReq();
  virtual ~S2SCancelMatchToProxyReq();

  S2SCancelMatchToProxyReq(const S2SCancelMatchToProxyReq& from);

  inline S2SCancelMatchToProxyReq& operator=(const S2SCancelMatchToProxyReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SCancelMatchToProxyReq(S2SCancelMatchToProxyReq&& from) noexcept
    : S2SCancelMatchToProxyReq() {
    *this = ::std::move(from);
  }

  inline S2SCancelMatchToProxyReq& operator=(S2SCancelMatchToProxyReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SCancelMatchToProxyReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SCancelMatchToProxyReq* internal_default_instance() {
    return reinterpret_cast<const S2SCancelMatchToProxyReq*>(
               &_S2SCancelMatchToProxyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(S2SCancelMatchToProxyReq* other);
  friend void swap(S2SCancelMatchToProxyReq& a, S2SCancelMatchToProxyReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SCancelMatchToProxyReq* New() const final {
    return CreateMaybeMessage<S2SCancelMatchToProxyReq>(NULL);
  }

  S2SCancelMatchToProxyReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SCancelMatchToProxyReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SCancelMatchToProxyReq& from);
  void MergeFrom(const S2SCancelMatchToProxyReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SCancelMatchToProxyReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 playerid = 2;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // uint32 matchid = 1;
  void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SCancelMatchToProxyReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint32 matchid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFMatchMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SCancelMatchToShardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SCancelMatchToShardReq) */ {
 public:
  S2SCancelMatchToShardReq();
  virtual ~S2SCancelMatchToShardReq();

  S2SCancelMatchToShardReq(const S2SCancelMatchToShardReq& from);

  inline S2SCancelMatchToShardReq& operator=(const S2SCancelMatchToShardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SCancelMatchToShardReq(S2SCancelMatchToShardReq&& from) noexcept
    : S2SCancelMatchToShardReq() {
    *this = ::std::move(from);
  }

  inline S2SCancelMatchToShardReq& operator=(S2SCancelMatchToShardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SCancelMatchToShardReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SCancelMatchToShardReq* internal_default_instance() {
    return reinterpret_cast<const S2SCancelMatchToShardReq*>(
               &_S2SCancelMatchToShardReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(S2SCancelMatchToShardReq* other);
  friend void swap(S2SCancelMatchToShardReq& a, S2SCancelMatchToShardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SCancelMatchToShardReq* New() const final {
    return CreateMaybeMessage<S2SCancelMatchToShardReq>(NULL);
  }

  S2SCancelMatchToShardReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SCancelMatchToShardReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SCancelMatchToShardReq& from);
  void MergeFrom(const S2SCancelMatchToShardReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SCancelMatchToShardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 playerid = 2;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // uint32 matchid = 1;
  void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SCancelMatchToShardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint32 matchid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFMatchMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SCancelMatchToBattleShardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SCancelMatchToBattleShardReq) */ {
 public:
  S2SCancelMatchToBattleShardReq();
  virtual ~S2SCancelMatchToBattleShardReq();

  S2SCancelMatchToBattleShardReq(const S2SCancelMatchToBattleShardReq& from);

  inline S2SCancelMatchToBattleShardReq& operator=(const S2SCancelMatchToBattleShardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SCancelMatchToBattleShardReq(S2SCancelMatchToBattleShardReq&& from) noexcept
    : S2SCancelMatchToBattleShardReq() {
    *this = ::std::move(from);
  }

  inline S2SCancelMatchToBattleShardReq& operator=(S2SCancelMatchToBattleShardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SCancelMatchToBattleShardReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SCancelMatchToBattleShardReq* internal_default_instance() {
    return reinterpret_cast<const S2SCancelMatchToBattleShardReq*>(
               &_S2SCancelMatchToBattleShardReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(S2SCancelMatchToBattleShardReq* other);
  friend void swap(S2SCancelMatchToBattleShardReq& a, S2SCancelMatchToBattleShardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SCancelMatchToBattleShardReq* New() const final {
    return CreateMaybeMessage<S2SCancelMatchToBattleShardReq>(NULL);
  }

  S2SCancelMatchToBattleShardReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SCancelMatchToBattleShardReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SCancelMatchToBattleShardReq& from);
  void MergeFrom(const S2SCancelMatchToBattleShardReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SCancelMatchToBattleShardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 roomid = 1;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // uint64 groupid = 3;
  void clear_groupid();
  static const int kGroupidFieldNumber = 3;
  ::google::protobuf::uint64 groupid() const;
  void set_groupid(::google::protobuf::uint64 value);

  // uint32 campid = 2;
  void clear_campid();
  static const int kCampidFieldNumber = 2;
  ::google::protobuf::uint32 campid() const;
  void set_campid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SCancelMatchToBattleShardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint32 campid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFMatchMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SNoticeMatchRoomReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SNoticeMatchRoomReq) */ {
 public:
  S2SNoticeMatchRoomReq();
  virtual ~S2SNoticeMatchRoomReq();

  S2SNoticeMatchRoomReq(const S2SNoticeMatchRoomReq& from);

  inline S2SNoticeMatchRoomReq& operator=(const S2SNoticeMatchRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SNoticeMatchRoomReq(S2SNoticeMatchRoomReq&& from) noexcept
    : S2SNoticeMatchRoomReq() {
    *this = ::std::move(from);
  }

  inline S2SNoticeMatchRoomReq& operator=(S2SNoticeMatchRoomReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SNoticeMatchRoomReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SNoticeMatchRoomReq* internal_default_instance() {
    return reinterpret_cast<const S2SNoticeMatchRoomReq*>(
               &_S2SNoticeMatchRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(S2SNoticeMatchRoomReq* other);
  friend void swap(S2SNoticeMatchRoomReq& a, S2SNoticeMatchRoomReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SNoticeMatchRoomReq* New() const final {
    return CreateMaybeMessage<S2SNoticeMatchRoomReq>(NULL);
  }

  S2SNoticeMatchRoomReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SNoticeMatchRoomReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SNoticeMatchRoomReq& from);
  void MergeFrom(const S2SNoticeMatchRoomReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SNoticeMatchRoomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes ip = 7;
  void clear_ip();
  static const int kIpFieldNumber = 7;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // bytes token = 9;
  void clear_token();
  static const int kTokenFieldNumber = 9;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const void* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // uint64 battleshardid = 2;
  void clear_battleshardid();
  static const int kBattleshardidFieldNumber = 2;
  ::google::protobuf::uint64 battleshardid() const;
  void set_battleshardid(::google::protobuf::uint64 value);

  // uint32 matchid = 1;
  void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // uint32 campid = 3;
  void clear_campid();
  static const int kCampidFieldNumber = 3;
  ::google::protobuf::uint32 campid() const;
  void set_campid(::google::protobuf::uint32 value);

  // uint64 playerid = 4;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 4;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // uint64 serverid = 5;
  void clear_serverid();
  static const int kServeridFieldNumber = 5;
  ::google::protobuf::uint64 serverid() const;
  void set_serverid(::google::protobuf::uint64 value);

  // uint64 roomid = 6;
  void clear_roomid();
  static const int kRoomidFieldNumber = 6;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // uint32 port = 8;
  void clear_port();
  static const int kPortFieldNumber = 8;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SNoticeMatchRoomReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::uint64 battleshardid_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint64 serverid_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFMatchMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SNoticeMatchRoomAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SNoticeMatchRoomAck) */ {
 public:
  S2SNoticeMatchRoomAck();
  virtual ~S2SNoticeMatchRoomAck();

  S2SNoticeMatchRoomAck(const S2SNoticeMatchRoomAck& from);

  inline S2SNoticeMatchRoomAck& operator=(const S2SNoticeMatchRoomAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SNoticeMatchRoomAck(S2SNoticeMatchRoomAck&& from) noexcept
    : S2SNoticeMatchRoomAck() {
    *this = ::std::move(from);
  }

  inline S2SNoticeMatchRoomAck& operator=(S2SNoticeMatchRoomAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SNoticeMatchRoomAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SNoticeMatchRoomAck* internal_default_instance() {
    return reinterpret_cast<const S2SNoticeMatchRoomAck*>(
               &_S2SNoticeMatchRoomAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(S2SNoticeMatchRoomAck* other);
  friend void swap(S2SNoticeMatchRoomAck& a, S2SNoticeMatchRoomAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SNoticeMatchRoomAck* New() const final {
    return CreateMaybeMessage<S2SNoticeMatchRoomAck>(NULL);
  }

  S2SNoticeMatchRoomAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SNoticeMatchRoomAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SNoticeMatchRoomAck& from);
  void MergeFrom(const S2SNoticeMatchRoomAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SNoticeMatchRoomAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 roomid = 1;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // uint64 playerid = 3;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 3;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // uint32 campid = 2;
  void clear_campid();
  static const int kCampidFieldNumber = 2;
  ::google::protobuf::uint32 campid() const;
  void set_campid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SNoticeMatchRoomAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint32 campid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFMatchMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryMatchRoomReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SQueryMatchRoomReq) */ {
 public:
  S2SQueryMatchRoomReq();
  virtual ~S2SQueryMatchRoomReq();

  S2SQueryMatchRoomReq(const S2SQueryMatchRoomReq& from);

  inline S2SQueryMatchRoomReq& operator=(const S2SQueryMatchRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SQueryMatchRoomReq(S2SQueryMatchRoomReq&& from) noexcept
    : S2SQueryMatchRoomReq() {
    *this = ::std::move(from);
  }

  inline S2SQueryMatchRoomReq& operator=(S2SQueryMatchRoomReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryMatchRoomReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SQueryMatchRoomReq* internal_default_instance() {
    return reinterpret_cast<const S2SQueryMatchRoomReq*>(
               &_S2SQueryMatchRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(S2SQueryMatchRoomReq* other);
  friend void swap(S2SQueryMatchRoomReq& a, S2SQueryMatchRoomReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SQueryMatchRoomReq* New() const final {
    return CreateMaybeMessage<S2SQueryMatchRoomReq>(NULL);
  }

  S2SQueryMatchRoomReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SQueryMatchRoomReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SQueryMatchRoomReq& from);
  void MergeFrom(const S2SQueryMatchRoomReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SQueryMatchRoomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 playerid = 2;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // uint64 serverid = 3;
  void clear_serverid();
  static const int kServeridFieldNumber = 3;
  ::google::protobuf::uint64 serverid() const;
  void set_serverid(::google::protobuf::uint64 value);

  // uint32 matchid = 1;
  void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryMatchRoomReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint64 serverid_;
  ::google::protobuf::uint32 matchid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFMatchMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryRoomToMatchShardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SQueryRoomToMatchShardReq) */ {
 public:
  S2SQueryRoomToMatchShardReq();
  virtual ~S2SQueryRoomToMatchShardReq();

  S2SQueryRoomToMatchShardReq(const S2SQueryRoomToMatchShardReq& from);

  inline S2SQueryRoomToMatchShardReq& operator=(const S2SQueryRoomToMatchShardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SQueryRoomToMatchShardReq(S2SQueryRoomToMatchShardReq&& from) noexcept
    : S2SQueryRoomToMatchShardReq() {
    *this = ::std::move(from);
  }

  inline S2SQueryRoomToMatchShardReq& operator=(S2SQueryRoomToMatchShardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryRoomToMatchShardReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SQueryRoomToMatchShardReq* internal_default_instance() {
    return reinterpret_cast<const S2SQueryRoomToMatchShardReq*>(
               &_S2SQueryRoomToMatchShardReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(S2SQueryRoomToMatchShardReq* other);
  friend void swap(S2SQueryRoomToMatchShardReq& a, S2SQueryRoomToMatchShardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SQueryRoomToMatchShardReq* New() const final {
    return CreateMaybeMessage<S2SQueryRoomToMatchShardReq>(NULL);
  }

  S2SQueryRoomToMatchShardReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SQueryRoomToMatchShardReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SQueryRoomToMatchShardReq& from);
  void MergeFrom(const S2SQueryRoomToMatchShardReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SQueryRoomToMatchShardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 playerid = 2;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // uint64 serverid = 3;
  void clear_serverid();
  static const int kServeridFieldNumber = 3;
  ::google::protobuf::uint64 serverid() const;
  void set_serverid(::google::protobuf::uint64 value);

  // uint32 matchid = 1;
  void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryRoomToMatchShardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint64 serverid_;
  ::google::protobuf::uint32 matchid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFMatchMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryMatchRoomAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SQueryMatchRoomAck) */ {
 public:
  S2SQueryMatchRoomAck();
  virtual ~S2SQueryMatchRoomAck();

  S2SQueryMatchRoomAck(const S2SQueryMatchRoomAck& from);

  inline S2SQueryMatchRoomAck& operator=(const S2SQueryMatchRoomAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SQueryMatchRoomAck(S2SQueryMatchRoomAck&& from) noexcept
    : S2SQueryMatchRoomAck() {
    *this = ::std::move(from);
  }

  inline S2SQueryMatchRoomAck& operator=(S2SQueryMatchRoomAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryMatchRoomAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SQueryMatchRoomAck* internal_default_instance() {
    return reinterpret_cast<const S2SQueryMatchRoomAck*>(
               &_S2SQueryMatchRoomAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(S2SQueryMatchRoomAck* other);
  friend void swap(S2SQueryMatchRoomAck& a, S2SQueryMatchRoomAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SQueryMatchRoomAck* New() const final {
    return CreateMaybeMessage<S2SQueryMatchRoomAck>(NULL);
  }

  S2SQueryMatchRoomAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SQueryMatchRoomAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SQueryMatchRoomAck& from);
  void MergeFrom(const S2SQueryMatchRoomAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SQueryMatchRoomAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 playerid = 2;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // uint32 matchid = 1;
  void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryMatchRoomAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint32 matchid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFMatchMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryBattleRoomReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SQueryBattleRoomReq) */ {
 public:
  S2SQueryBattleRoomReq();
  virtual ~S2SQueryBattleRoomReq();

  S2SQueryBattleRoomReq(const S2SQueryBattleRoomReq& from);

  inline S2SQueryBattleRoomReq& operator=(const S2SQueryBattleRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SQueryBattleRoomReq(S2SQueryBattleRoomReq&& from) noexcept
    : S2SQueryBattleRoomReq() {
    *this = ::std::move(from);
  }

  inline S2SQueryBattleRoomReq& operator=(S2SQueryBattleRoomReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryBattleRoomReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SQueryBattleRoomReq* internal_default_instance() {
    return reinterpret_cast<const S2SQueryBattleRoomReq*>(
               &_S2SQueryBattleRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(S2SQueryBattleRoomReq* other);
  friend void swap(S2SQueryBattleRoomReq& a, S2SQueryBattleRoomReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SQueryBattleRoomReq* New() const final {
    return CreateMaybeMessage<S2SQueryBattleRoomReq>(NULL);
  }

  S2SQueryBattleRoomReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SQueryBattleRoomReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SQueryBattleRoomReq& from);
  void MergeFrom(const S2SQueryBattleRoomReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SQueryBattleRoomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 roomid = 1;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // uint64 playerid = 2;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // uint64 serverid = 3;
  void clear_serverid();
  static const int kServeridFieldNumber = 3;
  ::google::protobuf::uint64 serverid() const;
  void set_serverid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryBattleRoomReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint64 serverid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFMatchMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryBattleRoomAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SQueryBattleRoomAck) */ {
 public:
  S2SQueryBattleRoomAck();
  virtual ~S2SQueryBattleRoomAck();

  S2SQueryBattleRoomAck(const S2SQueryBattleRoomAck& from);

  inline S2SQueryBattleRoomAck& operator=(const S2SQueryBattleRoomAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SQueryBattleRoomAck(S2SQueryBattleRoomAck&& from) noexcept
    : S2SQueryBattleRoomAck() {
    *this = ::std::move(from);
  }

  inline S2SQueryBattleRoomAck& operator=(S2SQueryBattleRoomAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryBattleRoomAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SQueryBattleRoomAck* internal_default_instance() {
    return reinterpret_cast<const S2SQueryBattleRoomAck*>(
               &_S2SQueryBattleRoomAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(S2SQueryBattleRoomAck* other);
  friend void swap(S2SQueryBattleRoomAck& a, S2SQueryBattleRoomAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SQueryBattleRoomAck* New() const final {
    return CreateMaybeMessage<S2SQueryBattleRoomAck>(NULL);
  }

  S2SQueryBattleRoomAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SQueryBattleRoomAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SQueryBattleRoomAck& from);
  void MergeFrom(const S2SQueryBattleRoomAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SQueryBattleRoomAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 playerid = 1;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // uint64 roomid = 2;
  void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // uint32 matchid = 3;
  void clear_matchid();
  static const int kMatchidFieldNumber = 3;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryBattleRoomAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 matchid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFMatchMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryRoomToBattleShardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SQueryRoomToBattleShardReq) */ {
 public:
  S2SQueryRoomToBattleShardReq();
  virtual ~S2SQueryRoomToBattleShardReq();

  S2SQueryRoomToBattleShardReq(const S2SQueryRoomToBattleShardReq& from);

  inline S2SQueryRoomToBattleShardReq& operator=(const S2SQueryRoomToBattleShardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SQueryRoomToBattleShardReq(S2SQueryRoomToBattleShardReq&& from) noexcept
    : S2SQueryRoomToBattleShardReq() {
    *this = ::std::move(from);
  }

  inline S2SQueryRoomToBattleShardReq& operator=(S2SQueryRoomToBattleShardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryRoomToBattleShardReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SQueryRoomToBattleShardReq* internal_default_instance() {
    return reinterpret_cast<const S2SQueryRoomToBattleShardReq*>(
               &_S2SQueryRoomToBattleShardReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(S2SQueryRoomToBattleShardReq* other);
  friend void swap(S2SQueryRoomToBattleShardReq& a, S2SQueryRoomToBattleShardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SQueryRoomToBattleShardReq* New() const final {
    return CreateMaybeMessage<S2SQueryRoomToBattleShardReq>(NULL);
  }

  S2SQueryRoomToBattleShardReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SQueryRoomToBattleShardReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SQueryRoomToBattleShardReq& from);
  void MergeFrom(const S2SQueryRoomToBattleShardReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SQueryRoomToBattleShardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 roomid = 1;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // uint64 playerid = 2;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // uint64 serverid = 3;
  void clear_serverid();
  static const int kServeridFieldNumber = 3;
  ::google::protobuf::uint64 serverid() const;
  void set_serverid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryRoomToBattleShardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint64 serverid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFMatchMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SPlayerOnlineToBattleShardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SPlayerOnlineToBattleShardReq) */ {
 public:
  S2SPlayerOnlineToBattleShardReq();
  virtual ~S2SPlayerOnlineToBattleShardReq();

  S2SPlayerOnlineToBattleShardReq(const S2SPlayerOnlineToBattleShardReq& from);

  inline S2SPlayerOnlineToBattleShardReq& operator=(const S2SPlayerOnlineToBattleShardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SPlayerOnlineToBattleShardReq(S2SPlayerOnlineToBattleShardReq&& from) noexcept
    : S2SPlayerOnlineToBattleShardReq() {
    *this = ::std::move(from);
  }

  inline S2SPlayerOnlineToBattleShardReq& operator=(S2SPlayerOnlineToBattleShardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SPlayerOnlineToBattleShardReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SPlayerOnlineToBattleShardReq* internal_default_instance() {
    return reinterpret_cast<const S2SPlayerOnlineToBattleShardReq*>(
               &_S2SPlayerOnlineToBattleShardReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(S2SPlayerOnlineToBattleShardReq* other);
  friend void swap(S2SPlayerOnlineToBattleShardReq& a, S2SPlayerOnlineToBattleShardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SPlayerOnlineToBattleShardReq* New() const final {
    return CreateMaybeMessage<S2SPlayerOnlineToBattleShardReq>(NULL);
  }

  S2SPlayerOnlineToBattleShardReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SPlayerOnlineToBattleShardReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SPlayerOnlineToBattleShardReq& from);
  void MergeFrom(const S2SPlayerOnlineToBattleShardReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SPlayerOnlineToBattleShardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 roomid = 1;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // uint64 playerid = 3;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 3;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // uint64 serverid = 4;
  void clear_serverid();
  static const int kServeridFieldNumber = 4;
  ::google::protobuf::uint64 serverid() const;
  void set_serverid(::google::protobuf::uint64 value);

  // uint32 campid = 2;
  void clear_campid();
  static const int kCampidFieldNumber = 2;
  ::google::protobuf::uint32 campid() const;
  void set_campid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SPlayerOnlineToBattleShardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint64 serverid_;
  ::google::protobuf::uint32 campid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFMatchMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SNoticeMatchStateReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SNoticeMatchStateReq) */ {
 public:
  S2SNoticeMatchStateReq();
  virtual ~S2SNoticeMatchStateReq();

  S2SNoticeMatchStateReq(const S2SNoticeMatchStateReq& from);

  inline S2SNoticeMatchStateReq& operator=(const S2SNoticeMatchStateReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SNoticeMatchStateReq(S2SNoticeMatchStateReq&& from) noexcept
    : S2SNoticeMatchStateReq() {
    *this = ::std::move(from);
  }

  inline S2SNoticeMatchStateReq& operator=(S2SNoticeMatchStateReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SNoticeMatchStateReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SNoticeMatchStateReq* internal_default_instance() {
    return reinterpret_cast<const S2SNoticeMatchStateReq*>(
               &_S2SNoticeMatchStateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(S2SNoticeMatchStateReq* other);
  friend void swap(S2SNoticeMatchStateReq& a, S2SNoticeMatchStateReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SNoticeMatchStateReq* New() const final {
    return CreateMaybeMessage<S2SNoticeMatchStateReq>(NULL);
  }

  S2SNoticeMatchStateReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SNoticeMatchStateReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SNoticeMatchStateReq& from);
  void MergeFrom(const S2SNoticeMatchStateReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SNoticeMatchStateReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 playerid = 1;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // uint32 matchid = 2;
  void clear_matchid();
  static const int kMatchidFieldNumber = 2;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SNoticeMatchStateReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint32 matchid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFMatchMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SResetMatchRoomReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SResetMatchRoomReq) */ {
 public:
  S2SResetMatchRoomReq();
  virtual ~S2SResetMatchRoomReq();

  S2SResetMatchRoomReq(const S2SResetMatchRoomReq& from);

  inline S2SResetMatchRoomReq& operator=(const S2SResetMatchRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SResetMatchRoomReq(S2SResetMatchRoomReq&& from) noexcept
    : S2SResetMatchRoomReq() {
    *this = ::std::move(from);
  }

  inline S2SResetMatchRoomReq& operator=(S2SResetMatchRoomReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SResetMatchRoomReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SResetMatchRoomReq* internal_default_instance() {
    return reinterpret_cast<const S2SResetMatchRoomReq*>(
               &_S2SResetMatchRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(S2SResetMatchRoomReq* other);
  friend void swap(S2SResetMatchRoomReq& a, S2SResetMatchRoomReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SResetMatchRoomReq* New() const final {
    return CreateMaybeMessage<S2SResetMatchRoomReq>(NULL);
  }

  S2SResetMatchRoomReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SResetMatchRoomReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SResetMatchRoomReq& from);
  void MergeFrom(const S2SResetMatchRoomReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SResetMatchRoomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 roomid = 2;
  void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  ::google::protobuf::uint64 roomid() const;
  void set_roomid(::google::protobuf::uint64 value);

  // uint32 matchid = 1;
  void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  ::google::protobuf::uint32 matchid() const;
  void set_matchid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SResetMatchRoomReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 matchid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFMatchMessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// S2SRegisterMatchReq

// repeated uint32 matchid = 1;
inline int S2SRegisterMatchReq::matchid_size() const {
  return matchid_.size();
}
inline void S2SRegisterMatchReq::clear_matchid() {
  matchid_.Clear();
}
inline ::google::protobuf::uint32 S2SRegisterMatchReq::matchid(int index) const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRegisterMatchReq.matchid)
  return matchid_.Get(index);
}
inline void S2SRegisterMatchReq::set_matchid(int index, ::google::protobuf::uint32 value) {
  matchid_.Set(index, value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SRegisterMatchReq.matchid)
}
inline void S2SRegisterMatchReq::add_matchid(::google::protobuf::uint32 value) {
  matchid_.Add(value);
  // @@protoc_insertion_point(field_add:KFMsg.S2SRegisterMatchReq.matchid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
S2SRegisterMatchReq::matchid() const {
  // @@protoc_insertion_point(field_list:KFMsg.S2SRegisterMatchReq.matchid)
  return matchid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
S2SRegisterMatchReq::mutable_matchid() {
  // @@protoc_insertion_point(field_mutable_list:KFMsg.S2SRegisterMatchReq.matchid)
  return &matchid_;
}

// -------------------------------------------------------------------

// S2SMatchToProxyReq

// .KFMsg.PBMatchGroup pbgroup = 1;
inline bool S2SMatchToProxyReq::has_pbgroup() const {
  return this != internal_default_instance() && pbgroup_ != NULL;
}
inline const ::KFMsg::PBMatchGroup& S2SMatchToProxyReq::_internal_pbgroup() const {
  return *pbgroup_;
}
inline const ::KFMsg::PBMatchGroup& S2SMatchToProxyReq::pbgroup() const {
  const ::KFMsg::PBMatchGroup* p = pbgroup_;
  // @@protoc_insertion_point(field_get:KFMsg.S2SMatchToProxyReq.pbgroup)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBMatchGroup*>(
      &::KFMsg::_PBMatchGroup_default_instance_);
}
inline ::KFMsg::PBMatchGroup* S2SMatchToProxyReq::release_pbgroup() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SMatchToProxyReq.pbgroup)
  
  ::KFMsg::PBMatchGroup* temp = pbgroup_;
  pbgroup_ = NULL;
  return temp;
}
inline ::KFMsg::PBMatchGroup* S2SMatchToProxyReq::mutable_pbgroup() {
  
  if (pbgroup_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBMatchGroup>(GetArenaNoVirtual());
    pbgroup_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SMatchToProxyReq.pbgroup)
  return pbgroup_;
}
inline void S2SMatchToProxyReq::set_allocated_pbgroup(::KFMsg::PBMatchGroup* pbgroup) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pbgroup_);
  }
  if (pbgroup) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pbgroup = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pbgroup, submessage_arena);
    }
    
  } else {
    
  }
  pbgroup_ = pbgroup;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SMatchToProxyReq.pbgroup)
}

// uint32 matchid = 2;
inline void S2SMatchToProxyReq::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 S2SMatchToProxyReq::matchid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SMatchToProxyReq.matchid)
  return matchid_;
}
inline void S2SMatchToProxyReq::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SMatchToProxyReq.matchid)
}

// bool allowgroup = 3;
inline void S2SMatchToProxyReq::clear_allowgroup() {
  allowgroup_ = false;
}
inline bool S2SMatchToProxyReq::allowgroup() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SMatchToProxyReq.allowgroup)
  return allowgroup_;
}
inline void S2SMatchToProxyReq::set_allowgroup(bool value) {
  
  allowgroup_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SMatchToProxyReq.allowgroup)
}

// uint64 playerid = 4;
inline void S2SMatchToProxyReq::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SMatchToProxyReq::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SMatchToProxyReq.playerid)
  return playerid_;
}
inline void S2SMatchToProxyReq::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SMatchToProxyReq.playerid)
}

// uint64 serverid = 5;
inline void S2SMatchToProxyReq::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SMatchToProxyReq::serverid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SMatchToProxyReq.serverid)
  return serverid_;
}
inline void S2SMatchToProxyReq::set_serverid(::google::protobuf::uint64 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SMatchToProxyReq.serverid)
}

// uint64 battleserverid = 6;
inline void S2SMatchToProxyReq::clear_battleserverid() {
  battleserverid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SMatchToProxyReq::battleserverid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SMatchToProxyReq.battleserverid)
  return battleserverid_;
}
inline void S2SMatchToProxyReq::set_battleserverid(::google::protobuf::uint64 value) {
  
  battleserverid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SMatchToProxyReq.battleserverid)
}

// bytes version = 7;
inline void S2SMatchToProxyReq::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SMatchToProxyReq::version() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SMatchToProxyReq.version)
  return version_.GetNoArena();
}
inline void S2SMatchToProxyReq::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SMatchToProxyReq.version)
}
#if LANG_CXX11
inline void S2SMatchToProxyReq::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SMatchToProxyReq.version)
}
#endif
inline void S2SMatchToProxyReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SMatchToProxyReq.version)
}
inline void S2SMatchToProxyReq::set_version(const void* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SMatchToProxyReq.version)
}
inline ::std::string* S2SMatchToProxyReq::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SMatchToProxyReq.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SMatchToProxyReq::release_version() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SMatchToProxyReq.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SMatchToProxyReq::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SMatchToProxyReq.version)
}

// -------------------------------------------------------------------

// S2SMatchToClientAck

// uint32 result = 1;
inline void S2SMatchToClientAck::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 S2SMatchToClientAck::result() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SMatchToClientAck.result)
  return result_;
}
inline void S2SMatchToClientAck::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SMatchToClientAck.result)
}

// uint32 matchid = 2;
inline void S2SMatchToClientAck::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 S2SMatchToClientAck::matchid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SMatchToClientAck.matchid)
  return matchid_;
}
inline void S2SMatchToClientAck::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SMatchToClientAck.matchid)
}

// uint64 playerid = 3;
inline void S2SMatchToClientAck::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SMatchToClientAck::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SMatchToClientAck.playerid)
  return playerid_;
}
inline void S2SMatchToClientAck::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SMatchToClientAck.playerid)
}

// -------------------------------------------------------------------

// S2SMatchToShardReq

// .KFMsg.PBMatchGroup pbgroup = 1;
inline bool S2SMatchToShardReq::has_pbgroup() const {
  return this != internal_default_instance() && pbgroup_ != NULL;
}
inline const ::KFMsg::PBMatchGroup& S2SMatchToShardReq::_internal_pbgroup() const {
  return *pbgroup_;
}
inline const ::KFMsg::PBMatchGroup& S2SMatchToShardReq::pbgroup() const {
  const ::KFMsg::PBMatchGroup* p = pbgroup_;
  // @@protoc_insertion_point(field_get:KFMsg.S2SMatchToShardReq.pbgroup)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBMatchGroup*>(
      &::KFMsg::_PBMatchGroup_default_instance_);
}
inline ::KFMsg::PBMatchGroup* S2SMatchToShardReq::release_pbgroup() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SMatchToShardReq.pbgroup)
  
  ::KFMsg::PBMatchGroup* temp = pbgroup_;
  pbgroup_ = NULL;
  return temp;
}
inline ::KFMsg::PBMatchGroup* S2SMatchToShardReq::mutable_pbgroup() {
  
  if (pbgroup_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBMatchGroup>(GetArenaNoVirtual());
    pbgroup_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SMatchToShardReq.pbgroup)
  return pbgroup_;
}
inline void S2SMatchToShardReq::set_allocated_pbgroup(::KFMsg::PBMatchGroup* pbgroup) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pbgroup_);
  }
  if (pbgroup) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pbgroup = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pbgroup, submessage_arena);
    }
    
  } else {
    
  }
  pbgroup_ = pbgroup;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SMatchToShardReq.pbgroup)
}

// uint32 matchid = 2;
inline void S2SMatchToShardReq::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 S2SMatchToShardReq::matchid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SMatchToShardReq.matchid)
  return matchid_;
}
inline void S2SMatchToShardReq::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SMatchToShardReq.matchid)
}

// bool allowgroup = 3;
inline void S2SMatchToShardReq::clear_allowgroup() {
  allowgroup_ = false;
}
inline bool S2SMatchToShardReq::allowgroup() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SMatchToShardReq.allowgroup)
  return allowgroup_;
}
inline void S2SMatchToShardReq::set_allowgroup(bool value) {
  
  allowgroup_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SMatchToShardReq.allowgroup)
}

// uint64 playerid = 4;
inline void S2SMatchToShardReq::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SMatchToShardReq::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SMatchToShardReq.playerid)
  return playerid_;
}
inline void S2SMatchToShardReq::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SMatchToShardReq.playerid)
}

// uint64 serverid = 5;
inline void S2SMatchToShardReq::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SMatchToShardReq::serverid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SMatchToShardReq.serverid)
  return serverid_;
}
inline void S2SMatchToShardReq::set_serverid(::google::protobuf::uint64 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SMatchToShardReq.serverid)
}

// uint64 battleserverid = 6;
inline void S2SMatchToShardReq::clear_battleserverid() {
  battleserverid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SMatchToShardReq::battleserverid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SMatchToShardReq.battleserverid)
  return battleserverid_;
}
inline void S2SMatchToShardReq::set_battleserverid(::google::protobuf::uint64 value) {
  
  battleserverid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SMatchToShardReq.battleserverid)
}

// bytes version = 7;
inline void S2SMatchToShardReq::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SMatchToShardReq::version() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SMatchToShardReq.version)
  return version_.GetNoArena();
}
inline void S2SMatchToShardReq::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SMatchToShardReq.version)
}
#if LANG_CXX11
inline void S2SMatchToShardReq::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SMatchToShardReq.version)
}
#endif
inline void S2SMatchToShardReq::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SMatchToShardReq.version)
}
inline void S2SMatchToShardReq::set_version(const void* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SMatchToShardReq.version)
}
inline ::std::string* S2SMatchToShardReq::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SMatchToShardReq.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SMatchToShardReq::release_version() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SMatchToShardReq.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SMatchToShardReq::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SMatchToShardReq.version)
}

// -------------------------------------------------------------------

// S2SCancelMatchToProxyReq

// uint32 matchid = 1;
inline void S2SCancelMatchToProxyReq::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 S2SCancelMatchToProxyReq::matchid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SCancelMatchToProxyReq.matchid)
  return matchid_;
}
inline void S2SCancelMatchToProxyReq::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SCancelMatchToProxyReq.matchid)
}

// uint64 playerid = 2;
inline void S2SCancelMatchToProxyReq::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SCancelMatchToProxyReq::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SCancelMatchToProxyReq.playerid)
  return playerid_;
}
inline void S2SCancelMatchToProxyReq::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SCancelMatchToProxyReq.playerid)
}

// -------------------------------------------------------------------

// S2SCancelMatchToShardReq

// uint32 matchid = 1;
inline void S2SCancelMatchToShardReq::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 S2SCancelMatchToShardReq::matchid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SCancelMatchToShardReq.matchid)
  return matchid_;
}
inline void S2SCancelMatchToShardReq::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SCancelMatchToShardReq.matchid)
}

// uint64 playerid = 2;
inline void S2SCancelMatchToShardReq::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SCancelMatchToShardReq::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SCancelMatchToShardReq.playerid)
  return playerid_;
}
inline void S2SCancelMatchToShardReq::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SCancelMatchToShardReq.playerid)
}

// -------------------------------------------------------------------

// S2SCancelMatchToBattleShardReq

// uint64 roomid = 1;
inline void S2SCancelMatchToBattleShardReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SCancelMatchToBattleShardReq::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SCancelMatchToBattleShardReq.roomid)
  return roomid_;
}
inline void S2SCancelMatchToBattleShardReq::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SCancelMatchToBattleShardReq.roomid)
}

// uint32 campid = 2;
inline void S2SCancelMatchToBattleShardReq::clear_campid() {
  campid_ = 0u;
}
inline ::google::protobuf::uint32 S2SCancelMatchToBattleShardReq::campid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SCancelMatchToBattleShardReq.campid)
  return campid_;
}
inline void S2SCancelMatchToBattleShardReq::set_campid(::google::protobuf::uint32 value) {
  
  campid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SCancelMatchToBattleShardReq.campid)
}

// uint64 groupid = 3;
inline void S2SCancelMatchToBattleShardReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SCancelMatchToBattleShardReq::groupid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SCancelMatchToBattleShardReq.groupid)
  return groupid_;
}
inline void S2SCancelMatchToBattleShardReq::set_groupid(::google::protobuf::uint64 value) {
  
  groupid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SCancelMatchToBattleShardReq.groupid)
}

// -------------------------------------------------------------------

// S2SNoticeMatchRoomReq

// uint32 matchid = 1;
inline void S2SNoticeMatchRoomReq::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 S2SNoticeMatchRoomReq::matchid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SNoticeMatchRoomReq.matchid)
  return matchid_;
}
inline void S2SNoticeMatchRoomReq::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SNoticeMatchRoomReq.matchid)
}

// uint64 battleshardid = 2;
inline void S2SNoticeMatchRoomReq::clear_battleshardid() {
  battleshardid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SNoticeMatchRoomReq::battleshardid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SNoticeMatchRoomReq.battleshardid)
  return battleshardid_;
}
inline void S2SNoticeMatchRoomReq::set_battleshardid(::google::protobuf::uint64 value) {
  
  battleshardid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SNoticeMatchRoomReq.battleshardid)
}

// uint32 campid = 3;
inline void S2SNoticeMatchRoomReq::clear_campid() {
  campid_ = 0u;
}
inline ::google::protobuf::uint32 S2SNoticeMatchRoomReq::campid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SNoticeMatchRoomReq.campid)
  return campid_;
}
inline void S2SNoticeMatchRoomReq::set_campid(::google::protobuf::uint32 value) {
  
  campid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SNoticeMatchRoomReq.campid)
}

// uint64 playerid = 4;
inline void S2SNoticeMatchRoomReq::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SNoticeMatchRoomReq::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SNoticeMatchRoomReq.playerid)
  return playerid_;
}
inline void S2SNoticeMatchRoomReq::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SNoticeMatchRoomReq.playerid)
}

// uint64 serverid = 5;
inline void S2SNoticeMatchRoomReq::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SNoticeMatchRoomReq::serverid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SNoticeMatchRoomReq.serverid)
  return serverid_;
}
inline void S2SNoticeMatchRoomReq::set_serverid(::google::protobuf::uint64 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SNoticeMatchRoomReq.serverid)
}

// uint64 roomid = 6;
inline void S2SNoticeMatchRoomReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SNoticeMatchRoomReq::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SNoticeMatchRoomReq.roomid)
  return roomid_;
}
inline void S2SNoticeMatchRoomReq::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SNoticeMatchRoomReq.roomid)
}

// bytes ip = 7;
inline void S2SNoticeMatchRoomReq::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SNoticeMatchRoomReq::ip() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SNoticeMatchRoomReq.ip)
  return ip_.GetNoArena();
}
inline void S2SNoticeMatchRoomReq::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SNoticeMatchRoomReq.ip)
}
#if LANG_CXX11
inline void S2SNoticeMatchRoomReq::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SNoticeMatchRoomReq.ip)
}
#endif
inline void S2SNoticeMatchRoomReq::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SNoticeMatchRoomReq.ip)
}
inline void S2SNoticeMatchRoomReq::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SNoticeMatchRoomReq.ip)
}
inline ::std::string* S2SNoticeMatchRoomReq::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SNoticeMatchRoomReq.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SNoticeMatchRoomReq::release_ip() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SNoticeMatchRoomReq.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SNoticeMatchRoomReq::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SNoticeMatchRoomReq.ip)
}

// uint32 port = 8;
inline void S2SNoticeMatchRoomReq::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 S2SNoticeMatchRoomReq::port() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SNoticeMatchRoomReq.port)
  return port_;
}
inline void S2SNoticeMatchRoomReq::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SNoticeMatchRoomReq.port)
}

// bytes token = 9;
inline void S2SNoticeMatchRoomReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SNoticeMatchRoomReq::token() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SNoticeMatchRoomReq.token)
  return token_.GetNoArena();
}
inline void S2SNoticeMatchRoomReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SNoticeMatchRoomReq.token)
}
#if LANG_CXX11
inline void S2SNoticeMatchRoomReq::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SNoticeMatchRoomReq.token)
}
#endif
inline void S2SNoticeMatchRoomReq::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SNoticeMatchRoomReq.token)
}
inline void S2SNoticeMatchRoomReq::set_token(const void* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SNoticeMatchRoomReq.token)
}
inline ::std::string* S2SNoticeMatchRoomReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SNoticeMatchRoomReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SNoticeMatchRoomReq::release_token() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SNoticeMatchRoomReq.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SNoticeMatchRoomReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SNoticeMatchRoomReq.token)
}

// -------------------------------------------------------------------

// S2SNoticeMatchRoomAck

// uint64 roomid = 1;
inline void S2SNoticeMatchRoomAck::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SNoticeMatchRoomAck::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SNoticeMatchRoomAck.roomid)
  return roomid_;
}
inline void S2SNoticeMatchRoomAck::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SNoticeMatchRoomAck.roomid)
}

// uint32 campid = 2;
inline void S2SNoticeMatchRoomAck::clear_campid() {
  campid_ = 0u;
}
inline ::google::protobuf::uint32 S2SNoticeMatchRoomAck::campid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SNoticeMatchRoomAck.campid)
  return campid_;
}
inline void S2SNoticeMatchRoomAck::set_campid(::google::protobuf::uint32 value) {
  
  campid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SNoticeMatchRoomAck.campid)
}

// uint64 playerid = 3;
inline void S2SNoticeMatchRoomAck::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SNoticeMatchRoomAck::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SNoticeMatchRoomAck.playerid)
  return playerid_;
}
inline void S2SNoticeMatchRoomAck::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SNoticeMatchRoomAck.playerid)
}

// -------------------------------------------------------------------

// S2SQueryMatchRoomReq

// uint32 matchid = 1;
inline void S2SQueryMatchRoomReq::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 S2SQueryMatchRoomReq::matchid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SQueryMatchRoomReq.matchid)
  return matchid_;
}
inline void S2SQueryMatchRoomReq::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SQueryMatchRoomReq.matchid)
}

// uint64 playerid = 2;
inline void S2SQueryMatchRoomReq::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SQueryMatchRoomReq::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SQueryMatchRoomReq.playerid)
  return playerid_;
}
inline void S2SQueryMatchRoomReq::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SQueryMatchRoomReq.playerid)
}

// uint64 serverid = 3;
inline void S2SQueryMatchRoomReq::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SQueryMatchRoomReq::serverid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SQueryMatchRoomReq.serverid)
  return serverid_;
}
inline void S2SQueryMatchRoomReq::set_serverid(::google::protobuf::uint64 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SQueryMatchRoomReq.serverid)
}

// -------------------------------------------------------------------

// S2SQueryRoomToMatchShardReq

// uint32 matchid = 1;
inline void S2SQueryRoomToMatchShardReq::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 S2SQueryRoomToMatchShardReq::matchid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SQueryRoomToMatchShardReq.matchid)
  return matchid_;
}
inline void S2SQueryRoomToMatchShardReq::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SQueryRoomToMatchShardReq.matchid)
}

// uint64 playerid = 2;
inline void S2SQueryRoomToMatchShardReq::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SQueryRoomToMatchShardReq::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SQueryRoomToMatchShardReq.playerid)
  return playerid_;
}
inline void S2SQueryRoomToMatchShardReq::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SQueryRoomToMatchShardReq.playerid)
}

// uint64 serverid = 3;
inline void S2SQueryRoomToMatchShardReq::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SQueryRoomToMatchShardReq::serverid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SQueryRoomToMatchShardReq.serverid)
  return serverid_;
}
inline void S2SQueryRoomToMatchShardReq::set_serverid(::google::protobuf::uint64 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SQueryRoomToMatchShardReq.serverid)
}

// -------------------------------------------------------------------

// S2SQueryMatchRoomAck

// uint32 matchid = 1;
inline void S2SQueryMatchRoomAck::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 S2SQueryMatchRoomAck::matchid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SQueryMatchRoomAck.matchid)
  return matchid_;
}
inline void S2SQueryMatchRoomAck::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SQueryMatchRoomAck.matchid)
}

// uint64 playerid = 2;
inline void S2SQueryMatchRoomAck::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SQueryMatchRoomAck::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SQueryMatchRoomAck.playerid)
  return playerid_;
}
inline void S2SQueryMatchRoomAck::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SQueryMatchRoomAck.playerid)
}

// -------------------------------------------------------------------

// S2SQueryBattleRoomReq

// uint64 roomid = 1;
inline void S2SQueryBattleRoomReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SQueryBattleRoomReq::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SQueryBattleRoomReq.roomid)
  return roomid_;
}
inline void S2SQueryBattleRoomReq::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SQueryBattleRoomReq.roomid)
}

// uint64 playerid = 2;
inline void S2SQueryBattleRoomReq::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SQueryBattleRoomReq::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SQueryBattleRoomReq.playerid)
  return playerid_;
}
inline void S2SQueryBattleRoomReq::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SQueryBattleRoomReq.playerid)
}

// uint64 serverid = 3;
inline void S2SQueryBattleRoomReq::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SQueryBattleRoomReq::serverid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SQueryBattleRoomReq.serverid)
  return serverid_;
}
inline void S2SQueryBattleRoomReq::set_serverid(::google::protobuf::uint64 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SQueryBattleRoomReq.serverid)
}

// -------------------------------------------------------------------

// S2SQueryBattleRoomAck

// uint64 playerid = 1;
inline void S2SQueryBattleRoomAck::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SQueryBattleRoomAck::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SQueryBattleRoomAck.playerid)
  return playerid_;
}
inline void S2SQueryBattleRoomAck::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SQueryBattleRoomAck.playerid)
}

// uint64 roomid = 2;
inline void S2SQueryBattleRoomAck::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SQueryBattleRoomAck::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SQueryBattleRoomAck.roomid)
  return roomid_;
}
inline void S2SQueryBattleRoomAck::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SQueryBattleRoomAck.roomid)
}

// uint32 matchid = 3;
inline void S2SQueryBattleRoomAck::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 S2SQueryBattleRoomAck::matchid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SQueryBattleRoomAck.matchid)
  return matchid_;
}
inline void S2SQueryBattleRoomAck::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SQueryBattleRoomAck.matchid)
}

// -------------------------------------------------------------------

// S2SQueryRoomToBattleShardReq

// uint64 roomid = 1;
inline void S2SQueryRoomToBattleShardReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SQueryRoomToBattleShardReq::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SQueryRoomToBattleShardReq.roomid)
  return roomid_;
}
inline void S2SQueryRoomToBattleShardReq::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SQueryRoomToBattleShardReq.roomid)
}

// uint64 playerid = 2;
inline void S2SQueryRoomToBattleShardReq::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SQueryRoomToBattleShardReq::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SQueryRoomToBattleShardReq.playerid)
  return playerid_;
}
inline void S2SQueryRoomToBattleShardReq::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SQueryRoomToBattleShardReq.playerid)
}

// uint64 serverid = 3;
inline void S2SQueryRoomToBattleShardReq::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SQueryRoomToBattleShardReq::serverid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SQueryRoomToBattleShardReq.serverid)
  return serverid_;
}
inline void S2SQueryRoomToBattleShardReq::set_serverid(::google::protobuf::uint64 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SQueryRoomToBattleShardReq.serverid)
}

// -------------------------------------------------------------------

// S2SPlayerOnlineToBattleShardReq

// uint64 roomid = 1;
inline void S2SPlayerOnlineToBattleShardReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SPlayerOnlineToBattleShardReq::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SPlayerOnlineToBattleShardReq.roomid)
  return roomid_;
}
inline void S2SPlayerOnlineToBattleShardReq::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SPlayerOnlineToBattleShardReq.roomid)
}

// uint32 campid = 2;
inline void S2SPlayerOnlineToBattleShardReq::clear_campid() {
  campid_ = 0u;
}
inline ::google::protobuf::uint32 S2SPlayerOnlineToBattleShardReq::campid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SPlayerOnlineToBattleShardReq.campid)
  return campid_;
}
inline void S2SPlayerOnlineToBattleShardReq::set_campid(::google::protobuf::uint32 value) {
  
  campid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SPlayerOnlineToBattleShardReq.campid)
}

// uint64 playerid = 3;
inline void S2SPlayerOnlineToBattleShardReq::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SPlayerOnlineToBattleShardReq::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SPlayerOnlineToBattleShardReq.playerid)
  return playerid_;
}
inline void S2SPlayerOnlineToBattleShardReq::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SPlayerOnlineToBattleShardReq.playerid)
}

// uint64 serverid = 4;
inline void S2SPlayerOnlineToBattleShardReq::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SPlayerOnlineToBattleShardReq::serverid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SPlayerOnlineToBattleShardReq.serverid)
  return serverid_;
}
inline void S2SPlayerOnlineToBattleShardReq::set_serverid(::google::protobuf::uint64 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SPlayerOnlineToBattleShardReq.serverid)
}

// -------------------------------------------------------------------

// S2SNoticeMatchStateReq

// uint64 playerid = 1;
inline void S2SNoticeMatchStateReq::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SNoticeMatchStateReq::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SNoticeMatchStateReq.playerid)
  return playerid_;
}
inline void S2SNoticeMatchStateReq::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SNoticeMatchStateReq.playerid)
}

// uint32 matchid = 2;
inline void S2SNoticeMatchStateReq::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 S2SNoticeMatchStateReq::matchid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SNoticeMatchStateReq.matchid)
  return matchid_;
}
inline void S2SNoticeMatchStateReq::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SNoticeMatchStateReq.matchid)
}

// -------------------------------------------------------------------

// S2SResetMatchRoomReq

// uint32 matchid = 1;
inline void S2SResetMatchRoomReq::clear_matchid() {
  matchid_ = 0u;
}
inline ::google::protobuf::uint32 S2SResetMatchRoomReq::matchid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SResetMatchRoomReq.matchid)
  return matchid_;
}
inline void S2SResetMatchRoomReq::set_matchid(::google::protobuf::uint32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SResetMatchRoomReq.matchid)
}

// uint64 roomid = 2;
inline void S2SResetMatchRoomReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SResetMatchRoomReq::roomid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SResetMatchRoomReq.roomid)
  return roomid_;
}
inline void S2SResetMatchRoomReq::set_roomid(::google::protobuf::uint64 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SResetMatchRoomReq.roomid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::KFMsg::MatchProtocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::MatchProtocol>() {
  return ::KFMsg::MatchProtocol_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_KFMatchMessage_2eproto
