// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFRouteMessage.proto

#ifndef PROTOBUF_KFRouteMessage_2eproto__INCLUDED
#define PROTOBUF_KFRouteMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace KFMsg {

// Internal implementation detail -- do not call these.
void LIBPROTOC_EXPORT protobuf_AddDesc_KFRouteMessage_2eproto();
void protobuf_AssignDesc_KFRouteMessage_2eproto();
void protobuf_ShutdownFile_KFRouteMessage_2eproto();

class PBRouteZone;
class S2SRegisterRouteZoneReq;
class S2SRegisterRouteProxyReq;
class PBTransmitRouteMessage;
class S2STransmitRouteZoneMessageReq;
class S2STransmitRouteZoneMessageAck;
class S2STransmitRouteProxyMessageReq;
class S2STransmitRouteProxyMessageAck;

enum RouteProtocol {
  S2S_REGISTER_ROUTE_ZONE_REQ = 10011,
  S2S_REGISTER_ROUTE_PROXY_REQ = 10012,
  S2S_TRANSMIT_ROUTE_ZONE_MESSAGE_REQ = 10013,
  S2S_TRANSMIT_ROUTE_ZONE_MESSAGE_ACK = 10014,
  S2S_TRANSMIT_ROUTE_PROXY_MESSAGE_REQ = 10015,
  S2S_TRANSMIT_ROUTE_PROXY_MESSAGE_ACK = 10016
};
LIBPROTOC_EXPORT bool RouteProtocol_IsValid(int value);
const RouteProtocol RouteProtocol_MIN = S2S_REGISTER_ROUTE_ZONE_REQ;
const RouteProtocol RouteProtocol_MAX = S2S_TRANSMIT_ROUTE_PROXY_MESSAGE_ACK;
const int RouteProtocol_ARRAYSIZE = RouteProtocol_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* RouteProtocol_descriptor();
inline const ::std::string& RouteProtocol_Name(RouteProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    RouteProtocol_descriptor(), value);
}
inline bool RouteProtocol_Parse(
    const ::std::string& name, RouteProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RouteProtocol>(
    RouteProtocol_descriptor(), name, value);
}
// ===================================================================

class LIBPROTOC_EXPORT PBRouteZone : public ::google::protobuf::Message {
 public:
  PBRouteZone();
  virtual ~PBRouteZone();

  PBRouteZone(const PBRouteZone& from);

  inline PBRouteZone& operator=(const PBRouteZone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRouteZone& default_instance();

  void Swap(PBRouteZone* other);

  // implements Message ----------------------------------------------

  PBRouteZone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRouteZone& from);
  void MergeFrom(const PBRouteZone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 zoneid = 1;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 1;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // required uint32 serverid = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 2;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.PBRouteZone)
 private:
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFRouteMessage_2eproto();
  friend void protobuf_AssignDesc_KFRouteMessage_2eproto();
  friend void protobuf_ShutdownFile_KFRouteMessage_2eproto();

  void InitAsDefaultInstance();
  static PBRouteZone* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRegisterRouteZoneReq : public ::google::protobuf::Message {
 public:
  S2SRegisterRouteZoneReq();
  virtual ~S2SRegisterRouteZoneReq();

  S2SRegisterRouteZoneReq(const S2SRegisterRouteZoneReq& from);

  inline S2SRegisterRouteZoneReq& operator=(const S2SRegisterRouteZoneReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRegisterRouteZoneReq& default_instance();

  void Swap(S2SRegisterRouteZoneReq* other);

  // implements Message ----------------------------------------------

  S2SRegisterRouteZoneReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SRegisterRouteZoneReq& from);
  void MergeFrom(const S2SRegisterRouteZoneReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .KFMsg.PBRouteZone zonedata = 1;
  inline bool has_zonedata() const;
  inline void clear_zonedata();
  static const int kZonedataFieldNumber = 1;
  inline const ::KFMsg::PBRouteZone& zonedata() const;
  inline ::KFMsg::PBRouteZone* mutable_zonedata();
  inline ::KFMsg::PBRouteZone* release_zonedata();
  inline void set_allocated_zonedata(::KFMsg::PBRouteZone* zonedata);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRegisterRouteZoneReq)
 private:
  inline void set_has_zonedata();
  inline void clear_has_zonedata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::PBRouteZone* zonedata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFRouteMessage_2eproto();
  friend void protobuf_AssignDesc_KFRouteMessage_2eproto();
  friend void protobuf_ShutdownFile_KFRouteMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SRegisterRouteZoneReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRegisterRouteProxyReq : public ::google::protobuf::Message {
 public:
  S2SRegisterRouteProxyReq();
  virtual ~S2SRegisterRouteProxyReq();

  S2SRegisterRouteProxyReq(const S2SRegisterRouteProxyReq& from);

  inline S2SRegisterRouteProxyReq& operator=(const S2SRegisterRouteProxyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRegisterRouteProxyReq& default_instance();

  void Swap(S2SRegisterRouteProxyReq* other);

  // implements Message ----------------------------------------------

  S2SRegisterRouteProxyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SRegisterRouteProxyReq& from);
  void MergeFrom(const S2SRegisterRouteProxyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .KFMsg.PBRouteZone zonedata = 1;
  inline int zonedata_size() const;
  inline void clear_zonedata();
  static const int kZonedataFieldNumber = 1;
  inline const ::KFMsg::PBRouteZone& zonedata(int index) const;
  inline ::KFMsg::PBRouteZone* mutable_zonedata(int index);
  inline ::KFMsg::PBRouteZone* add_zonedata();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRouteZone >&
      zonedata() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRouteZone >*
      mutable_zonedata();

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRegisterRouteProxyReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRouteZone > zonedata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFRouteMessage_2eproto();
  friend void protobuf_AssignDesc_KFRouteMessage_2eproto();
  friend void protobuf_ShutdownFile_KFRouteMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SRegisterRouteProxyReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBTransmitRouteMessage : public ::google::protobuf::Message {
 public:
  PBTransmitRouteMessage();
  virtual ~PBTransmitRouteMessage();

  PBTransmitRouteMessage(const PBTransmitRouteMessage& from);

  inline PBTransmitRouteMessage& operator=(const PBTransmitRouteMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBTransmitRouteMessage& default_instance();

  void Swap(PBTransmitRouteMessage* other);

  // implements Message ----------------------------------------------

  PBTransmitRouteMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBTransmitRouteMessage& from);
  void MergeFrom(const PBTransmitRouteMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serverid = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 2;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // required uint32 playerid = 3;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 3;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 msgid = 4;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 4;
  inline ::google::protobuf::uint32 msgid() const;
  inline void set_msgid(::google::protobuf::uint32 value);

  // required string msgdata = 5;
  inline bool has_msgdata() const;
  inline void clear_msgdata();
  static const int kMsgdataFieldNumber = 5;
  inline const ::std::string& msgdata() const;
  inline void set_msgdata(const ::std::string& value);
  inline void set_msgdata(const char* value);
  inline void set_msgdata(const char* value, size_t size);
  inline ::std::string* mutable_msgdata();
  inline ::std::string* release_msgdata();
  inline void set_allocated_msgdata(::std::string* msgdata);

  // @@protoc_insertion_point(class_scope:KFMsg.PBTransmitRouteMessage)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_msgdata();
  inline void clear_has_msgdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 serverid_;
  ::google::protobuf::uint32 playerid_;
  ::std::string* msgdata_;
  ::google::protobuf::uint32 msgid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFRouteMessage_2eproto();
  friend void protobuf_AssignDesc_KFRouteMessage_2eproto();
  friend void protobuf_ShutdownFile_KFRouteMessage_2eproto();

  void InitAsDefaultInstance();
  static PBTransmitRouteMessage* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STransmitRouteZoneMessageReq : public ::google::protobuf::Message {
 public:
  S2STransmitRouteZoneMessageReq();
  virtual ~S2STransmitRouteZoneMessageReq();

  S2STransmitRouteZoneMessageReq(const S2STransmitRouteZoneMessageReq& from);

  inline S2STransmitRouteZoneMessageReq& operator=(const S2STransmitRouteZoneMessageReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STransmitRouteZoneMessageReq& default_instance();

  void Swap(S2STransmitRouteZoneMessageReq* other);

  // implements Message ----------------------------------------------

  S2STransmitRouteZoneMessageReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2STransmitRouteZoneMessageReq& from);
  void MergeFrom(const S2STransmitRouteZoneMessageReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
  inline bool has_transmitdata() const;
  inline void clear_transmitdata();
  static const int kTransmitdataFieldNumber = 1;
  inline const ::KFMsg::PBTransmitRouteMessage& transmitdata() const;
  inline ::KFMsg::PBTransmitRouteMessage* mutable_transmitdata();
  inline ::KFMsg::PBTransmitRouteMessage* release_transmitdata();
  inline void set_allocated_transmitdata(::KFMsg::PBTransmitRouteMessage* transmitdata);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STransmitRouteZoneMessageReq)
 private:
  inline void set_has_transmitdata();
  inline void clear_has_transmitdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::PBTransmitRouteMessage* transmitdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFRouteMessage_2eproto();
  friend void protobuf_AssignDesc_KFRouteMessage_2eproto();
  friend void protobuf_ShutdownFile_KFRouteMessage_2eproto();

  void InitAsDefaultInstance();
  static S2STransmitRouteZoneMessageReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STransmitRouteZoneMessageAck : public ::google::protobuf::Message {
 public:
  S2STransmitRouteZoneMessageAck();
  virtual ~S2STransmitRouteZoneMessageAck();

  S2STransmitRouteZoneMessageAck(const S2STransmitRouteZoneMessageAck& from);

  inline S2STransmitRouteZoneMessageAck& operator=(const S2STransmitRouteZoneMessageAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STransmitRouteZoneMessageAck& default_instance();

  void Swap(S2STransmitRouteZoneMessageAck* other);

  // implements Message ----------------------------------------------

  S2STransmitRouteZoneMessageAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2STransmitRouteZoneMessageAck& from);
  void MergeFrom(const S2STransmitRouteZoneMessageAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
  inline bool has_transmitdata() const;
  inline void clear_transmitdata();
  static const int kTransmitdataFieldNumber = 1;
  inline const ::KFMsg::PBTransmitRouteMessage& transmitdata() const;
  inline ::KFMsg::PBTransmitRouteMessage* mutable_transmitdata();
  inline ::KFMsg::PBTransmitRouteMessage* release_transmitdata();
  inline void set_allocated_transmitdata(::KFMsg::PBTransmitRouteMessage* transmitdata);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STransmitRouteZoneMessageAck)
 private:
  inline void set_has_transmitdata();
  inline void clear_has_transmitdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::PBTransmitRouteMessage* transmitdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFRouteMessage_2eproto();
  friend void protobuf_AssignDesc_KFRouteMessage_2eproto();
  friend void protobuf_ShutdownFile_KFRouteMessage_2eproto();

  void InitAsDefaultInstance();
  static S2STransmitRouteZoneMessageAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STransmitRouteProxyMessageReq : public ::google::protobuf::Message {
 public:
  S2STransmitRouteProxyMessageReq();
  virtual ~S2STransmitRouteProxyMessageReq();

  S2STransmitRouteProxyMessageReq(const S2STransmitRouteProxyMessageReq& from);

  inline S2STransmitRouteProxyMessageReq& operator=(const S2STransmitRouteProxyMessageReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STransmitRouteProxyMessageReq& default_instance();

  void Swap(S2STransmitRouteProxyMessageReq* other);

  // implements Message ----------------------------------------------

  S2STransmitRouteProxyMessageReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2STransmitRouteProxyMessageReq& from);
  void MergeFrom(const S2STransmitRouteProxyMessageReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
  inline bool has_transmitdata() const;
  inline void clear_transmitdata();
  static const int kTransmitdataFieldNumber = 1;
  inline const ::KFMsg::PBTransmitRouteMessage& transmitdata() const;
  inline ::KFMsg::PBTransmitRouteMessage* mutable_transmitdata();
  inline ::KFMsg::PBTransmitRouteMessage* release_transmitdata();
  inline void set_allocated_transmitdata(::KFMsg::PBTransmitRouteMessage* transmitdata);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STransmitRouteProxyMessageReq)
 private:
  inline void set_has_transmitdata();
  inline void clear_has_transmitdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::PBTransmitRouteMessage* transmitdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFRouteMessage_2eproto();
  friend void protobuf_AssignDesc_KFRouteMessage_2eproto();
  friend void protobuf_ShutdownFile_KFRouteMessage_2eproto();

  void InitAsDefaultInstance();
  static S2STransmitRouteProxyMessageReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STransmitRouteProxyMessageAck : public ::google::protobuf::Message {
 public:
  S2STransmitRouteProxyMessageAck();
  virtual ~S2STransmitRouteProxyMessageAck();

  S2STransmitRouteProxyMessageAck(const S2STransmitRouteProxyMessageAck& from);

  inline S2STransmitRouteProxyMessageAck& operator=(const S2STransmitRouteProxyMessageAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STransmitRouteProxyMessageAck& default_instance();

  void Swap(S2STransmitRouteProxyMessageAck* other);

  // implements Message ----------------------------------------------

  S2STransmitRouteProxyMessageAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2STransmitRouteProxyMessageAck& from);
  void MergeFrom(const S2STransmitRouteProxyMessageAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
  inline bool has_transmitdata() const;
  inline void clear_transmitdata();
  static const int kTransmitdataFieldNumber = 1;
  inline const ::KFMsg::PBTransmitRouteMessage& transmitdata() const;
  inline ::KFMsg::PBTransmitRouteMessage* mutable_transmitdata();
  inline ::KFMsg::PBTransmitRouteMessage* release_transmitdata();
  inline void set_allocated_transmitdata(::KFMsg::PBTransmitRouteMessage* transmitdata);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STransmitRouteProxyMessageAck)
 private:
  inline void set_has_transmitdata();
  inline void clear_has_transmitdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::PBTransmitRouteMessage* transmitdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFRouteMessage_2eproto();
  friend void protobuf_AssignDesc_KFRouteMessage_2eproto();
  friend void protobuf_ShutdownFile_KFRouteMessage_2eproto();

  void InitAsDefaultInstance();
  static S2STransmitRouteProxyMessageAck* default_instance_;
};
// ===================================================================


// ===================================================================

// PBRouteZone

// required uint32 zoneid = 1;
inline bool PBRouteZone::has_zoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBRouteZone::set_has_zoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBRouteZone::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBRouteZone::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 PBRouteZone::zoneid() const {
  return zoneid_;
}
inline void PBRouteZone::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// required uint32 serverid = 2;
inline bool PBRouteZone::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBRouteZone::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBRouteZone::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBRouteZone::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 PBRouteZone::serverid() const {
  return serverid_;
}
inline void PBRouteZone::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// S2SRegisterRouteZoneReq

// required .KFMsg.PBRouteZone zonedata = 1;
inline bool S2SRegisterRouteZoneReq::has_zonedata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SRegisterRouteZoneReq::set_has_zonedata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SRegisterRouteZoneReq::clear_has_zonedata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SRegisterRouteZoneReq::clear_zonedata() {
  if (zonedata_ != NULL) zonedata_->::KFMsg::PBRouteZone::Clear();
  clear_has_zonedata();
}
inline const ::KFMsg::PBRouteZone& S2SRegisterRouteZoneReq::zonedata() const {
  return zonedata_ != NULL ? *zonedata_ : *default_instance_->zonedata_;
}
inline ::KFMsg::PBRouteZone* S2SRegisterRouteZoneReq::mutable_zonedata() {
  set_has_zonedata();
  if (zonedata_ == NULL) zonedata_ = new ::KFMsg::PBRouteZone;
  return zonedata_;
}
inline ::KFMsg::PBRouteZone* S2SRegisterRouteZoneReq::release_zonedata() {
  clear_has_zonedata();
  ::KFMsg::PBRouteZone* temp = zonedata_;
  zonedata_ = NULL;
  return temp;
}
inline void S2SRegisterRouteZoneReq::set_allocated_zonedata(::KFMsg::PBRouteZone* zonedata) {
  delete zonedata_;
  zonedata_ = zonedata;
  if (zonedata) {
    set_has_zonedata();
  } else {
    clear_has_zonedata();
  }
}

// -------------------------------------------------------------------

// S2SRegisterRouteProxyReq

// repeated .KFMsg.PBRouteZone zonedata = 1;
inline int S2SRegisterRouteProxyReq::zonedata_size() const {
  return zonedata_.size();
}
inline void S2SRegisterRouteProxyReq::clear_zonedata() {
  zonedata_.Clear();
}
inline const ::KFMsg::PBRouteZone& S2SRegisterRouteProxyReq::zonedata(int index) const {
  return zonedata_.Get(index);
}
inline ::KFMsg::PBRouteZone* S2SRegisterRouteProxyReq::mutable_zonedata(int index) {
  return zonedata_.Mutable(index);
}
inline ::KFMsg::PBRouteZone* S2SRegisterRouteProxyReq::add_zonedata() {
  return zonedata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRouteZone >&
S2SRegisterRouteProxyReq::zonedata() const {
  return zonedata_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRouteZone >*
S2SRegisterRouteProxyReq::mutable_zonedata() {
  return &zonedata_;
}

// -------------------------------------------------------------------

// PBTransmitRouteMessage

// required uint32 serverid = 2;
inline bool PBTransmitRouteMessage::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBTransmitRouteMessage::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBTransmitRouteMessage::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBTransmitRouteMessage::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 PBTransmitRouteMessage::serverid() const {
  return serverid_;
}
inline void PBTransmitRouteMessage::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required uint32 playerid = 3;
inline bool PBTransmitRouteMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBTransmitRouteMessage::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBTransmitRouteMessage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBTransmitRouteMessage::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 PBTransmitRouteMessage::playerid() const {
  return playerid_;
}
inline void PBTransmitRouteMessage::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 msgid = 4;
inline bool PBTransmitRouteMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBTransmitRouteMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBTransmitRouteMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBTransmitRouteMessage::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 PBTransmitRouteMessage::msgid() const {
  return msgid_;
}
inline void PBTransmitRouteMessage::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
}

// required string msgdata = 5;
inline bool PBTransmitRouteMessage::has_msgdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBTransmitRouteMessage::set_has_msgdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBTransmitRouteMessage::clear_has_msgdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBTransmitRouteMessage::clear_msgdata() {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    msgdata_->clear();
  }
  clear_has_msgdata();
}
inline const ::std::string& PBTransmitRouteMessage::msgdata() const {
  return *msgdata_;
}
inline void PBTransmitRouteMessage::set_msgdata(const ::std::string& value) {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  msgdata_->assign(value);
}
inline void PBTransmitRouteMessage::set_msgdata(const char* value) {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  msgdata_->assign(value);
}
inline void PBTransmitRouteMessage::set_msgdata(const char* value, size_t size) {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  msgdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBTransmitRouteMessage::mutable_msgdata() {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  return msgdata_;
}
inline ::std::string* PBTransmitRouteMessage::release_msgdata() {
  clear_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msgdata_;
    msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBTransmitRouteMessage::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    delete msgdata_;
  }
  if (msgdata) {
    set_has_msgdata();
    msgdata_ = msgdata;
  } else {
    clear_has_msgdata();
    msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2STransmitRouteZoneMessageReq

// required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
inline bool S2STransmitRouteZoneMessageReq::has_transmitdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2STransmitRouteZoneMessageReq::set_has_transmitdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2STransmitRouteZoneMessageReq::clear_has_transmitdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2STransmitRouteZoneMessageReq::clear_transmitdata() {
  if (transmitdata_ != NULL) transmitdata_->::KFMsg::PBTransmitRouteMessage::Clear();
  clear_has_transmitdata();
}
inline const ::KFMsg::PBTransmitRouteMessage& S2STransmitRouteZoneMessageReq::transmitdata() const {
  return transmitdata_ != NULL ? *transmitdata_ : *default_instance_->transmitdata_;
}
inline ::KFMsg::PBTransmitRouteMessage* S2STransmitRouteZoneMessageReq::mutable_transmitdata() {
  set_has_transmitdata();
  if (transmitdata_ == NULL) transmitdata_ = new ::KFMsg::PBTransmitRouteMessage;
  return transmitdata_;
}
inline ::KFMsg::PBTransmitRouteMessage* S2STransmitRouteZoneMessageReq::release_transmitdata() {
  clear_has_transmitdata();
  ::KFMsg::PBTransmitRouteMessage* temp = transmitdata_;
  transmitdata_ = NULL;
  return temp;
}
inline void S2STransmitRouteZoneMessageReq::set_allocated_transmitdata(::KFMsg::PBTransmitRouteMessage* transmitdata) {
  delete transmitdata_;
  transmitdata_ = transmitdata;
  if (transmitdata) {
    set_has_transmitdata();
  } else {
    clear_has_transmitdata();
  }
}

// -------------------------------------------------------------------

// S2STransmitRouteZoneMessageAck

// required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
inline bool S2STransmitRouteZoneMessageAck::has_transmitdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2STransmitRouteZoneMessageAck::set_has_transmitdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2STransmitRouteZoneMessageAck::clear_has_transmitdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2STransmitRouteZoneMessageAck::clear_transmitdata() {
  if (transmitdata_ != NULL) transmitdata_->::KFMsg::PBTransmitRouteMessage::Clear();
  clear_has_transmitdata();
}
inline const ::KFMsg::PBTransmitRouteMessage& S2STransmitRouteZoneMessageAck::transmitdata() const {
  return transmitdata_ != NULL ? *transmitdata_ : *default_instance_->transmitdata_;
}
inline ::KFMsg::PBTransmitRouteMessage* S2STransmitRouteZoneMessageAck::mutable_transmitdata() {
  set_has_transmitdata();
  if (transmitdata_ == NULL) transmitdata_ = new ::KFMsg::PBTransmitRouteMessage;
  return transmitdata_;
}
inline ::KFMsg::PBTransmitRouteMessage* S2STransmitRouteZoneMessageAck::release_transmitdata() {
  clear_has_transmitdata();
  ::KFMsg::PBTransmitRouteMessage* temp = transmitdata_;
  transmitdata_ = NULL;
  return temp;
}
inline void S2STransmitRouteZoneMessageAck::set_allocated_transmitdata(::KFMsg::PBTransmitRouteMessage* transmitdata) {
  delete transmitdata_;
  transmitdata_ = transmitdata;
  if (transmitdata) {
    set_has_transmitdata();
  } else {
    clear_has_transmitdata();
  }
}

// -------------------------------------------------------------------

// S2STransmitRouteProxyMessageReq

// required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
inline bool S2STransmitRouteProxyMessageReq::has_transmitdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2STransmitRouteProxyMessageReq::set_has_transmitdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2STransmitRouteProxyMessageReq::clear_has_transmitdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2STransmitRouteProxyMessageReq::clear_transmitdata() {
  if (transmitdata_ != NULL) transmitdata_->::KFMsg::PBTransmitRouteMessage::Clear();
  clear_has_transmitdata();
}
inline const ::KFMsg::PBTransmitRouteMessage& S2STransmitRouteProxyMessageReq::transmitdata() const {
  return transmitdata_ != NULL ? *transmitdata_ : *default_instance_->transmitdata_;
}
inline ::KFMsg::PBTransmitRouteMessage* S2STransmitRouteProxyMessageReq::mutable_transmitdata() {
  set_has_transmitdata();
  if (transmitdata_ == NULL) transmitdata_ = new ::KFMsg::PBTransmitRouteMessage;
  return transmitdata_;
}
inline ::KFMsg::PBTransmitRouteMessage* S2STransmitRouteProxyMessageReq::release_transmitdata() {
  clear_has_transmitdata();
  ::KFMsg::PBTransmitRouteMessage* temp = transmitdata_;
  transmitdata_ = NULL;
  return temp;
}
inline void S2STransmitRouteProxyMessageReq::set_allocated_transmitdata(::KFMsg::PBTransmitRouteMessage* transmitdata) {
  delete transmitdata_;
  transmitdata_ = transmitdata;
  if (transmitdata) {
    set_has_transmitdata();
  } else {
    clear_has_transmitdata();
  }
}

// -------------------------------------------------------------------

// S2STransmitRouteProxyMessageAck

// required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
inline bool S2STransmitRouteProxyMessageAck::has_transmitdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2STransmitRouteProxyMessageAck::set_has_transmitdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2STransmitRouteProxyMessageAck::clear_has_transmitdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2STransmitRouteProxyMessageAck::clear_transmitdata() {
  if (transmitdata_ != NULL) transmitdata_->::KFMsg::PBTransmitRouteMessage::Clear();
  clear_has_transmitdata();
}
inline const ::KFMsg::PBTransmitRouteMessage& S2STransmitRouteProxyMessageAck::transmitdata() const {
  return transmitdata_ != NULL ? *transmitdata_ : *default_instance_->transmitdata_;
}
inline ::KFMsg::PBTransmitRouteMessage* S2STransmitRouteProxyMessageAck::mutable_transmitdata() {
  set_has_transmitdata();
  if (transmitdata_ == NULL) transmitdata_ = new ::KFMsg::PBTransmitRouteMessage;
  return transmitdata_;
}
inline ::KFMsg::PBTransmitRouteMessage* S2STransmitRouteProxyMessageAck::release_transmitdata() {
  clear_has_transmitdata();
  ::KFMsg::PBTransmitRouteMessage* temp = transmitdata_;
  transmitdata_ = NULL;
  return temp;
}
inline void S2STransmitRouteProxyMessageAck::set_allocated_transmitdata(::KFMsg::PBTransmitRouteMessage* transmitdata) {
  delete transmitdata_;
  transmitdata_ = transmitdata;
  if (transmitdata) {
    set_has_transmitdata();
  } else {
    clear_has_transmitdata();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::RouteProtocol>() {
  return ::KFMsg::RouteProtocol_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_KFRouteMessage_2eproto__INCLUDED
