// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFFrameMessage.proto

#ifndef PROTOBUF_KFFrameMessage_2eproto__INCLUDED
#define PROTOBUF_KFFrameMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace KFMsg {

// Internal implementation detail -- do not call these.
void LIBPROTOC_EXPORT protobuf_AddDesc_KFFrameMessage_2eproto();
void protobuf_AssignDesc_KFFrameMessage_2eproto();
void protobuf_ShutdownFile_KFFrameMessage_2eproto();

class ListenData;
class RegisterToServerReq;
class RegisterToServerAck;
class TellRegisterToServer;
class TellUnRegisterFromServer;
class PBRouteZone;
class S2SRegisterRouteZoneReq;
class S2SRegisterRouteProxyReq;
class PBTransmitRouteMessage;
class S2STransmitRouteZoneMessageReq;
class S2STransmitRouteZoneMessageAck;
class S2STransmitRouteProxyMessageReq;
class S2STransmitRouteProxyMessageAck;
class S2SLogReq;
class S2SUpdateOnlineToDirReq;
class S2SRemoveOnlineToDirReq;

enum FrameProtocol {
  S2S_REGISTER_TO_SERVER_REQ = 10001,
  S2S_REGISTER_TO_SERVER_ACK = 10002,
  S2S_TELL_REGISTER_TO_SERVER = 10003,
  S2S_TELL_UNREGISTER_FROM_SERVER = 10004,
  S2S_REGISTER_ROUTE_ZONE_REQ = 10011,
  S2S_REGISTER_ROUTE_PROXY_REQ = 10012,
  S2S_TRANSMIT_ROUTE_ZONE_MESSAGE_REQ = 10013,
  S2S_TRANSMIT_ROUTE_ZONE_MESSAGE_ACK = 10014,
  S2S_TRANSMIT_ROUTE_PROXY_MESSAGE_REQ = 10015,
  S2S_TRANSMIT_ROUTE_PROXY_MESSAGE_ACK = 10016,
  S2S_LOG_REQ = 10021,
  S2S_UPDATE_ONLINE_TO_DIR_REQ = 10022,
  S2S_REMOVE_ONLINE_TO_DIR_REQ = 10023
};
LIBPROTOC_EXPORT bool FrameProtocol_IsValid(int value);
const FrameProtocol FrameProtocol_MIN = S2S_REGISTER_TO_SERVER_REQ;
const FrameProtocol FrameProtocol_MAX = S2S_REMOVE_ONLINE_TO_DIR_REQ;
const int FrameProtocol_ARRAYSIZE = FrameProtocol_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* FrameProtocol_descriptor();
inline const ::std::string& FrameProtocol_Name(FrameProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    FrameProtocol_descriptor(), value);
}
inline bool FrameProtocol_Parse(
    const ::std::string& name, FrameProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FrameProtocol>(
    FrameProtocol_descriptor(), name, value);
}
// ===================================================================

class LIBPROTOC_EXPORT ListenData : public ::google::protobuf::Message {
 public:
  ListenData();
  virtual ~ListenData();

  ListenData(const ListenData& from);

  inline ListenData& operator=(const ListenData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListenData& default_instance();

  void Swap(ListenData* other);

  // implements Message ----------------------------------------------

  ListenData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListenData& from);
  void MergeFrom(const ListenData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 appid = 1;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 1;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // required string appname = 2;
  inline bool has_appname() const;
  inline void clear_appname();
  static const int kAppnameFieldNumber = 2;
  inline const ::std::string& appname() const;
  inline void set_appname(const ::std::string& value);
  inline void set_appname(const char* value);
  inline void set_appname(const char* value, size_t size);
  inline ::std::string* mutable_appname();
  inline ::std::string* release_appname();
  inline void set_allocated_appname(::std::string* appname);

  // required string apptype = 3;
  inline bool has_apptype() const;
  inline void clear_apptype();
  static const int kApptypeFieldNumber = 3;
  inline const ::std::string& apptype() const;
  inline void set_apptype(const ::std::string& value);
  inline void set_apptype(const char* value);
  inline void set_apptype(const char* value, size_t size);
  inline ::std::string* mutable_apptype();
  inline ::std::string* release_apptype();
  inline void set_allocated_apptype(::std::string* apptype);

  // required string ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required uint32 port = 5;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 5;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // optional uint32 zoneid = 6;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 6;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.ListenData)
 private:
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_appname();
  inline void clear_has_appname();
  inline void set_has_apptype();
  inline void clear_has_apptype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* appname_;
  ::std::string* apptype_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 port_;
  ::std::string* ip_;
  ::google::protobuf::uint32 zoneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFFrameMessage_2eproto();
  friend void protobuf_AssignDesc_KFFrameMessage_2eproto();
  friend void protobuf_ShutdownFile_KFFrameMessage_2eproto();

  void InitAsDefaultInstance();
  static ListenData* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RegisterToServerReq : public ::google::protobuf::Message {
 public:
  RegisterToServerReq();
  virtual ~RegisterToServerReq();

  RegisterToServerReq(const RegisterToServerReq& from);

  inline RegisterToServerReq& operator=(const RegisterToServerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterToServerReq& default_instance();

  void Swap(RegisterToServerReq* other);

  // implements Message ----------------------------------------------

  RegisterToServerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterToServerReq& from);
  void MergeFrom(const RegisterToServerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .KFMsg.ListenData listen = 1;
  inline bool has_listen() const;
  inline void clear_listen();
  static const int kListenFieldNumber = 1;
  inline const ::KFMsg::ListenData& listen() const;
  inline ::KFMsg::ListenData* mutable_listen();
  inline ::KFMsg::ListenData* release_listen();
  inline void set_allocated_listen(::KFMsg::ListenData* listen);

  // @@protoc_insertion_point(class_scope:KFMsg.RegisterToServerReq)
 private:
  inline void set_has_listen();
  inline void clear_has_listen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::ListenData* listen_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFFrameMessage_2eproto();
  friend void protobuf_AssignDesc_KFFrameMessage_2eproto();
  friend void protobuf_ShutdownFile_KFFrameMessage_2eproto();

  void InitAsDefaultInstance();
  static RegisterToServerReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RegisterToServerAck : public ::google::protobuf::Message {
 public:
  RegisterToServerAck();
  virtual ~RegisterToServerAck();

  RegisterToServerAck(const RegisterToServerAck& from);

  inline RegisterToServerAck& operator=(const RegisterToServerAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterToServerAck& default_instance();

  void Swap(RegisterToServerAck* other);

  // implements Message ----------------------------------------------

  RegisterToServerAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterToServerAck& from);
  void MergeFrom(const RegisterToServerAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string apptype = 1;
  inline bool has_apptype() const;
  inline void clear_apptype();
  static const int kApptypeFieldNumber = 1;
  inline const ::std::string& apptype() const;
  inline void set_apptype(const ::std::string& value);
  inline void set_apptype(const char* value);
  inline void set_apptype(const char* value, size_t size);
  inline ::std::string* mutable_apptype();
  inline ::std::string* release_apptype();
  inline void set_allocated_apptype(::std::string* apptype);

  // required uint32 appid = 2;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 2;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // required string appname = 3;
  inline bool has_appname() const;
  inline void clear_appname();
  static const int kAppnameFieldNumber = 3;
  inline const ::std::string& appname() const;
  inline void set_appname(const ::std::string& value);
  inline void set_appname(const char* value);
  inline void set_appname(const char* value, size_t size);
  inline ::std::string* mutable_appname();
  inline ::std::string* release_appname();
  inline void set_allocated_appname(::std::string* appname);

  // @@protoc_insertion_point(class_scope:KFMsg.RegisterToServerAck)
 private:
  inline void set_has_apptype();
  inline void clear_has_apptype();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_appname();
  inline void clear_has_appname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* apptype_;
  ::std::string* appname_;
  ::google::protobuf::uint32 appid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFFrameMessage_2eproto();
  friend void protobuf_AssignDesc_KFFrameMessage_2eproto();
  friend void protobuf_ShutdownFile_KFFrameMessage_2eproto();

  void InitAsDefaultInstance();
  static RegisterToServerAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT TellRegisterToServer : public ::google::protobuf::Message {
 public:
  TellRegisterToServer();
  virtual ~TellRegisterToServer();

  TellRegisterToServer(const TellRegisterToServer& from);

  inline TellRegisterToServer& operator=(const TellRegisterToServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TellRegisterToServer& default_instance();

  void Swap(TellRegisterToServer* other);

  // implements Message ----------------------------------------------

  TellRegisterToServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TellRegisterToServer& from);
  void MergeFrom(const TellRegisterToServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string servername = 1;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServernameFieldNumber = 1;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const char* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  inline void set_allocated_servername(::std::string* servername);

  // required uint32 serverzoneid = 2;
  inline bool has_serverzoneid() const;
  inline void clear_serverzoneid();
  static const int kServerzoneidFieldNumber = 2;
  inline ::google::protobuf::uint32 serverzoneid() const;
  inline void set_serverzoneid(::google::protobuf::uint32 value);

  // required .KFMsg.ListenData listen = 3;
  inline bool has_listen() const;
  inline void clear_listen();
  static const int kListenFieldNumber = 3;
  inline const ::KFMsg::ListenData& listen() const;
  inline ::KFMsg::ListenData* mutable_listen();
  inline ::KFMsg::ListenData* release_listen();
  inline void set_allocated_listen(::KFMsg::ListenData* listen);

  // @@protoc_insertion_point(class_scope:KFMsg.TellRegisterToServer)
 private:
  inline void set_has_servername();
  inline void clear_has_servername();
  inline void set_has_serverzoneid();
  inline void clear_has_serverzoneid();
  inline void set_has_listen();
  inline void clear_has_listen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* servername_;
  ::KFMsg::ListenData* listen_;
  ::google::protobuf::uint32 serverzoneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFFrameMessage_2eproto();
  friend void protobuf_AssignDesc_KFFrameMessage_2eproto();
  friend void protobuf_ShutdownFile_KFFrameMessage_2eproto();

  void InitAsDefaultInstance();
  static TellRegisterToServer* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT TellUnRegisterFromServer : public ::google::protobuf::Message {
 public:
  TellUnRegisterFromServer();
  virtual ~TellUnRegisterFromServer();

  TellUnRegisterFromServer(const TellUnRegisterFromServer& from);

  inline TellUnRegisterFromServer& operator=(const TellUnRegisterFromServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TellUnRegisterFromServer& default_instance();

  void Swap(TellUnRegisterFromServer* other);

  // implements Message ----------------------------------------------

  TellUnRegisterFromServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TellUnRegisterFromServer& from);
  void MergeFrom(const TellUnRegisterFromServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string servername = 1;
  inline bool has_servername() const;
  inline void clear_servername();
  static const int kServernameFieldNumber = 1;
  inline const ::std::string& servername() const;
  inline void set_servername(const ::std::string& value);
  inline void set_servername(const char* value);
  inline void set_servername(const char* value, size_t size);
  inline ::std::string* mutable_servername();
  inline ::std::string* release_servername();
  inline void set_allocated_servername(::std::string* servername);

  // required uint32 serverzoneid = 2;
  inline bool has_serverzoneid() const;
  inline void clear_serverzoneid();
  static const int kServerzoneidFieldNumber = 2;
  inline ::google::protobuf::uint32 serverzoneid() const;
  inline void set_serverzoneid(::google::protobuf::uint32 value);

  // required uint32 appid = 3;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 3;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // required string appname = 4;
  inline bool has_appname() const;
  inline void clear_appname();
  static const int kAppnameFieldNumber = 4;
  inline const ::std::string& appname() const;
  inline void set_appname(const ::std::string& value);
  inline void set_appname(const char* value);
  inline void set_appname(const char* value, size_t size);
  inline ::std::string* mutable_appname();
  inline ::std::string* release_appname();
  inline void set_allocated_appname(::std::string* appname);

  // required string apptype = 5;
  inline bool has_apptype() const;
  inline void clear_apptype();
  static const int kApptypeFieldNumber = 5;
  inline const ::std::string& apptype() const;
  inline void set_apptype(const ::std::string& value);
  inline void set_apptype(const char* value);
  inline void set_apptype(const char* value, size_t size);
  inline ::std::string* mutable_apptype();
  inline ::std::string* release_apptype();
  inline void set_allocated_apptype(::std::string* apptype);

  // required uint32 zoneid = 6;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 6;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.TellUnRegisterFromServer)
 private:
  inline void set_has_servername();
  inline void clear_has_servername();
  inline void set_has_serverzoneid();
  inline void clear_has_serverzoneid();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_appname();
  inline void clear_has_appname();
  inline void set_has_apptype();
  inline void clear_has_apptype();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* servername_;
  ::google::protobuf::uint32 serverzoneid_;
  ::google::protobuf::uint32 appid_;
  ::std::string* appname_;
  ::std::string* apptype_;
  ::google::protobuf::uint32 zoneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFFrameMessage_2eproto();
  friend void protobuf_AssignDesc_KFFrameMessage_2eproto();
  friend void protobuf_ShutdownFile_KFFrameMessage_2eproto();

  void InitAsDefaultInstance();
  static TellUnRegisterFromServer* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBRouteZone : public ::google::protobuf::Message {
 public:
  PBRouteZone();
  virtual ~PBRouteZone();

  PBRouteZone(const PBRouteZone& from);

  inline PBRouteZone& operator=(const PBRouteZone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRouteZone& default_instance();

  void Swap(PBRouteZone* other);

  // implements Message ----------------------------------------------

  PBRouteZone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRouteZone& from);
  void MergeFrom(const PBRouteZone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 zoneid = 1;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 1;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // required uint32 serverid = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 2;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.PBRouteZone)
 private:
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFFrameMessage_2eproto();
  friend void protobuf_AssignDesc_KFFrameMessage_2eproto();
  friend void protobuf_ShutdownFile_KFFrameMessage_2eproto();

  void InitAsDefaultInstance();
  static PBRouteZone* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRegisterRouteZoneReq : public ::google::protobuf::Message {
 public:
  S2SRegisterRouteZoneReq();
  virtual ~S2SRegisterRouteZoneReq();

  S2SRegisterRouteZoneReq(const S2SRegisterRouteZoneReq& from);

  inline S2SRegisterRouteZoneReq& operator=(const S2SRegisterRouteZoneReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRegisterRouteZoneReq& default_instance();

  void Swap(S2SRegisterRouteZoneReq* other);

  // implements Message ----------------------------------------------

  S2SRegisterRouteZoneReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SRegisterRouteZoneReq& from);
  void MergeFrom(const S2SRegisterRouteZoneReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .KFMsg.PBRouteZone zonedata = 1;
  inline bool has_zonedata() const;
  inline void clear_zonedata();
  static const int kZonedataFieldNumber = 1;
  inline const ::KFMsg::PBRouteZone& zonedata() const;
  inline ::KFMsg::PBRouteZone* mutable_zonedata();
  inline ::KFMsg::PBRouteZone* release_zonedata();
  inline void set_allocated_zonedata(::KFMsg::PBRouteZone* zonedata);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRegisterRouteZoneReq)
 private:
  inline void set_has_zonedata();
  inline void clear_has_zonedata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::PBRouteZone* zonedata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFFrameMessage_2eproto();
  friend void protobuf_AssignDesc_KFFrameMessage_2eproto();
  friend void protobuf_ShutdownFile_KFFrameMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SRegisterRouteZoneReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRegisterRouteProxyReq : public ::google::protobuf::Message {
 public:
  S2SRegisterRouteProxyReq();
  virtual ~S2SRegisterRouteProxyReq();

  S2SRegisterRouteProxyReq(const S2SRegisterRouteProxyReq& from);

  inline S2SRegisterRouteProxyReq& operator=(const S2SRegisterRouteProxyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRegisterRouteProxyReq& default_instance();

  void Swap(S2SRegisterRouteProxyReq* other);

  // implements Message ----------------------------------------------

  S2SRegisterRouteProxyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SRegisterRouteProxyReq& from);
  void MergeFrom(const S2SRegisterRouteProxyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .KFMsg.PBRouteZone zonedata = 1;
  inline int zonedata_size() const;
  inline void clear_zonedata();
  static const int kZonedataFieldNumber = 1;
  inline const ::KFMsg::PBRouteZone& zonedata(int index) const;
  inline ::KFMsg::PBRouteZone* mutable_zonedata(int index);
  inline ::KFMsg::PBRouteZone* add_zonedata();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRouteZone >&
      zonedata() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRouteZone >*
      mutable_zonedata();

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRegisterRouteProxyReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRouteZone > zonedata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFFrameMessage_2eproto();
  friend void protobuf_AssignDesc_KFFrameMessage_2eproto();
  friend void protobuf_ShutdownFile_KFFrameMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SRegisterRouteProxyReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBTransmitRouteMessage : public ::google::protobuf::Message {
 public:
  PBTransmitRouteMessage();
  virtual ~PBTransmitRouteMessage();

  PBTransmitRouteMessage(const PBTransmitRouteMessage& from);

  inline PBTransmitRouteMessage& operator=(const PBTransmitRouteMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBTransmitRouteMessage& default_instance();

  void Swap(PBTransmitRouteMessage* other);

  // implements Message ----------------------------------------------

  PBTransmitRouteMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBTransmitRouteMessage& from);
  void MergeFrom(const PBTransmitRouteMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 serverid = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 2;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // required uint32 playerid = 3;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 3;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 msgid = 4;
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 4;
  inline ::google::protobuf::uint32 msgid() const;
  inline void set_msgid(::google::protobuf::uint32 value);

  // required string msgdata = 5;
  inline bool has_msgdata() const;
  inline void clear_msgdata();
  static const int kMsgdataFieldNumber = 5;
  inline const ::std::string& msgdata() const;
  inline void set_msgdata(const ::std::string& value);
  inline void set_msgdata(const char* value);
  inline void set_msgdata(const char* value, size_t size);
  inline ::std::string* mutable_msgdata();
  inline ::std::string* release_msgdata();
  inline void set_allocated_msgdata(::std::string* msgdata);

  // @@protoc_insertion_point(class_scope:KFMsg.PBTransmitRouteMessage)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_msgdata();
  inline void clear_has_msgdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 serverid_;
  ::google::protobuf::uint32 playerid_;
  ::std::string* msgdata_;
  ::google::protobuf::uint32 msgid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFFrameMessage_2eproto();
  friend void protobuf_AssignDesc_KFFrameMessage_2eproto();
  friend void protobuf_ShutdownFile_KFFrameMessage_2eproto();

  void InitAsDefaultInstance();
  static PBTransmitRouteMessage* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STransmitRouteZoneMessageReq : public ::google::protobuf::Message {
 public:
  S2STransmitRouteZoneMessageReq();
  virtual ~S2STransmitRouteZoneMessageReq();

  S2STransmitRouteZoneMessageReq(const S2STransmitRouteZoneMessageReq& from);

  inline S2STransmitRouteZoneMessageReq& operator=(const S2STransmitRouteZoneMessageReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STransmitRouteZoneMessageReq& default_instance();

  void Swap(S2STransmitRouteZoneMessageReq* other);

  // implements Message ----------------------------------------------

  S2STransmitRouteZoneMessageReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2STransmitRouteZoneMessageReq& from);
  void MergeFrom(const S2STransmitRouteZoneMessageReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
  inline bool has_transmitdata() const;
  inline void clear_transmitdata();
  static const int kTransmitdataFieldNumber = 1;
  inline const ::KFMsg::PBTransmitRouteMessage& transmitdata() const;
  inline ::KFMsg::PBTransmitRouteMessage* mutable_transmitdata();
  inline ::KFMsg::PBTransmitRouteMessage* release_transmitdata();
  inline void set_allocated_transmitdata(::KFMsg::PBTransmitRouteMessage* transmitdata);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STransmitRouteZoneMessageReq)
 private:
  inline void set_has_transmitdata();
  inline void clear_has_transmitdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::PBTransmitRouteMessage* transmitdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFFrameMessage_2eproto();
  friend void protobuf_AssignDesc_KFFrameMessage_2eproto();
  friend void protobuf_ShutdownFile_KFFrameMessage_2eproto();

  void InitAsDefaultInstance();
  static S2STransmitRouteZoneMessageReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STransmitRouteZoneMessageAck : public ::google::protobuf::Message {
 public:
  S2STransmitRouteZoneMessageAck();
  virtual ~S2STransmitRouteZoneMessageAck();

  S2STransmitRouteZoneMessageAck(const S2STransmitRouteZoneMessageAck& from);

  inline S2STransmitRouteZoneMessageAck& operator=(const S2STransmitRouteZoneMessageAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STransmitRouteZoneMessageAck& default_instance();

  void Swap(S2STransmitRouteZoneMessageAck* other);

  // implements Message ----------------------------------------------

  S2STransmitRouteZoneMessageAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2STransmitRouteZoneMessageAck& from);
  void MergeFrom(const S2STransmitRouteZoneMessageAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
  inline bool has_transmitdata() const;
  inline void clear_transmitdata();
  static const int kTransmitdataFieldNumber = 1;
  inline const ::KFMsg::PBTransmitRouteMessage& transmitdata() const;
  inline ::KFMsg::PBTransmitRouteMessage* mutable_transmitdata();
  inline ::KFMsg::PBTransmitRouteMessage* release_transmitdata();
  inline void set_allocated_transmitdata(::KFMsg::PBTransmitRouteMessage* transmitdata);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STransmitRouteZoneMessageAck)
 private:
  inline void set_has_transmitdata();
  inline void clear_has_transmitdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::PBTransmitRouteMessage* transmitdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFFrameMessage_2eproto();
  friend void protobuf_AssignDesc_KFFrameMessage_2eproto();
  friend void protobuf_ShutdownFile_KFFrameMessage_2eproto();

  void InitAsDefaultInstance();
  static S2STransmitRouteZoneMessageAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STransmitRouteProxyMessageReq : public ::google::protobuf::Message {
 public:
  S2STransmitRouteProxyMessageReq();
  virtual ~S2STransmitRouteProxyMessageReq();

  S2STransmitRouteProxyMessageReq(const S2STransmitRouteProxyMessageReq& from);

  inline S2STransmitRouteProxyMessageReq& operator=(const S2STransmitRouteProxyMessageReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STransmitRouteProxyMessageReq& default_instance();

  void Swap(S2STransmitRouteProxyMessageReq* other);

  // implements Message ----------------------------------------------

  S2STransmitRouteProxyMessageReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2STransmitRouteProxyMessageReq& from);
  void MergeFrom(const S2STransmitRouteProxyMessageReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
  inline bool has_transmitdata() const;
  inline void clear_transmitdata();
  static const int kTransmitdataFieldNumber = 1;
  inline const ::KFMsg::PBTransmitRouteMessage& transmitdata() const;
  inline ::KFMsg::PBTransmitRouteMessage* mutable_transmitdata();
  inline ::KFMsg::PBTransmitRouteMessage* release_transmitdata();
  inline void set_allocated_transmitdata(::KFMsg::PBTransmitRouteMessage* transmitdata);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STransmitRouteProxyMessageReq)
 private:
  inline void set_has_transmitdata();
  inline void clear_has_transmitdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::PBTransmitRouteMessage* transmitdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFFrameMessage_2eproto();
  friend void protobuf_AssignDesc_KFFrameMessage_2eproto();
  friend void protobuf_ShutdownFile_KFFrameMessage_2eproto();

  void InitAsDefaultInstance();
  static S2STransmitRouteProxyMessageReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STransmitRouteProxyMessageAck : public ::google::protobuf::Message {
 public:
  S2STransmitRouteProxyMessageAck();
  virtual ~S2STransmitRouteProxyMessageAck();

  S2STransmitRouteProxyMessageAck(const S2STransmitRouteProxyMessageAck& from);

  inline S2STransmitRouteProxyMessageAck& operator=(const S2STransmitRouteProxyMessageAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STransmitRouteProxyMessageAck& default_instance();

  void Swap(S2STransmitRouteProxyMessageAck* other);

  // implements Message ----------------------------------------------

  S2STransmitRouteProxyMessageAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2STransmitRouteProxyMessageAck& from);
  void MergeFrom(const S2STransmitRouteProxyMessageAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
  inline bool has_transmitdata() const;
  inline void clear_transmitdata();
  static const int kTransmitdataFieldNumber = 1;
  inline const ::KFMsg::PBTransmitRouteMessage& transmitdata() const;
  inline ::KFMsg::PBTransmitRouteMessage* mutable_transmitdata();
  inline ::KFMsg::PBTransmitRouteMessage* release_transmitdata();
  inline void set_allocated_transmitdata(::KFMsg::PBTransmitRouteMessage* transmitdata);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STransmitRouteProxyMessageAck)
 private:
  inline void set_has_transmitdata();
  inline void clear_has_transmitdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::PBTransmitRouteMessage* transmitdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFFrameMessage_2eproto();
  friend void protobuf_AssignDesc_KFFrameMessage_2eproto();
  friend void protobuf_ShutdownFile_KFFrameMessage_2eproto();

  void InitAsDefaultInstance();
  static S2STransmitRouteProxyMessageAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SLogReq : public ::google::protobuf::Message {
 public:
  S2SLogReq();
  virtual ~S2SLogReq();

  S2SLogReq(const S2SLogReq& from);

  inline S2SLogReq& operator=(const S2SLogReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SLogReq& default_instance();

  void Swap(S2SLogReq* other);

  // implements Message ----------------------------------------------

  S2SLogReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SLogReq& from);
  void MergeFrom(const S2SLogReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 log_level = 1;
  inline bool has_log_level() const;
  inline void clear_log_level();
  static const int kLogLevelFieldNumber = 1;
  inline ::google::protobuf::int32 log_level() const;
  inline void set_log_level(::google::protobuf::int32 value);

  // required int32 zone_id = 2;
  inline bool has_zone_id() const;
  inline void clear_zone_id();
  static const int kZoneIdFieldNumber = 2;
  inline ::google::protobuf::int32 zone_id() const;
  inline void set_zone_id(::google::protobuf::int32 value);

  // required string app_name = 3;
  inline bool has_app_name() const;
  inline void clear_app_name();
  static const int kAppNameFieldNumber = 3;
  inline const ::std::string& app_name() const;
  inline void set_app_name(const ::std::string& value);
  inline void set_app_name(const char* value);
  inline void set_app_name(const char* value, size_t size);
  inline ::std::string* mutable_app_name();
  inline ::std::string* release_app_name();
  inline void set_allocated_app_name(::std::string* app_name);

  // required string app_type = 4;
  inline bool has_app_type() const;
  inline void clear_app_type();
  static const int kAppTypeFieldNumber = 4;
  inline const ::std::string& app_type() const;
  inline void set_app_type(const ::std::string& value);
  inline void set_app_type(const char* value);
  inline void set_app_type(const char* value, size_t size);
  inline ::std::string* mutable_app_type();
  inline ::std::string* release_app_type();
  inline void set_allocated_app_type(::std::string* app_type);

  // required int32 app_id = 5;
  inline bool has_app_id() const;
  inline void clear_app_id();
  static const int kAppIdFieldNumber = 5;
  inline ::google::protobuf::int32 app_id() const;
  inline void set_app_id(::google::protobuf::int32 value);

  // required string log_info = 6;
  inline bool has_log_info() const;
  inline void clear_log_info();
  static const int kLogInfoFieldNumber = 6;
  inline const ::std::string& log_info() const;
  inline void set_log_info(const ::std::string& value);
  inline void set_log_info(const char* value);
  inline void set_log_info(const char* value, size_t size);
  inline ::std::string* mutable_log_info();
  inline ::std::string* release_log_info();
  inline void set_allocated_log_info(::std::string* log_info);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SLogReq)
 private:
  inline void set_has_log_level();
  inline void clear_has_log_level();
  inline void set_has_zone_id();
  inline void clear_has_zone_id();
  inline void set_has_app_name();
  inline void clear_has_app_name();
  inline void set_has_app_type();
  inline void clear_has_app_type();
  inline void set_has_app_id();
  inline void clear_has_app_id();
  inline void set_has_log_info();
  inline void clear_has_log_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 log_level_;
  ::google::protobuf::int32 zone_id_;
  ::std::string* app_name_;
  ::std::string* app_type_;
  ::std::string* log_info_;
  ::google::protobuf::int32 app_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFFrameMessage_2eproto();
  friend void protobuf_AssignDesc_KFFrameMessage_2eproto();
  friend void protobuf_ShutdownFile_KFFrameMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SLogReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SUpdateOnlineToDirReq : public ::google::protobuf::Message {
 public:
  S2SUpdateOnlineToDirReq();
  virtual ~S2SUpdateOnlineToDirReq();

  S2SUpdateOnlineToDirReq(const S2SUpdateOnlineToDirReq& from);

  inline S2SUpdateOnlineToDirReq& operator=(const S2SUpdateOnlineToDirReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SUpdateOnlineToDirReq& default_instance();

  void Swap(S2SUpdateOnlineToDirReq* other);

  // implements Message ----------------------------------------------

  S2SUpdateOnlineToDirReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SUpdateOnlineToDirReq& from);
  void MergeFrom(const S2SUpdateOnlineToDirReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 zoneid = 1;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 1;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // required string zonename = 2;
  inline bool has_zonename() const;
  inline void clear_zonename();
  static const int kZonenameFieldNumber = 2;
  inline const ::std::string& zonename() const;
  inline void set_zonename(const ::std::string& value);
  inline void set_zonename(const char* value);
  inline void set_zonename(const char* value, size_t size);
  inline ::std::string* mutable_zonename();
  inline ::std::string* release_zonename();
  inline void set_allocated_zonename(::std::string* zonename);

  // required uint32 zonechannel = 3;
  inline bool has_zonechannel() const;
  inline void clear_zonechannel();
  static const int kZonechannelFieldNumber = 3;
  inline ::google::protobuf::uint32 zonechannel() const;
  inline void set_zonechannel(::google::protobuf::uint32 value);

  // required uint32 appid = 4;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 4;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // required string ip = 5;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 5;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required uint32 port = 6;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 6;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // required uint32 onlinecount = 7;
  inline bool has_onlinecount() const;
  inline void clear_onlinecount();
  static const int kOnlinecountFieldNumber = 7;
  inline ::google::protobuf::uint32 onlinecount() const;
  inline void set_onlinecount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SUpdateOnlineToDirReq)
 private:
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_zonename();
  inline void clear_has_zonename();
  inline void set_has_zonechannel();
  inline void clear_has_zonechannel();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_onlinecount();
  inline void clear_has_onlinecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* zonename_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 zonechannel_;
  ::std::string* ip_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 onlinecount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFFrameMessage_2eproto();
  friend void protobuf_AssignDesc_KFFrameMessage_2eproto();
  friend void protobuf_ShutdownFile_KFFrameMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SUpdateOnlineToDirReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRemoveOnlineToDirReq : public ::google::protobuf::Message {
 public:
  S2SRemoveOnlineToDirReq();
  virtual ~S2SRemoveOnlineToDirReq();

  S2SRemoveOnlineToDirReq(const S2SRemoveOnlineToDirReq& from);

  inline S2SRemoveOnlineToDirReq& operator=(const S2SRemoveOnlineToDirReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRemoveOnlineToDirReq& default_instance();

  void Swap(S2SRemoveOnlineToDirReq* other);

  // implements Message ----------------------------------------------

  S2SRemoveOnlineToDirReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SRemoveOnlineToDirReq& from);
  void MergeFrom(const S2SRemoveOnlineToDirReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 appid = 1;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 1;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRemoveOnlineToDirReq)
 private:
  inline void set_has_appid();
  inline void clear_has_appid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 appid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFFrameMessage_2eproto();
  friend void protobuf_AssignDesc_KFFrameMessage_2eproto();
  friend void protobuf_ShutdownFile_KFFrameMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SRemoveOnlineToDirReq* default_instance_;
};
// ===================================================================


// ===================================================================

// ListenData

// optional uint32 appid = 1;
inline bool ListenData::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListenData::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListenData::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListenData::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 ListenData::appid() const {
  return appid_;
}
inline void ListenData::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}

// required string appname = 2;
inline bool ListenData::has_appname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListenData::set_has_appname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListenData::clear_has_appname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListenData::clear_appname() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    appname_->clear();
  }
  clear_has_appname();
}
inline const ::std::string& ListenData::appname() const {
  return *appname_;
}
inline void ListenData::set_appname(const ::std::string& value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void ListenData::set_appname(const char* value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void ListenData::set_appname(const char* value, size_t size) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ListenData::mutable_appname() {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  return appname_;
}
inline ::std::string* ListenData::release_appname() {
  clear_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appname_;
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ListenData::set_allocated_appname(::std::string* appname) {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (appname) {
    set_has_appname();
    appname_ = appname;
  } else {
    clear_has_appname();
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string apptype = 3;
inline bool ListenData::has_apptype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ListenData::set_has_apptype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ListenData::clear_has_apptype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ListenData::clear_apptype() {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    apptype_->clear();
  }
  clear_has_apptype();
}
inline const ::std::string& ListenData::apptype() const {
  return *apptype_;
}
inline void ListenData::set_apptype(const ::std::string& value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void ListenData::set_apptype(const char* value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void ListenData::set_apptype(const char* value, size_t size) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ListenData::mutable_apptype() {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  return apptype_;
}
inline ::std::string* ListenData::release_apptype() {
  clear_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = apptype_;
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ListenData::set_allocated_apptype(::std::string* apptype) {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (apptype) {
    set_has_apptype();
    apptype_ = apptype;
  } else {
    clear_has_apptype();
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ip = 4;
inline bool ListenData::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ListenData::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ListenData::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ListenData::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ListenData::ip() const {
  return *ip_;
}
inline void ListenData::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ListenData::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ListenData::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ListenData::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* ListenData::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ListenData::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 port = 5;
inline bool ListenData::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ListenData::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ListenData::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ListenData::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 ListenData::port() const {
  return port_;
}
inline void ListenData::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// optional uint32 zoneid = 6;
inline bool ListenData::has_zoneid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ListenData::set_has_zoneid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ListenData::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ListenData::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 ListenData::zoneid() const {
  return zoneid_;
}
inline void ListenData::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// -------------------------------------------------------------------

// RegisterToServerReq

// required .KFMsg.ListenData listen = 1;
inline bool RegisterToServerReq::has_listen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterToServerReq::set_has_listen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterToServerReq::clear_has_listen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterToServerReq::clear_listen() {
  if (listen_ != NULL) listen_->::KFMsg::ListenData::Clear();
  clear_has_listen();
}
inline const ::KFMsg::ListenData& RegisterToServerReq::listen() const {
  return listen_ != NULL ? *listen_ : *default_instance_->listen_;
}
inline ::KFMsg::ListenData* RegisterToServerReq::mutable_listen() {
  set_has_listen();
  if (listen_ == NULL) listen_ = new ::KFMsg::ListenData;
  return listen_;
}
inline ::KFMsg::ListenData* RegisterToServerReq::release_listen() {
  clear_has_listen();
  ::KFMsg::ListenData* temp = listen_;
  listen_ = NULL;
  return temp;
}
inline void RegisterToServerReq::set_allocated_listen(::KFMsg::ListenData* listen) {
  delete listen_;
  listen_ = listen;
  if (listen) {
    set_has_listen();
  } else {
    clear_has_listen();
  }
}

// -------------------------------------------------------------------

// RegisterToServerAck

// required string apptype = 1;
inline bool RegisterToServerAck::has_apptype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterToServerAck::set_has_apptype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterToServerAck::clear_has_apptype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterToServerAck::clear_apptype() {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    apptype_->clear();
  }
  clear_has_apptype();
}
inline const ::std::string& RegisterToServerAck::apptype() const {
  return *apptype_;
}
inline void RegisterToServerAck::set_apptype(const ::std::string& value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void RegisterToServerAck::set_apptype(const char* value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void RegisterToServerAck::set_apptype(const char* value, size_t size) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterToServerAck::mutable_apptype() {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  return apptype_;
}
inline ::std::string* RegisterToServerAck::release_apptype() {
  clear_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = apptype_;
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegisterToServerAck::set_allocated_apptype(::std::string* apptype) {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (apptype) {
    set_has_apptype();
    apptype_ = apptype;
  } else {
    clear_has_apptype();
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 appid = 2;
inline bool RegisterToServerAck::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterToServerAck::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterToServerAck::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterToServerAck::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 RegisterToServerAck::appid() const {
  return appid_;
}
inline void RegisterToServerAck::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}

// required string appname = 3;
inline bool RegisterToServerAck::has_appname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegisterToServerAck::set_has_appname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegisterToServerAck::clear_has_appname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegisterToServerAck::clear_appname() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    appname_->clear();
  }
  clear_has_appname();
}
inline const ::std::string& RegisterToServerAck::appname() const {
  return *appname_;
}
inline void RegisterToServerAck::set_appname(const ::std::string& value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void RegisterToServerAck::set_appname(const char* value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void RegisterToServerAck::set_appname(const char* value, size_t size) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterToServerAck::mutable_appname() {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  return appname_;
}
inline ::std::string* RegisterToServerAck::release_appname() {
  clear_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appname_;
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegisterToServerAck::set_allocated_appname(::std::string* appname) {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (appname) {
    set_has_appname();
    appname_ = appname;
  } else {
    clear_has_appname();
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TellRegisterToServer

// required string servername = 1;
inline bool TellRegisterToServer::has_servername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TellRegisterToServer::set_has_servername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TellRegisterToServer::clear_has_servername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TellRegisterToServer::clear_servername() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& TellRegisterToServer::servername() const {
  return *servername_;
}
inline void TellRegisterToServer::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void TellRegisterToServer::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void TellRegisterToServer::set_servername(const char* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TellRegisterToServer::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  return servername_;
}
inline ::std::string* TellRegisterToServer::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TellRegisterToServer::set_allocated_servername(::std::string* servername) {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (servername) {
    set_has_servername();
    servername_ = servername;
  } else {
    clear_has_servername();
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 serverzoneid = 2;
inline bool TellRegisterToServer::has_serverzoneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TellRegisterToServer::set_has_serverzoneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TellRegisterToServer::clear_has_serverzoneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TellRegisterToServer::clear_serverzoneid() {
  serverzoneid_ = 0u;
  clear_has_serverzoneid();
}
inline ::google::protobuf::uint32 TellRegisterToServer::serverzoneid() const {
  return serverzoneid_;
}
inline void TellRegisterToServer::set_serverzoneid(::google::protobuf::uint32 value) {
  set_has_serverzoneid();
  serverzoneid_ = value;
}

// required .KFMsg.ListenData listen = 3;
inline bool TellRegisterToServer::has_listen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TellRegisterToServer::set_has_listen() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TellRegisterToServer::clear_has_listen() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TellRegisterToServer::clear_listen() {
  if (listen_ != NULL) listen_->::KFMsg::ListenData::Clear();
  clear_has_listen();
}
inline const ::KFMsg::ListenData& TellRegisterToServer::listen() const {
  return listen_ != NULL ? *listen_ : *default_instance_->listen_;
}
inline ::KFMsg::ListenData* TellRegisterToServer::mutable_listen() {
  set_has_listen();
  if (listen_ == NULL) listen_ = new ::KFMsg::ListenData;
  return listen_;
}
inline ::KFMsg::ListenData* TellRegisterToServer::release_listen() {
  clear_has_listen();
  ::KFMsg::ListenData* temp = listen_;
  listen_ = NULL;
  return temp;
}
inline void TellRegisterToServer::set_allocated_listen(::KFMsg::ListenData* listen) {
  delete listen_;
  listen_ = listen;
  if (listen) {
    set_has_listen();
  } else {
    clear_has_listen();
  }
}

// -------------------------------------------------------------------

// TellUnRegisterFromServer

// required string servername = 1;
inline bool TellUnRegisterFromServer::has_servername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TellUnRegisterFromServer::set_has_servername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TellUnRegisterFromServer::clear_has_servername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TellUnRegisterFromServer::clear_servername() {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    servername_->clear();
  }
  clear_has_servername();
}
inline const ::std::string& TellUnRegisterFromServer::servername() const {
  return *servername_;
}
inline void TellUnRegisterFromServer::set_servername(const ::std::string& value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void TellUnRegisterFromServer::set_servername(const char* value) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(value);
}
inline void TellUnRegisterFromServer::set_servername(const char* value, size_t size) {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  servername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TellUnRegisterFromServer::mutable_servername() {
  set_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    servername_ = new ::std::string;
  }
  return servername_;
}
inline ::std::string* TellUnRegisterFromServer::release_servername() {
  clear_has_servername();
  if (servername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = servername_;
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TellUnRegisterFromServer::set_allocated_servername(::std::string* servername) {
  if (servername_ != &::google::protobuf::internal::kEmptyString) {
    delete servername_;
  }
  if (servername) {
    set_has_servername();
    servername_ = servername;
  } else {
    clear_has_servername();
    servername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 serverzoneid = 2;
inline bool TellUnRegisterFromServer::has_serverzoneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TellUnRegisterFromServer::set_has_serverzoneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TellUnRegisterFromServer::clear_has_serverzoneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TellUnRegisterFromServer::clear_serverzoneid() {
  serverzoneid_ = 0u;
  clear_has_serverzoneid();
}
inline ::google::protobuf::uint32 TellUnRegisterFromServer::serverzoneid() const {
  return serverzoneid_;
}
inline void TellUnRegisterFromServer::set_serverzoneid(::google::protobuf::uint32 value) {
  set_has_serverzoneid();
  serverzoneid_ = value;
}

// required uint32 appid = 3;
inline bool TellUnRegisterFromServer::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TellUnRegisterFromServer::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TellUnRegisterFromServer::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TellUnRegisterFromServer::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 TellUnRegisterFromServer::appid() const {
  return appid_;
}
inline void TellUnRegisterFromServer::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}

// required string appname = 4;
inline bool TellUnRegisterFromServer::has_appname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TellUnRegisterFromServer::set_has_appname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TellUnRegisterFromServer::clear_has_appname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TellUnRegisterFromServer::clear_appname() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    appname_->clear();
  }
  clear_has_appname();
}
inline const ::std::string& TellUnRegisterFromServer::appname() const {
  return *appname_;
}
inline void TellUnRegisterFromServer::set_appname(const ::std::string& value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void TellUnRegisterFromServer::set_appname(const char* value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void TellUnRegisterFromServer::set_appname(const char* value, size_t size) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TellUnRegisterFromServer::mutable_appname() {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  return appname_;
}
inline ::std::string* TellUnRegisterFromServer::release_appname() {
  clear_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appname_;
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TellUnRegisterFromServer::set_allocated_appname(::std::string* appname) {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (appname) {
    set_has_appname();
    appname_ = appname;
  } else {
    clear_has_appname();
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string apptype = 5;
inline bool TellUnRegisterFromServer::has_apptype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TellUnRegisterFromServer::set_has_apptype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TellUnRegisterFromServer::clear_has_apptype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TellUnRegisterFromServer::clear_apptype() {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    apptype_->clear();
  }
  clear_has_apptype();
}
inline const ::std::string& TellUnRegisterFromServer::apptype() const {
  return *apptype_;
}
inline void TellUnRegisterFromServer::set_apptype(const ::std::string& value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void TellUnRegisterFromServer::set_apptype(const char* value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void TellUnRegisterFromServer::set_apptype(const char* value, size_t size) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TellUnRegisterFromServer::mutable_apptype() {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  return apptype_;
}
inline ::std::string* TellUnRegisterFromServer::release_apptype() {
  clear_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = apptype_;
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TellUnRegisterFromServer::set_allocated_apptype(::std::string* apptype) {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (apptype) {
    set_has_apptype();
    apptype_ = apptype;
  } else {
    clear_has_apptype();
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 zoneid = 6;
inline bool TellUnRegisterFromServer::has_zoneid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TellUnRegisterFromServer::set_has_zoneid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TellUnRegisterFromServer::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TellUnRegisterFromServer::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 TellUnRegisterFromServer::zoneid() const {
  return zoneid_;
}
inline void TellUnRegisterFromServer::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// -------------------------------------------------------------------

// PBRouteZone

// required uint32 zoneid = 1;
inline bool PBRouteZone::has_zoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBRouteZone::set_has_zoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBRouteZone::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBRouteZone::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 PBRouteZone::zoneid() const {
  return zoneid_;
}
inline void PBRouteZone::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// required uint32 serverid = 2;
inline bool PBRouteZone::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBRouteZone::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBRouteZone::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBRouteZone::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 PBRouteZone::serverid() const {
  return serverid_;
}
inline void PBRouteZone::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// S2SRegisterRouteZoneReq

// required .KFMsg.PBRouteZone zonedata = 1;
inline bool S2SRegisterRouteZoneReq::has_zonedata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SRegisterRouteZoneReq::set_has_zonedata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SRegisterRouteZoneReq::clear_has_zonedata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SRegisterRouteZoneReq::clear_zonedata() {
  if (zonedata_ != NULL) zonedata_->::KFMsg::PBRouteZone::Clear();
  clear_has_zonedata();
}
inline const ::KFMsg::PBRouteZone& S2SRegisterRouteZoneReq::zonedata() const {
  return zonedata_ != NULL ? *zonedata_ : *default_instance_->zonedata_;
}
inline ::KFMsg::PBRouteZone* S2SRegisterRouteZoneReq::mutable_zonedata() {
  set_has_zonedata();
  if (zonedata_ == NULL) zonedata_ = new ::KFMsg::PBRouteZone;
  return zonedata_;
}
inline ::KFMsg::PBRouteZone* S2SRegisterRouteZoneReq::release_zonedata() {
  clear_has_zonedata();
  ::KFMsg::PBRouteZone* temp = zonedata_;
  zonedata_ = NULL;
  return temp;
}
inline void S2SRegisterRouteZoneReq::set_allocated_zonedata(::KFMsg::PBRouteZone* zonedata) {
  delete zonedata_;
  zonedata_ = zonedata;
  if (zonedata) {
    set_has_zonedata();
  } else {
    clear_has_zonedata();
  }
}

// -------------------------------------------------------------------

// S2SRegisterRouteProxyReq

// repeated .KFMsg.PBRouteZone zonedata = 1;
inline int S2SRegisterRouteProxyReq::zonedata_size() const {
  return zonedata_.size();
}
inline void S2SRegisterRouteProxyReq::clear_zonedata() {
  zonedata_.Clear();
}
inline const ::KFMsg::PBRouteZone& S2SRegisterRouteProxyReq::zonedata(int index) const {
  return zonedata_.Get(index);
}
inline ::KFMsg::PBRouteZone* S2SRegisterRouteProxyReq::mutable_zonedata(int index) {
  return zonedata_.Mutable(index);
}
inline ::KFMsg::PBRouteZone* S2SRegisterRouteProxyReq::add_zonedata() {
  return zonedata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRouteZone >&
S2SRegisterRouteProxyReq::zonedata() const {
  return zonedata_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRouteZone >*
S2SRegisterRouteProxyReq::mutable_zonedata() {
  return &zonedata_;
}

// -------------------------------------------------------------------

// PBTransmitRouteMessage

// required uint32 serverid = 2;
inline bool PBTransmitRouteMessage::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBTransmitRouteMessage::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBTransmitRouteMessage::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBTransmitRouteMessage::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 PBTransmitRouteMessage::serverid() const {
  return serverid_;
}
inline void PBTransmitRouteMessage::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required uint32 playerid = 3;
inline bool PBTransmitRouteMessage::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBTransmitRouteMessage::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBTransmitRouteMessage::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBTransmitRouteMessage::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 PBTransmitRouteMessage::playerid() const {
  return playerid_;
}
inline void PBTransmitRouteMessage::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 msgid = 4;
inline bool PBTransmitRouteMessage::has_msgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBTransmitRouteMessage::set_has_msgid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBTransmitRouteMessage::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBTransmitRouteMessage::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 PBTransmitRouteMessage::msgid() const {
  return msgid_;
}
inline void PBTransmitRouteMessage::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
}

// required string msgdata = 5;
inline bool PBTransmitRouteMessage::has_msgdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBTransmitRouteMessage::set_has_msgdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBTransmitRouteMessage::clear_has_msgdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBTransmitRouteMessage::clear_msgdata() {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    msgdata_->clear();
  }
  clear_has_msgdata();
}
inline const ::std::string& PBTransmitRouteMessage::msgdata() const {
  return *msgdata_;
}
inline void PBTransmitRouteMessage::set_msgdata(const ::std::string& value) {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  msgdata_->assign(value);
}
inline void PBTransmitRouteMessage::set_msgdata(const char* value) {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  msgdata_->assign(value);
}
inline void PBTransmitRouteMessage::set_msgdata(const char* value, size_t size) {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  msgdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBTransmitRouteMessage::mutable_msgdata() {
  set_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    msgdata_ = new ::std::string;
  }
  return msgdata_;
}
inline ::std::string* PBTransmitRouteMessage::release_msgdata() {
  clear_has_msgdata();
  if (msgdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msgdata_;
    msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBTransmitRouteMessage::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    delete msgdata_;
  }
  if (msgdata) {
    set_has_msgdata();
    msgdata_ = msgdata;
  } else {
    clear_has_msgdata();
    msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2STransmitRouteZoneMessageReq

// required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
inline bool S2STransmitRouteZoneMessageReq::has_transmitdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2STransmitRouteZoneMessageReq::set_has_transmitdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2STransmitRouteZoneMessageReq::clear_has_transmitdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2STransmitRouteZoneMessageReq::clear_transmitdata() {
  if (transmitdata_ != NULL) transmitdata_->::KFMsg::PBTransmitRouteMessage::Clear();
  clear_has_transmitdata();
}
inline const ::KFMsg::PBTransmitRouteMessage& S2STransmitRouteZoneMessageReq::transmitdata() const {
  return transmitdata_ != NULL ? *transmitdata_ : *default_instance_->transmitdata_;
}
inline ::KFMsg::PBTransmitRouteMessage* S2STransmitRouteZoneMessageReq::mutable_transmitdata() {
  set_has_transmitdata();
  if (transmitdata_ == NULL) transmitdata_ = new ::KFMsg::PBTransmitRouteMessage;
  return transmitdata_;
}
inline ::KFMsg::PBTransmitRouteMessage* S2STransmitRouteZoneMessageReq::release_transmitdata() {
  clear_has_transmitdata();
  ::KFMsg::PBTransmitRouteMessage* temp = transmitdata_;
  transmitdata_ = NULL;
  return temp;
}
inline void S2STransmitRouteZoneMessageReq::set_allocated_transmitdata(::KFMsg::PBTransmitRouteMessage* transmitdata) {
  delete transmitdata_;
  transmitdata_ = transmitdata;
  if (transmitdata) {
    set_has_transmitdata();
  } else {
    clear_has_transmitdata();
  }
}

// -------------------------------------------------------------------

// S2STransmitRouteZoneMessageAck

// required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
inline bool S2STransmitRouteZoneMessageAck::has_transmitdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2STransmitRouteZoneMessageAck::set_has_transmitdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2STransmitRouteZoneMessageAck::clear_has_transmitdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2STransmitRouteZoneMessageAck::clear_transmitdata() {
  if (transmitdata_ != NULL) transmitdata_->::KFMsg::PBTransmitRouteMessage::Clear();
  clear_has_transmitdata();
}
inline const ::KFMsg::PBTransmitRouteMessage& S2STransmitRouteZoneMessageAck::transmitdata() const {
  return transmitdata_ != NULL ? *transmitdata_ : *default_instance_->transmitdata_;
}
inline ::KFMsg::PBTransmitRouteMessage* S2STransmitRouteZoneMessageAck::mutable_transmitdata() {
  set_has_transmitdata();
  if (transmitdata_ == NULL) transmitdata_ = new ::KFMsg::PBTransmitRouteMessage;
  return transmitdata_;
}
inline ::KFMsg::PBTransmitRouteMessage* S2STransmitRouteZoneMessageAck::release_transmitdata() {
  clear_has_transmitdata();
  ::KFMsg::PBTransmitRouteMessage* temp = transmitdata_;
  transmitdata_ = NULL;
  return temp;
}
inline void S2STransmitRouteZoneMessageAck::set_allocated_transmitdata(::KFMsg::PBTransmitRouteMessage* transmitdata) {
  delete transmitdata_;
  transmitdata_ = transmitdata;
  if (transmitdata) {
    set_has_transmitdata();
  } else {
    clear_has_transmitdata();
  }
}

// -------------------------------------------------------------------

// S2STransmitRouteProxyMessageReq

// required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
inline bool S2STransmitRouteProxyMessageReq::has_transmitdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2STransmitRouteProxyMessageReq::set_has_transmitdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2STransmitRouteProxyMessageReq::clear_has_transmitdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2STransmitRouteProxyMessageReq::clear_transmitdata() {
  if (transmitdata_ != NULL) transmitdata_->::KFMsg::PBTransmitRouteMessage::Clear();
  clear_has_transmitdata();
}
inline const ::KFMsg::PBTransmitRouteMessage& S2STransmitRouteProxyMessageReq::transmitdata() const {
  return transmitdata_ != NULL ? *transmitdata_ : *default_instance_->transmitdata_;
}
inline ::KFMsg::PBTransmitRouteMessage* S2STransmitRouteProxyMessageReq::mutable_transmitdata() {
  set_has_transmitdata();
  if (transmitdata_ == NULL) transmitdata_ = new ::KFMsg::PBTransmitRouteMessage;
  return transmitdata_;
}
inline ::KFMsg::PBTransmitRouteMessage* S2STransmitRouteProxyMessageReq::release_transmitdata() {
  clear_has_transmitdata();
  ::KFMsg::PBTransmitRouteMessage* temp = transmitdata_;
  transmitdata_ = NULL;
  return temp;
}
inline void S2STransmitRouteProxyMessageReq::set_allocated_transmitdata(::KFMsg::PBTransmitRouteMessage* transmitdata) {
  delete transmitdata_;
  transmitdata_ = transmitdata;
  if (transmitdata) {
    set_has_transmitdata();
  } else {
    clear_has_transmitdata();
  }
}

// -------------------------------------------------------------------

// S2STransmitRouteProxyMessageAck

// required .KFMsg.PBTransmitRouteMessage transmitdata = 1;
inline bool S2STransmitRouteProxyMessageAck::has_transmitdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2STransmitRouteProxyMessageAck::set_has_transmitdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2STransmitRouteProxyMessageAck::clear_has_transmitdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2STransmitRouteProxyMessageAck::clear_transmitdata() {
  if (transmitdata_ != NULL) transmitdata_->::KFMsg::PBTransmitRouteMessage::Clear();
  clear_has_transmitdata();
}
inline const ::KFMsg::PBTransmitRouteMessage& S2STransmitRouteProxyMessageAck::transmitdata() const {
  return transmitdata_ != NULL ? *transmitdata_ : *default_instance_->transmitdata_;
}
inline ::KFMsg::PBTransmitRouteMessage* S2STransmitRouteProxyMessageAck::mutable_transmitdata() {
  set_has_transmitdata();
  if (transmitdata_ == NULL) transmitdata_ = new ::KFMsg::PBTransmitRouteMessage;
  return transmitdata_;
}
inline ::KFMsg::PBTransmitRouteMessage* S2STransmitRouteProxyMessageAck::release_transmitdata() {
  clear_has_transmitdata();
  ::KFMsg::PBTransmitRouteMessage* temp = transmitdata_;
  transmitdata_ = NULL;
  return temp;
}
inline void S2STransmitRouteProxyMessageAck::set_allocated_transmitdata(::KFMsg::PBTransmitRouteMessage* transmitdata) {
  delete transmitdata_;
  transmitdata_ = transmitdata;
  if (transmitdata) {
    set_has_transmitdata();
  } else {
    clear_has_transmitdata();
  }
}

// -------------------------------------------------------------------

// S2SLogReq

// required int32 log_level = 1;
inline bool S2SLogReq::has_log_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SLogReq::set_has_log_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SLogReq::clear_has_log_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SLogReq::clear_log_level() {
  log_level_ = 0;
  clear_has_log_level();
}
inline ::google::protobuf::int32 S2SLogReq::log_level() const {
  return log_level_;
}
inline void S2SLogReq::set_log_level(::google::protobuf::int32 value) {
  set_has_log_level();
  log_level_ = value;
}

// required int32 zone_id = 2;
inline bool S2SLogReq::has_zone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SLogReq::set_has_zone_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SLogReq::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SLogReq::clear_zone_id() {
  zone_id_ = 0;
  clear_has_zone_id();
}
inline ::google::protobuf::int32 S2SLogReq::zone_id() const {
  return zone_id_;
}
inline void S2SLogReq::set_zone_id(::google::protobuf::int32 value) {
  set_has_zone_id();
  zone_id_ = value;
}

// required string app_name = 3;
inline bool S2SLogReq::has_app_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SLogReq::set_has_app_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SLogReq::clear_has_app_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SLogReq::clear_app_name() {
  if (app_name_ != &::google::protobuf::internal::kEmptyString) {
    app_name_->clear();
  }
  clear_has_app_name();
}
inline const ::std::string& S2SLogReq::app_name() const {
  return *app_name_;
}
inline void S2SLogReq::set_app_name(const ::std::string& value) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::kEmptyString) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(value);
}
inline void S2SLogReq::set_app_name(const char* value) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::kEmptyString) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(value);
}
inline void S2SLogReq::set_app_name(const char* value, size_t size) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::kEmptyString) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SLogReq::mutable_app_name() {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::kEmptyString) {
    app_name_ = new ::std::string;
  }
  return app_name_;
}
inline ::std::string* S2SLogReq::release_app_name() {
  clear_has_app_name();
  if (app_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_name_;
    app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SLogReq::set_allocated_app_name(::std::string* app_name) {
  if (app_name_ != &::google::protobuf::internal::kEmptyString) {
    delete app_name_;
  }
  if (app_name) {
    set_has_app_name();
    app_name_ = app_name;
  } else {
    clear_has_app_name();
    app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string app_type = 4;
inline bool S2SLogReq::has_app_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SLogReq::set_has_app_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SLogReq::clear_has_app_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SLogReq::clear_app_type() {
  if (app_type_ != &::google::protobuf::internal::kEmptyString) {
    app_type_->clear();
  }
  clear_has_app_type();
}
inline const ::std::string& S2SLogReq::app_type() const {
  return *app_type_;
}
inline void S2SLogReq::set_app_type(const ::std::string& value) {
  set_has_app_type();
  if (app_type_ == &::google::protobuf::internal::kEmptyString) {
    app_type_ = new ::std::string;
  }
  app_type_->assign(value);
}
inline void S2SLogReq::set_app_type(const char* value) {
  set_has_app_type();
  if (app_type_ == &::google::protobuf::internal::kEmptyString) {
    app_type_ = new ::std::string;
  }
  app_type_->assign(value);
}
inline void S2SLogReq::set_app_type(const char* value, size_t size) {
  set_has_app_type();
  if (app_type_ == &::google::protobuf::internal::kEmptyString) {
    app_type_ = new ::std::string;
  }
  app_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SLogReq::mutable_app_type() {
  set_has_app_type();
  if (app_type_ == &::google::protobuf::internal::kEmptyString) {
    app_type_ = new ::std::string;
  }
  return app_type_;
}
inline ::std::string* S2SLogReq::release_app_type() {
  clear_has_app_type();
  if (app_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_type_;
    app_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SLogReq::set_allocated_app_type(::std::string* app_type) {
  if (app_type_ != &::google::protobuf::internal::kEmptyString) {
    delete app_type_;
  }
  if (app_type) {
    set_has_app_type();
    app_type_ = app_type;
  } else {
    clear_has_app_type();
    app_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 app_id = 5;
inline bool S2SLogReq::has_app_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SLogReq::set_has_app_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SLogReq::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SLogReq::clear_app_id() {
  app_id_ = 0;
  clear_has_app_id();
}
inline ::google::protobuf::int32 S2SLogReq::app_id() const {
  return app_id_;
}
inline void S2SLogReq::set_app_id(::google::protobuf::int32 value) {
  set_has_app_id();
  app_id_ = value;
}

// required string log_info = 6;
inline bool S2SLogReq::has_log_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void S2SLogReq::set_has_log_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void S2SLogReq::clear_has_log_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void S2SLogReq::clear_log_info() {
  if (log_info_ != &::google::protobuf::internal::kEmptyString) {
    log_info_->clear();
  }
  clear_has_log_info();
}
inline const ::std::string& S2SLogReq::log_info() const {
  return *log_info_;
}
inline void S2SLogReq::set_log_info(const ::std::string& value) {
  set_has_log_info();
  if (log_info_ == &::google::protobuf::internal::kEmptyString) {
    log_info_ = new ::std::string;
  }
  log_info_->assign(value);
}
inline void S2SLogReq::set_log_info(const char* value) {
  set_has_log_info();
  if (log_info_ == &::google::protobuf::internal::kEmptyString) {
    log_info_ = new ::std::string;
  }
  log_info_->assign(value);
}
inline void S2SLogReq::set_log_info(const char* value, size_t size) {
  set_has_log_info();
  if (log_info_ == &::google::protobuf::internal::kEmptyString) {
    log_info_ = new ::std::string;
  }
  log_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SLogReq::mutable_log_info() {
  set_has_log_info();
  if (log_info_ == &::google::protobuf::internal::kEmptyString) {
    log_info_ = new ::std::string;
  }
  return log_info_;
}
inline ::std::string* S2SLogReq::release_log_info() {
  clear_has_log_info();
  if (log_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = log_info_;
    log_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SLogReq::set_allocated_log_info(::std::string* log_info) {
  if (log_info_ != &::google::protobuf::internal::kEmptyString) {
    delete log_info_;
  }
  if (log_info) {
    set_has_log_info();
    log_info_ = log_info;
  } else {
    clear_has_log_info();
    log_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2SUpdateOnlineToDirReq

// required uint32 zoneid = 1;
inline bool S2SUpdateOnlineToDirReq::has_zoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SUpdateOnlineToDirReq::set_has_zoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SUpdateOnlineToDirReq::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SUpdateOnlineToDirReq::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 S2SUpdateOnlineToDirReq::zoneid() const {
  return zoneid_;
}
inline void S2SUpdateOnlineToDirReq::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// required string zonename = 2;
inline bool S2SUpdateOnlineToDirReq::has_zonename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SUpdateOnlineToDirReq::set_has_zonename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SUpdateOnlineToDirReq::clear_has_zonename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SUpdateOnlineToDirReq::clear_zonename() {
  if (zonename_ != &::google::protobuf::internal::kEmptyString) {
    zonename_->clear();
  }
  clear_has_zonename();
}
inline const ::std::string& S2SUpdateOnlineToDirReq::zonename() const {
  return *zonename_;
}
inline void S2SUpdateOnlineToDirReq::set_zonename(const ::std::string& value) {
  set_has_zonename();
  if (zonename_ == &::google::protobuf::internal::kEmptyString) {
    zonename_ = new ::std::string;
  }
  zonename_->assign(value);
}
inline void S2SUpdateOnlineToDirReq::set_zonename(const char* value) {
  set_has_zonename();
  if (zonename_ == &::google::protobuf::internal::kEmptyString) {
    zonename_ = new ::std::string;
  }
  zonename_->assign(value);
}
inline void S2SUpdateOnlineToDirReq::set_zonename(const char* value, size_t size) {
  set_has_zonename();
  if (zonename_ == &::google::protobuf::internal::kEmptyString) {
    zonename_ = new ::std::string;
  }
  zonename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SUpdateOnlineToDirReq::mutable_zonename() {
  set_has_zonename();
  if (zonename_ == &::google::protobuf::internal::kEmptyString) {
    zonename_ = new ::std::string;
  }
  return zonename_;
}
inline ::std::string* S2SUpdateOnlineToDirReq::release_zonename() {
  clear_has_zonename();
  if (zonename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zonename_;
    zonename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SUpdateOnlineToDirReq::set_allocated_zonename(::std::string* zonename) {
  if (zonename_ != &::google::protobuf::internal::kEmptyString) {
    delete zonename_;
  }
  if (zonename) {
    set_has_zonename();
    zonename_ = zonename;
  } else {
    clear_has_zonename();
    zonename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 zonechannel = 3;
inline bool S2SUpdateOnlineToDirReq::has_zonechannel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SUpdateOnlineToDirReq::set_has_zonechannel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SUpdateOnlineToDirReq::clear_has_zonechannel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SUpdateOnlineToDirReq::clear_zonechannel() {
  zonechannel_ = 0u;
  clear_has_zonechannel();
}
inline ::google::protobuf::uint32 S2SUpdateOnlineToDirReq::zonechannel() const {
  return zonechannel_;
}
inline void S2SUpdateOnlineToDirReq::set_zonechannel(::google::protobuf::uint32 value) {
  set_has_zonechannel();
  zonechannel_ = value;
}

// required uint32 appid = 4;
inline bool S2SUpdateOnlineToDirReq::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SUpdateOnlineToDirReq::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SUpdateOnlineToDirReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SUpdateOnlineToDirReq::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 S2SUpdateOnlineToDirReq::appid() const {
  return appid_;
}
inline void S2SUpdateOnlineToDirReq::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}

// required string ip = 5;
inline bool S2SUpdateOnlineToDirReq::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SUpdateOnlineToDirReq::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SUpdateOnlineToDirReq::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SUpdateOnlineToDirReq::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& S2SUpdateOnlineToDirReq::ip() const {
  return *ip_;
}
inline void S2SUpdateOnlineToDirReq::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SUpdateOnlineToDirReq::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SUpdateOnlineToDirReq::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SUpdateOnlineToDirReq::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* S2SUpdateOnlineToDirReq::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SUpdateOnlineToDirReq::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 port = 6;
inline bool S2SUpdateOnlineToDirReq::has_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void S2SUpdateOnlineToDirReq::set_has_port() {
  _has_bits_[0] |= 0x00000020u;
}
inline void S2SUpdateOnlineToDirReq::clear_has_port() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void S2SUpdateOnlineToDirReq::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 S2SUpdateOnlineToDirReq::port() const {
  return port_;
}
inline void S2SUpdateOnlineToDirReq::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// required uint32 onlinecount = 7;
inline bool S2SUpdateOnlineToDirReq::has_onlinecount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void S2SUpdateOnlineToDirReq::set_has_onlinecount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void S2SUpdateOnlineToDirReq::clear_has_onlinecount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void S2SUpdateOnlineToDirReq::clear_onlinecount() {
  onlinecount_ = 0u;
  clear_has_onlinecount();
}
inline ::google::protobuf::uint32 S2SUpdateOnlineToDirReq::onlinecount() const {
  return onlinecount_;
}
inline void S2SUpdateOnlineToDirReq::set_onlinecount(::google::protobuf::uint32 value) {
  set_has_onlinecount();
  onlinecount_ = value;
}

// -------------------------------------------------------------------

// S2SRemoveOnlineToDirReq

// required uint32 appid = 1;
inline bool S2SRemoveOnlineToDirReq::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SRemoveOnlineToDirReq::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SRemoveOnlineToDirReq::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SRemoveOnlineToDirReq::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 S2SRemoveOnlineToDirReq::appid() const {
  return appid_;
}
inline void S2SRemoveOnlineToDirReq::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::FrameProtocol>() {
  return ::KFMsg::FrameProtocol_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_KFFrameMessage_2eproto__INCLUDED
