// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFFrameMessage.proto

#ifndef PROTOBUF_KFFrameMessage_2eproto__INCLUDED
#define PROTOBUF_KFFrameMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace KFMsg {

// Internal implementation detail -- do not call these.
void LIBPROTOC_EXPORT protobuf_AddDesc_KFFrameMessage_2eproto();
void protobuf_AssignDesc_KFFrameMessage_2eproto();
void protobuf_ShutdownFile_KFFrameMessage_2eproto();

class ListenData;
class RegisterToServerReq;
class RegisterToServerAck;
class TellRegisterToServer;
class TellUnRegisterFromServer;

enum FrameProtocol {
  S2S_REGISTER_TO_SERVER_REQ = 10001,
  S2S_REGISTER_TO_SERVER_ACK = 10002,
  S2S_TELL_REGISTER_TO_SERVER = 10003,
  S2S_TELL_UNREGISTER_FROM_SERVER = 10004
};
LIBPROTOC_EXPORT bool FrameProtocol_IsValid(int value);
const FrameProtocol FrameProtocol_MIN = S2S_REGISTER_TO_SERVER_REQ;
const FrameProtocol FrameProtocol_MAX = S2S_TELL_UNREGISTER_FROM_SERVER;
const int FrameProtocol_ARRAYSIZE = FrameProtocol_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* FrameProtocol_descriptor();
inline const ::std::string& FrameProtocol_Name(FrameProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    FrameProtocol_descriptor(), value);
}
inline bool FrameProtocol_Parse(
    const ::std::string& name, FrameProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FrameProtocol>(
    FrameProtocol_descriptor(), name, value);
}
// ===================================================================

class LIBPROTOC_EXPORT ListenData : public ::google::protobuf::Message {
 public:
  ListenData();
  virtual ~ListenData();

  ListenData(const ListenData& from);

  inline ListenData& operator=(const ListenData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListenData& default_instance();

  void Swap(ListenData* other);

  // implements Message ----------------------------------------------

  ListenData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListenData& from);
  void MergeFrom(const ListenData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 appid = 1;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 1;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // required string appname = 2;
  inline bool has_appname() const;
  inline void clear_appname();
  static const int kAppnameFieldNumber = 2;
  inline const ::std::string& appname() const;
  inline void set_appname(const ::std::string& value);
  inline void set_appname(const char* value);
  inline void set_appname(const char* value, size_t size);
  inline ::std::string* mutable_appname();
  inline ::std::string* release_appname();
  inline void set_allocated_appname(::std::string* appname);

  // required string apptype = 3;
  inline bool has_apptype() const;
  inline void clear_apptype();
  static const int kApptypeFieldNumber = 3;
  inline const ::std::string& apptype() const;
  inline void set_apptype(const ::std::string& value);
  inline void set_apptype(const char* value);
  inline void set_apptype(const char* value, size_t size);
  inline ::std::string* mutable_apptype();
  inline ::std::string* release_apptype();
  inline void set_allocated_apptype(::std::string* apptype);

  // required string ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required uint32 port = 5;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 5;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // optional uint32 zoneid = 6;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 6;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.ListenData)
 private:
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_appname();
  inline void clear_has_appname();
  inline void set_has_apptype();
  inline void clear_has_apptype();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* appname_;
  ::std::string* apptype_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 port_;
  ::std::string* ip_;
  ::google::protobuf::uint32 zoneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFFrameMessage_2eproto();
  friend void protobuf_AssignDesc_KFFrameMessage_2eproto();
  friend void protobuf_ShutdownFile_KFFrameMessage_2eproto();

  void InitAsDefaultInstance();
  static ListenData* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RegisterToServerReq : public ::google::protobuf::Message {
 public:
  RegisterToServerReq();
  virtual ~RegisterToServerReq();

  RegisterToServerReq(const RegisterToServerReq& from);

  inline RegisterToServerReq& operator=(const RegisterToServerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterToServerReq& default_instance();

  void Swap(RegisterToServerReq* other);

  // implements Message ----------------------------------------------

  RegisterToServerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterToServerReq& from);
  void MergeFrom(const RegisterToServerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .KFMsg.ListenData listen = 1;
  inline bool has_listen() const;
  inline void clear_listen();
  static const int kListenFieldNumber = 1;
  inline const ::KFMsg::ListenData& listen() const;
  inline ::KFMsg::ListenData* mutable_listen();
  inline ::KFMsg::ListenData* release_listen();
  inline void set_allocated_listen(::KFMsg::ListenData* listen);

  // @@protoc_insertion_point(class_scope:KFMsg.RegisterToServerReq)
 private:
  inline void set_has_listen();
  inline void clear_has_listen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::ListenData* listen_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFFrameMessage_2eproto();
  friend void protobuf_AssignDesc_KFFrameMessage_2eproto();
  friend void protobuf_ShutdownFile_KFFrameMessage_2eproto();

  void InitAsDefaultInstance();
  static RegisterToServerReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RegisterToServerAck : public ::google::protobuf::Message {
 public:
  RegisterToServerAck();
  virtual ~RegisterToServerAck();

  RegisterToServerAck(const RegisterToServerAck& from);

  inline RegisterToServerAck& operator=(const RegisterToServerAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterToServerAck& default_instance();

  void Swap(RegisterToServerAck* other);

  // implements Message ----------------------------------------------

  RegisterToServerAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterToServerAck& from);
  void MergeFrom(const RegisterToServerAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string apptype = 1;
  inline bool has_apptype() const;
  inline void clear_apptype();
  static const int kApptypeFieldNumber = 1;
  inline const ::std::string& apptype() const;
  inline void set_apptype(const ::std::string& value);
  inline void set_apptype(const char* value);
  inline void set_apptype(const char* value, size_t size);
  inline ::std::string* mutable_apptype();
  inline ::std::string* release_apptype();
  inline void set_allocated_apptype(::std::string* apptype);

  // required uint32 appid = 2;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 2;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // required string appname = 3;
  inline bool has_appname() const;
  inline void clear_appname();
  static const int kAppnameFieldNumber = 3;
  inline const ::std::string& appname() const;
  inline void set_appname(const ::std::string& value);
  inline void set_appname(const char* value);
  inline void set_appname(const char* value, size_t size);
  inline ::std::string* mutable_appname();
  inline ::std::string* release_appname();
  inline void set_allocated_appname(::std::string* appname);

  // @@protoc_insertion_point(class_scope:KFMsg.RegisterToServerAck)
 private:
  inline void set_has_apptype();
  inline void clear_has_apptype();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_appname();
  inline void clear_has_appname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* apptype_;
  ::std::string* appname_;
  ::google::protobuf::uint32 appid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFFrameMessage_2eproto();
  friend void protobuf_AssignDesc_KFFrameMessage_2eproto();
  friend void protobuf_ShutdownFile_KFFrameMessage_2eproto();

  void InitAsDefaultInstance();
  static RegisterToServerAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT TellRegisterToServer : public ::google::protobuf::Message {
 public:
  TellRegisterToServer();
  virtual ~TellRegisterToServer();

  TellRegisterToServer(const TellRegisterToServer& from);

  inline TellRegisterToServer& operator=(const TellRegisterToServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TellRegisterToServer& default_instance();

  void Swap(TellRegisterToServer* other);

  // implements Message ----------------------------------------------

  TellRegisterToServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TellRegisterToServer& from);
  void MergeFrom(const TellRegisterToServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .KFMsg.ListenData listen = 1;
  inline bool has_listen() const;
  inline void clear_listen();
  static const int kListenFieldNumber = 1;
  inline const ::KFMsg::ListenData& listen() const;
  inline ::KFMsg::ListenData* mutable_listen();
  inline ::KFMsg::ListenData* release_listen();
  inline void set_allocated_listen(::KFMsg::ListenData* listen);

  // @@protoc_insertion_point(class_scope:KFMsg.TellRegisterToServer)
 private:
  inline void set_has_listen();
  inline void clear_has_listen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::ListenData* listen_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFFrameMessage_2eproto();
  friend void protobuf_AssignDesc_KFFrameMessage_2eproto();
  friend void protobuf_ShutdownFile_KFFrameMessage_2eproto();

  void InitAsDefaultInstance();
  static TellRegisterToServer* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT TellUnRegisterFromServer : public ::google::protobuf::Message {
 public:
  TellUnRegisterFromServer();
  virtual ~TellUnRegisterFromServer();

  TellUnRegisterFromServer(const TellUnRegisterFromServer& from);

  inline TellUnRegisterFromServer& operator=(const TellUnRegisterFromServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TellUnRegisterFromServer& default_instance();

  void Swap(TellUnRegisterFromServer* other);

  // implements Message ----------------------------------------------

  TellUnRegisterFromServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TellUnRegisterFromServer& from);
  void MergeFrom(const TellUnRegisterFromServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 appid = 1;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 1;
  inline ::google::protobuf::uint32 appid() const;
  inline void set_appid(::google::protobuf::uint32 value);

  // required string appname = 2;
  inline bool has_appname() const;
  inline void clear_appname();
  static const int kAppnameFieldNumber = 2;
  inline const ::std::string& appname() const;
  inline void set_appname(const ::std::string& value);
  inline void set_appname(const char* value);
  inline void set_appname(const char* value, size_t size);
  inline ::std::string* mutable_appname();
  inline ::std::string* release_appname();
  inline void set_allocated_appname(::std::string* appname);

  // required string apptype = 3;
  inline bool has_apptype() const;
  inline void clear_apptype();
  static const int kApptypeFieldNumber = 3;
  inline const ::std::string& apptype() const;
  inline void set_apptype(const ::std::string& value);
  inline void set_apptype(const char* value);
  inline void set_apptype(const char* value, size_t size);
  inline ::std::string* mutable_apptype();
  inline ::std::string* release_apptype();
  inline void set_allocated_apptype(::std::string* apptype);

  // optional uint32 zoneid = 4;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.TellUnRegisterFromServer)
 private:
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_appname();
  inline void clear_has_appname();
  inline void set_has_apptype();
  inline void clear_has_apptype();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* appname_;
  ::google::protobuf::uint32 appid_;
  ::google::protobuf::uint32 zoneid_;
  ::std::string* apptype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFFrameMessage_2eproto();
  friend void protobuf_AssignDesc_KFFrameMessage_2eproto();
  friend void protobuf_ShutdownFile_KFFrameMessage_2eproto();

  void InitAsDefaultInstance();
  static TellUnRegisterFromServer* default_instance_;
};
// ===================================================================


// ===================================================================

// ListenData

// optional uint32 appid = 1;
inline bool ListenData::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListenData::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListenData::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListenData::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 ListenData::appid() const {
  return appid_;
}
inline void ListenData::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}

// required string appname = 2;
inline bool ListenData::has_appname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListenData::set_has_appname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListenData::clear_has_appname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListenData::clear_appname() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    appname_->clear();
  }
  clear_has_appname();
}
inline const ::std::string& ListenData::appname() const {
  return *appname_;
}
inline void ListenData::set_appname(const ::std::string& value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void ListenData::set_appname(const char* value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void ListenData::set_appname(const char* value, size_t size) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ListenData::mutable_appname() {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  return appname_;
}
inline ::std::string* ListenData::release_appname() {
  clear_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appname_;
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ListenData::set_allocated_appname(::std::string* appname) {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (appname) {
    set_has_appname();
    appname_ = appname;
  } else {
    clear_has_appname();
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string apptype = 3;
inline bool ListenData::has_apptype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ListenData::set_has_apptype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ListenData::clear_has_apptype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ListenData::clear_apptype() {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    apptype_->clear();
  }
  clear_has_apptype();
}
inline const ::std::string& ListenData::apptype() const {
  return *apptype_;
}
inline void ListenData::set_apptype(const ::std::string& value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void ListenData::set_apptype(const char* value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void ListenData::set_apptype(const char* value, size_t size) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ListenData::mutable_apptype() {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  return apptype_;
}
inline ::std::string* ListenData::release_apptype() {
  clear_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = apptype_;
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ListenData::set_allocated_apptype(::std::string* apptype) {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (apptype) {
    set_has_apptype();
    apptype_ = apptype;
  } else {
    clear_has_apptype();
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ip = 4;
inline bool ListenData::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ListenData::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ListenData::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ListenData::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ListenData::ip() const {
  return *ip_;
}
inline void ListenData::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ListenData::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ListenData::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ListenData::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* ListenData::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ListenData::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 port = 5;
inline bool ListenData::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ListenData::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ListenData::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ListenData::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 ListenData::port() const {
  return port_;
}
inline void ListenData::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// optional uint32 zoneid = 6;
inline bool ListenData::has_zoneid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ListenData::set_has_zoneid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ListenData::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ListenData::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 ListenData::zoneid() const {
  return zoneid_;
}
inline void ListenData::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// -------------------------------------------------------------------

// RegisterToServerReq

// required .KFMsg.ListenData listen = 1;
inline bool RegisterToServerReq::has_listen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterToServerReq::set_has_listen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterToServerReq::clear_has_listen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterToServerReq::clear_listen() {
  if (listen_ != NULL) listen_->::KFMsg::ListenData::Clear();
  clear_has_listen();
}
inline const ::KFMsg::ListenData& RegisterToServerReq::listen() const {
  return listen_ != NULL ? *listen_ : *default_instance_->listen_;
}
inline ::KFMsg::ListenData* RegisterToServerReq::mutable_listen() {
  set_has_listen();
  if (listen_ == NULL) listen_ = new ::KFMsg::ListenData;
  return listen_;
}
inline ::KFMsg::ListenData* RegisterToServerReq::release_listen() {
  clear_has_listen();
  ::KFMsg::ListenData* temp = listen_;
  listen_ = NULL;
  return temp;
}
inline void RegisterToServerReq::set_allocated_listen(::KFMsg::ListenData* listen) {
  delete listen_;
  listen_ = listen;
  if (listen) {
    set_has_listen();
  } else {
    clear_has_listen();
  }
}

// -------------------------------------------------------------------

// RegisterToServerAck

// required string apptype = 1;
inline bool RegisterToServerAck::has_apptype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterToServerAck::set_has_apptype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterToServerAck::clear_has_apptype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterToServerAck::clear_apptype() {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    apptype_->clear();
  }
  clear_has_apptype();
}
inline const ::std::string& RegisterToServerAck::apptype() const {
  return *apptype_;
}
inline void RegisterToServerAck::set_apptype(const ::std::string& value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void RegisterToServerAck::set_apptype(const char* value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void RegisterToServerAck::set_apptype(const char* value, size_t size) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterToServerAck::mutable_apptype() {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  return apptype_;
}
inline ::std::string* RegisterToServerAck::release_apptype() {
  clear_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = apptype_;
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegisterToServerAck::set_allocated_apptype(::std::string* apptype) {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (apptype) {
    set_has_apptype();
    apptype_ = apptype;
  } else {
    clear_has_apptype();
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 appid = 2;
inline bool RegisterToServerAck::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterToServerAck::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterToServerAck::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterToServerAck::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 RegisterToServerAck::appid() const {
  return appid_;
}
inline void RegisterToServerAck::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}

// required string appname = 3;
inline bool RegisterToServerAck::has_appname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegisterToServerAck::set_has_appname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegisterToServerAck::clear_has_appname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegisterToServerAck::clear_appname() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    appname_->clear();
  }
  clear_has_appname();
}
inline const ::std::string& RegisterToServerAck::appname() const {
  return *appname_;
}
inline void RegisterToServerAck::set_appname(const ::std::string& value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void RegisterToServerAck::set_appname(const char* value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void RegisterToServerAck::set_appname(const char* value, size_t size) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegisterToServerAck::mutable_appname() {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  return appname_;
}
inline ::std::string* RegisterToServerAck::release_appname() {
  clear_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appname_;
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegisterToServerAck::set_allocated_appname(::std::string* appname) {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (appname) {
    set_has_appname();
    appname_ = appname;
  } else {
    clear_has_appname();
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TellRegisterToServer

// required .KFMsg.ListenData listen = 1;
inline bool TellRegisterToServer::has_listen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TellRegisterToServer::set_has_listen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TellRegisterToServer::clear_has_listen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TellRegisterToServer::clear_listen() {
  if (listen_ != NULL) listen_->::KFMsg::ListenData::Clear();
  clear_has_listen();
}
inline const ::KFMsg::ListenData& TellRegisterToServer::listen() const {
  return listen_ != NULL ? *listen_ : *default_instance_->listen_;
}
inline ::KFMsg::ListenData* TellRegisterToServer::mutable_listen() {
  set_has_listen();
  if (listen_ == NULL) listen_ = new ::KFMsg::ListenData;
  return listen_;
}
inline ::KFMsg::ListenData* TellRegisterToServer::release_listen() {
  clear_has_listen();
  ::KFMsg::ListenData* temp = listen_;
  listen_ = NULL;
  return temp;
}
inline void TellRegisterToServer::set_allocated_listen(::KFMsg::ListenData* listen) {
  delete listen_;
  listen_ = listen;
  if (listen) {
    set_has_listen();
  } else {
    clear_has_listen();
  }
}

// -------------------------------------------------------------------

// TellUnRegisterFromServer

// optional uint32 appid = 1;
inline bool TellUnRegisterFromServer::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TellUnRegisterFromServer::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TellUnRegisterFromServer::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TellUnRegisterFromServer::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 TellUnRegisterFromServer::appid() const {
  return appid_;
}
inline void TellUnRegisterFromServer::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
}

// required string appname = 2;
inline bool TellUnRegisterFromServer::has_appname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TellUnRegisterFromServer::set_has_appname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TellUnRegisterFromServer::clear_has_appname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TellUnRegisterFromServer::clear_appname() {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    appname_->clear();
  }
  clear_has_appname();
}
inline const ::std::string& TellUnRegisterFromServer::appname() const {
  return *appname_;
}
inline void TellUnRegisterFromServer::set_appname(const ::std::string& value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void TellUnRegisterFromServer::set_appname(const char* value) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(value);
}
inline void TellUnRegisterFromServer::set_appname(const char* value, size_t size) {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  appname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TellUnRegisterFromServer::mutable_appname() {
  set_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    appname_ = new ::std::string;
  }
  return appname_;
}
inline ::std::string* TellUnRegisterFromServer::release_appname() {
  clear_has_appname();
  if (appname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appname_;
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TellUnRegisterFromServer::set_allocated_appname(::std::string* appname) {
  if (appname_ != &::google::protobuf::internal::kEmptyString) {
    delete appname_;
  }
  if (appname) {
    set_has_appname();
    appname_ = appname;
  } else {
    clear_has_appname();
    appname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string apptype = 3;
inline bool TellUnRegisterFromServer::has_apptype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TellUnRegisterFromServer::set_has_apptype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TellUnRegisterFromServer::clear_has_apptype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TellUnRegisterFromServer::clear_apptype() {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    apptype_->clear();
  }
  clear_has_apptype();
}
inline const ::std::string& TellUnRegisterFromServer::apptype() const {
  return *apptype_;
}
inline void TellUnRegisterFromServer::set_apptype(const ::std::string& value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void TellUnRegisterFromServer::set_apptype(const char* value) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(value);
}
inline void TellUnRegisterFromServer::set_apptype(const char* value, size_t size) {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  apptype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TellUnRegisterFromServer::mutable_apptype() {
  set_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    apptype_ = new ::std::string;
  }
  return apptype_;
}
inline ::std::string* TellUnRegisterFromServer::release_apptype() {
  clear_has_apptype();
  if (apptype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = apptype_;
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TellUnRegisterFromServer::set_allocated_apptype(::std::string* apptype) {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (apptype) {
    set_has_apptype();
    apptype_ = apptype;
  } else {
    clear_has_apptype();
    apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 zoneid = 4;
inline bool TellUnRegisterFromServer::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TellUnRegisterFromServer::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TellUnRegisterFromServer::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TellUnRegisterFromServer::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 TellUnRegisterFromServer::zoneid() const {
  return zoneid_;
}
inline void TellUnRegisterFromServer::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::FrameProtocol>() {
  return ::KFMsg::FrameProtocol_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_KFFrameMessage_2eproto__INCLUDED
