// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFFrameMessage.proto

#ifndef PROTOBUF_INCLUDED_KFFrameMessage_2eproto
#define PROTOBUF_INCLUDED_KFFrameMessage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_KFFrameMessage_2eproto LIBPROTOC_EXPORT

namespace protobuf_KFFrameMessage_2eproto {
// Internal implementation detail -- do not use these members.
struct LIBPROTOC_EXPORT TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[16];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void LIBPROTOC_EXPORT AddDescriptors();
}  // namespace protobuf_KFFrameMessage_2eproto
namespace KFMsg {
class ListenData;
class ListenDataDefaultTypeInternal;
LIBPROTOC_EXPORT extern ListenDataDefaultTypeInternal _ListenData_default_instance_;
class PBRouteZone;
class PBRouteZoneDefaultTypeInternal;
LIBPROTOC_EXPORT extern PBRouteZoneDefaultTypeInternal _PBRouteZone_default_instance_;
class PBTransmitRouteMessage;
class PBTransmitRouteMessageDefaultTypeInternal;
LIBPROTOC_EXPORT extern PBTransmitRouteMessageDefaultTypeInternal _PBTransmitRouteMessage_default_instance_;
class RegisterToServerAck;
class RegisterToServerAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern RegisterToServerAckDefaultTypeInternal _RegisterToServerAck_default_instance_;
class RegisterToServerReq;
class RegisterToServerReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern RegisterToServerReqDefaultTypeInternal _RegisterToServerReq_default_instance_;
class S2SLogReq;
class S2SLogReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SLogReqDefaultTypeInternal _S2SLogReq_default_instance_;
class S2SRegisterRouteProxyReq;
class S2SRegisterRouteProxyReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SRegisterRouteProxyReqDefaultTypeInternal _S2SRegisterRouteProxyReq_default_instance_;
class S2SRegisterRouteZoneReq;
class S2SRegisterRouteZoneReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SRegisterRouteZoneReqDefaultTypeInternal _S2SRegisterRouteZoneReq_default_instance_;
class S2SRemoveOnlineToDirReq;
class S2SRemoveOnlineToDirReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SRemoveOnlineToDirReqDefaultTypeInternal _S2SRemoveOnlineToDirReq_default_instance_;
class S2STransmitRouteProxyMessageAck;
class S2STransmitRouteProxyMessageAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2STransmitRouteProxyMessageAckDefaultTypeInternal _S2STransmitRouteProxyMessageAck_default_instance_;
class S2STransmitRouteProxyMessageReq;
class S2STransmitRouteProxyMessageReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2STransmitRouteProxyMessageReqDefaultTypeInternal _S2STransmitRouteProxyMessageReq_default_instance_;
class S2STransmitRouteZoneMessageAck;
class S2STransmitRouteZoneMessageAckDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2STransmitRouteZoneMessageAckDefaultTypeInternal _S2STransmitRouteZoneMessageAck_default_instance_;
class S2STransmitRouteZoneMessageReq;
class S2STransmitRouteZoneMessageReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2STransmitRouteZoneMessageReqDefaultTypeInternal _S2STransmitRouteZoneMessageReq_default_instance_;
class S2SUpdateOnlineToDirReq;
class S2SUpdateOnlineToDirReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SUpdateOnlineToDirReqDefaultTypeInternal _S2SUpdateOnlineToDirReq_default_instance_;
class TellRegisterToServer;
class TellRegisterToServerDefaultTypeInternal;
LIBPROTOC_EXPORT extern TellRegisterToServerDefaultTypeInternal _TellRegisterToServer_default_instance_;
class TellUnRegisterFromServer;
class TellUnRegisterFromServerDefaultTypeInternal;
LIBPROTOC_EXPORT extern TellUnRegisterFromServerDefaultTypeInternal _TellUnRegisterFromServer_default_instance_;
}  // namespace KFMsg
namespace google {
namespace protobuf {
template<> LIBPROTOC_EXPORT ::KFMsg::ListenData* Arena::CreateMaybeMessage<::KFMsg::ListenData>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::PBRouteZone* Arena::CreateMaybeMessage<::KFMsg::PBRouteZone>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::PBTransmitRouteMessage* Arena::CreateMaybeMessage<::KFMsg::PBTransmitRouteMessage>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::RegisterToServerAck* Arena::CreateMaybeMessage<::KFMsg::RegisterToServerAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::RegisterToServerReq* Arena::CreateMaybeMessage<::KFMsg::RegisterToServerReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SLogReq* Arena::CreateMaybeMessage<::KFMsg::S2SLogReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SRegisterRouteProxyReq* Arena::CreateMaybeMessage<::KFMsg::S2SRegisterRouteProxyReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SRegisterRouteZoneReq* Arena::CreateMaybeMessage<::KFMsg::S2SRegisterRouteZoneReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SRemoveOnlineToDirReq* Arena::CreateMaybeMessage<::KFMsg::S2SRemoveOnlineToDirReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2STransmitRouteProxyMessageAck* Arena::CreateMaybeMessage<::KFMsg::S2STransmitRouteProxyMessageAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2STransmitRouteProxyMessageReq* Arena::CreateMaybeMessage<::KFMsg::S2STransmitRouteProxyMessageReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2STransmitRouteZoneMessageAck* Arena::CreateMaybeMessage<::KFMsg::S2STransmitRouteZoneMessageAck>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2STransmitRouteZoneMessageReq* Arena::CreateMaybeMessage<::KFMsg::S2STransmitRouteZoneMessageReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SUpdateOnlineToDirReq* Arena::CreateMaybeMessage<::KFMsg::S2SUpdateOnlineToDirReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::TellRegisterToServer* Arena::CreateMaybeMessage<::KFMsg::TellRegisterToServer>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::TellUnRegisterFromServer* Arena::CreateMaybeMessage<::KFMsg::TellUnRegisterFromServer>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace KFMsg {

enum FrameProtocol {
  s2s_temp = 0,
  S2S_REGISTER_TO_SERVER_REQ = 10001,
  S2S_REGISTER_TO_SERVER_ACK = 10002,
  S2S_TELL_REGISTER_TO_SERVER = 10003,
  S2S_TELL_UNREGISTER_FROM_SERVER = 10004,
  S2S_REGISTER_ROUTE_ZONE_REQ = 10011,
  S2S_REGISTER_ROUTE_PROXY_REQ = 10012,
  S2S_TRANSMIT_ROUTE_ZONE_MESSAGE_REQ = 10013,
  S2S_TRANSMIT_ROUTE_ZONE_MESSAGE_ACK = 10014,
  S2S_TRANSMIT_ROUTE_PROXY_MESSAGE_REQ = 10015,
  S2S_TRANSMIT_ROUTE_PROXY_MESSAGE_ACK = 10016,
  S2S_LOG_REQ = 10021,
  S2S_UPDATE_ONLINE_TO_DIR_REQ = 10022,
  S2S_REMOVE_ONLINE_TO_DIR_REQ = 10023,
  FrameProtocol_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FrameProtocol_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool FrameProtocol_IsValid(int value);
const FrameProtocol FrameProtocol_MIN = s2s_temp;
const FrameProtocol FrameProtocol_MAX = S2S_REMOVE_ONLINE_TO_DIR_REQ;
const int FrameProtocol_ARRAYSIZE = FrameProtocol_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* FrameProtocol_descriptor();
inline const ::std::string& FrameProtocol_Name(FrameProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    FrameProtocol_descriptor(), value);
}
inline bool FrameProtocol_Parse(
    const ::std::string& name, FrameProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FrameProtocol>(
    FrameProtocol_descriptor(), name, value);
}
// ===================================================================

class LIBPROTOC_EXPORT ListenData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.ListenData) */ {
 public:
  ListenData();
  virtual ~ListenData();

  ListenData(const ListenData& from);

  inline ListenData& operator=(const ListenData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListenData(ListenData&& from) noexcept
    : ListenData() {
    *this = ::std::move(from);
  }

  inline ListenData& operator=(ListenData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListenData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListenData* internal_default_instance() {
    return reinterpret_cast<const ListenData*>(
               &_ListenData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ListenData* other);
  friend void swap(ListenData& a, ListenData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListenData* New() const final {
    return CreateMaybeMessage<ListenData>(NULL);
  }

  ListenData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListenData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListenData& from);
  void MergeFrom(const ListenData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListenData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes appname = 2;
  void clear_appname();
  static const int kAppnameFieldNumber = 2;
  const ::std::string& appname() const;
  void set_appname(const ::std::string& value);
  #if LANG_CXX11
  void set_appname(::std::string&& value);
  #endif
  void set_appname(const char* value);
  void set_appname(const void* value, size_t size);
  ::std::string* mutable_appname();
  ::std::string* release_appname();
  void set_allocated_appname(::std::string* appname);

  // bytes apptype = 3;
  void clear_apptype();
  static const int kApptypeFieldNumber = 3;
  const ::std::string& apptype() const;
  void set_apptype(const ::std::string& value);
  #if LANG_CXX11
  void set_apptype(::std::string&& value);
  #endif
  void set_apptype(const char* value);
  void set_apptype(const void* value, size_t size);
  ::std::string* mutable_apptype();
  ::std::string* release_apptype();
  void set_allocated_apptype(::std::string* apptype);

  // bytes ip = 4;
  void clear_ip();
  static const int kIpFieldNumber = 4;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // uint64 appid = 1;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::uint64 appid() const;
  void set_appid(::google::protobuf::uint64 value);

  // uint32 port = 5;
  void clear_port();
  static const int kPortFieldNumber = 5;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // uint32 zoneid = 6;
  void clear_zoneid();
  static const int kZoneidFieldNumber = 6;
  ::google::protobuf::uint32 zoneid() const;
  void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.ListenData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appname_;
  ::google::protobuf::internal::ArenaStringPtr apptype_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint64 appid_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 zoneid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFFrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RegisterToServerReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.RegisterToServerReq) */ {
 public:
  RegisterToServerReq();
  virtual ~RegisterToServerReq();

  RegisterToServerReq(const RegisterToServerReq& from);

  inline RegisterToServerReq& operator=(const RegisterToServerReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterToServerReq(RegisterToServerReq&& from) noexcept
    : RegisterToServerReq() {
    *this = ::std::move(from);
  }

  inline RegisterToServerReq& operator=(RegisterToServerReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterToServerReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterToServerReq* internal_default_instance() {
    return reinterpret_cast<const RegisterToServerReq*>(
               &_RegisterToServerReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RegisterToServerReq* other);
  friend void swap(RegisterToServerReq& a, RegisterToServerReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterToServerReq* New() const final {
    return CreateMaybeMessage<RegisterToServerReq>(NULL);
  }

  RegisterToServerReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterToServerReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterToServerReq& from);
  void MergeFrom(const RegisterToServerReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterToServerReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .KFMsg.ListenData listen = 1;
  bool has_listen() const;
  void clear_listen();
  static const int kListenFieldNumber = 1;
  private:
  const ::KFMsg::ListenData& _internal_listen() const;
  public:
  const ::KFMsg::ListenData& listen() const;
  ::KFMsg::ListenData* release_listen();
  ::KFMsg::ListenData* mutable_listen();
  void set_allocated_listen(::KFMsg::ListenData* listen);

  // @@protoc_insertion_point(class_scope:KFMsg.RegisterToServerReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::KFMsg::ListenData* listen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFFrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT RegisterToServerAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.RegisterToServerAck) */ {
 public:
  RegisterToServerAck();
  virtual ~RegisterToServerAck();

  RegisterToServerAck(const RegisterToServerAck& from);

  inline RegisterToServerAck& operator=(const RegisterToServerAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterToServerAck(RegisterToServerAck&& from) noexcept
    : RegisterToServerAck() {
    *this = ::std::move(from);
  }

  inline RegisterToServerAck& operator=(RegisterToServerAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterToServerAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterToServerAck* internal_default_instance() {
    return reinterpret_cast<const RegisterToServerAck*>(
               &_RegisterToServerAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RegisterToServerAck* other);
  friend void swap(RegisterToServerAck& a, RegisterToServerAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterToServerAck* New() const final {
    return CreateMaybeMessage<RegisterToServerAck>(NULL);
  }

  RegisterToServerAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterToServerAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterToServerAck& from);
  void MergeFrom(const RegisterToServerAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterToServerAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes appname = 2;
  void clear_appname();
  static const int kAppnameFieldNumber = 2;
  const ::std::string& appname() const;
  void set_appname(const ::std::string& value);
  #if LANG_CXX11
  void set_appname(::std::string&& value);
  #endif
  void set_appname(const char* value);
  void set_appname(const void* value, size_t size);
  ::std::string* mutable_appname();
  ::std::string* release_appname();
  void set_allocated_appname(::std::string* appname);

  // bytes apptype = 3;
  void clear_apptype();
  static const int kApptypeFieldNumber = 3;
  const ::std::string& apptype() const;
  void set_apptype(const ::std::string& value);
  #if LANG_CXX11
  void set_apptype(::std::string&& value);
  #endif
  void set_apptype(const char* value);
  void set_apptype(const void* value, size_t size);
  ::std::string* mutable_apptype();
  ::std::string* release_apptype();
  void set_allocated_apptype(::std::string* apptype);

  // uint64 appid = 1;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::uint64 appid() const;
  void set_appid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.RegisterToServerAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr appname_;
  ::google::protobuf::internal::ArenaStringPtr apptype_;
  ::google::protobuf::uint64 appid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFFrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT TellRegisterToServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.TellRegisterToServer) */ {
 public:
  TellRegisterToServer();
  virtual ~TellRegisterToServer();

  TellRegisterToServer(const TellRegisterToServer& from);

  inline TellRegisterToServer& operator=(const TellRegisterToServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TellRegisterToServer(TellRegisterToServer&& from) noexcept
    : TellRegisterToServer() {
    *this = ::std::move(from);
  }

  inline TellRegisterToServer& operator=(TellRegisterToServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TellRegisterToServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TellRegisterToServer* internal_default_instance() {
    return reinterpret_cast<const TellRegisterToServer*>(
               &_TellRegisterToServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TellRegisterToServer* other);
  friend void swap(TellRegisterToServer& a, TellRegisterToServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TellRegisterToServer* New() const final {
    return CreateMaybeMessage<TellRegisterToServer>(NULL);
  }

  TellRegisterToServer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TellRegisterToServer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TellRegisterToServer& from);
  void MergeFrom(const TellRegisterToServer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TellRegisterToServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes servername = 1;
  void clear_servername();
  static const int kServernameFieldNumber = 1;
  const ::std::string& servername() const;
  void set_servername(const ::std::string& value);
  #if LANG_CXX11
  void set_servername(::std::string&& value);
  #endif
  void set_servername(const char* value);
  void set_servername(const void* value, size_t size);
  ::std::string* mutable_servername();
  ::std::string* release_servername();
  void set_allocated_servername(::std::string* servername);

  // .KFMsg.ListenData listen = 3;
  bool has_listen() const;
  void clear_listen();
  static const int kListenFieldNumber = 3;
  private:
  const ::KFMsg::ListenData& _internal_listen() const;
  public:
  const ::KFMsg::ListenData& listen() const;
  ::KFMsg::ListenData* release_listen();
  ::KFMsg::ListenData* mutable_listen();
  void set_allocated_listen(::KFMsg::ListenData* listen);

  // uint32 serverzoneid = 2;
  void clear_serverzoneid();
  static const int kServerzoneidFieldNumber = 2;
  ::google::protobuf::uint32 serverzoneid() const;
  void set_serverzoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.TellRegisterToServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr servername_;
  ::KFMsg::ListenData* listen_;
  ::google::protobuf::uint32 serverzoneid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFFrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT TellUnRegisterFromServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.TellUnRegisterFromServer) */ {
 public:
  TellUnRegisterFromServer();
  virtual ~TellUnRegisterFromServer();

  TellUnRegisterFromServer(const TellUnRegisterFromServer& from);

  inline TellUnRegisterFromServer& operator=(const TellUnRegisterFromServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TellUnRegisterFromServer(TellUnRegisterFromServer&& from) noexcept
    : TellUnRegisterFromServer() {
    *this = ::std::move(from);
  }

  inline TellUnRegisterFromServer& operator=(TellUnRegisterFromServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TellUnRegisterFromServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TellUnRegisterFromServer* internal_default_instance() {
    return reinterpret_cast<const TellUnRegisterFromServer*>(
               &_TellUnRegisterFromServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TellUnRegisterFromServer* other);
  friend void swap(TellUnRegisterFromServer& a, TellUnRegisterFromServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TellUnRegisterFromServer* New() const final {
    return CreateMaybeMessage<TellUnRegisterFromServer>(NULL);
  }

  TellUnRegisterFromServer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TellUnRegisterFromServer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TellUnRegisterFromServer& from);
  void MergeFrom(const TellUnRegisterFromServer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TellUnRegisterFromServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes servername = 1;
  void clear_servername();
  static const int kServernameFieldNumber = 1;
  const ::std::string& servername() const;
  void set_servername(const ::std::string& value);
  #if LANG_CXX11
  void set_servername(::std::string&& value);
  #endif
  void set_servername(const char* value);
  void set_servername(const void* value, size_t size);
  ::std::string* mutable_servername();
  ::std::string* release_servername();
  void set_allocated_servername(::std::string* servername);

  // bytes appname = 4;
  void clear_appname();
  static const int kAppnameFieldNumber = 4;
  const ::std::string& appname() const;
  void set_appname(const ::std::string& value);
  #if LANG_CXX11
  void set_appname(::std::string&& value);
  #endif
  void set_appname(const char* value);
  void set_appname(const void* value, size_t size);
  ::std::string* mutable_appname();
  ::std::string* release_appname();
  void set_allocated_appname(::std::string* appname);

  // bytes apptype = 5;
  void clear_apptype();
  static const int kApptypeFieldNumber = 5;
  const ::std::string& apptype() const;
  void set_apptype(const ::std::string& value);
  #if LANG_CXX11
  void set_apptype(::std::string&& value);
  #endif
  void set_apptype(const char* value);
  void set_apptype(const void* value, size_t size);
  ::std::string* mutable_apptype();
  ::std::string* release_apptype();
  void set_allocated_apptype(::std::string* apptype);

  // uint64 appid = 3;
  void clear_appid();
  static const int kAppidFieldNumber = 3;
  ::google::protobuf::uint64 appid() const;
  void set_appid(::google::protobuf::uint64 value);

  // uint32 serverzoneid = 2;
  void clear_serverzoneid();
  static const int kServerzoneidFieldNumber = 2;
  ::google::protobuf::uint32 serverzoneid() const;
  void set_serverzoneid(::google::protobuf::uint32 value);

  // uint32 zoneid = 6;
  void clear_zoneid();
  static const int kZoneidFieldNumber = 6;
  ::google::protobuf::uint32 zoneid() const;
  void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.TellUnRegisterFromServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr servername_;
  ::google::protobuf::internal::ArenaStringPtr appname_;
  ::google::protobuf::internal::ArenaStringPtr apptype_;
  ::google::protobuf::uint64 appid_;
  ::google::protobuf::uint32 serverzoneid_;
  ::google::protobuf::uint32 zoneid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFFrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBRouteZone : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.PBRouteZone) */ {
 public:
  PBRouteZone();
  virtual ~PBRouteZone();

  PBRouteZone(const PBRouteZone& from);

  inline PBRouteZone& operator=(const PBRouteZone& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PBRouteZone(PBRouteZone&& from) noexcept
    : PBRouteZone() {
    *this = ::std::move(from);
  }

  inline PBRouteZone& operator=(PBRouteZone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRouteZone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBRouteZone* internal_default_instance() {
    return reinterpret_cast<const PBRouteZone*>(
               &_PBRouteZone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PBRouteZone* other);
  friend void swap(PBRouteZone& a, PBRouteZone& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PBRouteZone* New() const final {
    return CreateMaybeMessage<PBRouteZone>(NULL);
  }

  PBRouteZone* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PBRouteZone>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PBRouteZone& from);
  void MergeFrom(const PBRouteZone& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBRouteZone* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 serverid = 2;
  void clear_serverid();
  static const int kServeridFieldNumber = 2;
  ::google::protobuf::uint64 serverid() const;
  void set_serverid(::google::protobuf::uint64 value);

  // uint32 zoneid = 1;
  void clear_zoneid();
  static const int kZoneidFieldNumber = 1;
  ::google::protobuf::uint32 zoneid() const;
  void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.PBRouteZone)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 serverid_;
  ::google::protobuf::uint32 zoneid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFFrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRegisterRouteZoneReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SRegisterRouteZoneReq) */ {
 public:
  S2SRegisterRouteZoneReq();
  virtual ~S2SRegisterRouteZoneReq();

  S2SRegisterRouteZoneReq(const S2SRegisterRouteZoneReq& from);

  inline S2SRegisterRouteZoneReq& operator=(const S2SRegisterRouteZoneReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SRegisterRouteZoneReq(S2SRegisterRouteZoneReq&& from) noexcept
    : S2SRegisterRouteZoneReq() {
    *this = ::std::move(from);
  }

  inline S2SRegisterRouteZoneReq& operator=(S2SRegisterRouteZoneReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRegisterRouteZoneReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SRegisterRouteZoneReq* internal_default_instance() {
    return reinterpret_cast<const S2SRegisterRouteZoneReq*>(
               &_S2SRegisterRouteZoneReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(S2SRegisterRouteZoneReq* other);
  friend void swap(S2SRegisterRouteZoneReq& a, S2SRegisterRouteZoneReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SRegisterRouteZoneReq* New() const final {
    return CreateMaybeMessage<S2SRegisterRouteZoneReq>(NULL);
  }

  S2SRegisterRouteZoneReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SRegisterRouteZoneReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SRegisterRouteZoneReq& from);
  void MergeFrom(const S2SRegisterRouteZoneReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SRegisterRouteZoneReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .KFMsg.PBRouteZone zonedata = 1;
  bool has_zonedata() const;
  void clear_zonedata();
  static const int kZonedataFieldNumber = 1;
  private:
  const ::KFMsg::PBRouteZone& _internal_zonedata() const;
  public:
  const ::KFMsg::PBRouteZone& zonedata() const;
  ::KFMsg::PBRouteZone* release_zonedata();
  ::KFMsg::PBRouteZone* mutable_zonedata();
  void set_allocated_zonedata(::KFMsg::PBRouteZone* zonedata);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRegisterRouteZoneReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::KFMsg::PBRouteZone* zonedata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFFrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRegisterRouteProxyReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SRegisterRouteProxyReq) */ {
 public:
  S2SRegisterRouteProxyReq();
  virtual ~S2SRegisterRouteProxyReq();

  S2SRegisterRouteProxyReq(const S2SRegisterRouteProxyReq& from);

  inline S2SRegisterRouteProxyReq& operator=(const S2SRegisterRouteProxyReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SRegisterRouteProxyReq(S2SRegisterRouteProxyReq&& from) noexcept
    : S2SRegisterRouteProxyReq() {
    *this = ::std::move(from);
  }

  inline S2SRegisterRouteProxyReq& operator=(S2SRegisterRouteProxyReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRegisterRouteProxyReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SRegisterRouteProxyReq* internal_default_instance() {
    return reinterpret_cast<const S2SRegisterRouteProxyReq*>(
               &_S2SRegisterRouteProxyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(S2SRegisterRouteProxyReq* other);
  friend void swap(S2SRegisterRouteProxyReq& a, S2SRegisterRouteProxyReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SRegisterRouteProxyReq* New() const final {
    return CreateMaybeMessage<S2SRegisterRouteProxyReq>(NULL);
  }

  S2SRegisterRouteProxyReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SRegisterRouteProxyReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SRegisterRouteProxyReq& from);
  void MergeFrom(const S2SRegisterRouteProxyReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SRegisterRouteProxyReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .KFMsg.PBRouteZone zonedata = 1;
  int zonedata_size() const;
  void clear_zonedata();
  static const int kZonedataFieldNumber = 1;
  ::KFMsg::PBRouteZone* mutable_zonedata(int index);
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRouteZone >*
      mutable_zonedata();
  const ::KFMsg::PBRouteZone& zonedata(int index) const;
  ::KFMsg::PBRouteZone* add_zonedata();
  const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRouteZone >&
      zonedata() const;

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRegisterRouteProxyReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRouteZone > zonedata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFFrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBTransmitRouteMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.PBTransmitRouteMessage) */ {
 public:
  PBTransmitRouteMessage();
  virtual ~PBTransmitRouteMessage();

  PBTransmitRouteMessage(const PBTransmitRouteMessage& from);

  inline PBTransmitRouteMessage& operator=(const PBTransmitRouteMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PBTransmitRouteMessage(PBTransmitRouteMessage&& from) noexcept
    : PBTransmitRouteMessage() {
    *this = ::std::move(from);
  }

  inline PBTransmitRouteMessage& operator=(PBTransmitRouteMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBTransmitRouteMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBTransmitRouteMessage* internal_default_instance() {
    return reinterpret_cast<const PBTransmitRouteMessage*>(
               &_PBTransmitRouteMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(PBTransmitRouteMessage* other);
  friend void swap(PBTransmitRouteMessage& a, PBTransmitRouteMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PBTransmitRouteMessage* New() const final {
    return CreateMaybeMessage<PBTransmitRouteMessage>(NULL);
  }

  PBTransmitRouteMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PBTransmitRouteMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PBTransmitRouteMessage& from);
  void MergeFrom(const PBTransmitRouteMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PBTransmitRouteMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msgdata = 5;
  void clear_msgdata();
  static const int kMsgdataFieldNumber = 5;
  const ::std::string& msgdata() const;
  void set_msgdata(const ::std::string& value);
  #if LANG_CXX11
  void set_msgdata(::std::string&& value);
  #endif
  void set_msgdata(const char* value);
  void set_msgdata(const void* value, size_t size);
  ::std::string* mutable_msgdata();
  ::std::string* release_msgdata();
  void set_allocated_msgdata(::std::string* msgdata);

  // uint64 serverid = 2;
  void clear_serverid();
  static const int kServeridFieldNumber = 2;
  ::google::protobuf::uint64 serverid() const;
  void set_serverid(::google::protobuf::uint64 value);

  // uint64 playerid = 3;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 3;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // uint32 msgid = 4;
  void clear_msgid();
  static const int kMsgidFieldNumber = 4;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.PBTransmitRouteMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msgdata_;
  ::google::protobuf::uint64 serverid_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint32 msgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFFrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STransmitRouteZoneMessageReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2STransmitRouteZoneMessageReq) */ {
 public:
  S2STransmitRouteZoneMessageReq();
  virtual ~S2STransmitRouteZoneMessageReq();

  S2STransmitRouteZoneMessageReq(const S2STransmitRouteZoneMessageReq& from);

  inline S2STransmitRouteZoneMessageReq& operator=(const S2STransmitRouteZoneMessageReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2STransmitRouteZoneMessageReq(S2STransmitRouteZoneMessageReq&& from) noexcept
    : S2STransmitRouteZoneMessageReq() {
    *this = ::std::move(from);
  }

  inline S2STransmitRouteZoneMessageReq& operator=(S2STransmitRouteZoneMessageReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STransmitRouteZoneMessageReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2STransmitRouteZoneMessageReq* internal_default_instance() {
    return reinterpret_cast<const S2STransmitRouteZoneMessageReq*>(
               &_S2STransmitRouteZoneMessageReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(S2STransmitRouteZoneMessageReq* other);
  friend void swap(S2STransmitRouteZoneMessageReq& a, S2STransmitRouteZoneMessageReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2STransmitRouteZoneMessageReq* New() const final {
    return CreateMaybeMessage<S2STransmitRouteZoneMessageReq>(NULL);
  }

  S2STransmitRouteZoneMessageReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2STransmitRouteZoneMessageReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2STransmitRouteZoneMessageReq& from);
  void MergeFrom(const S2STransmitRouteZoneMessageReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2STransmitRouteZoneMessageReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .KFMsg.PBTransmitRouteMessage transmitdata = 1;
  bool has_transmitdata() const;
  void clear_transmitdata();
  static const int kTransmitdataFieldNumber = 1;
  private:
  const ::KFMsg::PBTransmitRouteMessage& _internal_transmitdata() const;
  public:
  const ::KFMsg::PBTransmitRouteMessage& transmitdata() const;
  ::KFMsg::PBTransmitRouteMessage* release_transmitdata();
  ::KFMsg::PBTransmitRouteMessage* mutable_transmitdata();
  void set_allocated_transmitdata(::KFMsg::PBTransmitRouteMessage* transmitdata);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STransmitRouteZoneMessageReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::KFMsg::PBTransmitRouteMessage* transmitdata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFFrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STransmitRouteZoneMessageAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2STransmitRouteZoneMessageAck) */ {
 public:
  S2STransmitRouteZoneMessageAck();
  virtual ~S2STransmitRouteZoneMessageAck();

  S2STransmitRouteZoneMessageAck(const S2STransmitRouteZoneMessageAck& from);

  inline S2STransmitRouteZoneMessageAck& operator=(const S2STransmitRouteZoneMessageAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2STransmitRouteZoneMessageAck(S2STransmitRouteZoneMessageAck&& from) noexcept
    : S2STransmitRouteZoneMessageAck() {
    *this = ::std::move(from);
  }

  inline S2STransmitRouteZoneMessageAck& operator=(S2STransmitRouteZoneMessageAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STransmitRouteZoneMessageAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2STransmitRouteZoneMessageAck* internal_default_instance() {
    return reinterpret_cast<const S2STransmitRouteZoneMessageAck*>(
               &_S2STransmitRouteZoneMessageAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(S2STransmitRouteZoneMessageAck* other);
  friend void swap(S2STransmitRouteZoneMessageAck& a, S2STransmitRouteZoneMessageAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2STransmitRouteZoneMessageAck* New() const final {
    return CreateMaybeMessage<S2STransmitRouteZoneMessageAck>(NULL);
  }

  S2STransmitRouteZoneMessageAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2STransmitRouteZoneMessageAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2STransmitRouteZoneMessageAck& from);
  void MergeFrom(const S2STransmitRouteZoneMessageAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2STransmitRouteZoneMessageAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .KFMsg.PBTransmitRouteMessage transmitdata = 1;
  bool has_transmitdata() const;
  void clear_transmitdata();
  static const int kTransmitdataFieldNumber = 1;
  private:
  const ::KFMsg::PBTransmitRouteMessage& _internal_transmitdata() const;
  public:
  const ::KFMsg::PBTransmitRouteMessage& transmitdata() const;
  ::KFMsg::PBTransmitRouteMessage* release_transmitdata();
  ::KFMsg::PBTransmitRouteMessage* mutable_transmitdata();
  void set_allocated_transmitdata(::KFMsg::PBTransmitRouteMessage* transmitdata);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STransmitRouteZoneMessageAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::KFMsg::PBTransmitRouteMessage* transmitdata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFFrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STransmitRouteProxyMessageReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2STransmitRouteProxyMessageReq) */ {
 public:
  S2STransmitRouteProxyMessageReq();
  virtual ~S2STransmitRouteProxyMessageReq();

  S2STransmitRouteProxyMessageReq(const S2STransmitRouteProxyMessageReq& from);

  inline S2STransmitRouteProxyMessageReq& operator=(const S2STransmitRouteProxyMessageReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2STransmitRouteProxyMessageReq(S2STransmitRouteProxyMessageReq&& from) noexcept
    : S2STransmitRouteProxyMessageReq() {
    *this = ::std::move(from);
  }

  inline S2STransmitRouteProxyMessageReq& operator=(S2STransmitRouteProxyMessageReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STransmitRouteProxyMessageReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2STransmitRouteProxyMessageReq* internal_default_instance() {
    return reinterpret_cast<const S2STransmitRouteProxyMessageReq*>(
               &_S2STransmitRouteProxyMessageReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(S2STransmitRouteProxyMessageReq* other);
  friend void swap(S2STransmitRouteProxyMessageReq& a, S2STransmitRouteProxyMessageReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2STransmitRouteProxyMessageReq* New() const final {
    return CreateMaybeMessage<S2STransmitRouteProxyMessageReq>(NULL);
  }

  S2STransmitRouteProxyMessageReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2STransmitRouteProxyMessageReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2STransmitRouteProxyMessageReq& from);
  void MergeFrom(const S2STransmitRouteProxyMessageReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2STransmitRouteProxyMessageReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .KFMsg.PBTransmitRouteMessage transmitdata = 1;
  bool has_transmitdata() const;
  void clear_transmitdata();
  static const int kTransmitdataFieldNumber = 1;
  private:
  const ::KFMsg::PBTransmitRouteMessage& _internal_transmitdata() const;
  public:
  const ::KFMsg::PBTransmitRouteMessage& transmitdata() const;
  ::KFMsg::PBTransmitRouteMessage* release_transmitdata();
  ::KFMsg::PBTransmitRouteMessage* mutable_transmitdata();
  void set_allocated_transmitdata(::KFMsg::PBTransmitRouteMessage* transmitdata);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STransmitRouteProxyMessageReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::KFMsg::PBTransmitRouteMessage* transmitdata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFFrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STransmitRouteProxyMessageAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2STransmitRouteProxyMessageAck) */ {
 public:
  S2STransmitRouteProxyMessageAck();
  virtual ~S2STransmitRouteProxyMessageAck();

  S2STransmitRouteProxyMessageAck(const S2STransmitRouteProxyMessageAck& from);

  inline S2STransmitRouteProxyMessageAck& operator=(const S2STransmitRouteProxyMessageAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2STransmitRouteProxyMessageAck(S2STransmitRouteProxyMessageAck&& from) noexcept
    : S2STransmitRouteProxyMessageAck() {
    *this = ::std::move(from);
  }

  inline S2STransmitRouteProxyMessageAck& operator=(S2STransmitRouteProxyMessageAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STransmitRouteProxyMessageAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2STransmitRouteProxyMessageAck* internal_default_instance() {
    return reinterpret_cast<const S2STransmitRouteProxyMessageAck*>(
               &_S2STransmitRouteProxyMessageAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(S2STransmitRouteProxyMessageAck* other);
  friend void swap(S2STransmitRouteProxyMessageAck& a, S2STransmitRouteProxyMessageAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2STransmitRouteProxyMessageAck* New() const final {
    return CreateMaybeMessage<S2STransmitRouteProxyMessageAck>(NULL);
  }

  S2STransmitRouteProxyMessageAck* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2STransmitRouteProxyMessageAck>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2STransmitRouteProxyMessageAck& from);
  void MergeFrom(const S2STransmitRouteProxyMessageAck& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2STransmitRouteProxyMessageAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .KFMsg.PBTransmitRouteMessage transmitdata = 1;
  bool has_transmitdata() const;
  void clear_transmitdata();
  static const int kTransmitdataFieldNumber = 1;
  private:
  const ::KFMsg::PBTransmitRouteMessage& _internal_transmitdata() const;
  public:
  const ::KFMsg::PBTransmitRouteMessage& transmitdata() const;
  ::KFMsg::PBTransmitRouteMessage* release_transmitdata();
  ::KFMsg::PBTransmitRouteMessage* mutable_transmitdata();
  void set_allocated_transmitdata(::KFMsg::PBTransmitRouteMessage* transmitdata);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STransmitRouteProxyMessageAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::KFMsg::PBTransmitRouteMessage* transmitdata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFFrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SLogReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SLogReq) */ {
 public:
  S2SLogReq();
  virtual ~S2SLogReq();

  S2SLogReq(const S2SLogReq& from);

  inline S2SLogReq& operator=(const S2SLogReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SLogReq(S2SLogReq&& from) noexcept
    : S2SLogReq() {
    *this = ::std::move(from);
  }

  inline S2SLogReq& operator=(S2SLogReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SLogReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SLogReq* internal_default_instance() {
    return reinterpret_cast<const S2SLogReq*>(
               &_S2SLogReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(S2SLogReq* other);
  friend void swap(S2SLogReq& a, S2SLogReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SLogReq* New() const final {
    return CreateMaybeMessage<S2SLogReq>(NULL);
  }

  S2SLogReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SLogReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SLogReq& from);
  void MergeFrom(const S2SLogReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SLogReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes app_name = 3;
  void clear_app_name();
  static const int kAppNameFieldNumber = 3;
  const ::std::string& app_name() const;
  void set_app_name(const ::std::string& value);
  #if LANG_CXX11
  void set_app_name(::std::string&& value);
  #endif
  void set_app_name(const char* value);
  void set_app_name(const void* value, size_t size);
  ::std::string* mutable_app_name();
  ::std::string* release_app_name();
  void set_allocated_app_name(::std::string* app_name);

  // bytes app_type = 4;
  void clear_app_type();
  static const int kAppTypeFieldNumber = 4;
  const ::std::string& app_type() const;
  void set_app_type(const ::std::string& value);
  #if LANG_CXX11
  void set_app_type(::std::string&& value);
  #endif
  void set_app_type(const char* value);
  void set_app_type(const void* value, size_t size);
  ::std::string* mutable_app_type();
  ::std::string* release_app_type();
  void set_allocated_app_type(::std::string* app_type);

  // bytes app_id = 5;
  void clear_app_id();
  static const int kAppIdFieldNumber = 5;
  const ::std::string& app_id() const;
  void set_app_id(const ::std::string& value);
  #if LANG_CXX11
  void set_app_id(::std::string&& value);
  #endif
  void set_app_id(const char* value);
  void set_app_id(const void* value, size_t size);
  ::std::string* mutable_app_id();
  ::std::string* release_app_id();
  void set_allocated_app_id(::std::string* app_id);

  // bytes log_info = 6;
  void clear_log_info();
  static const int kLogInfoFieldNumber = 6;
  const ::std::string& log_info() const;
  void set_log_info(const ::std::string& value);
  #if LANG_CXX11
  void set_log_info(::std::string&& value);
  #endif
  void set_log_info(const char* value);
  void set_log_info(const void* value, size_t size);
  ::std::string* mutable_log_info();
  ::std::string* release_log_info();
  void set_allocated_log_info(::std::string* log_info);

  // uint32 log_level = 1;
  void clear_log_level();
  static const int kLogLevelFieldNumber = 1;
  ::google::protobuf::uint32 log_level() const;
  void set_log_level(::google::protobuf::uint32 value);

  // uint32 zone_id = 2;
  void clear_zone_id();
  static const int kZoneIdFieldNumber = 2;
  ::google::protobuf::uint32 zone_id() const;
  void set_zone_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SLogReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr app_name_;
  ::google::protobuf::internal::ArenaStringPtr app_type_;
  ::google::protobuf::internal::ArenaStringPtr app_id_;
  ::google::protobuf::internal::ArenaStringPtr log_info_;
  ::google::protobuf::uint32 log_level_;
  ::google::protobuf::uint32 zone_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFFrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SUpdateOnlineToDirReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SUpdateOnlineToDirReq) */ {
 public:
  S2SUpdateOnlineToDirReq();
  virtual ~S2SUpdateOnlineToDirReq();

  S2SUpdateOnlineToDirReq(const S2SUpdateOnlineToDirReq& from);

  inline S2SUpdateOnlineToDirReq& operator=(const S2SUpdateOnlineToDirReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SUpdateOnlineToDirReq(S2SUpdateOnlineToDirReq&& from) noexcept
    : S2SUpdateOnlineToDirReq() {
    *this = ::std::move(from);
  }

  inline S2SUpdateOnlineToDirReq& operator=(S2SUpdateOnlineToDirReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SUpdateOnlineToDirReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SUpdateOnlineToDirReq* internal_default_instance() {
    return reinterpret_cast<const S2SUpdateOnlineToDirReq*>(
               &_S2SUpdateOnlineToDirReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(S2SUpdateOnlineToDirReq* other);
  friend void swap(S2SUpdateOnlineToDirReq& a, S2SUpdateOnlineToDirReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SUpdateOnlineToDirReq* New() const final {
    return CreateMaybeMessage<S2SUpdateOnlineToDirReq>(NULL);
  }

  S2SUpdateOnlineToDirReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SUpdateOnlineToDirReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SUpdateOnlineToDirReq& from);
  void MergeFrom(const S2SUpdateOnlineToDirReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SUpdateOnlineToDirReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes zonename = 2;
  void clear_zonename();
  static const int kZonenameFieldNumber = 2;
  const ::std::string& zonename() const;
  void set_zonename(const ::std::string& value);
  #if LANG_CXX11
  void set_zonename(::std::string&& value);
  #endif
  void set_zonename(const char* value);
  void set_zonename(const void* value, size_t size);
  ::std::string* mutable_zonename();
  ::std::string* release_zonename();
  void set_allocated_zonename(::std::string* zonename);

  // bytes ip = 5;
  void clear_ip();
  static const int kIpFieldNumber = 5;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const void* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // uint32 zoneid = 1;
  void clear_zoneid();
  static const int kZoneidFieldNumber = 1;
  ::google::protobuf::uint32 zoneid() const;
  void set_zoneid(::google::protobuf::uint32 value);

  // uint32 zonechannel = 3;
  void clear_zonechannel();
  static const int kZonechannelFieldNumber = 3;
  ::google::protobuf::uint32 zonechannel() const;
  void set_zonechannel(::google::protobuf::uint32 value);

  // uint64 appid = 4;
  void clear_appid();
  static const int kAppidFieldNumber = 4;
  ::google::protobuf::uint64 appid() const;
  void set_appid(::google::protobuf::uint64 value);

  // uint32 port = 6;
  void clear_port();
  static const int kPortFieldNumber = 6;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // uint32 onlinecount = 7;
  void clear_onlinecount();
  static const int kOnlinecountFieldNumber = 7;
  ::google::protobuf::uint32 onlinecount() const;
  void set_onlinecount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SUpdateOnlineToDirReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr zonename_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 zonechannel_;
  ::google::protobuf::uint64 appid_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 onlinecount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFFrameMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SRemoveOnlineToDirReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SRemoveOnlineToDirReq) */ {
 public:
  S2SRemoveOnlineToDirReq();
  virtual ~S2SRemoveOnlineToDirReq();

  S2SRemoveOnlineToDirReq(const S2SRemoveOnlineToDirReq& from);

  inline S2SRemoveOnlineToDirReq& operator=(const S2SRemoveOnlineToDirReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SRemoveOnlineToDirReq(S2SRemoveOnlineToDirReq&& from) noexcept
    : S2SRemoveOnlineToDirReq() {
    *this = ::std::move(from);
  }

  inline S2SRemoveOnlineToDirReq& operator=(S2SRemoveOnlineToDirReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRemoveOnlineToDirReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SRemoveOnlineToDirReq* internal_default_instance() {
    return reinterpret_cast<const S2SRemoveOnlineToDirReq*>(
               &_S2SRemoveOnlineToDirReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(S2SRemoveOnlineToDirReq* other);
  friend void swap(S2SRemoveOnlineToDirReq& a, S2SRemoveOnlineToDirReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SRemoveOnlineToDirReq* New() const final {
    return CreateMaybeMessage<S2SRemoveOnlineToDirReq>(NULL);
  }

  S2SRemoveOnlineToDirReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SRemoveOnlineToDirReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SRemoveOnlineToDirReq& from);
  void MergeFrom(const S2SRemoveOnlineToDirReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SRemoveOnlineToDirReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 appid = 1;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::uint64 appid() const;
  void set_appid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRemoveOnlineToDirReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 appid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFFrameMessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListenData

// uint64 appid = 1;
inline void ListenData::clear_appid() {
  appid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ListenData::appid() const {
  // @@protoc_insertion_point(field_get:KFMsg.ListenData.appid)
  return appid_;
}
inline void ListenData::set_appid(::google::protobuf::uint64 value) {
  
  appid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.ListenData.appid)
}

// bytes appname = 2;
inline void ListenData::clear_appname() {
  appname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListenData::appname() const {
  // @@protoc_insertion_point(field_get:KFMsg.ListenData.appname)
  return appname_.GetNoArena();
}
inline void ListenData::set_appname(const ::std::string& value) {
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.ListenData.appname)
}
#if LANG_CXX11
inline void ListenData::set_appname(::std::string&& value) {
  
  appname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.ListenData.appname)
}
#endif
inline void ListenData::set_appname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.ListenData.appname)
}
inline void ListenData::set_appname(const void* value, size_t size) {
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.ListenData.appname)
}
inline ::std::string* ListenData::mutable_appname() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.ListenData.appname)
  return appname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListenData::release_appname() {
  // @@protoc_insertion_point(field_release:KFMsg.ListenData.appname)
  
  return appname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListenData::set_allocated_appname(::std::string* appname) {
  if (appname != NULL) {
    
  } else {
    
  }
  appname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appname);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.ListenData.appname)
}

// bytes apptype = 3;
inline void ListenData::clear_apptype() {
  apptype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListenData::apptype() const {
  // @@protoc_insertion_point(field_get:KFMsg.ListenData.apptype)
  return apptype_.GetNoArena();
}
inline void ListenData::set_apptype(const ::std::string& value) {
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.ListenData.apptype)
}
#if LANG_CXX11
inline void ListenData::set_apptype(::std::string&& value) {
  
  apptype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.ListenData.apptype)
}
#endif
inline void ListenData::set_apptype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.ListenData.apptype)
}
inline void ListenData::set_apptype(const void* value, size_t size) {
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.ListenData.apptype)
}
inline ::std::string* ListenData::mutable_apptype() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.ListenData.apptype)
  return apptype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListenData::release_apptype() {
  // @@protoc_insertion_point(field_release:KFMsg.ListenData.apptype)
  
  return apptype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListenData::set_allocated_apptype(::std::string* apptype) {
  if (apptype != NULL) {
    
  } else {
    
  }
  apptype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apptype);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.ListenData.apptype)
}

// bytes ip = 4;
inline void ListenData::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListenData::ip() const {
  // @@protoc_insertion_point(field_get:KFMsg.ListenData.ip)
  return ip_.GetNoArena();
}
inline void ListenData::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.ListenData.ip)
}
#if LANG_CXX11
inline void ListenData::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.ListenData.ip)
}
#endif
inline void ListenData::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.ListenData.ip)
}
inline void ListenData::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.ListenData.ip)
}
inline ::std::string* ListenData::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.ListenData.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListenData::release_ip() {
  // @@protoc_insertion_point(field_release:KFMsg.ListenData.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListenData::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.ListenData.ip)
}

// uint32 port = 5;
inline void ListenData::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 ListenData::port() const {
  // @@protoc_insertion_point(field_get:KFMsg.ListenData.port)
  return port_;
}
inline void ListenData::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.ListenData.port)
}

// uint32 zoneid = 6;
inline void ListenData::clear_zoneid() {
  zoneid_ = 0u;
}
inline ::google::protobuf::uint32 ListenData::zoneid() const {
  // @@protoc_insertion_point(field_get:KFMsg.ListenData.zoneid)
  return zoneid_;
}
inline void ListenData::set_zoneid(::google::protobuf::uint32 value) {
  
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.ListenData.zoneid)
}

// -------------------------------------------------------------------

// RegisterToServerReq

// .KFMsg.ListenData listen = 1;
inline bool RegisterToServerReq::has_listen() const {
  return this != internal_default_instance() && listen_ != NULL;
}
inline void RegisterToServerReq::clear_listen() {
  if (GetArenaNoVirtual() == NULL && listen_ != NULL) {
    delete listen_;
  }
  listen_ = NULL;
}
inline const ::KFMsg::ListenData& RegisterToServerReq::_internal_listen() const {
  return *listen_;
}
inline const ::KFMsg::ListenData& RegisterToServerReq::listen() const {
  const ::KFMsg::ListenData* p = listen_;
  // @@protoc_insertion_point(field_get:KFMsg.RegisterToServerReq.listen)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::ListenData*>(
      &::KFMsg::_ListenData_default_instance_);
}
inline ::KFMsg::ListenData* RegisterToServerReq::release_listen() {
  // @@protoc_insertion_point(field_release:KFMsg.RegisterToServerReq.listen)
  
  ::KFMsg::ListenData* temp = listen_;
  listen_ = NULL;
  return temp;
}
inline ::KFMsg::ListenData* RegisterToServerReq::mutable_listen() {
  
  if (listen_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::ListenData>(GetArenaNoVirtual());
    listen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.RegisterToServerReq.listen)
  return listen_;
}
inline void RegisterToServerReq::set_allocated_listen(::KFMsg::ListenData* listen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete listen_;
  }
  if (listen) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      listen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, listen, submessage_arena);
    }
    
  } else {
    
  }
  listen_ = listen;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.RegisterToServerReq.listen)
}

// -------------------------------------------------------------------

// RegisterToServerAck

// uint64 appid = 1;
inline void RegisterToServerAck::clear_appid() {
  appid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RegisterToServerAck::appid() const {
  // @@protoc_insertion_point(field_get:KFMsg.RegisterToServerAck.appid)
  return appid_;
}
inline void RegisterToServerAck::set_appid(::google::protobuf::uint64 value) {
  
  appid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.RegisterToServerAck.appid)
}

// bytes appname = 2;
inline void RegisterToServerAck::clear_appname() {
  appname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterToServerAck::appname() const {
  // @@protoc_insertion_point(field_get:KFMsg.RegisterToServerAck.appname)
  return appname_.GetNoArena();
}
inline void RegisterToServerAck::set_appname(const ::std::string& value) {
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.RegisterToServerAck.appname)
}
#if LANG_CXX11
inline void RegisterToServerAck::set_appname(::std::string&& value) {
  
  appname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.RegisterToServerAck.appname)
}
#endif
inline void RegisterToServerAck::set_appname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.RegisterToServerAck.appname)
}
inline void RegisterToServerAck::set_appname(const void* value, size_t size) {
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.RegisterToServerAck.appname)
}
inline ::std::string* RegisterToServerAck::mutable_appname() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.RegisterToServerAck.appname)
  return appname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterToServerAck::release_appname() {
  // @@protoc_insertion_point(field_release:KFMsg.RegisterToServerAck.appname)
  
  return appname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterToServerAck::set_allocated_appname(::std::string* appname) {
  if (appname != NULL) {
    
  } else {
    
  }
  appname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appname);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.RegisterToServerAck.appname)
}

// bytes apptype = 3;
inline void RegisterToServerAck::clear_apptype() {
  apptype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterToServerAck::apptype() const {
  // @@protoc_insertion_point(field_get:KFMsg.RegisterToServerAck.apptype)
  return apptype_.GetNoArena();
}
inline void RegisterToServerAck::set_apptype(const ::std::string& value) {
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.RegisterToServerAck.apptype)
}
#if LANG_CXX11
inline void RegisterToServerAck::set_apptype(::std::string&& value) {
  
  apptype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.RegisterToServerAck.apptype)
}
#endif
inline void RegisterToServerAck::set_apptype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.RegisterToServerAck.apptype)
}
inline void RegisterToServerAck::set_apptype(const void* value, size_t size) {
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.RegisterToServerAck.apptype)
}
inline ::std::string* RegisterToServerAck::mutable_apptype() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.RegisterToServerAck.apptype)
  return apptype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterToServerAck::release_apptype() {
  // @@protoc_insertion_point(field_release:KFMsg.RegisterToServerAck.apptype)
  
  return apptype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterToServerAck::set_allocated_apptype(::std::string* apptype) {
  if (apptype != NULL) {
    
  } else {
    
  }
  apptype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apptype);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.RegisterToServerAck.apptype)
}

// -------------------------------------------------------------------

// TellRegisterToServer

// bytes servername = 1;
inline void TellRegisterToServer::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TellRegisterToServer::servername() const {
  // @@protoc_insertion_point(field_get:KFMsg.TellRegisterToServer.servername)
  return servername_.GetNoArena();
}
inline void TellRegisterToServer::set_servername(const ::std::string& value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.TellRegisterToServer.servername)
}
#if LANG_CXX11
inline void TellRegisterToServer::set_servername(::std::string&& value) {
  
  servername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.TellRegisterToServer.servername)
}
#endif
inline void TellRegisterToServer::set_servername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.TellRegisterToServer.servername)
}
inline void TellRegisterToServer::set_servername(const void* value, size_t size) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.TellRegisterToServer.servername)
}
inline ::std::string* TellRegisterToServer::mutable_servername() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.TellRegisterToServer.servername)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TellRegisterToServer::release_servername() {
  // @@protoc_insertion_point(field_release:KFMsg.TellRegisterToServer.servername)
  
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TellRegisterToServer::set_allocated_servername(::std::string* servername) {
  if (servername != NULL) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.TellRegisterToServer.servername)
}

// uint32 serverzoneid = 2;
inline void TellRegisterToServer::clear_serverzoneid() {
  serverzoneid_ = 0u;
}
inline ::google::protobuf::uint32 TellRegisterToServer::serverzoneid() const {
  // @@protoc_insertion_point(field_get:KFMsg.TellRegisterToServer.serverzoneid)
  return serverzoneid_;
}
inline void TellRegisterToServer::set_serverzoneid(::google::protobuf::uint32 value) {
  
  serverzoneid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.TellRegisterToServer.serverzoneid)
}

// .KFMsg.ListenData listen = 3;
inline bool TellRegisterToServer::has_listen() const {
  return this != internal_default_instance() && listen_ != NULL;
}
inline void TellRegisterToServer::clear_listen() {
  if (GetArenaNoVirtual() == NULL && listen_ != NULL) {
    delete listen_;
  }
  listen_ = NULL;
}
inline const ::KFMsg::ListenData& TellRegisterToServer::_internal_listen() const {
  return *listen_;
}
inline const ::KFMsg::ListenData& TellRegisterToServer::listen() const {
  const ::KFMsg::ListenData* p = listen_;
  // @@protoc_insertion_point(field_get:KFMsg.TellRegisterToServer.listen)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::ListenData*>(
      &::KFMsg::_ListenData_default_instance_);
}
inline ::KFMsg::ListenData* TellRegisterToServer::release_listen() {
  // @@protoc_insertion_point(field_release:KFMsg.TellRegisterToServer.listen)
  
  ::KFMsg::ListenData* temp = listen_;
  listen_ = NULL;
  return temp;
}
inline ::KFMsg::ListenData* TellRegisterToServer::mutable_listen() {
  
  if (listen_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::ListenData>(GetArenaNoVirtual());
    listen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.TellRegisterToServer.listen)
  return listen_;
}
inline void TellRegisterToServer::set_allocated_listen(::KFMsg::ListenData* listen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete listen_;
  }
  if (listen) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      listen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, listen, submessage_arena);
    }
    
  } else {
    
  }
  listen_ = listen;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.TellRegisterToServer.listen)
}

// -------------------------------------------------------------------

// TellUnRegisterFromServer

// bytes servername = 1;
inline void TellUnRegisterFromServer::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TellUnRegisterFromServer::servername() const {
  // @@protoc_insertion_point(field_get:KFMsg.TellUnRegisterFromServer.servername)
  return servername_.GetNoArena();
}
inline void TellUnRegisterFromServer::set_servername(const ::std::string& value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.TellUnRegisterFromServer.servername)
}
#if LANG_CXX11
inline void TellUnRegisterFromServer::set_servername(::std::string&& value) {
  
  servername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.TellUnRegisterFromServer.servername)
}
#endif
inline void TellUnRegisterFromServer::set_servername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.TellUnRegisterFromServer.servername)
}
inline void TellUnRegisterFromServer::set_servername(const void* value, size_t size) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.TellUnRegisterFromServer.servername)
}
inline ::std::string* TellUnRegisterFromServer::mutable_servername() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.TellUnRegisterFromServer.servername)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TellUnRegisterFromServer::release_servername() {
  // @@protoc_insertion_point(field_release:KFMsg.TellUnRegisterFromServer.servername)
  
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TellUnRegisterFromServer::set_allocated_servername(::std::string* servername) {
  if (servername != NULL) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.TellUnRegisterFromServer.servername)
}

// uint32 serverzoneid = 2;
inline void TellUnRegisterFromServer::clear_serverzoneid() {
  serverzoneid_ = 0u;
}
inline ::google::protobuf::uint32 TellUnRegisterFromServer::serverzoneid() const {
  // @@protoc_insertion_point(field_get:KFMsg.TellUnRegisterFromServer.serverzoneid)
  return serverzoneid_;
}
inline void TellUnRegisterFromServer::set_serverzoneid(::google::protobuf::uint32 value) {
  
  serverzoneid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.TellUnRegisterFromServer.serverzoneid)
}

// uint64 appid = 3;
inline void TellUnRegisterFromServer::clear_appid() {
  appid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TellUnRegisterFromServer::appid() const {
  // @@protoc_insertion_point(field_get:KFMsg.TellUnRegisterFromServer.appid)
  return appid_;
}
inline void TellUnRegisterFromServer::set_appid(::google::protobuf::uint64 value) {
  
  appid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.TellUnRegisterFromServer.appid)
}

// bytes appname = 4;
inline void TellUnRegisterFromServer::clear_appname() {
  appname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TellUnRegisterFromServer::appname() const {
  // @@protoc_insertion_point(field_get:KFMsg.TellUnRegisterFromServer.appname)
  return appname_.GetNoArena();
}
inline void TellUnRegisterFromServer::set_appname(const ::std::string& value) {
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.TellUnRegisterFromServer.appname)
}
#if LANG_CXX11
inline void TellUnRegisterFromServer::set_appname(::std::string&& value) {
  
  appname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.TellUnRegisterFromServer.appname)
}
#endif
inline void TellUnRegisterFromServer::set_appname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.TellUnRegisterFromServer.appname)
}
inline void TellUnRegisterFromServer::set_appname(const void* value, size_t size) {
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.TellUnRegisterFromServer.appname)
}
inline ::std::string* TellUnRegisterFromServer::mutable_appname() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.TellUnRegisterFromServer.appname)
  return appname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TellUnRegisterFromServer::release_appname() {
  // @@protoc_insertion_point(field_release:KFMsg.TellUnRegisterFromServer.appname)
  
  return appname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TellUnRegisterFromServer::set_allocated_appname(::std::string* appname) {
  if (appname != NULL) {
    
  } else {
    
  }
  appname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appname);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.TellUnRegisterFromServer.appname)
}

// bytes apptype = 5;
inline void TellUnRegisterFromServer::clear_apptype() {
  apptype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TellUnRegisterFromServer::apptype() const {
  // @@protoc_insertion_point(field_get:KFMsg.TellUnRegisterFromServer.apptype)
  return apptype_.GetNoArena();
}
inline void TellUnRegisterFromServer::set_apptype(const ::std::string& value) {
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.TellUnRegisterFromServer.apptype)
}
#if LANG_CXX11
inline void TellUnRegisterFromServer::set_apptype(::std::string&& value) {
  
  apptype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.TellUnRegisterFromServer.apptype)
}
#endif
inline void TellUnRegisterFromServer::set_apptype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.TellUnRegisterFromServer.apptype)
}
inline void TellUnRegisterFromServer::set_apptype(const void* value, size_t size) {
  
  apptype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.TellUnRegisterFromServer.apptype)
}
inline ::std::string* TellUnRegisterFromServer::mutable_apptype() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.TellUnRegisterFromServer.apptype)
  return apptype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TellUnRegisterFromServer::release_apptype() {
  // @@protoc_insertion_point(field_release:KFMsg.TellUnRegisterFromServer.apptype)
  
  return apptype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TellUnRegisterFromServer::set_allocated_apptype(::std::string* apptype) {
  if (apptype != NULL) {
    
  } else {
    
  }
  apptype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apptype);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.TellUnRegisterFromServer.apptype)
}

// uint32 zoneid = 6;
inline void TellUnRegisterFromServer::clear_zoneid() {
  zoneid_ = 0u;
}
inline ::google::protobuf::uint32 TellUnRegisterFromServer::zoneid() const {
  // @@protoc_insertion_point(field_get:KFMsg.TellUnRegisterFromServer.zoneid)
  return zoneid_;
}
inline void TellUnRegisterFromServer::set_zoneid(::google::protobuf::uint32 value) {
  
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.TellUnRegisterFromServer.zoneid)
}

// -------------------------------------------------------------------

// PBRouteZone

// uint32 zoneid = 1;
inline void PBRouteZone::clear_zoneid() {
  zoneid_ = 0u;
}
inline ::google::protobuf::uint32 PBRouteZone::zoneid() const {
  // @@protoc_insertion_point(field_get:KFMsg.PBRouteZone.zoneid)
  return zoneid_;
}
inline void PBRouteZone::set_zoneid(::google::protobuf::uint32 value) {
  
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.PBRouteZone.zoneid)
}

// uint64 serverid = 2;
inline void PBRouteZone::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PBRouteZone::serverid() const {
  // @@protoc_insertion_point(field_get:KFMsg.PBRouteZone.serverid)
  return serverid_;
}
inline void PBRouteZone::set_serverid(::google::protobuf::uint64 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.PBRouteZone.serverid)
}

// -------------------------------------------------------------------

// S2SRegisterRouteZoneReq

// .KFMsg.PBRouteZone zonedata = 1;
inline bool S2SRegisterRouteZoneReq::has_zonedata() const {
  return this != internal_default_instance() && zonedata_ != NULL;
}
inline void S2SRegisterRouteZoneReq::clear_zonedata() {
  if (GetArenaNoVirtual() == NULL && zonedata_ != NULL) {
    delete zonedata_;
  }
  zonedata_ = NULL;
}
inline const ::KFMsg::PBRouteZone& S2SRegisterRouteZoneReq::_internal_zonedata() const {
  return *zonedata_;
}
inline const ::KFMsg::PBRouteZone& S2SRegisterRouteZoneReq::zonedata() const {
  const ::KFMsg::PBRouteZone* p = zonedata_;
  // @@protoc_insertion_point(field_get:KFMsg.S2SRegisterRouteZoneReq.zonedata)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBRouteZone*>(
      &::KFMsg::_PBRouteZone_default_instance_);
}
inline ::KFMsg::PBRouteZone* S2SRegisterRouteZoneReq::release_zonedata() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SRegisterRouteZoneReq.zonedata)
  
  ::KFMsg::PBRouteZone* temp = zonedata_;
  zonedata_ = NULL;
  return temp;
}
inline ::KFMsg::PBRouteZone* S2SRegisterRouteZoneReq::mutable_zonedata() {
  
  if (zonedata_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBRouteZone>(GetArenaNoVirtual());
    zonedata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRegisterRouteZoneReq.zonedata)
  return zonedata_;
}
inline void S2SRegisterRouteZoneReq::set_allocated_zonedata(::KFMsg::PBRouteZone* zonedata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete zonedata_;
  }
  if (zonedata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      zonedata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, zonedata, submessage_arena);
    }
    
  } else {
    
  }
  zonedata_ = zonedata;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SRegisterRouteZoneReq.zonedata)
}

// -------------------------------------------------------------------

// S2SRegisterRouteProxyReq

// repeated .KFMsg.PBRouteZone zonedata = 1;
inline int S2SRegisterRouteProxyReq::zonedata_size() const {
  return zonedata_.size();
}
inline void S2SRegisterRouteProxyReq::clear_zonedata() {
  zonedata_.Clear();
}
inline ::KFMsg::PBRouteZone* S2SRegisterRouteProxyReq::mutable_zonedata(int index) {
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SRegisterRouteProxyReq.zonedata)
  return zonedata_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRouteZone >*
S2SRegisterRouteProxyReq::mutable_zonedata() {
  // @@protoc_insertion_point(field_mutable_list:KFMsg.S2SRegisterRouteProxyReq.zonedata)
  return &zonedata_;
}
inline const ::KFMsg::PBRouteZone& S2SRegisterRouteProxyReq::zonedata(int index) const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRegisterRouteProxyReq.zonedata)
  return zonedata_.Get(index);
}
inline ::KFMsg::PBRouteZone* S2SRegisterRouteProxyReq::add_zonedata() {
  // @@protoc_insertion_point(field_add:KFMsg.S2SRegisterRouteProxyReq.zonedata)
  return zonedata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRouteZone >&
S2SRegisterRouteProxyReq::zonedata() const {
  // @@protoc_insertion_point(field_list:KFMsg.S2SRegisterRouteProxyReq.zonedata)
  return zonedata_;
}

// -------------------------------------------------------------------

// PBTransmitRouteMessage

// uint64 serverid = 2;
inline void PBTransmitRouteMessage::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PBTransmitRouteMessage::serverid() const {
  // @@protoc_insertion_point(field_get:KFMsg.PBTransmitRouteMessage.serverid)
  return serverid_;
}
inline void PBTransmitRouteMessage::set_serverid(::google::protobuf::uint64 value) {
  
  serverid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.PBTransmitRouteMessage.serverid)
}

// uint64 playerid = 3;
inline void PBTransmitRouteMessage::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PBTransmitRouteMessage::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.PBTransmitRouteMessage.playerid)
  return playerid_;
}
inline void PBTransmitRouteMessage::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.PBTransmitRouteMessage.playerid)
}

// uint32 msgid = 4;
inline void PBTransmitRouteMessage::clear_msgid() {
  msgid_ = 0u;
}
inline ::google::protobuf::uint32 PBTransmitRouteMessage::msgid() const {
  // @@protoc_insertion_point(field_get:KFMsg.PBTransmitRouteMessage.msgid)
  return msgid_;
}
inline void PBTransmitRouteMessage::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.PBTransmitRouteMessage.msgid)
}

// bytes msgdata = 5;
inline void PBTransmitRouteMessage::clear_msgdata() {
  msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBTransmitRouteMessage::msgdata() const {
  // @@protoc_insertion_point(field_get:KFMsg.PBTransmitRouteMessage.msgdata)
  return msgdata_.GetNoArena();
}
inline void PBTransmitRouteMessage::set_msgdata(const ::std::string& value) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.PBTransmitRouteMessage.msgdata)
}
#if LANG_CXX11
inline void PBTransmitRouteMessage::set_msgdata(::std::string&& value) {
  
  msgdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.PBTransmitRouteMessage.msgdata)
}
#endif
inline void PBTransmitRouteMessage::set_msgdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.PBTransmitRouteMessage.msgdata)
}
inline void PBTransmitRouteMessage::set_msgdata(const void* value, size_t size) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.PBTransmitRouteMessage.msgdata)
}
inline ::std::string* PBTransmitRouteMessage::mutable_msgdata() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.PBTransmitRouteMessage.msgdata)
  return msgdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBTransmitRouteMessage::release_msgdata() {
  // @@protoc_insertion_point(field_release:KFMsg.PBTransmitRouteMessage.msgdata)
  
  return msgdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBTransmitRouteMessage::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata != NULL) {
    
  } else {
    
  }
  msgdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgdata);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.PBTransmitRouteMessage.msgdata)
}

// -------------------------------------------------------------------

// S2STransmitRouteZoneMessageReq

// .KFMsg.PBTransmitRouteMessage transmitdata = 1;
inline bool S2STransmitRouteZoneMessageReq::has_transmitdata() const {
  return this != internal_default_instance() && transmitdata_ != NULL;
}
inline void S2STransmitRouteZoneMessageReq::clear_transmitdata() {
  if (GetArenaNoVirtual() == NULL && transmitdata_ != NULL) {
    delete transmitdata_;
  }
  transmitdata_ = NULL;
}
inline const ::KFMsg::PBTransmitRouteMessage& S2STransmitRouteZoneMessageReq::_internal_transmitdata() const {
  return *transmitdata_;
}
inline const ::KFMsg::PBTransmitRouteMessage& S2STransmitRouteZoneMessageReq::transmitdata() const {
  const ::KFMsg::PBTransmitRouteMessage* p = transmitdata_;
  // @@protoc_insertion_point(field_get:KFMsg.S2STransmitRouteZoneMessageReq.transmitdata)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBTransmitRouteMessage*>(
      &::KFMsg::_PBTransmitRouteMessage_default_instance_);
}
inline ::KFMsg::PBTransmitRouteMessage* S2STransmitRouteZoneMessageReq::release_transmitdata() {
  // @@protoc_insertion_point(field_release:KFMsg.S2STransmitRouteZoneMessageReq.transmitdata)
  
  ::KFMsg::PBTransmitRouteMessage* temp = transmitdata_;
  transmitdata_ = NULL;
  return temp;
}
inline ::KFMsg::PBTransmitRouteMessage* S2STransmitRouteZoneMessageReq::mutable_transmitdata() {
  
  if (transmitdata_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBTransmitRouteMessage>(GetArenaNoVirtual());
    transmitdata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2STransmitRouteZoneMessageReq.transmitdata)
  return transmitdata_;
}
inline void S2STransmitRouteZoneMessageReq::set_allocated_transmitdata(::KFMsg::PBTransmitRouteMessage* transmitdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transmitdata_;
  }
  if (transmitdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transmitdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transmitdata, submessage_arena);
    }
    
  } else {
    
  }
  transmitdata_ = transmitdata;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2STransmitRouteZoneMessageReq.transmitdata)
}

// -------------------------------------------------------------------

// S2STransmitRouteZoneMessageAck

// .KFMsg.PBTransmitRouteMessage transmitdata = 1;
inline bool S2STransmitRouteZoneMessageAck::has_transmitdata() const {
  return this != internal_default_instance() && transmitdata_ != NULL;
}
inline void S2STransmitRouteZoneMessageAck::clear_transmitdata() {
  if (GetArenaNoVirtual() == NULL && transmitdata_ != NULL) {
    delete transmitdata_;
  }
  transmitdata_ = NULL;
}
inline const ::KFMsg::PBTransmitRouteMessage& S2STransmitRouteZoneMessageAck::_internal_transmitdata() const {
  return *transmitdata_;
}
inline const ::KFMsg::PBTransmitRouteMessage& S2STransmitRouteZoneMessageAck::transmitdata() const {
  const ::KFMsg::PBTransmitRouteMessage* p = transmitdata_;
  // @@protoc_insertion_point(field_get:KFMsg.S2STransmitRouteZoneMessageAck.transmitdata)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBTransmitRouteMessage*>(
      &::KFMsg::_PBTransmitRouteMessage_default_instance_);
}
inline ::KFMsg::PBTransmitRouteMessage* S2STransmitRouteZoneMessageAck::release_transmitdata() {
  // @@protoc_insertion_point(field_release:KFMsg.S2STransmitRouteZoneMessageAck.transmitdata)
  
  ::KFMsg::PBTransmitRouteMessage* temp = transmitdata_;
  transmitdata_ = NULL;
  return temp;
}
inline ::KFMsg::PBTransmitRouteMessage* S2STransmitRouteZoneMessageAck::mutable_transmitdata() {
  
  if (transmitdata_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBTransmitRouteMessage>(GetArenaNoVirtual());
    transmitdata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2STransmitRouteZoneMessageAck.transmitdata)
  return transmitdata_;
}
inline void S2STransmitRouteZoneMessageAck::set_allocated_transmitdata(::KFMsg::PBTransmitRouteMessage* transmitdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transmitdata_;
  }
  if (transmitdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transmitdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transmitdata, submessage_arena);
    }
    
  } else {
    
  }
  transmitdata_ = transmitdata;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2STransmitRouteZoneMessageAck.transmitdata)
}

// -------------------------------------------------------------------

// S2STransmitRouteProxyMessageReq

// .KFMsg.PBTransmitRouteMessage transmitdata = 1;
inline bool S2STransmitRouteProxyMessageReq::has_transmitdata() const {
  return this != internal_default_instance() && transmitdata_ != NULL;
}
inline void S2STransmitRouteProxyMessageReq::clear_transmitdata() {
  if (GetArenaNoVirtual() == NULL && transmitdata_ != NULL) {
    delete transmitdata_;
  }
  transmitdata_ = NULL;
}
inline const ::KFMsg::PBTransmitRouteMessage& S2STransmitRouteProxyMessageReq::_internal_transmitdata() const {
  return *transmitdata_;
}
inline const ::KFMsg::PBTransmitRouteMessage& S2STransmitRouteProxyMessageReq::transmitdata() const {
  const ::KFMsg::PBTransmitRouteMessage* p = transmitdata_;
  // @@protoc_insertion_point(field_get:KFMsg.S2STransmitRouteProxyMessageReq.transmitdata)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBTransmitRouteMessage*>(
      &::KFMsg::_PBTransmitRouteMessage_default_instance_);
}
inline ::KFMsg::PBTransmitRouteMessage* S2STransmitRouteProxyMessageReq::release_transmitdata() {
  // @@protoc_insertion_point(field_release:KFMsg.S2STransmitRouteProxyMessageReq.transmitdata)
  
  ::KFMsg::PBTransmitRouteMessage* temp = transmitdata_;
  transmitdata_ = NULL;
  return temp;
}
inline ::KFMsg::PBTransmitRouteMessage* S2STransmitRouteProxyMessageReq::mutable_transmitdata() {
  
  if (transmitdata_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBTransmitRouteMessage>(GetArenaNoVirtual());
    transmitdata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2STransmitRouteProxyMessageReq.transmitdata)
  return transmitdata_;
}
inline void S2STransmitRouteProxyMessageReq::set_allocated_transmitdata(::KFMsg::PBTransmitRouteMessage* transmitdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transmitdata_;
  }
  if (transmitdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transmitdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transmitdata, submessage_arena);
    }
    
  } else {
    
  }
  transmitdata_ = transmitdata;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2STransmitRouteProxyMessageReq.transmitdata)
}

// -------------------------------------------------------------------

// S2STransmitRouteProxyMessageAck

// .KFMsg.PBTransmitRouteMessage transmitdata = 1;
inline bool S2STransmitRouteProxyMessageAck::has_transmitdata() const {
  return this != internal_default_instance() && transmitdata_ != NULL;
}
inline void S2STransmitRouteProxyMessageAck::clear_transmitdata() {
  if (GetArenaNoVirtual() == NULL && transmitdata_ != NULL) {
    delete transmitdata_;
  }
  transmitdata_ = NULL;
}
inline const ::KFMsg::PBTransmitRouteMessage& S2STransmitRouteProxyMessageAck::_internal_transmitdata() const {
  return *transmitdata_;
}
inline const ::KFMsg::PBTransmitRouteMessage& S2STransmitRouteProxyMessageAck::transmitdata() const {
  const ::KFMsg::PBTransmitRouteMessage* p = transmitdata_;
  // @@protoc_insertion_point(field_get:KFMsg.S2STransmitRouteProxyMessageAck.transmitdata)
  return p != NULL ? *p : *reinterpret_cast<const ::KFMsg::PBTransmitRouteMessage*>(
      &::KFMsg::_PBTransmitRouteMessage_default_instance_);
}
inline ::KFMsg::PBTransmitRouteMessage* S2STransmitRouteProxyMessageAck::release_transmitdata() {
  // @@protoc_insertion_point(field_release:KFMsg.S2STransmitRouteProxyMessageAck.transmitdata)
  
  ::KFMsg::PBTransmitRouteMessage* temp = transmitdata_;
  transmitdata_ = NULL;
  return temp;
}
inline ::KFMsg::PBTransmitRouteMessage* S2STransmitRouteProxyMessageAck::mutable_transmitdata() {
  
  if (transmitdata_ == NULL) {
    auto* p = CreateMaybeMessage<::KFMsg::PBTransmitRouteMessage>(GetArenaNoVirtual());
    transmitdata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:KFMsg.S2STransmitRouteProxyMessageAck.transmitdata)
  return transmitdata_;
}
inline void S2STransmitRouteProxyMessageAck::set_allocated_transmitdata(::KFMsg::PBTransmitRouteMessage* transmitdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transmitdata_;
  }
  if (transmitdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transmitdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transmitdata, submessage_arena);
    }
    
  } else {
    
  }
  transmitdata_ = transmitdata;
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2STransmitRouteProxyMessageAck.transmitdata)
}

// -------------------------------------------------------------------

// S2SLogReq

// uint32 log_level = 1;
inline void S2SLogReq::clear_log_level() {
  log_level_ = 0u;
}
inline ::google::protobuf::uint32 S2SLogReq::log_level() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SLogReq.log_level)
  return log_level_;
}
inline void S2SLogReq::set_log_level(::google::protobuf::uint32 value) {
  
  log_level_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SLogReq.log_level)
}

// uint32 zone_id = 2;
inline void S2SLogReq::clear_zone_id() {
  zone_id_ = 0u;
}
inline ::google::protobuf::uint32 S2SLogReq::zone_id() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SLogReq.zone_id)
  return zone_id_;
}
inline void S2SLogReq::set_zone_id(::google::protobuf::uint32 value) {
  
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SLogReq.zone_id)
}

// bytes app_name = 3;
inline void S2SLogReq::clear_app_name() {
  app_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SLogReq::app_name() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SLogReq.app_name)
  return app_name_.GetNoArena();
}
inline void S2SLogReq::set_app_name(const ::std::string& value) {
  
  app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SLogReq.app_name)
}
#if LANG_CXX11
inline void S2SLogReq::set_app_name(::std::string&& value) {
  
  app_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SLogReq.app_name)
}
#endif
inline void S2SLogReq::set_app_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SLogReq.app_name)
}
inline void S2SLogReq::set_app_name(const void* value, size_t size) {
  
  app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SLogReq.app_name)
}
inline ::std::string* S2SLogReq::mutable_app_name() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SLogReq.app_name)
  return app_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SLogReq::release_app_name() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SLogReq.app_name)
  
  return app_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SLogReq::set_allocated_app_name(::std::string* app_name) {
  if (app_name != NULL) {
    
  } else {
    
  }
  app_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_name);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SLogReq.app_name)
}

// bytes app_type = 4;
inline void S2SLogReq::clear_app_type() {
  app_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SLogReq::app_type() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SLogReq.app_type)
  return app_type_.GetNoArena();
}
inline void S2SLogReq::set_app_type(const ::std::string& value) {
  
  app_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SLogReq.app_type)
}
#if LANG_CXX11
inline void S2SLogReq::set_app_type(::std::string&& value) {
  
  app_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SLogReq.app_type)
}
#endif
inline void S2SLogReq::set_app_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  app_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SLogReq.app_type)
}
inline void S2SLogReq::set_app_type(const void* value, size_t size) {
  
  app_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SLogReq.app_type)
}
inline ::std::string* S2SLogReq::mutable_app_type() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SLogReq.app_type)
  return app_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SLogReq::release_app_type() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SLogReq.app_type)
  
  return app_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SLogReq::set_allocated_app_type(::std::string* app_type) {
  if (app_type != NULL) {
    
  } else {
    
  }
  app_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_type);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SLogReq.app_type)
}

// bytes app_id = 5;
inline void S2SLogReq::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SLogReq::app_id() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SLogReq.app_id)
  return app_id_.GetNoArena();
}
inline void S2SLogReq::set_app_id(const ::std::string& value) {
  
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SLogReq.app_id)
}
#if LANG_CXX11
inline void S2SLogReq::set_app_id(::std::string&& value) {
  
  app_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SLogReq.app_id)
}
#endif
inline void S2SLogReq::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SLogReq.app_id)
}
inline void S2SLogReq::set_app_id(const void* value, size_t size) {
  
  app_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SLogReq.app_id)
}
inline ::std::string* S2SLogReq::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SLogReq.app_id)
  return app_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SLogReq::release_app_id() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SLogReq.app_id)
  
  return app_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SLogReq::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SLogReq.app_id)
}

// bytes log_info = 6;
inline void S2SLogReq::clear_log_info() {
  log_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SLogReq::log_info() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SLogReq.log_info)
  return log_info_.GetNoArena();
}
inline void S2SLogReq::set_log_info(const ::std::string& value) {
  
  log_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SLogReq.log_info)
}
#if LANG_CXX11
inline void S2SLogReq::set_log_info(::std::string&& value) {
  
  log_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SLogReq.log_info)
}
#endif
inline void S2SLogReq::set_log_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  log_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SLogReq.log_info)
}
inline void S2SLogReq::set_log_info(const void* value, size_t size) {
  
  log_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SLogReq.log_info)
}
inline ::std::string* S2SLogReq::mutable_log_info() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SLogReq.log_info)
  return log_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SLogReq::release_log_info() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SLogReq.log_info)
  
  return log_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SLogReq::set_allocated_log_info(::std::string* log_info) {
  if (log_info != NULL) {
    
  } else {
    
  }
  log_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_info);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SLogReq.log_info)
}

// -------------------------------------------------------------------

// S2SUpdateOnlineToDirReq

// uint32 zoneid = 1;
inline void S2SUpdateOnlineToDirReq::clear_zoneid() {
  zoneid_ = 0u;
}
inline ::google::protobuf::uint32 S2SUpdateOnlineToDirReq::zoneid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SUpdateOnlineToDirReq.zoneid)
  return zoneid_;
}
inline void S2SUpdateOnlineToDirReq::set_zoneid(::google::protobuf::uint32 value) {
  
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SUpdateOnlineToDirReq.zoneid)
}

// bytes zonename = 2;
inline void S2SUpdateOnlineToDirReq::clear_zonename() {
  zonename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SUpdateOnlineToDirReq::zonename() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SUpdateOnlineToDirReq.zonename)
  return zonename_.GetNoArena();
}
inline void S2SUpdateOnlineToDirReq::set_zonename(const ::std::string& value) {
  
  zonename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SUpdateOnlineToDirReq.zonename)
}
#if LANG_CXX11
inline void S2SUpdateOnlineToDirReq::set_zonename(::std::string&& value) {
  
  zonename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SUpdateOnlineToDirReq.zonename)
}
#endif
inline void S2SUpdateOnlineToDirReq::set_zonename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zonename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SUpdateOnlineToDirReq.zonename)
}
inline void S2SUpdateOnlineToDirReq::set_zonename(const void* value, size_t size) {
  
  zonename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SUpdateOnlineToDirReq.zonename)
}
inline ::std::string* S2SUpdateOnlineToDirReq::mutable_zonename() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SUpdateOnlineToDirReq.zonename)
  return zonename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SUpdateOnlineToDirReq::release_zonename() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SUpdateOnlineToDirReq.zonename)
  
  return zonename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SUpdateOnlineToDirReq::set_allocated_zonename(::std::string* zonename) {
  if (zonename != NULL) {
    
  } else {
    
  }
  zonename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zonename);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SUpdateOnlineToDirReq.zonename)
}

// uint32 zonechannel = 3;
inline void S2SUpdateOnlineToDirReq::clear_zonechannel() {
  zonechannel_ = 0u;
}
inline ::google::protobuf::uint32 S2SUpdateOnlineToDirReq::zonechannel() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SUpdateOnlineToDirReq.zonechannel)
  return zonechannel_;
}
inline void S2SUpdateOnlineToDirReq::set_zonechannel(::google::protobuf::uint32 value) {
  
  zonechannel_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SUpdateOnlineToDirReq.zonechannel)
}

// uint64 appid = 4;
inline void S2SUpdateOnlineToDirReq::clear_appid() {
  appid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SUpdateOnlineToDirReq::appid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SUpdateOnlineToDirReq.appid)
  return appid_;
}
inline void S2SUpdateOnlineToDirReq::set_appid(::google::protobuf::uint64 value) {
  
  appid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SUpdateOnlineToDirReq.appid)
}

// bytes ip = 5;
inline void S2SUpdateOnlineToDirReq::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SUpdateOnlineToDirReq::ip() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SUpdateOnlineToDirReq.ip)
  return ip_.GetNoArena();
}
inline void S2SUpdateOnlineToDirReq::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SUpdateOnlineToDirReq.ip)
}
#if LANG_CXX11
inline void S2SUpdateOnlineToDirReq::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SUpdateOnlineToDirReq.ip)
}
#endif
inline void S2SUpdateOnlineToDirReq::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SUpdateOnlineToDirReq.ip)
}
inline void S2SUpdateOnlineToDirReq::set_ip(const void* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SUpdateOnlineToDirReq.ip)
}
inline ::std::string* S2SUpdateOnlineToDirReq::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SUpdateOnlineToDirReq.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SUpdateOnlineToDirReq::release_ip() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SUpdateOnlineToDirReq.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SUpdateOnlineToDirReq::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SUpdateOnlineToDirReq.ip)
}

// uint32 port = 6;
inline void S2SUpdateOnlineToDirReq::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 S2SUpdateOnlineToDirReq::port() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SUpdateOnlineToDirReq.port)
  return port_;
}
inline void S2SUpdateOnlineToDirReq::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SUpdateOnlineToDirReq.port)
}

// uint32 onlinecount = 7;
inline void S2SUpdateOnlineToDirReq::clear_onlinecount() {
  onlinecount_ = 0u;
}
inline ::google::protobuf::uint32 S2SUpdateOnlineToDirReq::onlinecount() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SUpdateOnlineToDirReq.onlinecount)
  return onlinecount_;
}
inline void S2SUpdateOnlineToDirReq::set_onlinecount(::google::protobuf::uint32 value) {
  
  onlinecount_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SUpdateOnlineToDirReq.onlinecount)
}

// -------------------------------------------------------------------

// S2SRemoveOnlineToDirReq

// uint64 appid = 1;
inline void S2SRemoveOnlineToDirReq::clear_appid() {
  appid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2SRemoveOnlineToDirReq::appid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SRemoveOnlineToDirReq.appid)
  return appid_;
}
inline void S2SRemoveOnlineToDirReq::set_appid(::google::protobuf::uint64 value) {
  
  appid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SRemoveOnlineToDirReq.appid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::KFMsg::FrameProtocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::FrameProtocol>() {
  return ::KFMsg::FrameProtocol_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_KFFrameMessage_2eproto
