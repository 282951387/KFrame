// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFDataMessage.proto

#ifndef PROTOBUF_KFDataMessage_2eproto__INCLUDED
#define PROTOBUF_KFDataMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace KFMsg {

// Internal implementation detail -- do not call these.
void LIBPROTOC_EXPORT protobuf_AddDesc_KFDataMessage_2eproto();
void protobuf_AssignDesc_KFDataMessage_2eproto();
void protobuf_ShutdownFile_KFDataMessage_2eproto();

class Vector3D;
class PBInt32;
class PBUInt32;
class PBInt64;
class PBUInt64;
class PBDouble;
class PBString;
class PBVector3D;
class PBArray;
class PBObject;
class PBRecord;
class PBRemove;
class PBAgent;
class PBAgents;
class TellUpdateData;
class TellAddData;
class TellRemoveData;

// ===================================================================

class LIBPROTOC_EXPORT Vector3D : public ::google::protobuf::Message {
 public:
  Vector3D();
  virtual ~Vector3D();

  Vector3D(const Vector3D& from);

  inline Vector3D& operator=(const Vector3D& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3D& default_instance();

  void Swap(Vector3D* other);

  // implements Message ----------------------------------------------

  Vector3D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3D& from);
  void MergeFrom(const Vector3D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // optional double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // optional double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);

  // @@protoc_insertion_point(class_scope:KFMsg.Vector3D)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double x_;
  double y_;
  double z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDataMessage_2eproto();
  friend void protobuf_AssignDesc_KFDataMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDataMessage_2eproto();

  void InitAsDefaultInstance();
  static Vector3D* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBInt32 : public ::google::protobuf::Message {
 public:
  PBInt32();
  virtual ~PBInt32();

  PBInt32(const PBInt32& from);

  inline PBInt32& operator=(const PBInt32& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBInt32& default_instance();

  void Swap(PBInt32* other);

  // implements Message ----------------------------------------------

  PBInt32* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBInt32& from);
  void MergeFrom(const PBInt32& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional sint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.PBInt32)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDataMessage_2eproto();
  friend void protobuf_AssignDesc_KFDataMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDataMessage_2eproto();

  void InitAsDefaultInstance();
  static PBInt32* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBUInt32 : public ::google::protobuf::Message {
 public:
  PBUInt32();
  virtual ~PBUInt32();

  PBUInt32(const PBUInt32& from);

  inline PBUInt32& operator=(const PBUInt32& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBUInt32& default_instance();

  void Swap(PBUInt32* other);

  // implements Message ----------------------------------------------

  PBUInt32* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBUInt32& from);
  void MergeFrom(const PBUInt32& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.PBUInt32)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDataMessage_2eproto();
  friend void protobuf_AssignDesc_KFDataMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDataMessage_2eproto();

  void InitAsDefaultInstance();
  static PBUInt32* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBInt64 : public ::google::protobuf::Message {
 public:
  PBInt64();
  virtual ~PBInt64();

  PBInt64(const PBInt64& from);

  inline PBInt64& operator=(const PBInt64& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBInt64& default_instance();

  void Swap(PBInt64* other);

  // implements Message ----------------------------------------------

  PBInt64* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBInt64& from);
  void MergeFrom(const PBInt64& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional sint64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.PBInt64)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int64 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDataMessage_2eproto();
  friend void protobuf_AssignDesc_KFDataMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDataMessage_2eproto();

  void InitAsDefaultInstance();
  static PBInt64* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBUInt64 : public ::google::protobuf::Message {
 public:
  PBUInt64();
  virtual ~PBUInt64();

  PBUInt64(const PBUInt64& from);

  inline PBUInt64& operator=(const PBUInt64& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBUInt64& default_instance();

  void Swap(PBUInt64* other);

  // implements Message ----------------------------------------------

  PBUInt64* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBUInt64& from);
  void MergeFrom(const PBUInt64& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint64 value() const;
  inline void set_value(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:KFMsg.PBUInt64)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint64 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDataMessage_2eproto();
  friend void protobuf_AssignDesc_KFDataMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDataMessage_2eproto();

  void InitAsDefaultInstance();
  static PBUInt64* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBDouble : public ::google::protobuf::Message {
 public:
  PBDouble();
  virtual ~PBDouble();

  PBDouble(const PBDouble& from);

  inline PBDouble& operator=(const PBDouble& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBDouble& default_instance();

  void Swap(PBDouble* other);

  // implements Message ----------------------------------------------

  PBDouble* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBDouble& from);
  void MergeFrom(const PBDouble& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional double value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline double value() const;
  inline void set_value(double value);

  // @@protoc_insertion_point(class_scope:KFMsg.PBDouble)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  double value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDataMessage_2eproto();
  friend void protobuf_AssignDesc_KFDataMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDataMessage_2eproto();

  void InitAsDefaultInstance();
  static PBDouble* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBString : public ::google::protobuf::Message {
 public:
  PBString();
  virtual ~PBString();

  PBString(const PBString& from);

  inline PBString& operator=(const PBString& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBString& default_instance();

  void Swap(PBString* other);

  // implements Message ----------------------------------------------

  PBString* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBString& from);
  void MergeFrom(const PBString& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:KFMsg.PBString)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDataMessage_2eproto();
  friend void protobuf_AssignDesc_KFDataMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDataMessage_2eproto();

  void InitAsDefaultInstance();
  static PBString* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBVector3D : public ::google::protobuf::Message {
 public:
  PBVector3D();
  virtual ~PBVector3D();

  PBVector3D(const PBVector3D& from);

  inline PBVector3D& operator=(const PBVector3D& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBVector3D& default_instance();

  void Swap(PBVector3D* other);

  // implements Message ----------------------------------------------

  PBVector3D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBVector3D& from);
  void MergeFrom(const PBVector3D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .KFMsg.Vector3D value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::KFMsg::Vector3D& value() const;
  inline ::KFMsg::Vector3D* mutable_value();
  inline ::KFMsg::Vector3D* release_value();
  inline void set_allocated_value(::KFMsg::Vector3D* value);

  // @@protoc_insertion_point(class_scope:KFMsg.PBVector3D)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::KFMsg::Vector3D* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDataMessage_2eproto();
  friend void protobuf_AssignDesc_KFDataMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDataMessage_2eproto();

  void InitAsDefaultInstance();
  static PBVector3D* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBArray : public ::google::protobuf::Message {
 public:
  PBArray();
  virtual ~PBArray();

  PBArray(const PBArray& from);

  inline PBArray& operator=(const PBArray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBArray& default_instance();

  void Swap(PBArray* other);

  // implements Message ----------------------------------------------

  PBArray* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBArray& from);
  void MergeFrom(const PBArray& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated sint32 pbint32 = 2;
  inline int pbint32_size() const;
  inline void clear_pbint32();
  static const int kPbint32FieldNumber = 2;
  inline ::google::protobuf::int32 pbint32(int index) const;
  inline void set_pbint32(int index, ::google::protobuf::int32 value);
  inline void add_pbint32(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pbint32() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pbint32();

  // repeated uint32 pbuint32 = 3;
  inline int pbuint32_size() const;
  inline void clear_pbuint32();
  static const int kPbuint32FieldNumber = 3;
  inline ::google::protobuf::uint32 pbuint32(int index) const;
  inline void set_pbuint32(int index, ::google::protobuf::uint32 value);
  inline void add_pbuint32(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pbuint32() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pbuint32();

  // repeated sint64 pbint64 = 4;
  inline int pbint64_size() const;
  inline void clear_pbint64();
  static const int kPbint64FieldNumber = 4;
  inline ::google::protobuf::int64 pbint64(int index) const;
  inline void set_pbint64(int index, ::google::protobuf::int64 value);
  inline void add_pbint64(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      pbint64() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_pbint64();

  // repeated uint64 pbuint64 = 5;
  inline int pbuint64_size() const;
  inline void clear_pbuint64();
  static const int kPbuint64FieldNumber = 5;
  inline ::google::protobuf::uint64 pbuint64(int index) const;
  inline void set_pbuint64(int index, ::google::protobuf::uint64 value);
  inline void add_pbuint64(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      pbuint64() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_pbuint64();

  // repeated double pbdouble = 6;
  inline int pbdouble_size() const;
  inline void clear_pbdouble();
  static const int kPbdoubleFieldNumber = 6;
  inline double pbdouble(int index) const;
  inline void set_pbdouble(int index, double value);
  inline void add_pbdouble(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      pbdouble() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_pbdouble();

  // repeated string pbstring = 7;
  inline int pbstring_size() const;
  inline void clear_pbstring();
  static const int kPbstringFieldNumber = 7;
  inline const ::std::string& pbstring(int index) const;
  inline ::std::string* mutable_pbstring(int index);
  inline void set_pbstring(int index, const ::std::string& value);
  inline void set_pbstring(int index, const char* value);
  inline void set_pbstring(int index, const char* value, size_t size);
  inline ::std::string* add_pbstring();
  inline void add_pbstring(const ::std::string& value);
  inline void add_pbstring(const char* value);
  inline void add_pbstring(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& pbstring() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pbstring();

  // repeated .KFMsg.Vector3D pbvector3d = 8;
  inline int pbvector3d_size() const;
  inline void clear_pbvector3d();
  static const int kPbvector3DFieldNumber = 8;
  inline const ::KFMsg::Vector3D& pbvector3d(int index) const;
  inline ::KFMsg::Vector3D* mutable_pbvector3d(int index);
  inline ::KFMsg::Vector3D* add_pbvector3d();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::Vector3D >&
      pbvector3d() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::Vector3D >*
      mutable_pbvector3d();

  // @@protoc_insertion_point(class_scope:KFMsg.PBArray)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pbint32_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pbuint32_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > pbint64_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > pbuint64_;
  ::google::protobuf::RepeatedField< double > pbdouble_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pbstring_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::Vector3D > pbvector3d_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDataMessage_2eproto();
  friend void protobuf_AssignDesc_KFDataMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDataMessage_2eproto();

  void InitAsDefaultInstance();
  static PBArray* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBObject : public ::google::protobuf::Message {
 public:
  PBObject();
  virtual ~PBObject();

  PBObject(const PBObject& from);

  inline PBObject& operator=(const PBObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBObject& default_instance();

  void Swap(PBObject* other);

  // implements Message ----------------------------------------------

  PBObject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBObject& from);
  void MergeFrom(const PBObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .KFMsg.PBInt32 pbint32 = 2;
  inline int pbint32_size() const;
  inline void clear_pbint32();
  static const int kPbint32FieldNumber = 2;
  inline const ::KFMsg::PBInt32& pbint32(int index) const;
  inline ::KFMsg::PBInt32* mutable_pbint32(int index);
  inline ::KFMsg::PBInt32* add_pbint32();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBInt32 >&
      pbint32() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBInt32 >*
      mutable_pbint32();

  // repeated .KFMsg.PBUInt32 pbuint32 = 3;
  inline int pbuint32_size() const;
  inline void clear_pbuint32();
  static const int kPbuint32FieldNumber = 3;
  inline const ::KFMsg::PBUInt32& pbuint32(int index) const;
  inline ::KFMsg::PBUInt32* mutable_pbuint32(int index);
  inline ::KFMsg::PBUInt32* add_pbuint32();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt32 >&
      pbuint32() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt32 >*
      mutable_pbuint32();

  // repeated .KFMsg.PBInt64 pbint64 = 4;
  inline int pbint64_size() const;
  inline void clear_pbint64();
  static const int kPbint64FieldNumber = 4;
  inline const ::KFMsg::PBInt64& pbint64(int index) const;
  inline ::KFMsg::PBInt64* mutable_pbint64(int index);
  inline ::KFMsg::PBInt64* add_pbint64();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBInt64 >&
      pbint64() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBInt64 >*
      mutable_pbint64();

  // repeated .KFMsg.PBUInt64 pbuint64 = 5;
  inline int pbuint64_size() const;
  inline void clear_pbuint64();
  static const int kPbuint64FieldNumber = 5;
  inline const ::KFMsg::PBUInt64& pbuint64(int index) const;
  inline ::KFMsg::PBUInt64* mutable_pbuint64(int index);
  inline ::KFMsg::PBUInt64* add_pbuint64();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt64 >&
      pbuint64() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt64 >*
      mutable_pbuint64();

  // repeated .KFMsg.PBDouble pbdouble = 6;
  inline int pbdouble_size() const;
  inline void clear_pbdouble();
  static const int kPbdoubleFieldNumber = 6;
  inline const ::KFMsg::PBDouble& pbdouble(int index) const;
  inline ::KFMsg::PBDouble* mutable_pbdouble(int index);
  inline ::KFMsg::PBDouble* add_pbdouble();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBDouble >&
      pbdouble() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBDouble >*
      mutable_pbdouble();

  // repeated .KFMsg.PBString pbstring = 7;
  inline int pbstring_size() const;
  inline void clear_pbstring();
  static const int kPbstringFieldNumber = 7;
  inline const ::KFMsg::PBString& pbstring(int index) const;
  inline ::KFMsg::PBString* mutable_pbstring(int index);
  inline ::KFMsg::PBString* add_pbstring();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >&
      pbstring() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >*
      mutable_pbstring();

  // repeated .KFMsg.PBVector3D pbvector3d = 8;
  inline int pbvector3d_size() const;
  inline void clear_pbvector3d();
  static const int kPbvector3DFieldNumber = 8;
  inline const ::KFMsg::PBVector3D& pbvector3d(int index) const;
  inline ::KFMsg::PBVector3D* mutable_pbvector3d(int index);
  inline ::KFMsg::PBVector3D* add_pbvector3d();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBVector3D >&
      pbvector3d() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBVector3D >*
      mutable_pbvector3d();

  // repeated .KFMsg.PBArray pbarray = 9;
  inline int pbarray_size() const;
  inline void clear_pbarray();
  static const int kPbarrayFieldNumber = 9;
  inline const ::KFMsg::PBArray& pbarray(int index) const;
  inline ::KFMsg::PBArray* mutable_pbarray(int index);
  inline ::KFMsg::PBArray* add_pbarray();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBArray >&
      pbarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBArray >*
      mutable_pbarray();

  // repeated .KFMsg.PBObject pbobject = 10;
  inline int pbobject_size() const;
  inline void clear_pbobject();
  static const int kPbobjectFieldNumber = 10;
  inline const ::KFMsg::PBObject& pbobject(int index) const;
  inline ::KFMsg::PBObject* mutable_pbobject(int index);
  inline ::KFMsg::PBObject* add_pbobject();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBObject >&
      pbobject() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBObject >*
      mutable_pbobject();

  // repeated .KFMsg.PBRecord pbrecord = 11;
  inline int pbrecord_size() const;
  inline void clear_pbrecord();
  static const int kPbrecordFieldNumber = 11;
  inline const ::KFMsg::PBRecord& pbrecord(int index) const;
  inline ::KFMsg::PBRecord* mutable_pbrecord(int index);
  inline ::KFMsg::PBRecord* add_pbrecord();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRecord >&
      pbrecord() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRecord >*
      mutable_pbrecord();

  // @@protoc_insertion_point(class_scope:KFMsg.PBObject)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBInt32 > pbint32_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt32 > pbuint32_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBInt64 > pbint64_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt64 > pbuint64_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBDouble > pbdouble_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString > pbstring_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBVector3D > pbvector3d_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBArray > pbarray_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBObject > pbobject_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRecord > pbrecord_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDataMessage_2eproto();
  friend void protobuf_AssignDesc_KFDataMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDataMessage_2eproto();

  void InitAsDefaultInstance();
  static PBObject* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBRecord : public ::google::protobuf::Message {
 public:
  PBRecord();
  virtual ~PBRecord();

  PBRecord(const PBRecord& from);

  inline PBRecord& operator=(const PBRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRecord& default_instance();

  void Swap(PBRecord* other);

  // implements Message ----------------------------------------------

  PBRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRecord& from);
  void MergeFrom(const PBRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .KFMsg.PBObject pbobject = 2;
  inline int pbobject_size() const;
  inline void clear_pbobject();
  static const int kPbobjectFieldNumber = 2;
  inline const ::KFMsg::PBObject& pbobject(int index) const;
  inline ::KFMsg::PBObject* mutable_pbobject(int index);
  inline ::KFMsg::PBObject* add_pbobject();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBObject >&
      pbobject() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBObject >*
      mutable_pbobject();

  // @@protoc_insertion_point(class_scope:KFMsg.PBRecord)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBObject > pbobject_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDataMessage_2eproto();
  friend void protobuf_AssignDesc_KFDataMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDataMessage_2eproto();

  void InitAsDefaultInstance();
  static PBRecord* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBRemove : public ::google::protobuf::Message {
 public:
  PBRemove();
  virtual ~PBRemove();

  PBRemove(const PBRemove& from);

  inline PBRemove& operator=(const PBRemove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRemove& default_instance();

  void Swap(PBRemove* other);

  // implements Message ----------------------------------------------

  PBRemove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRemove& from);
  void MergeFrom(const PBRemove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .KFMsg.PBUInt64 keyvalue = 1;
  inline bool has_keyvalue() const;
  inline void clear_keyvalue();
  static const int kKeyvalueFieldNumber = 1;
  inline const ::KFMsg::PBUInt64& keyvalue() const;
  inline ::KFMsg::PBUInt64* mutable_keyvalue();
  inline ::KFMsg::PBUInt64* release_keyvalue();
  inline void set_allocated_keyvalue(::KFMsg::PBUInt64* keyvalue);

  // optional .KFMsg.PBRemove childdata = 2;
  inline bool has_childdata() const;
  inline void clear_childdata();
  static const int kChilddataFieldNumber = 2;
  inline const ::KFMsg::PBRemove& childdata() const;
  inline ::KFMsg::PBRemove* mutable_childdata();
  inline ::KFMsg::PBRemove* release_childdata();
  inline void set_allocated_childdata(::KFMsg::PBRemove* childdata);

  // @@protoc_insertion_point(class_scope:KFMsg.PBRemove)
 private:
  inline void set_has_keyvalue();
  inline void clear_has_keyvalue();
  inline void set_has_childdata();
  inline void clear_has_childdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::PBUInt64* keyvalue_;
  ::KFMsg::PBRemove* childdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDataMessage_2eproto();
  friend void protobuf_AssignDesc_KFDataMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDataMessage_2eproto();

  void InitAsDefaultInstance();
  static PBRemove* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBAgent : public ::google::protobuf::Message {
 public:
  PBAgent();
  virtual ~PBAgent();

  PBAgent(const PBAgent& from);

  inline PBAgent& operator=(const PBAgent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBAgent& default_instance();

  void Swap(PBAgent* other);

  // implements Message ----------------------------------------------

  PBAgent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBAgent& from);
  void MergeFrom(const PBAgent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string dataname = 1;
  inline bool has_dataname() const;
  inline void clear_dataname();
  static const int kDatanameFieldNumber = 1;
  inline const ::std::string& dataname() const;
  inline void set_dataname(const ::std::string& value);
  inline void set_dataname(const char* value);
  inline void set_dataname(const char* value, size_t size);
  inline ::std::string* mutable_dataname();
  inline ::std::string* release_dataname();
  inline void set_allocated_dataname(::std::string* dataname);

  // required uint32 key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline ::google::protobuf::uint32 key() const;
  inline void set_key(::google::protobuf::uint32 value);

  // repeated .KFMsg.PBUInt32 pbuint32 = 3;
  inline int pbuint32_size() const;
  inline void clear_pbuint32();
  static const int kPbuint32FieldNumber = 3;
  inline const ::KFMsg::PBUInt32& pbuint32(int index) const;
  inline ::KFMsg::PBUInt32* mutable_pbuint32(int index);
  inline ::KFMsg::PBUInt32* add_pbuint32();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt32 >&
      pbuint32() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt32 >*
      mutable_pbuint32();

  // @@protoc_insertion_point(class_scope:KFMsg.PBAgent)
 private:
  inline void set_has_dataname();
  inline void clear_has_dataname();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* dataname_;
  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt32 > pbuint32_;
  ::google::protobuf::uint32 key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDataMessage_2eproto();
  friend void protobuf_AssignDesc_KFDataMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDataMessage_2eproto();

  void InitAsDefaultInstance();
  static PBAgent* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PBAgents : public ::google::protobuf::Message {
 public:
  PBAgents();
  virtual ~PBAgents();

  PBAgents(const PBAgents& from);

  inline PBAgents& operator=(const PBAgents& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBAgents& default_instance();

  void Swap(PBAgents* other);

  // implements Message ----------------------------------------------

  PBAgents* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBAgents& from);
  void MergeFrom(const PBAgents& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .KFMsg.PBAgent agent = 1;
  inline int agent_size() const;
  inline void clear_agent();
  static const int kAgentFieldNumber = 1;
  inline const ::KFMsg::PBAgent& agent(int index) const;
  inline ::KFMsg::PBAgent* mutable_agent(int index);
  inline ::KFMsg::PBAgent* add_agent();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBAgent >&
      agent() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBAgent >*
      mutable_agent();

  // @@protoc_insertion_point(class_scope:KFMsg.PBAgents)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBAgent > agent_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDataMessage_2eproto();
  friend void protobuf_AssignDesc_KFDataMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDataMessage_2eproto();

  void InitAsDefaultInstance();
  static PBAgents* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT TellUpdateData : public ::google::protobuf::Message {
 public:
  TellUpdateData();
  virtual ~TellUpdateData();

  TellUpdateData(const TellUpdateData& from);

  inline TellUpdateData& operator=(const TellUpdateData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TellUpdateData& default_instance();

  void Swap(TellUpdateData* other);

  // implements Message ----------------------------------------------

  TellUpdateData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TellUpdateData& from);
  void MergeFrom(const TellUpdateData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .KFMsg.PBObject pbobject = 1;
  inline bool has_pbobject() const;
  inline void clear_pbobject();
  static const int kPbobjectFieldNumber = 1;
  inline const ::KFMsg::PBObject& pbobject() const;
  inline ::KFMsg::PBObject* mutable_pbobject();
  inline ::KFMsg::PBObject* release_pbobject();
  inline void set_allocated_pbobject(::KFMsg::PBObject* pbobject);

  // @@protoc_insertion_point(class_scope:KFMsg.TellUpdateData)
 private:
  inline void set_has_pbobject();
  inline void clear_has_pbobject();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::PBObject* pbobject_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDataMessage_2eproto();
  friend void protobuf_AssignDesc_KFDataMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDataMessage_2eproto();

  void InitAsDefaultInstance();
  static TellUpdateData* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT TellAddData : public ::google::protobuf::Message {
 public:
  TellAddData();
  virtual ~TellAddData();

  TellAddData(const TellAddData& from);

  inline TellAddData& operator=(const TellAddData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TellAddData& default_instance();

  void Swap(TellAddData* other);

  // implements Message ----------------------------------------------

  TellAddData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TellAddData& from);
  void MergeFrom(const TellAddData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .KFMsg.PBObject pbobject = 1;
  inline bool has_pbobject() const;
  inline void clear_pbobject();
  static const int kPbobjectFieldNumber = 1;
  inline const ::KFMsg::PBObject& pbobject() const;
  inline ::KFMsg::PBObject* mutable_pbobject();
  inline ::KFMsg::PBObject* release_pbobject();
  inline void set_allocated_pbobject(::KFMsg::PBObject* pbobject);

  // @@protoc_insertion_point(class_scope:KFMsg.TellAddData)
 private:
  inline void set_has_pbobject();
  inline void clear_has_pbobject();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::PBObject* pbobject_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDataMessage_2eproto();
  friend void protobuf_AssignDesc_KFDataMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDataMessage_2eproto();

  void InitAsDefaultInstance();
  static TellAddData* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT TellRemoveData : public ::google::protobuf::Message {
 public:
  TellRemoveData();
  virtual ~TellRemoveData();

  TellRemoveData(const TellRemoveData& from);

  inline TellRemoveData& operator=(const TellRemoveData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TellRemoveData& default_instance();

  void Swap(TellRemoveData* other);

  // implements Message ----------------------------------------------

  TellRemoveData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TellRemoveData& from);
  void MergeFrom(const TellRemoveData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .KFMsg.PBRemove remove = 1;
  inline int remove_size() const;
  inline void clear_remove();
  static const int kRemoveFieldNumber = 1;
  inline const ::KFMsg::PBRemove& remove(int index) const;
  inline ::KFMsg::PBRemove* mutable_remove(int index);
  inline ::KFMsg::PBRemove* add_remove();
  inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRemove >&
      remove() const;
  inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRemove >*
      mutable_remove();

  // @@protoc_insertion_point(class_scope:KFMsg.TellRemoveData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRemove > remove_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFDataMessage_2eproto();
  friend void protobuf_AssignDesc_KFDataMessage_2eproto();
  friend void protobuf_ShutdownFile_KFDataMessage_2eproto();

  void InitAsDefaultInstance();
  static TellRemoveData* default_instance_;
};
// ===================================================================


// ===================================================================

// Vector3D

// optional double x = 1;
inline bool Vector3D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector3D::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Vector3D::x() const {
  return x_;
}
inline void Vector3D::set_x(double value) {
  set_has_x();
  x_ = value;
}

// optional double y = 2;
inline bool Vector3D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector3D::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Vector3D::y() const {
  return y_;
}
inline void Vector3D::set_y(double value) {
  set_has_y();
  y_ = value;
}

// optional double z = 3;
inline bool Vector3D::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector3D::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector3D::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector3D::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Vector3D::z() const {
  return z_;
}
inline void Vector3D::set_z(double value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// PBInt32

// optional string name = 1;
inline bool PBInt32::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBInt32::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBInt32::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBInt32::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PBInt32::name() const {
  return *name_;
}
inline void PBInt32::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBInt32::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBInt32::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBInt32::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PBInt32::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBInt32::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint32 value = 2;
inline bool PBInt32::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBInt32::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBInt32::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBInt32::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 PBInt32::value() const {
  return value_;
}
inline void PBInt32::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// PBUInt32

// optional string name = 1;
inline bool PBUInt32::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBUInt32::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBUInt32::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBUInt32::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PBUInt32::name() const {
  return *name_;
}
inline void PBUInt32::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBUInt32::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBUInt32::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBUInt32::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PBUInt32::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBUInt32::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 value = 2;
inline bool PBUInt32::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBUInt32::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBUInt32::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBUInt32::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 PBUInt32::value() const {
  return value_;
}
inline void PBUInt32::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// PBInt64

// optional string name = 1;
inline bool PBInt64::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBInt64::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBInt64::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBInt64::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PBInt64::name() const {
  return *name_;
}
inline void PBInt64::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBInt64::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBInt64::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBInt64::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PBInt64::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBInt64::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint64 value = 2;
inline bool PBInt64::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBInt64::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBInt64::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBInt64::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 PBInt64::value() const {
  return value_;
}
inline void PBInt64::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// PBUInt64

// optional string name = 1;
inline bool PBUInt64::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBUInt64::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBUInt64::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBUInt64::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PBUInt64::name() const {
  return *name_;
}
inline void PBUInt64::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBUInt64::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBUInt64::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBUInt64::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PBUInt64::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBUInt64::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 value = 2;
inline bool PBUInt64::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBUInt64::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBUInt64::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBUInt64::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 PBUInt64::value() const {
  return value_;
}
inline void PBUInt64::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// PBDouble

// optional string name = 1;
inline bool PBDouble::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBDouble::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBDouble::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBDouble::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PBDouble::name() const {
  return *name_;
}
inline void PBDouble::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBDouble::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBDouble::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBDouble::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PBDouble::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBDouble::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional double value = 2;
inline bool PBDouble::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBDouble::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBDouble::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBDouble::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double PBDouble::value() const {
  return value_;
}
inline void PBDouble::set_value(double value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// PBString

// optional string name = 1;
inline bool PBString::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBString::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBString::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBString::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PBString::name() const {
  return *name_;
}
inline void PBString::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBString::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBString::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBString::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PBString::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBString::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string value = 2;
inline bool PBString::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBString::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBString::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBString::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& PBString::value() const {
  return *value_;
}
inline void PBString::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void PBString::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void PBString::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBString::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* PBString::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBString::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PBVector3D

// optional string name = 1;
inline bool PBVector3D::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBVector3D::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBVector3D::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBVector3D::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PBVector3D::name() const {
  return *name_;
}
inline void PBVector3D::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBVector3D::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBVector3D::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBVector3D::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PBVector3D::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBVector3D::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .KFMsg.Vector3D value = 2;
inline bool PBVector3D::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBVector3D::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBVector3D::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBVector3D::clear_value() {
  if (value_ != NULL) value_->::KFMsg::Vector3D::Clear();
  clear_has_value();
}
inline const ::KFMsg::Vector3D& PBVector3D::value() const {
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::KFMsg::Vector3D* PBVector3D::mutable_value() {
  set_has_value();
  if (value_ == NULL) value_ = new ::KFMsg::Vector3D;
  return value_;
}
inline ::KFMsg::Vector3D* PBVector3D::release_value() {
  clear_has_value();
  ::KFMsg::Vector3D* temp = value_;
  value_ = NULL;
  return temp;
}
inline void PBVector3D::set_allocated_value(::KFMsg::Vector3D* value) {
  delete value_;
  value_ = value;
  if (value) {
    set_has_value();
  } else {
    clear_has_value();
  }
}

// -------------------------------------------------------------------

// PBArray

// optional string name = 1;
inline bool PBArray::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBArray::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBArray::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBArray::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PBArray::name() const {
  return *name_;
}
inline void PBArray::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBArray::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBArray::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBArray::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PBArray::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBArray::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated sint32 pbint32 = 2;
inline int PBArray::pbint32_size() const {
  return pbint32_.size();
}
inline void PBArray::clear_pbint32() {
  pbint32_.Clear();
}
inline ::google::protobuf::int32 PBArray::pbint32(int index) const {
  return pbint32_.Get(index);
}
inline void PBArray::set_pbint32(int index, ::google::protobuf::int32 value) {
  pbint32_.Set(index, value);
}
inline void PBArray::add_pbint32(::google::protobuf::int32 value) {
  pbint32_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PBArray::pbint32() const {
  return pbint32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PBArray::mutable_pbint32() {
  return &pbint32_;
}

// repeated uint32 pbuint32 = 3;
inline int PBArray::pbuint32_size() const {
  return pbuint32_.size();
}
inline void PBArray::clear_pbuint32() {
  pbuint32_.Clear();
}
inline ::google::protobuf::uint32 PBArray::pbuint32(int index) const {
  return pbuint32_.Get(index);
}
inline void PBArray::set_pbuint32(int index, ::google::protobuf::uint32 value) {
  pbuint32_.Set(index, value);
}
inline void PBArray::add_pbuint32(::google::protobuf::uint32 value) {
  pbuint32_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PBArray::pbuint32() const {
  return pbuint32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PBArray::mutable_pbuint32() {
  return &pbuint32_;
}

// repeated sint64 pbint64 = 4;
inline int PBArray::pbint64_size() const {
  return pbint64_.size();
}
inline void PBArray::clear_pbint64() {
  pbint64_.Clear();
}
inline ::google::protobuf::int64 PBArray::pbint64(int index) const {
  return pbint64_.Get(index);
}
inline void PBArray::set_pbint64(int index, ::google::protobuf::int64 value) {
  pbint64_.Set(index, value);
}
inline void PBArray::add_pbint64(::google::protobuf::int64 value) {
  pbint64_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
PBArray::pbint64() const {
  return pbint64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
PBArray::mutable_pbint64() {
  return &pbint64_;
}

// repeated uint64 pbuint64 = 5;
inline int PBArray::pbuint64_size() const {
  return pbuint64_.size();
}
inline void PBArray::clear_pbuint64() {
  pbuint64_.Clear();
}
inline ::google::protobuf::uint64 PBArray::pbuint64(int index) const {
  return pbuint64_.Get(index);
}
inline void PBArray::set_pbuint64(int index, ::google::protobuf::uint64 value) {
  pbuint64_.Set(index, value);
}
inline void PBArray::add_pbuint64(::google::protobuf::uint64 value) {
  pbuint64_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
PBArray::pbuint64() const {
  return pbuint64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
PBArray::mutable_pbuint64() {
  return &pbuint64_;
}

// repeated double pbdouble = 6;
inline int PBArray::pbdouble_size() const {
  return pbdouble_.size();
}
inline void PBArray::clear_pbdouble() {
  pbdouble_.Clear();
}
inline double PBArray::pbdouble(int index) const {
  return pbdouble_.Get(index);
}
inline void PBArray::set_pbdouble(int index, double value) {
  pbdouble_.Set(index, value);
}
inline void PBArray::add_pbdouble(double value) {
  pbdouble_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
PBArray::pbdouble() const {
  return pbdouble_;
}
inline ::google::protobuf::RepeatedField< double >*
PBArray::mutable_pbdouble() {
  return &pbdouble_;
}

// repeated string pbstring = 7;
inline int PBArray::pbstring_size() const {
  return pbstring_.size();
}
inline void PBArray::clear_pbstring() {
  pbstring_.Clear();
}
inline const ::std::string& PBArray::pbstring(int index) const {
  return pbstring_.Get(index);
}
inline ::std::string* PBArray::mutable_pbstring(int index) {
  return pbstring_.Mutable(index);
}
inline void PBArray::set_pbstring(int index, const ::std::string& value) {
  pbstring_.Mutable(index)->assign(value);
}
inline void PBArray::set_pbstring(int index, const char* value) {
  pbstring_.Mutable(index)->assign(value);
}
inline void PBArray::set_pbstring(int index, const char* value, size_t size) {
  pbstring_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBArray::add_pbstring() {
  return pbstring_.Add();
}
inline void PBArray::add_pbstring(const ::std::string& value) {
  pbstring_.Add()->assign(value);
}
inline void PBArray::add_pbstring(const char* value) {
  pbstring_.Add()->assign(value);
}
inline void PBArray::add_pbstring(const char* value, size_t size) {
  pbstring_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PBArray::pbstring() const {
  return pbstring_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PBArray::mutable_pbstring() {
  return &pbstring_;
}

// repeated .KFMsg.Vector3D pbvector3d = 8;
inline int PBArray::pbvector3d_size() const {
  return pbvector3d_.size();
}
inline void PBArray::clear_pbvector3d() {
  pbvector3d_.Clear();
}
inline const ::KFMsg::Vector3D& PBArray::pbvector3d(int index) const {
  return pbvector3d_.Get(index);
}
inline ::KFMsg::Vector3D* PBArray::mutable_pbvector3d(int index) {
  return pbvector3d_.Mutable(index);
}
inline ::KFMsg::Vector3D* PBArray::add_pbvector3d() {
  return pbvector3d_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::Vector3D >&
PBArray::pbvector3d() const {
  return pbvector3d_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::Vector3D >*
PBArray::mutable_pbvector3d() {
  return &pbvector3d_;
}

// -------------------------------------------------------------------

// PBObject

// optional string name = 1;
inline bool PBObject::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBObject::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBObject::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBObject::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PBObject::name() const {
  return *name_;
}
inline void PBObject::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBObject::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBObject::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBObject::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PBObject::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBObject::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .KFMsg.PBInt32 pbint32 = 2;
inline int PBObject::pbint32_size() const {
  return pbint32_.size();
}
inline void PBObject::clear_pbint32() {
  pbint32_.Clear();
}
inline const ::KFMsg::PBInt32& PBObject::pbint32(int index) const {
  return pbint32_.Get(index);
}
inline ::KFMsg::PBInt32* PBObject::mutable_pbint32(int index) {
  return pbint32_.Mutable(index);
}
inline ::KFMsg::PBInt32* PBObject::add_pbint32() {
  return pbint32_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBInt32 >&
PBObject::pbint32() const {
  return pbint32_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBInt32 >*
PBObject::mutable_pbint32() {
  return &pbint32_;
}

// repeated .KFMsg.PBUInt32 pbuint32 = 3;
inline int PBObject::pbuint32_size() const {
  return pbuint32_.size();
}
inline void PBObject::clear_pbuint32() {
  pbuint32_.Clear();
}
inline const ::KFMsg::PBUInt32& PBObject::pbuint32(int index) const {
  return pbuint32_.Get(index);
}
inline ::KFMsg::PBUInt32* PBObject::mutable_pbuint32(int index) {
  return pbuint32_.Mutable(index);
}
inline ::KFMsg::PBUInt32* PBObject::add_pbuint32() {
  return pbuint32_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt32 >&
PBObject::pbuint32() const {
  return pbuint32_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt32 >*
PBObject::mutable_pbuint32() {
  return &pbuint32_;
}

// repeated .KFMsg.PBInt64 pbint64 = 4;
inline int PBObject::pbint64_size() const {
  return pbint64_.size();
}
inline void PBObject::clear_pbint64() {
  pbint64_.Clear();
}
inline const ::KFMsg::PBInt64& PBObject::pbint64(int index) const {
  return pbint64_.Get(index);
}
inline ::KFMsg::PBInt64* PBObject::mutable_pbint64(int index) {
  return pbint64_.Mutable(index);
}
inline ::KFMsg::PBInt64* PBObject::add_pbint64() {
  return pbint64_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBInt64 >&
PBObject::pbint64() const {
  return pbint64_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBInt64 >*
PBObject::mutable_pbint64() {
  return &pbint64_;
}

// repeated .KFMsg.PBUInt64 pbuint64 = 5;
inline int PBObject::pbuint64_size() const {
  return pbuint64_.size();
}
inline void PBObject::clear_pbuint64() {
  pbuint64_.Clear();
}
inline const ::KFMsg::PBUInt64& PBObject::pbuint64(int index) const {
  return pbuint64_.Get(index);
}
inline ::KFMsg::PBUInt64* PBObject::mutable_pbuint64(int index) {
  return pbuint64_.Mutable(index);
}
inline ::KFMsg::PBUInt64* PBObject::add_pbuint64() {
  return pbuint64_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt64 >&
PBObject::pbuint64() const {
  return pbuint64_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt64 >*
PBObject::mutable_pbuint64() {
  return &pbuint64_;
}

// repeated .KFMsg.PBDouble pbdouble = 6;
inline int PBObject::pbdouble_size() const {
  return pbdouble_.size();
}
inline void PBObject::clear_pbdouble() {
  pbdouble_.Clear();
}
inline const ::KFMsg::PBDouble& PBObject::pbdouble(int index) const {
  return pbdouble_.Get(index);
}
inline ::KFMsg::PBDouble* PBObject::mutable_pbdouble(int index) {
  return pbdouble_.Mutable(index);
}
inline ::KFMsg::PBDouble* PBObject::add_pbdouble() {
  return pbdouble_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBDouble >&
PBObject::pbdouble() const {
  return pbdouble_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBDouble >*
PBObject::mutable_pbdouble() {
  return &pbdouble_;
}

// repeated .KFMsg.PBString pbstring = 7;
inline int PBObject::pbstring_size() const {
  return pbstring_.size();
}
inline void PBObject::clear_pbstring() {
  pbstring_.Clear();
}
inline const ::KFMsg::PBString& PBObject::pbstring(int index) const {
  return pbstring_.Get(index);
}
inline ::KFMsg::PBString* PBObject::mutable_pbstring(int index) {
  return pbstring_.Mutable(index);
}
inline ::KFMsg::PBString* PBObject::add_pbstring() {
  return pbstring_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >&
PBObject::pbstring() const {
  return pbstring_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBString >*
PBObject::mutable_pbstring() {
  return &pbstring_;
}

// repeated .KFMsg.PBVector3D pbvector3d = 8;
inline int PBObject::pbvector3d_size() const {
  return pbvector3d_.size();
}
inline void PBObject::clear_pbvector3d() {
  pbvector3d_.Clear();
}
inline const ::KFMsg::PBVector3D& PBObject::pbvector3d(int index) const {
  return pbvector3d_.Get(index);
}
inline ::KFMsg::PBVector3D* PBObject::mutable_pbvector3d(int index) {
  return pbvector3d_.Mutable(index);
}
inline ::KFMsg::PBVector3D* PBObject::add_pbvector3d() {
  return pbvector3d_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBVector3D >&
PBObject::pbvector3d() const {
  return pbvector3d_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBVector3D >*
PBObject::mutable_pbvector3d() {
  return &pbvector3d_;
}

// repeated .KFMsg.PBArray pbarray = 9;
inline int PBObject::pbarray_size() const {
  return pbarray_.size();
}
inline void PBObject::clear_pbarray() {
  pbarray_.Clear();
}
inline const ::KFMsg::PBArray& PBObject::pbarray(int index) const {
  return pbarray_.Get(index);
}
inline ::KFMsg::PBArray* PBObject::mutable_pbarray(int index) {
  return pbarray_.Mutable(index);
}
inline ::KFMsg::PBArray* PBObject::add_pbarray() {
  return pbarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBArray >&
PBObject::pbarray() const {
  return pbarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBArray >*
PBObject::mutable_pbarray() {
  return &pbarray_;
}

// repeated .KFMsg.PBObject pbobject = 10;
inline int PBObject::pbobject_size() const {
  return pbobject_.size();
}
inline void PBObject::clear_pbobject() {
  pbobject_.Clear();
}
inline const ::KFMsg::PBObject& PBObject::pbobject(int index) const {
  return pbobject_.Get(index);
}
inline ::KFMsg::PBObject* PBObject::mutable_pbobject(int index) {
  return pbobject_.Mutable(index);
}
inline ::KFMsg::PBObject* PBObject::add_pbobject() {
  return pbobject_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBObject >&
PBObject::pbobject() const {
  return pbobject_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBObject >*
PBObject::mutable_pbobject() {
  return &pbobject_;
}

// repeated .KFMsg.PBRecord pbrecord = 11;
inline int PBObject::pbrecord_size() const {
  return pbrecord_.size();
}
inline void PBObject::clear_pbrecord() {
  pbrecord_.Clear();
}
inline const ::KFMsg::PBRecord& PBObject::pbrecord(int index) const {
  return pbrecord_.Get(index);
}
inline ::KFMsg::PBRecord* PBObject::mutable_pbrecord(int index) {
  return pbrecord_.Mutable(index);
}
inline ::KFMsg::PBRecord* PBObject::add_pbrecord() {
  return pbrecord_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRecord >&
PBObject::pbrecord() const {
  return pbrecord_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRecord >*
PBObject::mutable_pbrecord() {
  return &pbrecord_;
}

// -------------------------------------------------------------------

// PBRecord

// optional string name = 1;
inline bool PBRecord::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBRecord::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBRecord::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBRecord::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PBRecord::name() const {
  return *name_;
}
inline void PBRecord::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBRecord::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PBRecord::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBRecord::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PBRecord::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBRecord::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .KFMsg.PBObject pbobject = 2;
inline int PBRecord::pbobject_size() const {
  return pbobject_.size();
}
inline void PBRecord::clear_pbobject() {
  pbobject_.Clear();
}
inline const ::KFMsg::PBObject& PBRecord::pbobject(int index) const {
  return pbobject_.Get(index);
}
inline ::KFMsg::PBObject* PBRecord::mutable_pbobject(int index) {
  return pbobject_.Mutable(index);
}
inline ::KFMsg::PBObject* PBRecord::add_pbobject() {
  return pbobject_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBObject >&
PBRecord::pbobject() const {
  return pbobject_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBObject >*
PBRecord::mutable_pbobject() {
  return &pbobject_;
}

// -------------------------------------------------------------------

// PBRemove

// required .KFMsg.PBUInt64 keyvalue = 1;
inline bool PBRemove::has_keyvalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBRemove::set_has_keyvalue() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBRemove::clear_has_keyvalue() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBRemove::clear_keyvalue() {
  if (keyvalue_ != NULL) keyvalue_->::KFMsg::PBUInt64::Clear();
  clear_has_keyvalue();
}
inline const ::KFMsg::PBUInt64& PBRemove::keyvalue() const {
  return keyvalue_ != NULL ? *keyvalue_ : *default_instance_->keyvalue_;
}
inline ::KFMsg::PBUInt64* PBRemove::mutable_keyvalue() {
  set_has_keyvalue();
  if (keyvalue_ == NULL) keyvalue_ = new ::KFMsg::PBUInt64;
  return keyvalue_;
}
inline ::KFMsg::PBUInt64* PBRemove::release_keyvalue() {
  clear_has_keyvalue();
  ::KFMsg::PBUInt64* temp = keyvalue_;
  keyvalue_ = NULL;
  return temp;
}
inline void PBRemove::set_allocated_keyvalue(::KFMsg::PBUInt64* keyvalue) {
  delete keyvalue_;
  keyvalue_ = keyvalue;
  if (keyvalue) {
    set_has_keyvalue();
  } else {
    clear_has_keyvalue();
  }
}

// optional .KFMsg.PBRemove childdata = 2;
inline bool PBRemove::has_childdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBRemove::set_has_childdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBRemove::clear_has_childdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBRemove::clear_childdata() {
  if (childdata_ != NULL) childdata_->::KFMsg::PBRemove::Clear();
  clear_has_childdata();
}
inline const ::KFMsg::PBRemove& PBRemove::childdata() const {
  return childdata_ != NULL ? *childdata_ : *default_instance_->childdata_;
}
inline ::KFMsg::PBRemove* PBRemove::mutable_childdata() {
  set_has_childdata();
  if (childdata_ == NULL) childdata_ = new ::KFMsg::PBRemove;
  return childdata_;
}
inline ::KFMsg::PBRemove* PBRemove::release_childdata() {
  clear_has_childdata();
  ::KFMsg::PBRemove* temp = childdata_;
  childdata_ = NULL;
  return temp;
}
inline void PBRemove::set_allocated_childdata(::KFMsg::PBRemove* childdata) {
  delete childdata_;
  childdata_ = childdata;
  if (childdata) {
    set_has_childdata();
  } else {
    clear_has_childdata();
  }
}

// -------------------------------------------------------------------

// PBAgent

// required string dataname = 1;
inline bool PBAgent::has_dataname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBAgent::set_has_dataname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBAgent::clear_has_dataname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBAgent::clear_dataname() {
  if (dataname_ != &::google::protobuf::internal::kEmptyString) {
    dataname_->clear();
  }
  clear_has_dataname();
}
inline const ::std::string& PBAgent::dataname() const {
  return *dataname_;
}
inline void PBAgent::set_dataname(const ::std::string& value) {
  set_has_dataname();
  if (dataname_ == &::google::protobuf::internal::kEmptyString) {
    dataname_ = new ::std::string;
  }
  dataname_->assign(value);
}
inline void PBAgent::set_dataname(const char* value) {
  set_has_dataname();
  if (dataname_ == &::google::protobuf::internal::kEmptyString) {
    dataname_ = new ::std::string;
  }
  dataname_->assign(value);
}
inline void PBAgent::set_dataname(const char* value, size_t size) {
  set_has_dataname();
  if (dataname_ == &::google::protobuf::internal::kEmptyString) {
    dataname_ = new ::std::string;
  }
  dataname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBAgent::mutable_dataname() {
  set_has_dataname();
  if (dataname_ == &::google::protobuf::internal::kEmptyString) {
    dataname_ = new ::std::string;
  }
  return dataname_;
}
inline ::std::string* PBAgent::release_dataname() {
  clear_has_dataname();
  if (dataname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dataname_;
    dataname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBAgent::set_allocated_dataname(::std::string* dataname) {
  if (dataname_ != &::google::protobuf::internal::kEmptyString) {
    delete dataname_;
  }
  if (dataname) {
    set_has_dataname();
    dataname_ = dataname;
  } else {
    clear_has_dataname();
    dataname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 key = 2;
inline bool PBAgent::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBAgent::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBAgent::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBAgent::clear_key() {
  key_ = 0u;
  clear_has_key();
}
inline ::google::protobuf::uint32 PBAgent::key() const {
  return key_;
}
inline void PBAgent::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
}

// repeated .KFMsg.PBUInt32 pbuint32 = 3;
inline int PBAgent::pbuint32_size() const {
  return pbuint32_.size();
}
inline void PBAgent::clear_pbuint32() {
  pbuint32_.Clear();
}
inline const ::KFMsg::PBUInt32& PBAgent::pbuint32(int index) const {
  return pbuint32_.Get(index);
}
inline ::KFMsg::PBUInt32* PBAgent::mutable_pbuint32(int index) {
  return pbuint32_.Mutable(index);
}
inline ::KFMsg::PBUInt32* PBAgent::add_pbuint32() {
  return pbuint32_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt32 >&
PBAgent::pbuint32() const {
  return pbuint32_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBUInt32 >*
PBAgent::mutable_pbuint32() {
  return &pbuint32_;
}

// -------------------------------------------------------------------

// PBAgents

// repeated .KFMsg.PBAgent agent = 1;
inline int PBAgents::agent_size() const {
  return agent_.size();
}
inline void PBAgents::clear_agent() {
  agent_.Clear();
}
inline const ::KFMsg::PBAgent& PBAgents::agent(int index) const {
  return agent_.Get(index);
}
inline ::KFMsg::PBAgent* PBAgents::mutable_agent(int index) {
  return agent_.Mutable(index);
}
inline ::KFMsg::PBAgent* PBAgents::add_agent() {
  return agent_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBAgent >&
PBAgents::agent() const {
  return agent_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBAgent >*
PBAgents::mutable_agent() {
  return &agent_;
}

// -------------------------------------------------------------------

// TellUpdateData

// required .KFMsg.PBObject pbobject = 1;
inline bool TellUpdateData::has_pbobject() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TellUpdateData::set_has_pbobject() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TellUpdateData::clear_has_pbobject() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TellUpdateData::clear_pbobject() {
  if (pbobject_ != NULL) pbobject_->::KFMsg::PBObject::Clear();
  clear_has_pbobject();
}
inline const ::KFMsg::PBObject& TellUpdateData::pbobject() const {
  return pbobject_ != NULL ? *pbobject_ : *default_instance_->pbobject_;
}
inline ::KFMsg::PBObject* TellUpdateData::mutable_pbobject() {
  set_has_pbobject();
  if (pbobject_ == NULL) pbobject_ = new ::KFMsg::PBObject;
  return pbobject_;
}
inline ::KFMsg::PBObject* TellUpdateData::release_pbobject() {
  clear_has_pbobject();
  ::KFMsg::PBObject* temp = pbobject_;
  pbobject_ = NULL;
  return temp;
}
inline void TellUpdateData::set_allocated_pbobject(::KFMsg::PBObject* pbobject) {
  delete pbobject_;
  pbobject_ = pbobject;
  if (pbobject) {
    set_has_pbobject();
  } else {
    clear_has_pbobject();
  }
}

// -------------------------------------------------------------------

// TellAddData

// required .KFMsg.PBObject pbobject = 1;
inline bool TellAddData::has_pbobject() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TellAddData::set_has_pbobject() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TellAddData::clear_has_pbobject() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TellAddData::clear_pbobject() {
  if (pbobject_ != NULL) pbobject_->::KFMsg::PBObject::Clear();
  clear_has_pbobject();
}
inline const ::KFMsg::PBObject& TellAddData::pbobject() const {
  return pbobject_ != NULL ? *pbobject_ : *default_instance_->pbobject_;
}
inline ::KFMsg::PBObject* TellAddData::mutable_pbobject() {
  set_has_pbobject();
  if (pbobject_ == NULL) pbobject_ = new ::KFMsg::PBObject;
  return pbobject_;
}
inline ::KFMsg::PBObject* TellAddData::release_pbobject() {
  clear_has_pbobject();
  ::KFMsg::PBObject* temp = pbobject_;
  pbobject_ = NULL;
  return temp;
}
inline void TellAddData::set_allocated_pbobject(::KFMsg::PBObject* pbobject) {
  delete pbobject_;
  pbobject_ = pbobject;
  if (pbobject) {
    set_has_pbobject();
  } else {
    clear_has_pbobject();
  }
}

// -------------------------------------------------------------------

// TellRemoveData

// repeated .KFMsg.PBRemove remove = 1;
inline int TellRemoveData::remove_size() const {
  return remove_.size();
}
inline void TellRemoveData::clear_remove() {
  remove_.Clear();
}
inline const ::KFMsg::PBRemove& TellRemoveData::remove(int index) const {
  return remove_.Get(index);
}
inline ::KFMsg::PBRemove* TellRemoveData::mutable_remove(int index) {
  return remove_.Mutable(index);
}
inline ::KFMsg::PBRemove* TellRemoveData::add_remove() {
  return remove_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRemove >&
TellRemoveData::remove() const {
  return remove_;
}
inline ::google::protobuf::RepeatedPtrField< ::KFMsg::PBRemove >*
TellRemoveData::mutable_remove() {
  return &remove_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_KFDataMessage_2eproto__INCLUDED
