// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFMatchMessage.proto

#ifndef PROTOBUF_KFMatchMessage_2eproto__INCLUDED
#define PROTOBUF_KFMatchMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "KFCommonMessage.pb.h"
// @@protoc_insertion_point(includes)

namespace KFMsg {

// Internal implementation detail -- do not call these.
void LIBPROTOC_EXPORT protobuf_AddDesc_KFMatchMessage_2eproto();
void protobuf_AssignDesc_KFMatchMessage_2eproto();
void protobuf_ShutdownFile_KFMatchMessage_2eproto();

class S2SRegisterMatchReq;
class S2SMatchToProxyReq;
class S2SMatchToClientAck;
class S2SMatchToShardReq;
class S2SCancelMatchToProxyReq;
class S2SCancelMatchToShardReq;
class S2SCancelMatchToBattleShardReq;
class S2SCancelMatchToMatchShardAck;
class S2SNoticeMatchRoomReq;
class S2SNoticeMatchRoomAck;
class S2SQueryMatchRoomReq;
class S2SQueryRoomToMatchShardReq;
class S2SQueryMatchRoomAck;
class S2SQueryBattleRoomReq;
class S2SQueryRoomToBattleShardReq;
class S2SPlayerOnlineToBattleShardReq;

enum MatchProtocol {
  S2S_REGISTER_MATCH_REQ = 11101,
  S2S_MATCH_TO_PROXY_REQ = 11102,
  S2S_MATCH_TO_SHARD_REQ = 11103,
  S2S_MATCH_TO_CLIENT_ACK = 11104,
  S2S_CANCEL_MATCH_TO_PROXY_REQ = 11107,
  S2S_CANCEL_MATCH_TO_SHARD_REQ = 11108,
  S2S_NOTICE_MATCH_ROOM_REQ = 11109,
  S2S_NOTICE_MATCH_ROOM_ACK = 11110,
  S2S_QUERY_MATCH_ROOM_REQ = 11111,
  S2S_QUERY_MATCH_ROOM_ACK = 11112,
  S2S_QUERY_BATTLE_ROOM_REQ = 11113,
  S2S_QUERY_ROOM_TO_MATCH_SHARD_REQ = 11115,
  S2S_QUERY_ROOM_TO_BATTLE_SHARD_REQ = 11116,
  S2S_CANCEL_MATCH_TO_BATTLE_SHARD_REQ = 11118,
  S2S_CANCEL_MATCH_TO_MATCH_SHARD_ACK = 11119,
  S2S_PLAYER_ONLINE_TO_BATTLE_SHARD_REQ = 11120
};
LIBPROTOC_EXPORT bool MatchProtocol_IsValid(int value);
const MatchProtocol MatchProtocol_MIN = S2S_REGISTER_MATCH_REQ;
const MatchProtocol MatchProtocol_MAX = S2S_PLAYER_ONLINE_TO_BATTLE_SHARD_REQ;
const int MatchProtocol_ARRAYSIZE = MatchProtocol_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* MatchProtocol_descriptor();
inline const ::std::string& MatchProtocol_Name(MatchProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    MatchProtocol_descriptor(), value);
}
inline bool MatchProtocol_Parse(
    const ::std::string& name, MatchProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MatchProtocol>(
    MatchProtocol_descriptor(), name, value);
}
// ===================================================================

class LIBPROTOC_EXPORT S2SRegisterMatchReq : public ::google::protobuf::Message {
 public:
  S2SRegisterMatchReq();
  virtual ~S2SRegisterMatchReq();

  S2SRegisterMatchReq(const S2SRegisterMatchReq& from);

  inline S2SRegisterMatchReq& operator=(const S2SRegisterMatchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SRegisterMatchReq& default_instance();

  void Swap(S2SRegisterMatchReq* other);

  // implements Message ----------------------------------------------

  S2SRegisterMatchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SRegisterMatchReq& from);
  void MergeFrom(const S2SRegisterMatchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 matchid = 1;
  inline int matchid_size() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  inline ::google::protobuf::uint32 matchid(int index) const;
  inline void set_matchid(int index, ::google::protobuf::uint32 value);
  inline void add_matchid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      matchid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_matchid();

  // @@protoc_insertion_point(class_scope:KFMsg.S2SRegisterMatchReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > matchid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFMatchMessage_2eproto();
  friend void protobuf_AssignDesc_KFMatchMessage_2eproto();
  friend void protobuf_ShutdownFile_KFMatchMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SRegisterMatchReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SMatchToProxyReq : public ::google::protobuf::Message {
 public:
  S2SMatchToProxyReq();
  virtual ~S2SMatchToProxyReq();

  S2SMatchToProxyReq(const S2SMatchToProxyReq& from);

  inline S2SMatchToProxyReq& operator=(const S2SMatchToProxyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SMatchToProxyReq& default_instance();

  void Swap(S2SMatchToProxyReq* other);

  // implements Message ----------------------------------------------

  S2SMatchToProxyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SMatchToProxyReq& from);
  void MergeFrom(const S2SMatchToProxyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .KFMsg.PBMatchGroup pbgroup = 1;
  inline bool has_pbgroup() const;
  inline void clear_pbgroup();
  static const int kPbgroupFieldNumber = 1;
  inline const ::KFMsg::PBMatchGroup& pbgroup() const;
  inline ::KFMsg::PBMatchGroup* mutable_pbgroup();
  inline ::KFMsg::PBMatchGroup* release_pbgroup();
  inline void set_allocated_pbgroup(::KFMsg::PBMatchGroup* pbgroup);

  // required uint32 matchid = 2;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 2;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required bool allowgroup = 3;
  inline bool has_allowgroup() const;
  inline void clear_allowgroup();
  static const int kAllowgroupFieldNumber = 3;
  inline bool allowgroup() const;
  inline void set_allowgroup(bool value);

  // required uint32 playerid = 4;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 4;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 serverid = 5;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 5;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SMatchToProxyReq)
 private:
  inline void set_has_pbgroup();
  inline void clear_has_pbgroup();
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_allowgroup();
  inline void clear_has_allowgroup();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::PBMatchGroup* pbgroup_;
  ::google::protobuf::uint32 matchid_;
  bool allowgroup_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFMatchMessage_2eproto();
  friend void protobuf_AssignDesc_KFMatchMessage_2eproto();
  friend void protobuf_ShutdownFile_KFMatchMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SMatchToProxyReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SMatchToClientAck : public ::google::protobuf::Message {
 public:
  S2SMatchToClientAck();
  virtual ~S2SMatchToClientAck();

  S2SMatchToClientAck(const S2SMatchToClientAck& from);

  inline S2SMatchToClientAck& operator=(const S2SMatchToClientAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SMatchToClientAck& default_instance();

  void Swap(S2SMatchToClientAck* other);

  // implements Message ----------------------------------------------

  S2SMatchToClientAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SMatchToClientAck& from);
  void MergeFrom(const S2SMatchToClientAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // required uint32 matchid = 2;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 2;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required uint32 playerid = 3;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 3;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SMatchToClientAck)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFMatchMessage_2eproto();
  friend void protobuf_AssignDesc_KFMatchMessage_2eproto();
  friend void protobuf_ShutdownFile_KFMatchMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SMatchToClientAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SMatchToShardReq : public ::google::protobuf::Message {
 public:
  S2SMatchToShardReq();
  virtual ~S2SMatchToShardReq();

  S2SMatchToShardReq(const S2SMatchToShardReq& from);

  inline S2SMatchToShardReq& operator=(const S2SMatchToShardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SMatchToShardReq& default_instance();

  void Swap(S2SMatchToShardReq* other);

  // implements Message ----------------------------------------------

  S2SMatchToShardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SMatchToShardReq& from);
  void MergeFrom(const S2SMatchToShardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .KFMsg.PBMatchGroup pbgroup = 1;
  inline bool has_pbgroup() const;
  inline void clear_pbgroup();
  static const int kPbgroupFieldNumber = 1;
  inline const ::KFMsg::PBMatchGroup& pbgroup() const;
  inline ::KFMsg::PBMatchGroup* mutable_pbgroup();
  inline ::KFMsg::PBMatchGroup* release_pbgroup();
  inline void set_allocated_pbgroup(::KFMsg::PBMatchGroup* pbgroup);

  // required uint32 matchid = 2;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 2;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required bool allowgroup = 3;
  inline bool has_allowgroup() const;
  inline void clear_allowgroup();
  static const int kAllowgroupFieldNumber = 3;
  inline bool allowgroup() const;
  inline void set_allowgroup(bool value);

  // required uint32 playerid = 4;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 4;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 serverid = 5;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 5;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SMatchToShardReq)
 private:
  inline void set_has_pbgroup();
  inline void clear_has_pbgroup();
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_allowgroup();
  inline void clear_has_allowgroup();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::KFMsg::PBMatchGroup* pbgroup_;
  ::google::protobuf::uint32 matchid_;
  bool allowgroup_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFMatchMessage_2eproto();
  friend void protobuf_AssignDesc_KFMatchMessage_2eproto();
  friend void protobuf_ShutdownFile_KFMatchMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SMatchToShardReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SCancelMatchToProxyReq : public ::google::protobuf::Message {
 public:
  S2SCancelMatchToProxyReq();
  virtual ~S2SCancelMatchToProxyReq();

  S2SCancelMatchToProxyReq(const S2SCancelMatchToProxyReq& from);

  inline S2SCancelMatchToProxyReq& operator=(const S2SCancelMatchToProxyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SCancelMatchToProxyReq& default_instance();

  void Swap(S2SCancelMatchToProxyReq* other);

  // implements Message ----------------------------------------------

  S2SCancelMatchToProxyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SCancelMatchToProxyReq& from);
  void MergeFrom(const S2SCancelMatchToProxyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 matchid = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SCancelMatchToProxyReq)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFMatchMessage_2eproto();
  friend void protobuf_AssignDesc_KFMatchMessage_2eproto();
  friend void protobuf_ShutdownFile_KFMatchMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SCancelMatchToProxyReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SCancelMatchToShardReq : public ::google::protobuf::Message {
 public:
  S2SCancelMatchToShardReq();
  virtual ~S2SCancelMatchToShardReq();

  S2SCancelMatchToShardReq(const S2SCancelMatchToShardReq& from);

  inline S2SCancelMatchToShardReq& operator=(const S2SCancelMatchToShardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SCancelMatchToShardReq& default_instance();

  void Swap(S2SCancelMatchToShardReq* other);

  // implements Message ----------------------------------------------

  S2SCancelMatchToShardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SCancelMatchToShardReq& from);
  void MergeFrom(const S2SCancelMatchToShardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 matchid = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SCancelMatchToShardReq)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFMatchMessage_2eproto();
  friend void protobuf_AssignDesc_KFMatchMessage_2eproto();
  friend void protobuf_ShutdownFile_KFMatchMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SCancelMatchToShardReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SCancelMatchToBattleShardReq : public ::google::protobuf::Message {
 public:
  S2SCancelMatchToBattleShardReq();
  virtual ~S2SCancelMatchToBattleShardReq();

  S2SCancelMatchToBattleShardReq(const S2SCancelMatchToBattleShardReq& from);

  inline S2SCancelMatchToBattleShardReq& operator=(const S2SCancelMatchToBattleShardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SCancelMatchToBattleShardReq& default_instance();

  void Swap(S2SCancelMatchToBattleShardReq* other);

  // implements Message ----------------------------------------------

  S2SCancelMatchToBattleShardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SCancelMatchToBattleShardReq& from);
  void MergeFrom(const S2SCancelMatchToBattleShardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 campid = 2;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampidFieldNumber = 2;
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // required uint32 playerid = 3;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 3;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 matchid = 4;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 4;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required uint32 matchshardid = 5;
  inline bool has_matchshardid() const;
  inline void clear_matchshardid();
  static const int kMatchshardidFieldNumber = 5;
  inline ::google::protobuf::uint32 matchshardid() const;
  inline void set_matchshardid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SCancelMatchToBattleShardReq)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_matchshardid();
  inline void clear_has_matchshardid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 matchshardid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFMatchMessage_2eproto();
  friend void protobuf_AssignDesc_KFMatchMessage_2eproto();
  friend void protobuf_ShutdownFile_KFMatchMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SCancelMatchToBattleShardReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SCancelMatchToMatchShardAck : public ::google::protobuf::Message {
 public:
  S2SCancelMatchToMatchShardAck();
  virtual ~S2SCancelMatchToMatchShardAck();

  S2SCancelMatchToMatchShardAck(const S2SCancelMatchToMatchShardAck& from);

  inline S2SCancelMatchToMatchShardAck& operator=(const S2SCancelMatchToMatchShardAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SCancelMatchToMatchShardAck& default_instance();

  void Swap(S2SCancelMatchToMatchShardAck* other);

  // implements Message ----------------------------------------------

  S2SCancelMatchToMatchShardAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SCancelMatchToMatchShardAck& from);
  void MergeFrom(const S2SCancelMatchToMatchShardAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 matchid = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required uint64 roomid = 2;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 campid = 3;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampidFieldNumber = 3;
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // required uint32 playerid = 4;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 4;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required bool isroomopen = 5;
  inline bool has_isroomopen() const;
  inline void clear_isroomopen();
  static const int kIsroomopenFieldNumber = 5;
  inline bool isroomopen() const;
  inline void set_isroomopen(bool value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SCancelMatchToMatchShardAck)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_isroomopen();
  inline void clear_has_isroomopen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 playerid_;
  bool isroomopen_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFMatchMessage_2eproto();
  friend void protobuf_AssignDesc_KFMatchMessage_2eproto();
  friend void protobuf_ShutdownFile_KFMatchMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SCancelMatchToMatchShardAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SNoticeMatchRoomReq : public ::google::protobuf::Message {
 public:
  S2SNoticeMatchRoomReq();
  virtual ~S2SNoticeMatchRoomReq();

  S2SNoticeMatchRoomReq(const S2SNoticeMatchRoomReq& from);

  inline S2SNoticeMatchRoomReq& operator=(const S2SNoticeMatchRoomReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SNoticeMatchRoomReq& default_instance();

  void Swap(S2SNoticeMatchRoomReq* other);

  // implements Message ----------------------------------------------

  S2SNoticeMatchRoomReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SNoticeMatchRoomReq& from);
  void MergeFrom(const S2SNoticeMatchRoomReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 matchid = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required uint32 battleshardid = 2;
  inline bool has_battleshardid() const;
  inline void clear_battleshardid();
  static const int kBattleshardidFieldNumber = 2;
  inline ::google::protobuf::uint32 battleshardid() const;
  inline void set_battleshardid(::google::protobuf::uint32 value);

  // required uint32 campid = 3;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampidFieldNumber = 3;
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // required uint32 playerid = 4;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 4;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 serverid = 5;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 5;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // required uint64 roomid = 6;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 6;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required string ip = 7;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 7;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required uint32 port = 8;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 8;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // required string token = 9;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 9;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SNoticeMatchRoomReq)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_battleshardid();
  inline void clear_has_battleshardid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 battleshardid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 serverid_;
  ::google::protobuf::uint32 port_;
  ::std::string* ip_;
  ::std::string* token_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFMatchMessage_2eproto();
  friend void protobuf_AssignDesc_KFMatchMessage_2eproto();
  friend void protobuf_ShutdownFile_KFMatchMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SNoticeMatchRoomReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SNoticeMatchRoomAck : public ::google::protobuf::Message {
 public:
  S2SNoticeMatchRoomAck();
  virtual ~S2SNoticeMatchRoomAck();

  S2SNoticeMatchRoomAck(const S2SNoticeMatchRoomAck& from);

  inline S2SNoticeMatchRoomAck& operator=(const S2SNoticeMatchRoomAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SNoticeMatchRoomAck& default_instance();

  void Swap(S2SNoticeMatchRoomAck* other);

  // implements Message ----------------------------------------------

  S2SNoticeMatchRoomAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SNoticeMatchRoomAck& from);
  void MergeFrom(const S2SNoticeMatchRoomAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 campid = 2;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampidFieldNumber = 2;
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // required uint32 playerid = 3;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 3;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SNoticeMatchRoomAck)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFMatchMessage_2eproto();
  friend void protobuf_AssignDesc_KFMatchMessage_2eproto();
  friend void protobuf_ShutdownFile_KFMatchMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SNoticeMatchRoomAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryMatchRoomReq : public ::google::protobuf::Message {
 public:
  S2SQueryMatchRoomReq();
  virtual ~S2SQueryMatchRoomReq();

  S2SQueryMatchRoomReq(const S2SQueryMatchRoomReq& from);

  inline S2SQueryMatchRoomReq& operator=(const S2SQueryMatchRoomReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryMatchRoomReq& default_instance();

  void Swap(S2SQueryMatchRoomReq* other);

  // implements Message ----------------------------------------------

  S2SQueryMatchRoomReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SQueryMatchRoomReq& from);
  void MergeFrom(const S2SQueryMatchRoomReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 matchid = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 serverid = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 3;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryMatchRoomReq)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFMatchMessage_2eproto();
  friend void protobuf_AssignDesc_KFMatchMessage_2eproto();
  friend void protobuf_ShutdownFile_KFMatchMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SQueryMatchRoomReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryRoomToMatchShardReq : public ::google::protobuf::Message {
 public:
  S2SQueryRoomToMatchShardReq();
  virtual ~S2SQueryRoomToMatchShardReq();

  S2SQueryRoomToMatchShardReq(const S2SQueryRoomToMatchShardReq& from);

  inline S2SQueryRoomToMatchShardReq& operator=(const S2SQueryRoomToMatchShardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryRoomToMatchShardReq& default_instance();

  void Swap(S2SQueryRoomToMatchShardReq* other);

  // implements Message ----------------------------------------------

  S2SQueryRoomToMatchShardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SQueryRoomToMatchShardReq& from);
  void MergeFrom(const S2SQueryRoomToMatchShardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 matchid = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 serverid = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 3;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryRoomToMatchShardReq)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFMatchMessage_2eproto();
  friend void protobuf_AssignDesc_KFMatchMessage_2eproto();
  friend void protobuf_ShutdownFile_KFMatchMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SQueryRoomToMatchShardReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryMatchRoomAck : public ::google::protobuf::Message {
 public:
  S2SQueryMatchRoomAck();
  virtual ~S2SQueryMatchRoomAck();

  S2SQueryMatchRoomAck(const S2SQueryMatchRoomAck& from);

  inline S2SQueryMatchRoomAck& operator=(const S2SQueryMatchRoomAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryMatchRoomAck& default_instance();

  void Swap(S2SQueryMatchRoomAck* other);

  // implements Message ----------------------------------------------

  S2SQueryMatchRoomAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SQueryMatchRoomAck& from);
  void MergeFrom(const S2SQueryMatchRoomAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 matchid = 1;
  inline bool has_matchid() const;
  inline void clear_matchid();
  static const int kMatchidFieldNumber = 1;
  inline ::google::protobuf::uint32 matchid() const;
  inline void set_matchid(::google::protobuf::uint32 value);

  // required uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryMatchRoomAck)
 private:
  inline void set_has_matchid();
  inline void clear_has_matchid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 matchid_;
  ::google::protobuf::uint32 playerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFMatchMessage_2eproto();
  friend void protobuf_AssignDesc_KFMatchMessage_2eproto();
  friend void protobuf_ShutdownFile_KFMatchMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SQueryMatchRoomAck* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryBattleRoomReq : public ::google::protobuf::Message {
 public:
  S2SQueryBattleRoomReq();
  virtual ~S2SQueryBattleRoomReq();

  S2SQueryBattleRoomReq(const S2SQueryBattleRoomReq& from);

  inline S2SQueryBattleRoomReq& operator=(const S2SQueryBattleRoomReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryBattleRoomReq& default_instance();

  void Swap(S2SQueryBattleRoomReq* other);

  // implements Message ----------------------------------------------

  S2SQueryBattleRoomReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SQueryBattleRoomReq& from);
  void MergeFrom(const S2SQueryBattleRoomReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 serverid = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 3;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryBattleRoomReq)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFMatchMessage_2eproto();
  friend void protobuf_AssignDesc_KFMatchMessage_2eproto();
  friend void protobuf_ShutdownFile_KFMatchMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SQueryBattleRoomReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SQueryRoomToBattleShardReq : public ::google::protobuf::Message {
 public:
  S2SQueryRoomToBattleShardReq();
  virtual ~S2SQueryRoomToBattleShardReq();

  S2SQueryRoomToBattleShardReq(const S2SQueryRoomToBattleShardReq& from);

  inline S2SQueryRoomToBattleShardReq& operator=(const S2SQueryRoomToBattleShardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SQueryRoomToBattleShardReq& default_instance();

  void Swap(S2SQueryRoomToBattleShardReq* other);

  // implements Message ----------------------------------------------

  S2SQueryRoomToBattleShardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SQueryRoomToBattleShardReq& from);
  void MergeFrom(const S2SQueryRoomToBattleShardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 serverid = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 3;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SQueryRoomToBattleShardReq)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFMatchMessage_2eproto();
  friend void protobuf_AssignDesc_KFMatchMessage_2eproto();
  friend void protobuf_ShutdownFile_KFMatchMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SQueryRoomToBattleShardReq* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SPlayerOnlineToBattleShardReq : public ::google::protobuf::Message {
 public:
  S2SPlayerOnlineToBattleShardReq();
  virtual ~S2SPlayerOnlineToBattleShardReq();

  S2SPlayerOnlineToBattleShardReq(const S2SPlayerOnlineToBattleShardReq& from);

  inline S2SPlayerOnlineToBattleShardReq& operator=(const S2SPlayerOnlineToBattleShardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SPlayerOnlineToBattleShardReq& default_instance();

  void Swap(S2SPlayerOnlineToBattleShardReq* other);

  // implements Message ----------------------------------------------

  S2SPlayerOnlineToBattleShardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const S2SPlayerOnlineToBattleShardReq& from);
  void MergeFrom(const S2SPlayerOnlineToBattleShardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 roomid = 1;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // required uint32 campid = 2;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampidFieldNumber = 2;
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // required uint32 playerid = 3;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 3;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // required uint32 serverid = 4;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 4;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SPlayerOnlineToBattleShardReq)
 private:
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void LIBPROTOC_EXPORT protobuf_AddDesc_KFMatchMessage_2eproto();
  friend void protobuf_AssignDesc_KFMatchMessage_2eproto();
  friend void protobuf_ShutdownFile_KFMatchMessage_2eproto();

  void InitAsDefaultInstance();
  static S2SPlayerOnlineToBattleShardReq* default_instance_;
};
// ===================================================================


// ===================================================================

// S2SRegisterMatchReq

// repeated uint32 matchid = 1;
inline int S2SRegisterMatchReq::matchid_size() const {
  return matchid_.size();
}
inline void S2SRegisterMatchReq::clear_matchid() {
  matchid_.Clear();
}
inline ::google::protobuf::uint32 S2SRegisterMatchReq::matchid(int index) const {
  return matchid_.Get(index);
}
inline void S2SRegisterMatchReq::set_matchid(int index, ::google::protobuf::uint32 value) {
  matchid_.Set(index, value);
}
inline void S2SRegisterMatchReq::add_matchid(::google::protobuf::uint32 value) {
  matchid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
S2SRegisterMatchReq::matchid() const {
  return matchid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
S2SRegisterMatchReq::mutable_matchid() {
  return &matchid_;
}

// -------------------------------------------------------------------

// S2SMatchToProxyReq

// required .KFMsg.PBMatchGroup pbgroup = 1;
inline bool S2SMatchToProxyReq::has_pbgroup() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SMatchToProxyReq::set_has_pbgroup() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SMatchToProxyReq::clear_has_pbgroup() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SMatchToProxyReq::clear_pbgroup() {
  if (pbgroup_ != NULL) pbgroup_->::KFMsg::PBMatchGroup::Clear();
  clear_has_pbgroup();
}
inline const ::KFMsg::PBMatchGroup& S2SMatchToProxyReq::pbgroup() const {
  return pbgroup_ != NULL ? *pbgroup_ : *default_instance_->pbgroup_;
}
inline ::KFMsg::PBMatchGroup* S2SMatchToProxyReq::mutable_pbgroup() {
  set_has_pbgroup();
  if (pbgroup_ == NULL) pbgroup_ = new ::KFMsg::PBMatchGroup;
  return pbgroup_;
}
inline ::KFMsg::PBMatchGroup* S2SMatchToProxyReq::release_pbgroup() {
  clear_has_pbgroup();
  ::KFMsg::PBMatchGroup* temp = pbgroup_;
  pbgroup_ = NULL;
  return temp;
}
inline void S2SMatchToProxyReq::set_allocated_pbgroup(::KFMsg::PBMatchGroup* pbgroup) {
  delete pbgroup_;
  pbgroup_ = pbgroup;
  if (pbgroup) {
    set_has_pbgroup();
  } else {
    clear_has_pbgroup();
  }
}

// required uint32 matchid = 2;
inline bool S2SMatchToProxyReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SMatchToProxyReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SMatchToProxyReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SMatchToProxyReq::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SMatchToProxyReq::matchid() const {
  return matchid_;
}
inline void S2SMatchToProxyReq::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required bool allowgroup = 3;
inline bool S2SMatchToProxyReq::has_allowgroup() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SMatchToProxyReq::set_has_allowgroup() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SMatchToProxyReq::clear_has_allowgroup() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SMatchToProxyReq::clear_allowgroup() {
  allowgroup_ = false;
  clear_has_allowgroup();
}
inline bool S2SMatchToProxyReq::allowgroup() const {
  return allowgroup_;
}
inline void S2SMatchToProxyReq::set_allowgroup(bool value) {
  set_has_allowgroup();
  allowgroup_ = value;
}

// required uint32 playerid = 4;
inline bool S2SMatchToProxyReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SMatchToProxyReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SMatchToProxyReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SMatchToProxyReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SMatchToProxyReq::playerid() const {
  return playerid_;
}
inline void S2SMatchToProxyReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 serverid = 5;
inline bool S2SMatchToProxyReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SMatchToProxyReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SMatchToProxyReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SMatchToProxyReq::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2SMatchToProxyReq::serverid() const {
  return serverid_;
}
inline void S2SMatchToProxyReq::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// S2SMatchToClientAck

// required uint32 result = 1;
inline bool S2SMatchToClientAck::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SMatchToClientAck::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SMatchToClientAck::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SMatchToClientAck::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 S2SMatchToClientAck::result() const {
  return result_;
}
inline void S2SMatchToClientAck::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// required uint32 matchid = 2;
inline bool S2SMatchToClientAck::has_matchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SMatchToClientAck::set_has_matchid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SMatchToClientAck::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SMatchToClientAck::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SMatchToClientAck::matchid() const {
  return matchid_;
}
inline void S2SMatchToClientAck::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required uint32 playerid = 3;
inline bool S2SMatchToClientAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SMatchToClientAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SMatchToClientAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SMatchToClientAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SMatchToClientAck::playerid() const {
  return playerid_;
}
inline void S2SMatchToClientAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// S2SMatchToShardReq

// required .KFMsg.PBMatchGroup pbgroup = 1;
inline bool S2SMatchToShardReq::has_pbgroup() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SMatchToShardReq::set_has_pbgroup() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SMatchToShardReq::clear_has_pbgroup() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SMatchToShardReq::clear_pbgroup() {
  if (pbgroup_ != NULL) pbgroup_->::KFMsg::PBMatchGroup::Clear();
  clear_has_pbgroup();
}
inline const ::KFMsg::PBMatchGroup& S2SMatchToShardReq::pbgroup() const {
  return pbgroup_ != NULL ? *pbgroup_ : *default_instance_->pbgroup_;
}
inline ::KFMsg::PBMatchGroup* S2SMatchToShardReq::mutable_pbgroup() {
  set_has_pbgroup();
  if (pbgroup_ == NULL) pbgroup_ = new ::KFMsg::PBMatchGroup;
  return pbgroup_;
}
inline ::KFMsg::PBMatchGroup* S2SMatchToShardReq::release_pbgroup() {
  clear_has_pbgroup();
  ::KFMsg::PBMatchGroup* temp = pbgroup_;
  pbgroup_ = NULL;
  return temp;
}
inline void S2SMatchToShardReq::set_allocated_pbgroup(::KFMsg::PBMatchGroup* pbgroup) {
  delete pbgroup_;
  pbgroup_ = pbgroup;
  if (pbgroup) {
    set_has_pbgroup();
  } else {
    clear_has_pbgroup();
  }
}

// required uint32 matchid = 2;
inline bool S2SMatchToShardReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SMatchToShardReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SMatchToShardReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SMatchToShardReq::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SMatchToShardReq::matchid() const {
  return matchid_;
}
inline void S2SMatchToShardReq::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required bool allowgroup = 3;
inline bool S2SMatchToShardReq::has_allowgroup() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SMatchToShardReq::set_has_allowgroup() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SMatchToShardReq::clear_has_allowgroup() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SMatchToShardReq::clear_allowgroup() {
  allowgroup_ = false;
  clear_has_allowgroup();
}
inline bool S2SMatchToShardReq::allowgroup() const {
  return allowgroup_;
}
inline void S2SMatchToShardReq::set_allowgroup(bool value) {
  set_has_allowgroup();
  allowgroup_ = value;
}

// required uint32 playerid = 4;
inline bool S2SMatchToShardReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SMatchToShardReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SMatchToShardReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SMatchToShardReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SMatchToShardReq::playerid() const {
  return playerid_;
}
inline void S2SMatchToShardReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 serverid = 5;
inline bool S2SMatchToShardReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SMatchToShardReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SMatchToShardReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SMatchToShardReq::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2SMatchToShardReq::serverid() const {
  return serverid_;
}
inline void S2SMatchToShardReq::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// S2SCancelMatchToProxyReq

// required uint32 matchid = 1;
inline bool S2SCancelMatchToProxyReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SCancelMatchToProxyReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SCancelMatchToProxyReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SCancelMatchToProxyReq::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SCancelMatchToProxyReq::matchid() const {
  return matchid_;
}
inline void S2SCancelMatchToProxyReq::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required uint32 playerid = 2;
inline bool S2SCancelMatchToProxyReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SCancelMatchToProxyReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SCancelMatchToProxyReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SCancelMatchToProxyReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SCancelMatchToProxyReq::playerid() const {
  return playerid_;
}
inline void S2SCancelMatchToProxyReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// S2SCancelMatchToShardReq

// required uint32 matchid = 1;
inline bool S2SCancelMatchToShardReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SCancelMatchToShardReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SCancelMatchToShardReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SCancelMatchToShardReq::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SCancelMatchToShardReq::matchid() const {
  return matchid_;
}
inline void S2SCancelMatchToShardReq::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required uint32 playerid = 2;
inline bool S2SCancelMatchToShardReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SCancelMatchToShardReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SCancelMatchToShardReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SCancelMatchToShardReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SCancelMatchToShardReq::playerid() const {
  return playerid_;
}
inline void S2SCancelMatchToShardReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// S2SCancelMatchToBattleShardReq

// required uint64 roomid = 1;
inline bool S2SCancelMatchToBattleShardReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SCancelMatchToBattleShardReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SCancelMatchToBattleShardReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SCancelMatchToBattleShardReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SCancelMatchToBattleShardReq::roomid() const {
  return roomid_;
}
inline void S2SCancelMatchToBattleShardReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 campid = 2;
inline bool S2SCancelMatchToBattleShardReq::has_campid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SCancelMatchToBattleShardReq::set_has_campid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SCancelMatchToBattleShardReq::clear_has_campid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SCancelMatchToBattleShardReq::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 S2SCancelMatchToBattleShardReq::campid() const {
  return campid_;
}
inline void S2SCancelMatchToBattleShardReq::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
}

// required uint32 playerid = 3;
inline bool S2SCancelMatchToBattleShardReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SCancelMatchToBattleShardReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SCancelMatchToBattleShardReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SCancelMatchToBattleShardReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SCancelMatchToBattleShardReq::playerid() const {
  return playerid_;
}
inline void S2SCancelMatchToBattleShardReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 matchid = 4;
inline bool S2SCancelMatchToBattleShardReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SCancelMatchToBattleShardReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SCancelMatchToBattleShardReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SCancelMatchToBattleShardReq::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SCancelMatchToBattleShardReq::matchid() const {
  return matchid_;
}
inline void S2SCancelMatchToBattleShardReq::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required uint32 matchshardid = 5;
inline bool S2SCancelMatchToBattleShardReq::has_matchshardid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SCancelMatchToBattleShardReq::set_has_matchshardid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SCancelMatchToBattleShardReq::clear_has_matchshardid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SCancelMatchToBattleShardReq::clear_matchshardid() {
  matchshardid_ = 0u;
  clear_has_matchshardid();
}
inline ::google::protobuf::uint32 S2SCancelMatchToBattleShardReq::matchshardid() const {
  return matchshardid_;
}
inline void S2SCancelMatchToBattleShardReq::set_matchshardid(::google::protobuf::uint32 value) {
  set_has_matchshardid();
  matchshardid_ = value;
}

// -------------------------------------------------------------------

// S2SCancelMatchToMatchShardAck

// required uint32 matchid = 1;
inline bool S2SCancelMatchToMatchShardAck::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SCancelMatchToMatchShardAck::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SCancelMatchToMatchShardAck::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SCancelMatchToMatchShardAck::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SCancelMatchToMatchShardAck::matchid() const {
  return matchid_;
}
inline void S2SCancelMatchToMatchShardAck::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required uint64 roomid = 2;
inline bool S2SCancelMatchToMatchShardAck::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SCancelMatchToMatchShardAck::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SCancelMatchToMatchShardAck::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SCancelMatchToMatchShardAck::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SCancelMatchToMatchShardAck::roomid() const {
  return roomid_;
}
inline void S2SCancelMatchToMatchShardAck::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 campid = 3;
inline bool S2SCancelMatchToMatchShardAck::has_campid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SCancelMatchToMatchShardAck::set_has_campid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SCancelMatchToMatchShardAck::clear_has_campid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SCancelMatchToMatchShardAck::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 S2SCancelMatchToMatchShardAck::campid() const {
  return campid_;
}
inline void S2SCancelMatchToMatchShardAck::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
}

// required uint32 playerid = 4;
inline bool S2SCancelMatchToMatchShardAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SCancelMatchToMatchShardAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SCancelMatchToMatchShardAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SCancelMatchToMatchShardAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SCancelMatchToMatchShardAck::playerid() const {
  return playerid_;
}
inline void S2SCancelMatchToMatchShardAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required bool isroomopen = 5;
inline bool S2SCancelMatchToMatchShardAck::has_isroomopen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SCancelMatchToMatchShardAck::set_has_isroomopen() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SCancelMatchToMatchShardAck::clear_has_isroomopen() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SCancelMatchToMatchShardAck::clear_isroomopen() {
  isroomopen_ = false;
  clear_has_isroomopen();
}
inline bool S2SCancelMatchToMatchShardAck::isroomopen() const {
  return isroomopen_;
}
inline void S2SCancelMatchToMatchShardAck::set_isroomopen(bool value) {
  set_has_isroomopen();
  isroomopen_ = value;
}

// -------------------------------------------------------------------

// S2SNoticeMatchRoomReq

// required uint32 matchid = 1;
inline bool S2SNoticeMatchRoomReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SNoticeMatchRoomReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SNoticeMatchRoomReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SNoticeMatchRoomReq::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SNoticeMatchRoomReq::matchid() const {
  return matchid_;
}
inline void S2SNoticeMatchRoomReq::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required uint32 battleshardid = 2;
inline bool S2SNoticeMatchRoomReq::has_battleshardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SNoticeMatchRoomReq::set_has_battleshardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SNoticeMatchRoomReq::clear_has_battleshardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SNoticeMatchRoomReq::clear_battleshardid() {
  battleshardid_ = 0u;
  clear_has_battleshardid();
}
inline ::google::protobuf::uint32 S2SNoticeMatchRoomReq::battleshardid() const {
  return battleshardid_;
}
inline void S2SNoticeMatchRoomReq::set_battleshardid(::google::protobuf::uint32 value) {
  set_has_battleshardid();
  battleshardid_ = value;
}

// required uint32 campid = 3;
inline bool S2SNoticeMatchRoomReq::has_campid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SNoticeMatchRoomReq::set_has_campid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SNoticeMatchRoomReq::clear_has_campid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SNoticeMatchRoomReq::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 S2SNoticeMatchRoomReq::campid() const {
  return campid_;
}
inline void S2SNoticeMatchRoomReq::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
}

// required uint32 playerid = 4;
inline bool S2SNoticeMatchRoomReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SNoticeMatchRoomReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SNoticeMatchRoomReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SNoticeMatchRoomReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SNoticeMatchRoomReq::playerid() const {
  return playerid_;
}
inline void S2SNoticeMatchRoomReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 serverid = 5;
inline bool S2SNoticeMatchRoomReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void S2SNoticeMatchRoomReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void S2SNoticeMatchRoomReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void S2SNoticeMatchRoomReq::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2SNoticeMatchRoomReq::serverid() const {
  return serverid_;
}
inline void S2SNoticeMatchRoomReq::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required uint64 roomid = 6;
inline bool S2SNoticeMatchRoomReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void S2SNoticeMatchRoomReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void S2SNoticeMatchRoomReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void S2SNoticeMatchRoomReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SNoticeMatchRoomReq::roomid() const {
  return roomid_;
}
inline void S2SNoticeMatchRoomReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required string ip = 7;
inline bool S2SNoticeMatchRoomReq::has_ip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void S2SNoticeMatchRoomReq::set_has_ip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void S2SNoticeMatchRoomReq::clear_has_ip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void S2SNoticeMatchRoomReq::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& S2SNoticeMatchRoomReq::ip() const {
  return *ip_;
}
inline void S2SNoticeMatchRoomReq::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SNoticeMatchRoomReq::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void S2SNoticeMatchRoomReq::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SNoticeMatchRoomReq::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* S2SNoticeMatchRoomReq::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SNoticeMatchRoomReq::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 port = 8;
inline bool S2SNoticeMatchRoomReq::has_port() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void S2SNoticeMatchRoomReq::set_has_port() {
  _has_bits_[0] |= 0x00000080u;
}
inline void S2SNoticeMatchRoomReq::clear_has_port() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void S2SNoticeMatchRoomReq::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 S2SNoticeMatchRoomReq::port() const {
  return port_;
}
inline void S2SNoticeMatchRoomReq::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// required string token = 9;
inline bool S2SNoticeMatchRoomReq::has_token() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void S2SNoticeMatchRoomReq::set_has_token() {
  _has_bits_[0] |= 0x00000100u;
}
inline void S2SNoticeMatchRoomReq::clear_has_token() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void S2SNoticeMatchRoomReq::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& S2SNoticeMatchRoomReq::token() const {
  return *token_;
}
inline void S2SNoticeMatchRoomReq::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SNoticeMatchRoomReq::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void S2SNoticeMatchRoomReq::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* S2SNoticeMatchRoomReq::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* S2SNoticeMatchRoomReq::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void S2SNoticeMatchRoomReq::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// S2SNoticeMatchRoomAck

// required uint64 roomid = 1;
inline bool S2SNoticeMatchRoomAck::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SNoticeMatchRoomAck::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SNoticeMatchRoomAck::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SNoticeMatchRoomAck::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SNoticeMatchRoomAck::roomid() const {
  return roomid_;
}
inline void S2SNoticeMatchRoomAck::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 campid = 2;
inline bool S2SNoticeMatchRoomAck::has_campid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SNoticeMatchRoomAck::set_has_campid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SNoticeMatchRoomAck::clear_has_campid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SNoticeMatchRoomAck::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 S2SNoticeMatchRoomAck::campid() const {
  return campid_;
}
inline void S2SNoticeMatchRoomAck::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
}

// required uint32 playerid = 3;
inline bool S2SNoticeMatchRoomAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SNoticeMatchRoomAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SNoticeMatchRoomAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SNoticeMatchRoomAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SNoticeMatchRoomAck::playerid() const {
  return playerid_;
}
inline void S2SNoticeMatchRoomAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// S2SQueryMatchRoomReq

// required uint32 matchid = 1;
inline bool S2SQueryMatchRoomReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SQueryMatchRoomReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SQueryMatchRoomReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SQueryMatchRoomReq::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SQueryMatchRoomReq::matchid() const {
  return matchid_;
}
inline void S2SQueryMatchRoomReq::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required uint32 playerid = 2;
inline bool S2SQueryMatchRoomReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SQueryMatchRoomReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SQueryMatchRoomReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SQueryMatchRoomReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SQueryMatchRoomReq::playerid() const {
  return playerid_;
}
inline void S2SQueryMatchRoomReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 serverid = 3;
inline bool S2SQueryMatchRoomReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SQueryMatchRoomReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SQueryMatchRoomReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SQueryMatchRoomReq::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2SQueryMatchRoomReq::serverid() const {
  return serverid_;
}
inline void S2SQueryMatchRoomReq::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// S2SQueryRoomToMatchShardReq

// required uint32 matchid = 1;
inline bool S2SQueryRoomToMatchShardReq::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SQueryRoomToMatchShardReq::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SQueryRoomToMatchShardReq::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SQueryRoomToMatchShardReq::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SQueryRoomToMatchShardReq::matchid() const {
  return matchid_;
}
inline void S2SQueryRoomToMatchShardReq::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required uint32 playerid = 2;
inline bool S2SQueryRoomToMatchShardReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SQueryRoomToMatchShardReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SQueryRoomToMatchShardReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SQueryRoomToMatchShardReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SQueryRoomToMatchShardReq::playerid() const {
  return playerid_;
}
inline void S2SQueryRoomToMatchShardReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 serverid = 3;
inline bool S2SQueryRoomToMatchShardReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SQueryRoomToMatchShardReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SQueryRoomToMatchShardReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SQueryRoomToMatchShardReq::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2SQueryRoomToMatchShardReq::serverid() const {
  return serverid_;
}
inline void S2SQueryRoomToMatchShardReq::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// S2SQueryMatchRoomAck

// required uint32 matchid = 1;
inline bool S2SQueryMatchRoomAck::has_matchid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SQueryMatchRoomAck::set_has_matchid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SQueryMatchRoomAck::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SQueryMatchRoomAck::clear_matchid() {
  matchid_ = 0u;
  clear_has_matchid();
}
inline ::google::protobuf::uint32 S2SQueryMatchRoomAck::matchid() const {
  return matchid_;
}
inline void S2SQueryMatchRoomAck::set_matchid(::google::protobuf::uint32 value) {
  set_has_matchid();
  matchid_ = value;
}

// required uint32 playerid = 2;
inline bool S2SQueryMatchRoomAck::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SQueryMatchRoomAck::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SQueryMatchRoomAck::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SQueryMatchRoomAck::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SQueryMatchRoomAck::playerid() const {
  return playerid_;
}
inline void S2SQueryMatchRoomAck::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// S2SQueryBattleRoomReq

// required uint64 roomid = 1;
inline bool S2SQueryBattleRoomReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SQueryBattleRoomReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SQueryBattleRoomReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SQueryBattleRoomReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SQueryBattleRoomReq::roomid() const {
  return roomid_;
}
inline void S2SQueryBattleRoomReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 playerid = 2;
inline bool S2SQueryBattleRoomReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SQueryBattleRoomReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SQueryBattleRoomReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SQueryBattleRoomReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SQueryBattleRoomReq::playerid() const {
  return playerid_;
}
inline void S2SQueryBattleRoomReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 serverid = 3;
inline bool S2SQueryBattleRoomReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SQueryBattleRoomReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SQueryBattleRoomReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SQueryBattleRoomReq::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2SQueryBattleRoomReq::serverid() const {
  return serverid_;
}
inline void S2SQueryBattleRoomReq::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// S2SQueryRoomToBattleShardReq

// required uint64 roomid = 1;
inline bool S2SQueryRoomToBattleShardReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SQueryRoomToBattleShardReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SQueryRoomToBattleShardReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SQueryRoomToBattleShardReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SQueryRoomToBattleShardReq::roomid() const {
  return roomid_;
}
inline void S2SQueryRoomToBattleShardReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 playerid = 2;
inline bool S2SQueryRoomToBattleShardReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SQueryRoomToBattleShardReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SQueryRoomToBattleShardReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SQueryRoomToBattleShardReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SQueryRoomToBattleShardReq::playerid() const {
  return playerid_;
}
inline void S2SQueryRoomToBattleShardReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 serverid = 3;
inline bool S2SQueryRoomToBattleShardReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SQueryRoomToBattleShardReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SQueryRoomToBattleShardReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SQueryRoomToBattleShardReq::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2SQueryRoomToBattleShardReq::serverid() const {
  return serverid_;
}
inline void S2SQueryRoomToBattleShardReq::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// S2SPlayerOnlineToBattleShardReq

// required uint64 roomid = 1;
inline bool S2SPlayerOnlineToBattleShardReq::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void S2SPlayerOnlineToBattleShardReq::set_has_roomid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void S2SPlayerOnlineToBattleShardReq::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void S2SPlayerOnlineToBattleShardReq::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 S2SPlayerOnlineToBattleShardReq::roomid() const {
  return roomid_;
}
inline void S2SPlayerOnlineToBattleShardReq::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
}

// required uint32 campid = 2;
inline bool S2SPlayerOnlineToBattleShardReq::has_campid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void S2SPlayerOnlineToBattleShardReq::set_has_campid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void S2SPlayerOnlineToBattleShardReq::clear_has_campid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void S2SPlayerOnlineToBattleShardReq::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 S2SPlayerOnlineToBattleShardReq::campid() const {
  return campid_;
}
inline void S2SPlayerOnlineToBattleShardReq::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
}

// required uint32 playerid = 3;
inline bool S2SPlayerOnlineToBattleShardReq::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void S2SPlayerOnlineToBattleShardReq::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void S2SPlayerOnlineToBattleShardReq::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void S2SPlayerOnlineToBattleShardReq::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 S2SPlayerOnlineToBattleShardReq::playerid() const {
  return playerid_;
}
inline void S2SPlayerOnlineToBattleShardReq::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required uint32 serverid = 4;
inline bool S2SPlayerOnlineToBattleShardReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void S2SPlayerOnlineToBattleShardReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void S2SPlayerOnlineToBattleShardReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void S2SPlayerOnlineToBattleShardReq::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 S2SPlayerOnlineToBattleShardReq::serverid() const {
  return serverid_;
}
inline void S2SPlayerOnlineToBattleShardReq::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::MatchProtocol>() {
  return ::KFMsg::MatchProtocol_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_KFMatchMessage_2eproto__INCLUDED
