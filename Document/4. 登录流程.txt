http 使用的是json格式
tcp 使用的google protobuf 文件在 E:\KFrame\Resource\protocol\proto
==============================================================================================
==============================================================================================

1. http访问认证服务器auth, post内容为json格式
	url: http://192.168.3.203:7777/auth
	data:{"channel":1,"account":"lori227"} 
		channel 渠道编号, 1位内部测试
		account 玩家的账号

	认证成功, 返回json数据
	{"accountflag":0,"accountid":500001,"retcode":1,"serverlist":[{"address":"192.168.3.203","describe":"","id":1,"name":"内网测试服","port":11000,"status":1,"type":1}],"token":"5e950864be06d3a7f0830e89bc9a5a61"}
		retcode 返回结果码  1 表示成功, 0 表示服务器不能访问, 其余都是错误码
		accountid 账号id
		accountflag 账号标识  0 普通账号 ( 其他数值表示gm账号, 白名单账号之类, 以后需要配合运营后台定 )
		token 登录token
		serverlist 服务器列表
			id 服务器id
			name 服务器名字
			address 服务器地址
			port 服务器端口
			status 服务器状态 1 开放, 0 关闭, 2 测试( 只有白名单能进入 )
			describe 服务器状态描述

2. 连接服务器 创建tcp连接指定ip和port

3. 连接成功, 发送消息认证
	MsgLoginVerifyReq( 消息id : MSG_LOGIN_VERIFY_REQ ) 
	accountid : http返回的accountid
	token : http 返回的token数据

4. 接受认证消息 
	MsgLoginVerifyAck  ( 消息id : MSG_LOGIN_VERIFY_ACK )
		result : 返回结果
			Login_Verify_OK 		= 11;		// 登录成功
			Login_World_System_Busy 	= 12;		// 世界服务器出错了
			Login_Login_System_Busy 	= 13;		// 登录服务器出错了
			Login_Can_Not_Find_Node 	= 14;		// 没有可登录的节点
			Login_Platform_Busy 		= 15;		// 平台服务器出错了
			Login_Platform_Database_Busy 	= 16;		// 平台数据库出错了 	 
			Login_Can_Not_Find_Game 	= 17;		// 没有可登录的游戏服务器
			Login_Ip_Port_Error 		= 18;		// 连接的端口ip 错误
			Login_Token_Timeout 		= 19;		// 登录token已经过期
			Login_Token_Error 		= 20;		// 登录token错误
			Login_Load_Data_Failed 		= 21;		// 加载失败
			Login_Http_Data_Error 		= 22;		// http内部数据错误
			Login_Load_Database_Error 	= 23;		// 加载数据库错误
			Login_Parse_Data_Error 		= 24;		// 数据解析错误
			Login_Create_Player_Error 	= 25;		// 创建角色失败
	
		playerid : 玩家的角色id
		token : 新的token数据
		ip : 新的连接地址
		port : 新的连接端口

5. 如果步骤4认证返回成功, 断开现有连接, 连接新的服务器
6. 连接成功,发送登录游戏服务器消息
	MsgLoginGameReq( 消息id : MSG_LOGIN_GAME_REQ )
		playerid : 玩家的角色id
		token : 新的token数据

7. 如果登录失败
	返回 MsgLoginGameAck ( 消息id : MSG_LOGIN_GAME_ACK )
   如果登录成功
	返回 MsgEnterGame ( 消息id : MSG_LOGIN_ENTER_GAME )
	解析PBObject需要class.config 配置文件


========================================================================================================
========================================================================================================
tcp 数据包内容
	消息头:
		guid 8个字节
		length 4个字节 消息体长度( 不包括消息头 )
		msgid 2个字节 消息id
		child 2个字节 子消息个数


	完整的消息

		8字节|4字节|2字节|2字节|data(动态长度,长度大小在length里面)|......

		1条消息 guid|length|msgid|child|data
		2条消息 guid|length|msgid|child|data|guid|length|msgid|child|data
		n条消息 guid|length|msgid|child|data|guid|length|msgid|child|data|.......


	客户端收的数据包可能是1条消息, 也可能是多条消息, 也可能是不完整的消息
	所以客户端需要把收到的数据包先保存到本地的buff中, 然后根据消息格式来解析数据,
	buff 不够一个消息头 或者不够一条完整消息 需要等待继续收到数据才解析
	解析完一条消息, buff清空这条消息数据, 然后把消息push到一个消息队列等待处理, 
	
	如果是拆分的消息, 需要合并成一个大消息( 消息很大, 拆分成多条消息发送 )
	当收到msgid 为 CUT_MSGCHILDBEGIN 65535 的数据, 表示这是一个拆分的消息
	需要等所有的子消息( msgid 为 CUT_MSGCHILD 65534 )都收到才能组装成一个大消息

	


