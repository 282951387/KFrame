// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFMidwareServerMessage.proto

#ifndef PROTOBUF_INCLUDED_KFMidwareServerMessage_2eproto
#define PROTOBUF_INCLUDED_KFMidwareServerMessage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "KFDefineMessage.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_KFMidwareServerMessage_2eproto LIBPROTOC_EXPORT

namespace protobuf_KFMidwareServerMessage_2eproto {
// Internal implementation detail -- do not use these members.
struct LIBPROTOC_EXPORT TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void LIBPROTOC_EXPORT AddDescriptors();
}  // namespace protobuf_KFMidwareServerMessage_2eproto
namespace KFMsg {
class S2SBroadcastMessageReq;
class S2SBroadcastMessageReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SBroadcastMessageReqDefaultTypeInternal _S2SBroadcastMessageReq_default_instance_;
class S2SBroadcastToGame;
class S2SBroadcastToGameDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SBroadcastToGameDefaultTypeInternal _S2SBroadcastToGame_default_instance_;
class S2SBroadcastToGate;
class S2SBroadcastToGateDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SBroadcastToGateDefaultTypeInternal _S2SBroadcastToGate_default_instance_;
class S2SBroadcastToWord;
class S2SBroadcastToWordDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2SBroadcastToWordDefaultTypeInternal _S2SBroadcastToWord_default_instance_;
class S2STransmitMessageReq;
class S2STransmitMessageReqDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2STransmitMessageReqDefaultTypeInternal _S2STransmitMessageReq_default_instance_;
class S2STransmitToPlayer;
class S2STransmitToPlayerDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2STransmitToPlayerDefaultTypeInternal _S2STransmitToPlayer_default_instance_;
class S2STransmitToServer;
class S2STransmitToServerDefaultTypeInternal;
LIBPROTOC_EXPORT extern S2STransmitToServerDefaultTypeInternal _S2STransmitToServer_default_instance_;
}  // namespace KFMsg
namespace google {
namespace protobuf {
template<> LIBPROTOC_EXPORT ::KFMsg::S2SBroadcastMessageReq* Arena::CreateMaybeMessage<::KFMsg::S2SBroadcastMessageReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SBroadcastToGame* Arena::CreateMaybeMessage<::KFMsg::S2SBroadcastToGame>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SBroadcastToGate* Arena::CreateMaybeMessage<::KFMsg::S2SBroadcastToGate>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2SBroadcastToWord* Arena::CreateMaybeMessage<::KFMsg::S2SBroadcastToWord>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2STransmitMessageReq* Arena::CreateMaybeMessage<::KFMsg::S2STransmitMessageReq>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2STransmitToPlayer* Arena::CreateMaybeMessage<::KFMsg::S2STransmitToPlayer>(Arena*);
template<> LIBPROTOC_EXPORT ::KFMsg::S2STransmitToServer* Arena::CreateMaybeMessage<::KFMsg::S2STransmitToServer>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace KFMsg {

enum MidwareServerProtocol {
  S2S_MIDWARE_SERVER_PROTOCOL_BEGIN = 0,
  S2S_BROADCAST_TO_WORLD = 20001,
  S2S_BROADCAST_TO_GAME = 20002,
  S2S_BROADCAST_TO_GATE = 20003,
  S2S_TRANSMIT_TO_PLAYER = 20004,
  S2S_TRANSMIT_TO_SERVER = 20005,
  MidwareServerProtocol_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MidwareServerProtocol_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
LIBPROTOC_EXPORT bool MidwareServerProtocol_IsValid(int value);
const MidwareServerProtocol MidwareServerProtocol_MIN = S2S_MIDWARE_SERVER_PROTOCOL_BEGIN;
const MidwareServerProtocol MidwareServerProtocol_MAX = S2S_TRANSMIT_TO_SERVER;
const int MidwareServerProtocol_ARRAYSIZE = MidwareServerProtocol_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* MidwareServerProtocol_descriptor();
inline const ::std::string& MidwareServerProtocol_Name(MidwareServerProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    MidwareServerProtocol_descriptor(), value);
}
inline bool MidwareServerProtocol_Parse(
    const ::std::string& name, MidwareServerProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MidwareServerProtocol>(
    MidwareServerProtocol_descriptor(), name, value);
}
// ===================================================================

class LIBPROTOC_EXPORT S2STransmitMessageReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2STransmitMessageReq) */ {
 public:
  S2STransmitMessageReq();
  virtual ~S2STransmitMessageReq();

  S2STransmitMessageReq(const S2STransmitMessageReq& from);

  inline S2STransmitMessageReq& operator=(const S2STransmitMessageReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2STransmitMessageReq(S2STransmitMessageReq&& from) noexcept
    : S2STransmitMessageReq() {
    *this = ::std::move(from);
  }

  inline S2STransmitMessageReq& operator=(S2STransmitMessageReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STransmitMessageReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2STransmitMessageReq* internal_default_instance() {
    return reinterpret_cast<const S2STransmitMessageReq*>(
               &_S2STransmitMessageReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(S2STransmitMessageReq* other);
  friend void swap(S2STransmitMessageReq& a, S2STransmitMessageReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2STransmitMessageReq* New() const final {
    return CreateMaybeMessage<S2STransmitMessageReq>(NULL);
  }

  S2STransmitMessageReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2STransmitMessageReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2STransmitMessageReq& from);
  void MergeFrom(const S2STransmitMessageReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2STransmitMessageReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msgdata = 3;
  void clear_msgdata();
  static const int kMsgdataFieldNumber = 3;
  const ::std::string& msgdata() const;
  void set_msgdata(const ::std::string& value);
  #if LANG_CXX11
  void set_msgdata(::std::string&& value);
  #endif
  void set_msgdata(const char* value);
  void set_msgdata(const void* value, size_t size);
  ::std::string* mutable_msgdata();
  ::std::string* release_msgdata();
  void set_allocated_msgdata(::std::string* msgdata);

  // uint64 playerid = 1;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // uint32 msgid = 2;
  void clear_msgid();
  static const int kMsgidFieldNumber = 2;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STransmitMessageReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msgdata_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint32 msgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFMidwareServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SBroadcastMessageReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SBroadcastMessageReq) */ {
 public:
  S2SBroadcastMessageReq();
  virtual ~S2SBroadcastMessageReq();

  S2SBroadcastMessageReq(const S2SBroadcastMessageReq& from);

  inline S2SBroadcastMessageReq& operator=(const S2SBroadcastMessageReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SBroadcastMessageReq(S2SBroadcastMessageReq&& from) noexcept
    : S2SBroadcastMessageReq() {
    *this = ::std::move(from);
  }

  inline S2SBroadcastMessageReq& operator=(S2SBroadcastMessageReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SBroadcastMessageReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SBroadcastMessageReq* internal_default_instance() {
    return reinterpret_cast<const S2SBroadcastMessageReq*>(
               &_S2SBroadcastMessageReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(S2SBroadcastMessageReq* other);
  friend void swap(S2SBroadcastMessageReq& a, S2SBroadcastMessageReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SBroadcastMessageReq* New() const final {
    return CreateMaybeMessage<S2SBroadcastMessageReq>(NULL);
  }

  S2SBroadcastMessageReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SBroadcastMessageReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SBroadcastMessageReq& from);
  void MergeFrom(const S2SBroadcastMessageReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SBroadcastMessageReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msgdata = 2;
  void clear_msgdata();
  static const int kMsgdataFieldNumber = 2;
  const ::std::string& msgdata() const;
  void set_msgdata(const ::std::string& value);
  #if LANG_CXX11
  void set_msgdata(::std::string&& value);
  #endif
  void set_msgdata(const char* value);
  void set_msgdata(const void* value, size_t size);
  ::std::string* mutable_msgdata();
  ::std::string* release_msgdata();
  void set_allocated_msgdata(::std::string* msgdata);

  // uint32 msgid = 1;
  void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SBroadcastMessageReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msgdata_;
  ::google::protobuf::uint32 msgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFMidwareServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SBroadcastToWord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SBroadcastToWord) */ {
 public:
  S2SBroadcastToWord();
  virtual ~S2SBroadcastToWord();

  S2SBroadcastToWord(const S2SBroadcastToWord& from);

  inline S2SBroadcastToWord& operator=(const S2SBroadcastToWord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SBroadcastToWord(S2SBroadcastToWord&& from) noexcept
    : S2SBroadcastToWord() {
    *this = ::std::move(from);
  }

  inline S2SBroadcastToWord& operator=(S2SBroadcastToWord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SBroadcastToWord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SBroadcastToWord* internal_default_instance() {
    return reinterpret_cast<const S2SBroadcastToWord*>(
               &_S2SBroadcastToWord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(S2SBroadcastToWord* other);
  friend void swap(S2SBroadcastToWord& a, S2SBroadcastToWord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SBroadcastToWord* New() const final {
    return CreateMaybeMessage<S2SBroadcastToWord>(NULL);
  }

  S2SBroadcastToWord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SBroadcastToWord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SBroadcastToWord& from);
  void MergeFrom(const S2SBroadcastToWord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SBroadcastToWord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msgdata = 2;
  void clear_msgdata();
  static const int kMsgdataFieldNumber = 2;
  const ::std::string& msgdata() const;
  void set_msgdata(const ::std::string& value);
  #if LANG_CXX11
  void set_msgdata(::std::string&& value);
  #endif
  void set_msgdata(const char* value);
  void set_msgdata(const void* value, size_t size);
  ::std::string* mutable_msgdata();
  ::std::string* release_msgdata();
  void set_allocated_msgdata(::std::string* msgdata);

  // uint32 msgid = 1;
  void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SBroadcastToWord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msgdata_;
  ::google::protobuf::uint32 msgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFMidwareServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SBroadcastToGame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SBroadcastToGame) */ {
 public:
  S2SBroadcastToGame();
  virtual ~S2SBroadcastToGame();

  S2SBroadcastToGame(const S2SBroadcastToGame& from);

  inline S2SBroadcastToGame& operator=(const S2SBroadcastToGame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SBroadcastToGame(S2SBroadcastToGame&& from) noexcept
    : S2SBroadcastToGame() {
    *this = ::std::move(from);
  }

  inline S2SBroadcastToGame& operator=(S2SBroadcastToGame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SBroadcastToGame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SBroadcastToGame* internal_default_instance() {
    return reinterpret_cast<const S2SBroadcastToGame*>(
               &_S2SBroadcastToGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(S2SBroadcastToGame* other);
  friend void swap(S2SBroadcastToGame& a, S2SBroadcastToGame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SBroadcastToGame* New() const final {
    return CreateMaybeMessage<S2SBroadcastToGame>(NULL);
  }

  S2SBroadcastToGame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SBroadcastToGame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SBroadcastToGame& from);
  void MergeFrom(const S2SBroadcastToGame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SBroadcastToGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msgdata = 2;
  void clear_msgdata();
  static const int kMsgdataFieldNumber = 2;
  const ::std::string& msgdata() const;
  void set_msgdata(const ::std::string& value);
  #if LANG_CXX11
  void set_msgdata(::std::string&& value);
  #endif
  void set_msgdata(const char* value);
  void set_msgdata(const void* value, size_t size);
  ::std::string* mutable_msgdata();
  ::std::string* release_msgdata();
  void set_allocated_msgdata(::std::string* msgdata);

  // uint32 msgid = 1;
  void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SBroadcastToGame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msgdata_;
  ::google::protobuf::uint32 msgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFMidwareServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2SBroadcastToGate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2SBroadcastToGate) */ {
 public:
  S2SBroadcastToGate();
  virtual ~S2SBroadcastToGate();

  S2SBroadcastToGate(const S2SBroadcastToGate& from);

  inline S2SBroadcastToGate& operator=(const S2SBroadcastToGate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2SBroadcastToGate(S2SBroadcastToGate&& from) noexcept
    : S2SBroadcastToGate() {
    *this = ::std::move(from);
  }

  inline S2SBroadcastToGate& operator=(S2SBroadcastToGate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2SBroadcastToGate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2SBroadcastToGate* internal_default_instance() {
    return reinterpret_cast<const S2SBroadcastToGate*>(
               &_S2SBroadcastToGate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(S2SBroadcastToGate* other);
  friend void swap(S2SBroadcastToGate& a, S2SBroadcastToGate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2SBroadcastToGate* New() const final {
    return CreateMaybeMessage<S2SBroadcastToGate>(NULL);
  }

  S2SBroadcastToGate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2SBroadcastToGate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2SBroadcastToGate& from);
  void MergeFrom(const S2SBroadcastToGate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2SBroadcastToGate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msgdata = 2;
  void clear_msgdata();
  static const int kMsgdataFieldNumber = 2;
  const ::std::string& msgdata() const;
  void set_msgdata(const ::std::string& value);
  #if LANG_CXX11
  void set_msgdata(::std::string&& value);
  #endif
  void set_msgdata(const char* value);
  void set_msgdata(const void* value, size_t size);
  ::std::string* mutable_msgdata();
  ::std::string* release_msgdata();
  void set_allocated_msgdata(::std::string* msgdata);

  // uint32 msgid = 1;
  void clear_msgid();
  static const int kMsgidFieldNumber = 1;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2SBroadcastToGate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msgdata_;
  ::google::protobuf::uint32 msgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFMidwareServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STransmitToPlayer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2STransmitToPlayer) */ {
 public:
  S2STransmitToPlayer();
  virtual ~S2STransmitToPlayer();

  S2STransmitToPlayer(const S2STransmitToPlayer& from);

  inline S2STransmitToPlayer& operator=(const S2STransmitToPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2STransmitToPlayer(S2STransmitToPlayer&& from) noexcept
    : S2STransmitToPlayer() {
    *this = ::std::move(from);
  }

  inline S2STransmitToPlayer& operator=(S2STransmitToPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STransmitToPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2STransmitToPlayer* internal_default_instance() {
    return reinterpret_cast<const S2STransmitToPlayer*>(
               &_S2STransmitToPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(S2STransmitToPlayer* other);
  friend void swap(S2STransmitToPlayer& a, S2STransmitToPlayer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2STransmitToPlayer* New() const final {
    return CreateMaybeMessage<S2STransmitToPlayer>(NULL);
  }

  S2STransmitToPlayer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2STransmitToPlayer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2STransmitToPlayer& from);
  void MergeFrom(const S2STransmitToPlayer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2STransmitToPlayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msgdata = 3;
  void clear_msgdata();
  static const int kMsgdataFieldNumber = 3;
  const ::std::string& msgdata() const;
  void set_msgdata(const ::std::string& value);
  #if LANG_CXX11
  void set_msgdata(::std::string&& value);
  #endif
  void set_msgdata(const char* value);
  void set_msgdata(const void* value, size_t size);
  ::std::string* mutable_msgdata();
  ::std::string* release_msgdata();
  void set_allocated_msgdata(::std::string* msgdata);

  // uint64 playerid = 1;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  ::google::protobuf::uint64 playerid() const;
  void set_playerid(::google::protobuf::uint64 value);

  // uint32 msgid = 2;
  void clear_msgid();
  static const int kMsgidFieldNumber = 2;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STransmitToPlayer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msgdata_;
  ::google::protobuf::uint64 playerid_;
  ::google::protobuf::uint32 msgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFMidwareServerMessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT S2STransmitToServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KFMsg.S2STransmitToServer) */ {
 public:
  S2STransmitToServer();
  virtual ~S2STransmitToServer();

  S2STransmitToServer(const S2STransmitToServer& from);

  inline S2STransmitToServer& operator=(const S2STransmitToServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  S2STransmitToServer(S2STransmitToServer&& from) noexcept
    : S2STransmitToServer() {
    *this = ::std::move(from);
  }

  inline S2STransmitToServer& operator=(S2STransmitToServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const S2STransmitToServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const S2STransmitToServer* internal_default_instance() {
    return reinterpret_cast<const S2STransmitToServer*>(
               &_S2STransmitToServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(S2STransmitToServer* other);
  friend void swap(S2STransmitToServer& a, S2STransmitToServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline S2STransmitToServer* New() const final {
    return CreateMaybeMessage<S2STransmitToServer>(NULL);
  }

  S2STransmitToServer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<S2STransmitToServer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const S2STransmitToServer& from);
  void MergeFrom(const S2STransmitToServer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2STransmitToServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msgdata = 3;
  void clear_msgdata();
  static const int kMsgdataFieldNumber = 3;
  const ::std::string& msgdata() const;
  void set_msgdata(const ::std::string& value);
  #if LANG_CXX11
  void set_msgdata(::std::string&& value);
  #endif
  void set_msgdata(const char* value);
  void set_msgdata(const void* value, size_t size);
  ::std::string* mutable_msgdata();
  ::std::string* release_msgdata();
  void set_allocated_msgdata(::std::string* msgdata);

  // uint32 msgid = 2;
  void clear_msgid();
  static const int kMsgidFieldNumber = 2;
  ::google::protobuf::uint32 msgid() const;
  void set_msgid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:KFMsg.S2STransmitToServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msgdata_;
  ::google::protobuf::uint32 msgid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_KFMidwareServerMessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// S2STransmitMessageReq

// uint64 playerid = 1;
inline void S2STransmitMessageReq::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2STransmitMessageReq::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2STransmitMessageReq.playerid)
  return playerid_;
}
inline void S2STransmitMessageReq::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2STransmitMessageReq.playerid)
}

// uint32 msgid = 2;
inline void S2STransmitMessageReq::clear_msgid() {
  msgid_ = 0u;
}
inline ::google::protobuf::uint32 S2STransmitMessageReq::msgid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2STransmitMessageReq.msgid)
  return msgid_;
}
inline void S2STransmitMessageReq::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2STransmitMessageReq.msgid)
}

// bytes msgdata = 3;
inline void S2STransmitMessageReq::clear_msgdata() {
  msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2STransmitMessageReq::msgdata() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2STransmitMessageReq.msgdata)
  return msgdata_.GetNoArena();
}
inline void S2STransmitMessageReq::set_msgdata(const ::std::string& value) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2STransmitMessageReq.msgdata)
}
#if LANG_CXX11
inline void S2STransmitMessageReq::set_msgdata(::std::string&& value) {
  
  msgdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2STransmitMessageReq.msgdata)
}
#endif
inline void S2STransmitMessageReq::set_msgdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2STransmitMessageReq.msgdata)
}
inline void S2STransmitMessageReq::set_msgdata(const void* value, size_t size) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2STransmitMessageReq.msgdata)
}
inline ::std::string* S2STransmitMessageReq::mutable_msgdata() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2STransmitMessageReq.msgdata)
  return msgdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2STransmitMessageReq::release_msgdata() {
  // @@protoc_insertion_point(field_release:KFMsg.S2STransmitMessageReq.msgdata)
  
  return msgdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2STransmitMessageReq::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata != NULL) {
    
  } else {
    
  }
  msgdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgdata);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2STransmitMessageReq.msgdata)
}

// -------------------------------------------------------------------

// S2SBroadcastMessageReq

// uint32 msgid = 1;
inline void S2SBroadcastMessageReq::clear_msgid() {
  msgid_ = 0u;
}
inline ::google::protobuf::uint32 S2SBroadcastMessageReq::msgid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SBroadcastMessageReq.msgid)
  return msgid_;
}
inline void S2SBroadcastMessageReq::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SBroadcastMessageReq.msgid)
}

// bytes msgdata = 2;
inline void S2SBroadcastMessageReq::clear_msgdata() {
  msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SBroadcastMessageReq::msgdata() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SBroadcastMessageReq.msgdata)
  return msgdata_.GetNoArena();
}
inline void S2SBroadcastMessageReq::set_msgdata(const ::std::string& value) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SBroadcastMessageReq.msgdata)
}
#if LANG_CXX11
inline void S2SBroadcastMessageReq::set_msgdata(::std::string&& value) {
  
  msgdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SBroadcastMessageReq.msgdata)
}
#endif
inline void S2SBroadcastMessageReq::set_msgdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SBroadcastMessageReq.msgdata)
}
inline void S2SBroadcastMessageReq::set_msgdata(const void* value, size_t size) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SBroadcastMessageReq.msgdata)
}
inline ::std::string* S2SBroadcastMessageReq::mutable_msgdata() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SBroadcastMessageReq.msgdata)
  return msgdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SBroadcastMessageReq::release_msgdata() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SBroadcastMessageReq.msgdata)
  
  return msgdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SBroadcastMessageReq::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata != NULL) {
    
  } else {
    
  }
  msgdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgdata);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SBroadcastMessageReq.msgdata)
}

// -------------------------------------------------------------------

// S2SBroadcastToWord

// uint32 msgid = 1;
inline void S2SBroadcastToWord::clear_msgid() {
  msgid_ = 0u;
}
inline ::google::protobuf::uint32 S2SBroadcastToWord::msgid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SBroadcastToWord.msgid)
  return msgid_;
}
inline void S2SBroadcastToWord::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SBroadcastToWord.msgid)
}

// bytes msgdata = 2;
inline void S2SBroadcastToWord::clear_msgdata() {
  msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SBroadcastToWord::msgdata() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SBroadcastToWord.msgdata)
  return msgdata_.GetNoArena();
}
inline void S2SBroadcastToWord::set_msgdata(const ::std::string& value) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SBroadcastToWord.msgdata)
}
#if LANG_CXX11
inline void S2SBroadcastToWord::set_msgdata(::std::string&& value) {
  
  msgdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SBroadcastToWord.msgdata)
}
#endif
inline void S2SBroadcastToWord::set_msgdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SBroadcastToWord.msgdata)
}
inline void S2SBroadcastToWord::set_msgdata(const void* value, size_t size) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SBroadcastToWord.msgdata)
}
inline ::std::string* S2SBroadcastToWord::mutable_msgdata() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SBroadcastToWord.msgdata)
  return msgdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SBroadcastToWord::release_msgdata() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SBroadcastToWord.msgdata)
  
  return msgdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SBroadcastToWord::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata != NULL) {
    
  } else {
    
  }
  msgdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgdata);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SBroadcastToWord.msgdata)
}

// -------------------------------------------------------------------

// S2SBroadcastToGame

// uint32 msgid = 1;
inline void S2SBroadcastToGame::clear_msgid() {
  msgid_ = 0u;
}
inline ::google::protobuf::uint32 S2SBroadcastToGame::msgid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SBroadcastToGame.msgid)
  return msgid_;
}
inline void S2SBroadcastToGame::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SBroadcastToGame.msgid)
}

// bytes msgdata = 2;
inline void S2SBroadcastToGame::clear_msgdata() {
  msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SBroadcastToGame::msgdata() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SBroadcastToGame.msgdata)
  return msgdata_.GetNoArena();
}
inline void S2SBroadcastToGame::set_msgdata(const ::std::string& value) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SBroadcastToGame.msgdata)
}
#if LANG_CXX11
inline void S2SBroadcastToGame::set_msgdata(::std::string&& value) {
  
  msgdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SBroadcastToGame.msgdata)
}
#endif
inline void S2SBroadcastToGame::set_msgdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SBroadcastToGame.msgdata)
}
inline void S2SBroadcastToGame::set_msgdata(const void* value, size_t size) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SBroadcastToGame.msgdata)
}
inline ::std::string* S2SBroadcastToGame::mutable_msgdata() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SBroadcastToGame.msgdata)
  return msgdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SBroadcastToGame::release_msgdata() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SBroadcastToGame.msgdata)
  
  return msgdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SBroadcastToGame::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata != NULL) {
    
  } else {
    
  }
  msgdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgdata);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SBroadcastToGame.msgdata)
}

// -------------------------------------------------------------------

// S2SBroadcastToGate

// uint32 msgid = 1;
inline void S2SBroadcastToGate::clear_msgid() {
  msgid_ = 0u;
}
inline ::google::protobuf::uint32 S2SBroadcastToGate::msgid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SBroadcastToGate.msgid)
  return msgid_;
}
inline void S2SBroadcastToGate::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2SBroadcastToGate.msgid)
}

// bytes msgdata = 2;
inline void S2SBroadcastToGate::clear_msgdata() {
  msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2SBroadcastToGate::msgdata() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2SBroadcastToGate.msgdata)
  return msgdata_.GetNoArena();
}
inline void S2SBroadcastToGate::set_msgdata(const ::std::string& value) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2SBroadcastToGate.msgdata)
}
#if LANG_CXX11
inline void S2SBroadcastToGate::set_msgdata(::std::string&& value) {
  
  msgdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2SBroadcastToGate.msgdata)
}
#endif
inline void S2SBroadcastToGate::set_msgdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2SBroadcastToGate.msgdata)
}
inline void S2SBroadcastToGate::set_msgdata(const void* value, size_t size) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2SBroadcastToGate.msgdata)
}
inline ::std::string* S2SBroadcastToGate::mutable_msgdata() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2SBroadcastToGate.msgdata)
  return msgdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2SBroadcastToGate::release_msgdata() {
  // @@protoc_insertion_point(field_release:KFMsg.S2SBroadcastToGate.msgdata)
  
  return msgdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2SBroadcastToGate::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata != NULL) {
    
  } else {
    
  }
  msgdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgdata);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2SBroadcastToGate.msgdata)
}

// -------------------------------------------------------------------

// S2STransmitToPlayer

// uint64 playerid = 1;
inline void S2STransmitToPlayer::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 S2STransmitToPlayer::playerid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2STransmitToPlayer.playerid)
  return playerid_;
}
inline void S2STransmitToPlayer::set_playerid(::google::protobuf::uint64 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2STransmitToPlayer.playerid)
}

// uint32 msgid = 2;
inline void S2STransmitToPlayer::clear_msgid() {
  msgid_ = 0u;
}
inline ::google::protobuf::uint32 S2STransmitToPlayer::msgid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2STransmitToPlayer.msgid)
  return msgid_;
}
inline void S2STransmitToPlayer::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2STransmitToPlayer.msgid)
}

// bytes msgdata = 3;
inline void S2STransmitToPlayer::clear_msgdata() {
  msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2STransmitToPlayer::msgdata() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2STransmitToPlayer.msgdata)
  return msgdata_.GetNoArena();
}
inline void S2STransmitToPlayer::set_msgdata(const ::std::string& value) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2STransmitToPlayer.msgdata)
}
#if LANG_CXX11
inline void S2STransmitToPlayer::set_msgdata(::std::string&& value) {
  
  msgdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2STransmitToPlayer.msgdata)
}
#endif
inline void S2STransmitToPlayer::set_msgdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2STransmitToPlayer.msgdata)
}
inline void S2STransmitToPlayer::set_msgdata(const void* value, size_t size) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2STransmitToPlayer.msgdata)
}
inline ::std::string* S2STransmitToPlayer::mutable_msgdata() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2STransmitToPlayer.msgdata)
  return msgdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2STransmitToPlayer::release_msgdata() {
  // @@protoc_insertion_point(field_release:KFMsg.S2STransmitToPlayer.msgdata)
  
  return msgdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2STransmitToPlayer::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata != NULL) {
    
  } else {
    
  }
  msgdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgdata);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2STransmitToPlayer.msgdata)
}

// -------------------------------------------------------------------

// S2STransmitToServer

// uint32 msgid = 2;
inline void S2STransmitToServer::clear_msgid() {
  msgid_ = 0u;
}
inline ::google::protobuf::uint32 S2STransmitToServer::msgid() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2STransmitToServer.msgid)
  return msgid_;
}
inline void S2STransmitToServer::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:KFMsg.S2STransmitToServer.msgid)
}

// bytes msgdata = 3;
inline void S2STransmitToServer::clear_msgdata() {
  msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& S2STransmitToServer::msgdata() const {
  // @@protoc_insertion_point(field_get:KFMsg.S2STransmitToServer.msgdata)
  return msgdata_.GetNoArena();
}
inline void S2STransmitToServer::set_msgdata(const ::std::string& value) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KFMsg.S2STransmitToServer.msgdata)
}
#if LANG_CXX11
inline void S2STransmitToServer::set_msgdata(::std::string&& value) {
  
  msgdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KFMsg.S2STransmitToServer.msgdata)
}
#endif
inline void S2STransmitToServer::set_msgdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KFMsg.S2STransmitToServer.msgdata)
}
inline void S2STransmitToServer::set_msgdata(const void* value, size_t size) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KFMsg.S2STransmitToServer.msgdata)
}
inline ::std::string* S2STransmitToServer::mutable_msgdata() {
  
  // @@protoc_insertion_point(field_mutable:KFMsg.S2STransmitToServer.msgdata)
  return msgdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* S2STransmitToServer::release_msgdata() {
  // @@protoc_insertion_point(field_release:KFMsg.S2STransmitToServer.msgdata)
  
  return msgdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void S2STransmitToServer::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata != NULL) {
    
  } else {
    
  }
  msgdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgdata);
  // @@protoc_insertion_point(field_set_allocated:KFMsg.S2STransmitToServer.msgdata)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace KFMsg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::KFMsg::MidwareServerProtocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KFMsg::MidwareServerProtocol>() {
  return ::KFMsg::MidwareServerProtocol_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_KFMidwareServerMessage_2eproto
