// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KFMidwareCodeMessage.proto

#include "KFMidwareCodeMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace KFMsg {
}  // namespace KFMsg
namespace protobuf_KFMidwareCodeMessage_2eproto {
void InitDefaults() {
}

const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "KFMidwareCodeMessage.proto", schemas, file_default_instances, TableStruct::offsets,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\032KFMidwareCodeMessage.proto\022\005KFMsg*\232\016\n\017"
      "MidwareCodeEnum\022\t\n\005Error\020\000\022\006\n\002Ok\020\001\022\022\n\rHt"
      "tpDataError\020\220N\022\025\n\020AuthDatabaseBusy\020\221N\022\023\n"
      "\016AuthServerBusy\020\222N\022\023\n\016ZoneServerBusy\020\223N\022"
      "\025\n\020ZoneDatabaseBusy\020\224N\022\025\n\020NameDatabaseBu"
      "sy\020\225N\022\023\n\016DataServerBusy\020\226N\022\023\n\016MailServer"
      "Busy\020\227N\022\023\n\016AccountIsEmpty\020\371U\022\026\n\021Activati"
      "onAccount\020\372U\022\032\n\025InvalidActivationCode\020\373U"
      "\022\030\n\023ActivationCodeError\020\374U\022\024\n\017LoginToken"
      "Error\020\375U\022\023\n\016BanForbidLogin\020\376U\022\026\n\021Channel"
      "NotSupport\020\377U\022\023\n\016ChannelNotOpen\020\200V\022\021\n\014Ch"
      "annelError\020\201V\022\020\n\013WeiXinError\020\202V\022\024\n\017WeiXi"
      "nUserError\020\203V\022\025\n\020WeiXinTokenError\020\204V\022\024\n\017"
      "WeiXinCodeError\020\205V\022\027\n\022WeiXinTokenTimeout"
      "\020\206V\022\017\n\nSteamError\020\207V\022\023\n\016SteamDataError\020\210"
      "V\022\023\n\016SteamAuthError\020\211V\022\034\n\027VersionNotComp"
      "atibility\020\341]\022\021\n\014LoginIsClose\020\342]\022\027\n\022Login"
      "NoLoginServer\020\343]\022\024\n\017LoginSystemBusy\020\344]\022\031"
      "\n\024LoginWorldSystemBusy\020\345]\022\026\n\021LoginNoGame"
      "Server\020\346]\022\030\n\023LoginGameServerBusy\020\347]\022\031\n\024L"
      "oginBindPlayerError\020\350]\022\030\n\023LoginLoadDataF"
      "ailed\020\351]\022\026\n\021QueryPlayerFailed\020\305^\022\025\n\020Name"
      "AlreadyExist\020\306^\022\016\n\tNameSetOk\020\307^\022\024\n\017NameL"
      "engthError\020\310^\022\024\n\017NameFilterError\020\311^\022\016\n\tN"
      "ameEmpty\020\312^\022\023\n\016NameAlreadySet\020\313^\022\r\n\010SexS"
      "etOK\020\314^\022\026\n\021AchieveCanNotFind\020\316^\022\032\n\025Achie"
      "veCanNotFindData\020\317^\022\023\n\016AchieveNotDone\020\320^"
      "\022\033\n\026AchieveAlreadyReceived\020\321^\022\025\n\020Achieve"
      "ReceiveOk\020\322^\022\023\n\016TaskCanNotFind\020\330^\022\027\n\022Tas"
      "kCanNotFindData\020\331^\022\020\n\013TaskNotDone\020\332^\022\030\n\023"
      "TaskAlreadyReceived\020\333^\022\021\n\014TaskRewardOk\020\334"
      "^\022\027\n\022ActivityCanNotFind\020\342^\022\033\n\026ActivityCa"
      "nNotFindData\020\343^\022\034\n\027ActivityAlreadyReceiv"
      "ed\020\344^\022\024\n\017ActivityNotDone\020\345^\022\025\n\020ActivityR"
      "ewardOk\020\346^\022\025\n\020CompoundNotExist\020\354^\022\032\n\025Com"
      "poundNotEnoughData\020\355^\022\017\n\nCompoundOk\020\356^\022\023"
      "\n\016ItemCanNotFind\020\366^\022\027\n\022ItemCanNotFindDat"
      "a\020\367^\022\022\n\rItemCanNotUse\020\370^\022\021\n\014SignInNotDay"
      "\020\212_\022\025\n\020SignInCanNotFind\020\213_\022\030\n\023SignInRewa"
      "rdAlready\020\214_\022\023\n\016SignInRewardOk\020\215_\022\021\n\014Mai"
      "lNotExist\020\250_\022\020\n\013MailTimeOut\020\251_\022\025\n\020MailDe"
      "leteFailed\020\252_\022\030\n\023MailAlreadyReceived\020\253_\022"
      "\026\n\021MailNotHaveReward\020\254_\022\021\n\014StoreNotFind\020"
      "\214`\022\027\n\022StoreBuyCountError\020\215`\022\027\n\022StoreOutO"
      "fLimitOwm\020\216`\022\025\n\020StoreOutOfLimits\020\217`\022\022\n\rS"
      "toreLackCost\020\220`\022\026\n\021StoreBuyTypeError\020\221`\022"
      "\017\n\nStoreBuyOK\020\222`b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1864);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KFMidwareCodeMessage.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_KFMidwareCodeMessage_2eproto
namespace KFMsg {
const ::google::protobuf::EnumDescriptor* MidwareCodeEnum_descriptor() {
  protobuf_KFMidwareCodeMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_KFMidwareCodeMessage_2eproto::file_level_enum_descriptors[0];
}
bool MidwareCodeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 10000:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10005:
    case 10006:
    case 10007:
    case 11001:
    case 11002:
    case 11003:
    case 11004:
    case 11005:
    case 11006:
    case 11007:
    case 11008:
    case 11009:
    case 11010:
    case 11011:
    case 11012:
    case 11013:
    case 11014:
    case 11015:
    case 11016:
    case 11017:
    case 12001:
    case 12002:
    case 12003:
    case 12004:
    case 12005:
    case 12006:
    case 12007:
    case 12008:
    case 12009:
    case 12101:
    case 12102:
    case 12103:
    case 12104:
    case 12105:
    case 12106:
    case 12107:
    case 12108:
    case 12110:
    case 12111:
    case 12112:
    case 12113:
    case 12114:
    case 12120:
    case 12121:
    case 12122:
    case 12123:
    case 12124:
    case 12130:
    case 12131:
    case 12132:
    case 12133:
    case 12134:
    case 12140:
    case 12141:
    case 12142:
    case 12150:
    case 12151:
    case 12152:
    case 12170:
    case 12171:
    case 12172:
    case 12173:
    case 12200:
    case 12201:
    case 12202:
    case 12203:
    case 12204:
    case 12300:
    case 12301:
    case 12302:
    case 12303:
    case 12304:
    case 12305:
    case 12306:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace KFMsg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
